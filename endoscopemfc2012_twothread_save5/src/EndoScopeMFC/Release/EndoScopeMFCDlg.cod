; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

	TITLE	E:\work_wm\HXIJY_code\endoscopemfc2012_menu_changepara_youhua_savepic_USB_1114_twothread_svepic_save5\src\EndoScopeMFC\EndoScopeMFCDlg.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0IH@JPKEFHEF@E?3?2work_wm?2HXIJY_code?2endoscopem@ ; `string'
PUBLIC	??_C@_0N@DDCCIDDE@cv?3?3Mat?3?3Mat?$AA@		; `string'
PUBLIC	??_C@_0BN@EEFOKAEN@total?$CI?$CJ?5?$DN?$DN?50?5?$HM?$HM?5data?5?$CB?$DN?5NULL?$AA@ ; `string'
PUBLIC	??_C@_0CA@LBFJDOIG@Step?5must?5be?5a?5multiple?5of?5esz1?$AA@ ; `string'
PUBLIC	??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R2CEndoScopeMFCDlg@@8			; CEndoScopeMFCDlg::`RTTI Base Class Array'
PUBLIC	??_R2CAboutDlg@@8				; CAboutDlg::`RTTI Base Class Array'
PUBLIC	??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CEndoScopeMFCDlg@@8		; CEndoScopeMFCDlg::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CAboutDlg@@8			; CAboutDlg::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17A@3EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
PUBLIC	??_R1A@A@3EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
PUBLIC	??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVios_base@std@@@8			; std::ios_base `RTTI Type Descriptor'
PUBLIC	??_R0?AV?$_Iosb@H@std@@@8			; std::_Iosb<int> `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R2?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Base Class Array'
PUBLIC	??_R3?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R17?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R2ios_base@std@@8				; std::ios_base::`RTTI Base Class Array'
PUBLIC	??_R3ios_base@std@@8				; std::ios_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@?0A@EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3CEndoScopeMFCDlg@@8			; CEndoScopeMFCDlg::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVCEndoScopeMFCDlg@@@8			; CEndoScopeMFCDlg `RTTI Type Descriptor'
PUBLIC	??_R3CAboutDlg@@8				; CAboutDlg::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVCAboutDlg@@@8				; CAboutDlg `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ofstream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ifstream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_filebuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R4CEndoScopeMFCDlg@@6B@			; CEndoScopeMFCDlg::`RTTI Complete Object Locator'
PUBLIC	??_R4CAboutDlg@@6B@				; CAboutDlg::`RTTI Complete Object Locator'
PUBLIC	??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::codecvt<char,char,int> >::_Psave
PUBLIC	??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ifstream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ifstream<char,std::char_traits<char> >::`vbtable'
PUBLIC	?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
PUBLIC	??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`vftable'
PUBLIC	??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ofstream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_C@_08EPJLHIJG@bad?5cast?$AA@			; `string'
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ofstream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVCRgn@@@8				; CRgn `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@CRgn@@8				; CRgn::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R2CRgn@@8					; CRgn::`RTTI Base Class Array'
PUBLIC	??_R3CRgn@@8					; CRgn::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R4CRgn@@6B@					; CRgn::`RTTI Complete Object Locator'
PUBLIC	??_7CRgn@@6B@					; CRgn::`vftable'
PUBLIC	??_R0?AVCFont@@@8				; CFont `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@CFont@@8				; CFont::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R2CFont@@8					; CFont::`RTTI Base Class Array'
PUBLIC	??_R3CFont@@8					; CFont::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R4CFont@@6B@					; CFont::`RTTI Complete Object Locator'
PUBLIC	??_7CFont@@6B@					; CFont::`vftable'
PUBLIC	?szInvalidDateTime@ATL@@3QBDB			; ATL::szInvalidDateTime
PUBLIC	??_R0?AVCStatic@@@8				; CStatic `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@CStatic@@8			; CStatic::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R2CStatic@@8					; CStatic::`RTTI Base Class Array'
PUBLIC	??_R3CStatic@@8					; CStatic::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R4CStatic@@6B@				; CStatic::`RTTI Complete Object Locator'
PUBLIC	??_7CStatic@@6B@				; CStatic::`vftable'
PUBLIC	??_7CEndoScopeMFCDlg@@6B@			; CEndoScopeMFCDlg::`vftable'
PUBLIC	??_7CAboutDlg@@6B@				; CAboutDlg::`vftable'
PUBLIC	?g_bprocthread@@3_NA				; g_bprocthread
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
EXTRN	?GetRuntimeClass@CFont@@UBEPAUCRuntimeClass@@XZ:PROC ; CFont::GetRuntimeClass
EXTRN	?GetRuntimeClass@CStatic@@UBEPAUCRuntimeClass@@XZ:PROC ; CStatic::GetRuntimeClass
EXTRN	?GetMessageMap@CWnd@@MBEPBUAFX_MSGMAP@@XZ:PROC	; CWnd::GetMessageMap
EXTRN	?OnChildNotify@CStatic@@MAEHIIJPAJ@Z:PROC	; CStatic::OnChildNotify
EXTRN	?Create@CStatic@@UAEHPBDKABUtagRECT@@PAVCWnd@@I@Z:PROC ; CStatic::Create
EXTRN	?DrawItem@CStatic@@UAEXPAUtagDRAWITEMSTRUCT@@@Z:PROC ; CStatic::DrawItem
EXTRN	?GetRuntimeClass@CDialogEx@@UBEPAUCRuntimeClass@@XZ:PROC ; CDialogEx::GetRuntimeClass
EXTRN	?GetRuntimeClass@CRgn@@UBEPAUCRuntimeClass@@XZ:PROC ; CRgn::GetRuntimeClass
EXTRN	__imp_?GetAt@?$CSimpleStringT@D$00@ATL@@QBEDH@Z:PROC
EXTRN	__imp_?SetAt@?$CSimpleStringT@D$00@ATL@@QAEXHD@Z:PROC
EXTRN	__imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@D@Z:PROC
EXTRN	__imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHDH@Z:PROC
EXTRN	__imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@PBD@Z:PROC
EXTRN	__imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@PBD@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_?in@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z:PROC
EXTRN	__imp_?out@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z:PROC
EXTRN	__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:PROC
EXTRN	__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:PROC
EXTRN	__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:PROC
EXTRN	__imp_?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:PROC
EXTRN	__imp_?unshift@?$codecvt@DDH@std@@QBEHAAHPAD1AAPAD@Z:PROC
EXTRN	__imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ:PROC
EXTRN	__imp_?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ:PROC
EXTRN	__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z:PROC
EXTRN	__imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ:PROC
EXTRN	__imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAPAD0PAH001@Z:PROC
EXTRN	__imp_?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?_Add_vtordisp1@?$basic_istream@DU?$char_traits@D@std@@@std@@UAEXXZ:PROC
EXTRN	__imp_?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEXXZ:PROC
EXTRN	__imp_?GetRuntimeClass@CDialogEx@@UBEPAUCRuntimeClass@@XZ:PROC
EXTRN	?_Add_vtordisp1@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ:PROC ; std::basic_ios<char,std::char_traits<char> >::_Add_vtordisp1
EXTRN	__imp_?_Add_vtordisp1@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ:PROC
EXTRN	?_Add_vtordisp2@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ:PROC ; std::basic_ios<char,std::char_traits<char> >::_Add_vtordisp2
EXTRN	__imp_?_Add_vtordisp2@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ:PROC
EXTRN	?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
EXTRN	__imp_?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z:PROC
EXTRN	?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
EXTRN	__imp_?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ:PROC
EXTRN	__imp_?reshape@Mat@cv@@QBE?AV12@HHPBH@Z:PROC
EXTRN	__imp_?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ:PROC
EXTRN	__imp_?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ:PROC
EXTRN	__imp_?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ:PROC
EXTRN	__imp_?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z:PROC
EXTRN	?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
EXTRN	__imp_?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z:PROC
EXTRN	__imp_?id@?$codecvt@DDH@std@@2V0locale@2@A:DWORD
EXTRN	__imp__strcpy_s:PROC
EXTRN	__imp_?always_noconv@codecvt_base@std@@QBE_NXZ:PROC
EXTRN	__imp__fclose:PROC
EXTRN	__imp_?_Fiopen@std@@YAPAU_iobuf@@PBDHH@Z:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ:PROC
EXTRN	__imp__fflush:PROC
EXTRN	__imp__setvbuf:PROC
EXTRN	__imp__fsetpos:PROC
EXTRN	__imp_?_BADOFF@std@@3_JB:QWORD
EXTRN	__imp__fgetpos:PROC
EXTRN	__imp___fseeki64:PROC
EXTRN	__imp__fgetc:PROC
EXTRN	__imp_?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ:PROC
EXTRN	__imp__ungetc:PROC
EXTRN	__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:PROC
EXTRN	__imp__fwrite:PROC
EXTRN	__imp__fputc:PROC
EXTRN	__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:PROC
EXTRN	__imp___unlock_file:PROC
EXTRN	__imp___lock_file:PROC
EXTRN	__imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ:PROC
EXTRN	__imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ:PROC
EXTRN	__imp_??Bid@locale@std@@QAEIXZ:PROC
EXTRN	__imp_?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:PROC
EXTRN	__imp_??0bad_cast@std@@QAE@PBD@Z:PROC
EXTRN	??1bad_cast@std@@UAE@XZ:PROC			; std::bad_cast::~bad_cast
EXTRN	__imp_??1bad_cast@std@@UAE@XZ:PROC
EXTRN	??0bad_cast@std@@QAE@ABV01@@Z:PROC		; std::bad_cast::bad_cast
EXTRN	__imp_??0bad_cast@std@@QAE@ABV01@@Z:PROC
EXTRN	?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z:PROC ; std::_Facet_Register
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:PROC
EXTRN	__imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ:PROC
EXTRN	__imp__atof:PROC
EXTRN	__imp_?eof@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ:PROC
EXTRN	__imp_?blur@cv@@YAXABV_InputArray@1@ABV_OutputArray@1@V?$Size_@H@1@V?$Point_@H@1@H@Z:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp_?fail@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z:PROC
EXTRN	__imp__SHFileOperationA@4:PROC
EXTRN	__imp_?fourcc@VideoWriter@cv@@SAHDDDD@Z:PROC
EXTRN	__imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?uncaught_exception@std@@YA_NXZ:PROC
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
EXTRN	__imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	__imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z:PROC
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp__GetBitmapBits@12:PROC
EXTRN	__imp__BitBlt@36:PROC
EXTRN	__imp_?waitKey@cv@@YAHH@Z:PROC
EXTRN	__imp_?resize@cv@@YAXABV_InputArray@1@ABV_OutputArray@1@V?$Size_@H@1@NNH@Z:PROC
EXTRN	__imp_?flip@cv@@YAXABV_InputArray@1@ABV_OutputArray@1@H@Z:PROC
EXTRN	__imp__KillTimer@8:PROC
EXTRN	__imp_?ShowWindow@CWnd@@QAEHH@Z:PROC
EXTRN	__imp__CreatePolygonRgn@12:PROC
EXTRN	__imp__SetWindowRgn@12:PROC
EXTRN	__imp__CreateRoundRectRgn@24:PROC
EXTRN	__imp_?GetRuntimeClass@CRgn@@UBEPAUCRuntimeClass@@XZ:PROC
EXTRN	__imp_?OnCtlColor@CDialogEx@@IAEPAUHBRUSH__@@PAVCDC@@PAVCWnd@@I@Z:PROC
EXTRN	__imp__CreateSolidBrush@4:PROC
EXTRN	__imp_?Attach@CGdiObject@@QAEHPAX@Z:PROC
EXTRN	__imp__CreateFontA@56:PROC
EXTRN	__imp__SetClassLongA@12:PROC
EXTRN	__imp__GetClassLongA@8:PROC
EXTRN	__imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z:PROC
EXTRN	__imp_?GetRuntimeClass@CFont@@UBEPAUCRuntimeClass@@XZ:PROC
EXTRN	__imp__VarUdateFromDate@16:PROC
EXTRN	__imp__strftime:PROC
EXTRN	__imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PB_W@Z:PROC
EXTRN	__imp___localtime64_s:PROC
EXTRN	__imp__SystemTimeToVariantTime@8:PROC
EXTRN	__imp__VariantTimeToSystemTime@12:PROC
EXTRN	__imp___time64:PROC
EXTRN	__imp_?Append@?$CSimpleStringT@D$00@ATL@@QAEXABV12@@Z:PROC
EXTRN	__imp_?GetWindowTextA@CWnd@@QBEXAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z:PROC
EXTRN	__imp_?EnableWindow@CWnd@@QAEHH@Z:PROC
EXTRN	__imp_?SetFocus@CWnd@@QAEPAV1@XZ:PROC
EXTRN	__imp_?AfxBeginThread@@YGPAVCWinThread@@P6AIPAX@Z0HIKPAU_SECURITY_ATTRIBUTES@@@Z:PROC
EXTRN	__imp_?imshow@cv@@YAXABVString@1@ABV_InputArray@1@@Z:PROC
EXTRN	__imp_?imwrite@cv@@YA_NABVString@1@ABV_InputArray@1@ABV?$vector@HV?$allocator@H@std@@@std@@@Z:PROC
EXTRN	__imp_?meanStdDev@cv@@YAXABV_InputArray@1@ABV_OutputArray@1@10@Z:PROC
EXTRN	__imp_??Hcv@@YA?AVMatExpr@0@ABVMat@0@0@Z:PROC
EXTRN	__imp_?filter2D@cv@@YAXABV_InputArray@1@ABV_OutputArray@1@H0V?$Point_@H@1@NH@Z:PROC
EXTRN	__imp_?cvtColor@cv@@YAXABV_InputArray@1@ABV_OutputArray@1@HH@Z:PROC
EXTRN	__imp__SelectObject@8:PROC
EXTRN	__imp__CreateCompatibleBitmap@12:PROC
EXTRN	__imp__CreateCompatibleDC@4:PROC
EXTRN	__imp__GetDC@4:PROC
EXTRN	__imp_?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z:PROC
EXTRN	__imp__GetDesktopWindow@0:PROC
EXTRN	__imp__CopyRect@8:PROC
EXTRN	__imp_?SetWindowTextA@CWnd@@QAEXPBD@Z:PROC
EXTRN	__imp__ShowWindow@8:PROC
EXTRN	__imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z:PROC
EXTRN	__imp__SetParent@8:PROC
EXTRN	__imp__cvGetWindowHandle:PROC
EXTRN	__imp_?resizeWindow@cv@@YAXABVString@1@HH@Z:PROC
EXTRN	__imp_?namedWindow@cv@@YAXABVString@1@H@Z:PROC
EXTRN	__imp_?OnPaint@CDialog@@IAEXXZ:PROC
EXTRN	__imp__DrawIcon@16:PROC
EXTRN	__imp__GetSystemMetrics@4:PROC
EXTRN	__imp_??1CPaintDC@@UAE@XZ:PROC
EXTRN	__imp_??0CPaintDC@@QAE@PAVCWnd@@@Z:PROC
EXTRN	__imp__IsIconic@4:PROC
EXTRN	__imp__SetTimer@16:PROC
EXTRN	__imp__CreateDirectoryA@8:PROC
EXTRN	__imp__PathIsDirectoryA@4:PROC
EXTRN	__imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z:PROC
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	__imp__AppendMenuA@16:PROC
EXTRN	__imp_?IsEmpty@?$CSimpleStringT@D$00@ATL@@QBE_NXZ:PROC
EXTRN	__imp_?LoadStringA@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEHI@Z:PROC
EXTRN	__imp_?FromHandle@CMenu@@SGPAV1@PAUHMENU__@@@Z:PROC
EXTRN	__imp__GetSystemMenu@8:PROC
EXTRN	__imp_?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ:PROC
EXTRN	__imp__LoadIconW@8:PROC
EXTRN	__imp_?AfxFindResourceHandle@@YGPAUHINSTANCE__@@PBD0@Z:PROC
EXTRN	__imp_??1VideoWriter@cv@@UAE@XZ:PROC
EXTRN	__imp_??0VideoWriter@cv@@QAE@XZ:PROC
EXTRN	__imp_??1CStatic@@UAE@XZ:PROC
EXTRN	__imp_?GetRuntimeClass@CStatic@@UBEPAUCRuntimeClass@@XZ:PROC
EXTRN	__imp_?GetMessageMap@CWnd@@MBEPBUAFX_MSGMAP@@XZ:PROC
EXTRN	__imp_?OnChildNotify@CStatic@@MAEHIIJPAJ@Z:PROC
EXTRN	__imp_?Create@CStatic@@UAEHPBDKABUtagRECT@@PAVCWnd@@I@Z:PROC
EXTRN	__imp_?DrawItem@CStatic@@UAEXPAUtagDRAWITEMSTRUCT@@@Z:PROC
EXTRN	__imp_?SetDlgItemTextA@CWnd@@QAEXHPBD@Z:PROC
EXTRN	__imp_?Default@CWnd@@IAEJXZ:PROC
EXTRN	__imp_??1CEvent@@UAE@XZ:PROC
EXTRN	__imp_??0CEvent@@QAE@HHPBDPAU_SECURITY_ATTRIBUTES@@@Z:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp_?noArray@cv@@YAABV_InputOutputArray@1@XZ:PROC
EXTRN	__imp_?seek@MatConstIterator@cv@@QAEXH_N@Z:PROC
EXTRN	__imp_?seek@MatConstIterator@cv@@QAEXPBH_N@Z:PROC
EXTRN	__imp_??0Mat@cv@@QAE@ABV01@ABV?$Rect_@H@1@@Z:PROC
EXTRN	__imp_?deallocate@Mat@cv@@QAEXXZ:PROC
EXTRN	__imp_?convertTo@Mat@cv@@QBEXABV_OutputArray@2@HNN@Z:PROC
EXTRN	__imp_?copyTo@Mat@cv@@QBEXABV_OutputArray@2@@Z:PROC
EXTRN	__imp_?fastFree@cv@@YAXPAX@Z:PROC
EXTRN	__imp_?copySize@Mat@cv@@QAEXABV12@@Z:PROC
EXTRN	__imp_?create@Mat@cv@@QAEXHPBHH@Z:PROC
EXTRN	__imp_?error@cv@@YAXHABVString@1@PBD1H@Z:PROC
EXTRN	__imp_?deallocate@String@cv@@AAEXXZ:PROC
EXTRN	__imp_?allocate@String@cv@@AAEPADI@Z:PROC
EXTRN	__imp__WaitForSingleObject@8:PROC
EXTRN	__imp__SetEvent@4:PROC
;	COMDAT ?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::codecvt<char,char,int> >::_Psave
_picBuf	DB	01a5e000H DUP (?)
_bshot	DB	01H DUP (?)
	ALIGN	4

_bSaveVideoStart DD 01H DUP (?)
?g_bprocthread@@3_NA DB 01H DUP (?)			; g_bprocthread
_BSS	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_7CAboutDlg@@6B@
CONST	SEGMENT
??_7CAboutDlg@@6B@ DD FLAT:??_R4CAboutDlg@@6B@		; CAboutDlg::`vftable'
	DD	FLAT:?GetRuntimeClass@CDialogEx@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECAboutDlg@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?OnCmdMsg@CDialog@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CWnd@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CAboutDlg@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CWnd@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?PreSubclassWindow@CWnd@@UAEXXZ
	DD	FLAT:?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KABUtagRECT@@PAV1@IPAX@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KHHHHPAUHWND__@@PAUHMENU__@@PAX@Z
	DD	FLAT:?DestroyWindow@CWnd@@UAEHXZ
	DD	FLAT:?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z
	DD	FLAT:?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z
	DD	FLAT:?GetMenu@CWnd@@UBEPAVCMenu@@XZ
	DD	FLAT:?SetMenu@CWnd@@UAEHPAVCMenu@@@Z
	DD	FLAT:?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z
	DD	FLAT:?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z
	DD	FLAT:?WinHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?HtmlHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?WinHelpInternal@CWnd@@UAEXKI@Z
	DD	FLAT:?ContinueModal@CWnd@@UAEHXZ
	DD	FLAT:?EndModalLoop@CWnd@@UAEXH@Z
	DD	FLAT:?OnDrawIconicThumbnailOrLivePreview@CWnd@@UAEXAAVCDC@@VCRect@@VCSize@@HAAH@Z
	DD	FLAT:?EnsureStdObj@CWnd@@UAEJXZ
	DD	FLAT:?get_accParent@CWnd@@UAEJPAPAUIDispatch@@@Z
	DD	FLAT:?get_accChildCount@CWnd@@UAEJPAJ@Z
	DD	FLAT:?get_accChild@CWnd@@UAEJUtagVARIANT@@PAPAUIDispatch@@@Z
	DD	FLAT:?get_accName@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accValue@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accDescription@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accRole@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accState@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accHelp@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accHelpTopic@CWnd@@UAEJPAPA_WUtagVARIANT@@PAJ@Z
	DD	FLAT:?get_accKeyboardShortcut@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accFocus@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accSelection@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accDefaultAction@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?accSelect@CWnd@@UAEJJUtagVARIANT@@@Z
	DD	FLAT:?accLocation@CWnd@@UAEJPAJ000UtagVARIANT@@@Z
	DD	FLAT:?accNavigate@CWnd@@UAEJJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?accHitTest@CWnd@@UAEJJJPAUtagVARIANT@@@Z
	DD	FLAT:?accDoDefaultAction@CWnd@@UAEJUtagVARIANT@@@Z
	DD	FLAT:?put_accName@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?put_accValue@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?SetProxy@CWnd@@UAEJPAUIAccessibleProxy@@@Z
	DD	FLAT:?CreateAccessibleProxy@CWnd@@UAEJIJPAJ@Z
	DD	FLAT:?OnCommand@CDialogEx@@MAEHIJ@Z
	DD	FLAT:?OnNotify@CWnd@@MAEHIJPAJ@Z
	DD	FLAT:?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ
	DD	FLAT:?DoDataExchange@CAboutDlg@@MAEXPAVCDataExchange@@@Z
	DD	FLAT:?BeginModalState@CWnd@@UAEXXZ
	DD	FLAT:?EndModalState@CWnd@@UAEXXZ
	DD	FLAT:?PreTranslateMessage@CDialogEx@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z
	DD	FLAT:?WindowProc@CWnd@@MAEJIIJ@Z
	DD	FLAT:?OnWndMsg@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?DefWindowProcA@CWnd@@MAEJIIJ@Z
	DD	FLAT:?PostNcDestroy@CWnd@@MAEXXZ
	DD	FLAT:?OnChildNotify@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?OnTouchInputs@CWnd@@MAEHIPAUtagTOUCHINPUT@@@Z
	DD	FLAT:?OnTouchInput@CWnd@@MAEHVCPoint@@HHPAUtagTOUCHINPUT@@@Z
	DD	FLAT:?GetGestureStatus@CWnd@@MAEKVCPoint@@@Z
	DD	FLAT:?OnGestureZoom@CWnd@@MAEHVCPoint@@J@Z
	DD	FLAT:?OnGesturePan@CWnd@@MAEHVCPoint@@0@Z
	DD	FLAT:?OnGestureRotate@CWnd@@MAEHVCPoint@@N@Z
	DD	FLAT:?OnGestureTwoFingerTap@CWnd@@MAEHVCPoint@@@Z
	DD	FLAT:?OnGesturePressAndTap@CWnd@@MAEHVCPoint@@J@Z
	DD	FLAT:?CheckAutoCenter@CDialog@@UAEHXZ
	DD	FLAT:?IsFrameWnd@CWnd@@UBEHXZ
	DD	FLAT:?CreateControlContainer@CWnd@@MAEHPAPAVCOleControlContainer@@@Z
	DD	FLAT:?CreateControlSite@CWnd@@MAEHPAVCOleControlContainer@@PAPAVCOleControlSite@@IABU_GUID@@@Z
	DD	FLAT:?SetOccDialogInfo@CDialog@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z
	DD	FLAT:?GetOccDialogInfo@CDialog@@MAEPAU_AFX_OCC_DIALOG_INFO@@XZ
	DD	FLAT:?Create@CDialog@@UAEHIPAVCWnd@@@Z
	DD	FLAT:?Create@CDialog@@UAEHPBDPAVCWnd@@@Z
	DD	FLAT:?CreateIndirect@CDialog@@UAEHPAXPAVCWnd@@@Z
	DD	FLAT:?CreateIndirect@CDialog@@UAEHPBUDLGTEMPLATE@@PAVCWnd@@PAX@Z
	DD	FLAT:?DoModal@CDialog@@UAEHXZ
	DD	FLAT:?OnInitDialog@CAboutDlg@@UAEHXZ
	DD	FLAT:?OnSetFont@CDialog@@UAEXPAVCFont@@@Z
	DD	FLAT:?OnOK@CDialog@@MAEXXZ
	DD	FLAT:?OnCancel@CDialog@@MAEXXZ
	DD	FLAT:?PreInitDialog@CDialog@@MAEXXZ
CONST	ENDS
;	COMDAT ?_messageEntries@?1??GetThisMessageMap@CAboutDlg@@KGPBUAFX_MSGMAP@@XZ@4QBUAFX_MSGMAP_ENTRY@@B
CONST	SEGMENT
?_messageEntries@?1??GetThisMessageMap@CAboutDlg@@KGPBUAFX_MSGMAP@@XZ@4QBUAFX_MSGMAP_ENTRY@@B DD 0111H ; `CAboutDlg::GetThisMessageMap'::`2'::_messageEntries
	DD	00H
	DD	01H
	DD	01H
	DD	03aH
	DD	FLAT:?OnBnClickedOk@CAboutDlg@@QAEXXZ
	DD	010H
	DD	00H
	DD	00H
	DD	00H
	DD	013H
	DD	FLAT:?OnClose@CAboutDlg@@QAEXXZ
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?messageMap@?1??GetThisMessageMap@CAboutDlg@@KGPBUAFX_MSGMAP@@XZ@4U3@B
CONST	SEGMENT
?messageMap@?1??GetThisMessageMap@CAboutDlg@@KGPBUAFX_MSGMAP@@XZ@4U3@B DD FLAT:?GetThisMessageMap@CDialogEx@@KGPBUAFX_MSGMAP@@XZ ; `CAboutDlg::GetThisMessageMap'::`2'::messageMap
	DD	FLAT:?_messageEntries@?1??GetThisMessageMap@CAboutDlg@@KGPBUAFX_MSGMAP@@XZ@4QBUAFX_MSGMAP_ENTRY@@B
CONST	ENDS
;	COMDAT ??_7CEndoScopeMFCDlg@@6B@
CONST	SEGMENT
??_7CEndoScopeMFCDlg@@6B@ DD FLAT:??_R4CEndoScopeMFCDlg@@6B@ ; CEndoScopeMFCDlg::`vftable'
	DD	FLAT:?GetRuntimeClass@CDialogEx@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECEndoScopeMFCDlg@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?OnCmdMsg@CDialog@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CWnd@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CEndoScopeMFCDlg@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CWnd@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?PreSubclassWindow@CWnd@@UAEXXZ
	DD	FLAT:?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KABUtagRECT@@PAV1@IPAX@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KHHHHPAUHWND__@@PAUHMENU__@@PAX@Z
	DD	FLAT:?DestroyWindow@CWnd@@UAEHXZ
	DD	FLAT:?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z
	DD	FLAT:?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z
	DD	FLAT:?GetMenu@CWnd@@UBEPAVCMenu@@XZ
	DD	FLAT:?SetMenu@CWnd@@UAEHPAVCMenu@@@Z
	DD	FLAT:?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z
	DD	FLAT:?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z
	DD	FLAT:?WinHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?HtmlHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?WinHelpInternal@CWnd@@UAEXKI@Z
	DD	FLAT:?ContinueModal@CWnd@@UAEHXZ
	DD	FLAT:?EndModalLoop@CWnd@@UAEXH@Z
	DD	FLAT:?OnDrawIconicThumbnailOrLivePreview@CWnd@@UAEXAAVCDC@@VCRect@@VCSize@@HAAH@Z
	DD	FLAT:?EnsureStdObj@CWnd@@UAEJXZ
	DD	FLAT:?get_accParent@CWnd@@UAEJPAPAUIDispatch@@@Z
	DD	FLAT:?get_accChildCount@CWnd@@UAEJPAJ@Z
	DD	FLAT:?get_accChild@CWnd@@UAEJUtagVARIANT@@PAPAUIDispatch@@@Z
	DD	FLAT:?get_accName@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accValue@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accDescription@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accRole@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accState@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accHelp@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accHelpTopic@CWnd@@UAEJPAPA_WUtagVARIANT@@PAJ@Z
	DD	FLAT:?get_accKeyboardShortcut@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accFocus@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accSelection@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accDefaultAction@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?accSelect@CWnd@@UAEJJUtagVARIANT@@@Z
	DD	FLAT:?accLocation@CWnd@@UAEJPAJ000UtagVARIANT@@@Z
	DD	FLAT:?accNavigate@CWnd@@UAEJJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?accHitTest@CWnd@@UAEJJJPAUtagVARIANT@@@Z
	DD	FLAT:?accDoDefaultAction@CWnd@@UAEJUtagVARIANT@@@Z
	DD	FLAT:?put_accName@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?put_accValue@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?SetProxy@CWnd@@UAEJPAUIAccessibleProxy@@@Z
	DD	FLAT:?CreateAccessibleProxy@CWnd@@UAEJIJPAJ@Z
	DD	FLAT:?OnCommand@CDialogEx@@MAEHIJ@Z
	DD	FLAT:?OnNotify@CWnd@@MAEHIJPAJ@Z
	DD	FLAT:?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ
	DD	FLAT:?DoDataExchange@CEndoScopeMFCDlg@@MAEXPAVCDataExchange@@@Z
	DD	FLAT:?BeginModalState@CWnd@@UAEXXZ
	DD	FLAT:?EndModalState@CWnd@@UAEXXZ
	DD	FLAT:?PreTranslateMessage@CEndoScopeMFCDlg@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z
	DD	FLAT:?WindowProc@CEndoScopeMFCDlg@@MAEJIIJ@Z
	DD	FLAT:?OnWndMsg@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?DefWindowProcA@CWnd@@MAEJIIJ@Z
	DD	FLAT:?PostNcDestroy@CWnd@@MAEXXZ
	DD	FLAT:?OnChildNotify@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?OnTouchInputs@CWnd@@MAEHIPAUtagTOUCHINPUT@@@Z
	DD	FLAT:?OnTouchInput@CWnd@@MAEHVCPoint@@HHPAUtagTOUCHINPUT@@@Z
	DD	FLAT:?GetGestureStatus@CWnd@@MAEKVCPoint@@@Z
	DD	FLAT:?OnGestureZoom@CWnd@@MAEHVCPoint@@J@Z
	DD	FLAT:?OnGesturePan@CWnd@@MAEHVCPoint@@0@Z
	DD	FLAT:?OnGestureRotate@CWnd@@MAEHVCPoint@@N@Z
	DD	FLAT:?OnGestureTwoFingerTap@CWnd@@MAEHVCPoint@@@Z
	DD	FLAT:?OnGesturePressAndTap@CWnd@@MAEHVCPoint@@J@Z
	DD	FLAT:?CheckAutoCenter@CDialog@@UAEHXZ
	DD	FLAT:?IsFrameWnd@CWnd@@UBEHXZ
	DD	FLAT:?CreateControlContainer@CWnd@@MAEHPAPAVCOleControlContainer@@@Z
	DD	FLAT:?CreateControlSite@CWnd@@MAEHPAVCOleControlContainer@@PAPAVCOleControlSite@@IABU_GUID@@@Z
	DD	FLAT:?SetOccDialogInfo@CDialog@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z
	DD	FLAT:?GetOccDialogInfo@CDialog@@MAEPAU_AFX_OCC_DIALOG_INFO@@XZ
	DD	FLAT:?Create@CDialog@@UAEHIPAVCWnd@@@Z
	DD	FLAT:?Create@CDialog@@UAEHPBDPAVCWnd@@@Z
	DD	FLAT:?CreateIndirect@CDialog@@UAEHPAXPAVCWnd@@@Z
	DD	FLAT:?CreateIndirect@CDialog@@UAEHPBUDLGTEMPLATE@@PAVCWnd@@PAX@Z
	DD	FLAT:?DoModal@CDialog@@UAEHXZ
	DD	FLAT:?OnInitDialog@CEndoScopeMFCDlg@@MAEHXZ
	DD	FLAT:?OnSetFont@CDialog@@UAEXPAVCFont@@@Z
	DD	FLAT:?OnOK@CDialog@@MAEXXZ
	DD	FLAT:?OnCancel@CDialog@@MAEXXZ
	DD	FLAT:?PreInitDialog@CDialog@@MAEXXZ
CONST	ENDS
;	COMDAT ??_7CStatic@@6B@
CONST	SEGMENT
??_7CStatic@@6B@ DD FLAT:??_R4CStatic@@6B@		; CStatic::`vftable'
	DD	FLAT:?GetRuntimeClass@CStatic@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECStatic@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CWnd@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CWnd@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CWnd@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?PreSubclassWindow@CWnd@@UAEXXZ
	DD	FLAT:?Create@CWnd@@UAEHPBD0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KABUtagRECT@@PAV1@IPAX@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPBD0KHHHHPAUHWND__@@PAUHMENU__@@PAX@Z
	DD	FLAT:?DestroyWindow@CWnd@@UAEHXZ
	DD	FLAT:?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTA@@@Z
	DD	FLAT:?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z
	DD	FLAT:?GetMenu@CWnd@@UBEPAVCMenu@@XZ
	DD	FLAT:?SetMenu@CWnd@@UAEHPAVCMenu@@@Z
	DD	FLAT:?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOA@@@Z
	DD	FLAT:?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z
	DD	FLAT:?WinHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?HtmlHelpA@CWnd@@UAEXKI@Z
	DD	FLAT:?WinHelpInternal@CWnd@@UAEXKI@Z
	DD	FLAT:?ContinueModal@CWnd@@UAEHXZ
	DD	FLAT:?EndModalLoop@CWnd@@UAEXH@Z
	DD	FLAT:?OnDrawIconicThumbnailOrLivePreview@CWnd@@UAEXAAVCDC@@VCRect@@VCSize@@HAAH@Z
	DD	FLAT:?EnsureStdObj@CWnd@@UAEJXZ
	DD	FLAT:?get_accParent@CWnd@@UAEJPAPAUIDispatch@@@Z
	DD	FLAT:?get_accChildCount@CWnd@@UAEJPAJ@Z
	DD	FLAT:?get_accChild@CWnd@@UAEJUtagVARIANT@@PAPAUIDispatch@@@Z
	DD	FLAT:?get_accName@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accValue@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accDescription@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accRole@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accState@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accHelp@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accHelpTopic@CWnd@@UAEJPAPA_WUtagVARIANT@@PAJ@Z
	DD	FLAT:?get_accKeyboardShortcut@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accFocus@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accSelection@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accDefaultAction@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?accSelect@CWnd@@UAEJJUtagVARIANT@@@Z
	DD	FLAT:?accLocation@CWnd@@UAEJPAJ000UtagVARIANT@@@Z
	DD	FLAT:?accNavigate@CWnd@@UAEJJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?accHitTest@CWnd@@UAEJJJPAUtagVARIANT@@@Z
	DD	FLAT:?accDoDefaultAction@CWnd@@UAEJUtagVARIANT@@@Z
	DD	FLAT:?put_accName@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?put_accValue@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?SetProxy@CWnd@@UAEJPAUIAccessibleProxy@@@Z
	DD	FLAT:?CreateAccessibleProxy@CWnd@@UAEJIJPAJ@Z
	DD	FLAT:?OnCommand@CWnd@@MAEHIJ@Z
	DD	FLAT:?OnNotify@CWnd@@MAEHIJPAJ@Z
	DD	FLAT:?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ
	DD	FLAT:?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
	DD	FLAT:?BeginModalState@CWnd@@UAEXXZ
	DD	FLAT:?EndModalState@CWnd@@UAEXXZ
	DD	FLAT:?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z
	DD	FLAT:?WindowProc@CWnd@@MAEJIIJ@Z
	DD	FLAT:?OnWndMsg@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?DefWindowProcA@CWnd@@MAEJIIJ@Z
	DD	FLAT:?PostNcDestroy@CWnd@@MAEXXZ
	DD	FLAT:?OnChildNotify@CStatic@@MAEHIIJPAJ@Z
	DD	FLAT:?OnTouchInputs@CWnd@@MAEHIPAUtagTOUCHINPUT@@@Z
	DD	FLAT:?OnTouchInput@CWnd@@MAEHVCPoint@@HHPAUtagTOUCHINPUT@@@Z
	DD	FLAT:?GetGestureStatus@CWnd@@MAEKVCPoint@@@Z
	DD	FLAT:?OnGestureZoom@CWnd@@MAEHVCPoint@@J@Z
	DD	FLAT:?OnGesturePan@CWnd@@MAEHVCPoint@@0@Z
	DD	FLAT:?OnGestureRotate@CWnd@@MAEHVCPoint@@N@Z
	DD	FLAT:?OnGestureTwoFingerTap@CWnd@@MAEHVCPoint@@@Z
	DD	FLAT:?OnGesturePressAndTap@CWnd@@MAEHVCPoint@@J@Z
	DD	FLAT:?CheckAutoCenter@CWnd@@UAEHXZ
	DD	FLAT:?IsFrameWnd@CWnd@@UBEHXZ
	DD	FLAT:?CreateControlContainer@CWnd@@MAEHPAPAVCOleControlContainer@@@Z
	DD	FLAT:?CreateControlSite@CWnd@@MAEHPAVCOleControlContainer@@PAPAVCOleControlSite@@IABU_GUID@@@Z
	DD	FLAT:?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z
	DD	FLAT:?GetOccDialogInfo@CWnd@@MAEPAU_AFX_OCC_DIALOG_INFO@@XZ
	DD	FLAT:?Create@CStatic@@UAEHPBDKABUtagRECT@@PAVCWnd@@I@Z
	DD	FLAT:?DrawItem@CStatic@@UAEXPAUtagDRAWITEMSTRUCT@@@Z
CONST	ENDS
;	COMDAT ??_R4CStatic@@6B@
rdata$r	SEGMENT
??_R4CStatic@@6B@ DD 00H				; CStatic::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCStatic@@@8
	DD	FLAT:??_R3CStatic@@8
rdata$r	ENDS
;	COMDAT ??_R3CStatic@@8
rdata$r	SEGMENT
??_R3CStatic@@8 DD 00H					; CStatic::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CStatic@@8
rdata$r	ENDS
;	COMDAT ??_R2CStatic@@8
rdata$r	SEGMENT
??_R2CStatic@@8 DD FLAT:??_R1A@?0A@EA@CStatic@@8	; CStatic::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CWnd@@8
	DD	FLAT:??_R1A@?0A@EA@CCmdTarget@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CStatic@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CStatic@@8 DD FLAT:??_R0?AVCStatic@@@8	; CStatic::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CStatic@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCStatic@@@8
_DATA	SEGMENT
??_R0?AVCStatic@@@8 DD FLAT:??_7type_info@@6B@		; CStatic `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCStatic@@', 00H
_DATA	ENDS
;	COMDAT ?_messageEntries@?1??GetThisMessageMap@CEndoScopeMFCDlg@@KGPBUAFX_MSGMAP@@XZ@4QBUAFX_MSGMAP_ENTRY@@B
CONST	SEGMENT
?_messageEntries@?1??GetThisMessageMap@CEndoScopeMFCDlg@@KGPBUAFX_MSGMAP@@XZ@4QBUAFX_MSGMAP_ENTRY@@B DD 0112H ; `CEndoScopeMFCDlg::GetThisMessageMap'::`2'::_messageEntries
	DD	00H
	DD	00H
	DD	00H
	DD	01fH
	DD	FLAT:?OnSysCommand@CEndoScopeMFCDlg@@IAEXIJ@Z
	DD	0fH
	DD	00H
	DD	00H
	DD	00H
	DD	013H
	DD	FLAT:?OnPaint@CEndoScopeMFCDlg@@IAEXXZ
	DD	037H
	DD	00H
	DD	00H
	DD	00H
	DD	029H
	DD	FLAT:?OnQueryDragIcon@CEndoScopeMFCDlg@@IAEPAUHICON__@@XZ
	DD	0111H
	DD	00H
	DD	03e8H
	DD	03e8H
	DD	03aH
	DD	FLAT:?OnBnClickedButOk@CEndoScopeMFCDlg@@QAEXXZ
	DD	0111H
	DD	00H
	DD	03e9H
	DD	03e9H
	DD	03aH
	DD	FLAT:?OnBnClickedButRun@CEndoScopeMFCDlg@@QAEXXZ
	DD	0111H
	DD	00H
	DD	03eaH
	DD	03eaH
	DD	03aH
	DD	FLAT:?OnBnClickedButPause@CEndoScopeMFCDlg@@QAEXXZ
	DD	0111H
	DD	00H
	DD	03ebH
	DD	03ebH
	DD	03aH
	DD	FLAT:?OnBnClickedButStop@CEndoScopeMFCDlg@@QAEXXZ
	DD	019H
	DD	00H
	DD	00H
	DD	00H
	DD	08H
	DD	FLAT:?OnCtlColor@CEndoScopeMFCDlg@@QAEPAUHBRUSH__@@PAVCDC@@PAVCWnd@@I@Z
	DD	0464H
	DD	00H
	DD	00H
	DD	00H
	DD	0eH
	DD	FLAT:?OnCtlData@CEndoScopeMFCDlg@@QAEJIJ@Z
	DD	0113H
	DD	00H
	DD	00H
	DD	00H
	DD	015H
	DD	FLAT:?OnTimer@CEndoScopeMFCDlg@@QAEXI@Z
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?messageMap@?1??GetThisMessageMap@CEndoScopeMFCDlg@@KGPBUAFX_MSGMAP@@XZ@4U3@B
CONST	SEGMENT
?messageMap@?1??GetThisMessageMap@CEndoScopeMFCDlg@@KGPBUAFX_MSGMAP@@XZ@4U3@B DD FLAT:?GetThisMessageMap@CDialogEx@@KGPBUAFX_MSGMAP@@XZ ; `CEndoScopeMFCDlg::GetThisMessageMap'::`2'::messageMap
	DD	FLAT:?_messageEntries@?1??GetThisMessageMap@CEndoScopeMFCDlg@@KGPBUAFX_MSGMAP@@XZ@4QBUAFX_MSGMAP_ENTRY@@B
CONST	ENDS
;	COMDAT ?szInvalidDateTime@ATL@@3QBDB
CONST	SEGMENT
?szInvalidDateTime@ATL@@3QBDB DD FLAT:$SG4294953955	; ATL::szInvalidDateTime
CONST	ENDS
;	COMDAT ??_7CFont@@6B@
CONST	SEGMENT
??_7CFont@@6B@ DD FLAT:??_R4CFont@@6B@			; CFont::`vftable'
	DD	FLAT:?GetRuntimeClass@CFont@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECFont@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R4CFont@@6B@
rdata$r	SEGMENT
??_R4CFont@@6B@ DD 00H					; CFont::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFont@@@8
	DD	FLAT:??_R3CFont@@8
rdata$r	ENDS
;	COMDAT ??_R3CFont@@8
rdata$r	SEGMENT
??_R3CFont@@8 DD 00H					; CFont::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CFont@@8
rdata$r	ENDS
;	COMDAT ??_R2CFont@@8
rdata$r	SEGMENT
??_R2CFont@@8 DD FLAT:??_R1A@?0A@EA@CFont@@8		; CFont::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGdiObject@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CFont@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFont@@8 DD FLAT:??_R0?AVCFont@@@8	; CFont::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFont@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFont@@@8
_DATA	SEGMENT
??_R0?AVCFont@@@8 DD FLAT:??_7type_info@@6B@		; CFont `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFont@@', 00H
_DATA	ENDS
;	COMDAT ??_7CRgn@@6B@
CONST	SEGMENT
??_7CRgn@@6B@ DD FLAT:??_R4CRgn@@6B@			; CRgn::`vftable'
	DD	FLAT:?GetRuntimeClass@CRgn@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECRgn@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CObject@@UBEXXZ
	DD	FLAT:?Dump@CObject@@UBEXAAVCDumpContext@@@Z
CONST	ENDS
;	COMDAT ??_R4CRgn@@6B@
rdata$r	SEGMENT
??_R4CRgn@@6B@ DD 00H					; CRgn::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCRgn@@@8
	DD	FLAT:??_R3CRgn@@8
rdata$r	ENDS
;	COMDAT ??_R3CRgn@@8
rdata$r	SEGMENT
??_R3CRgn@@8 DD	00H					; CRgn::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CRgn@@8
rdata$r	ENDS
;	COMDAT ??_R2CRgn@@8
rdata$r	SEGMENT
??_R2CRgn@@8 DD	FLAT:??_R1A@?0A@EA@CRgn@@8		; CRgn::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGdiObject@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CRgn@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CRgn@@8 DD FLAT:??_R0?AVCRgn@@@8		; CRgn::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CRgn@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCRgn@@@8
_DATA	SEGMENT
??_R0?AVCRgn@@@8 DD FLAT:??_7type_info@@6B@		; CRgn `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCRgn@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT ??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ofstream<char,std::char_traits<char> >::`vbtable'
	DD	060H
CONST	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
_DATA	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
_DATA	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast?$AA@ DB 'bad cast', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ofstream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
	DD	FLAT:?_Add_vtordisp1@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@FI@AEXXZ
CONST	ENDS
;	COMDAT ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_filebuf<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	DD	FLAT:?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z
	DD	FLAT:?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
CONST	SEGMENT
?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB DD 0ffffffffH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
CONST	ENDS
;	COMDAT ??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ifstream<char,std::char_traits<char> >::`vbtable'
	DD	070H
CONST	ENDS
;	COMDAT ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ DD FLAT:??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ifstream<char,std::char_traits<char> >::`vftable'
	DD	FLAT:??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
	DD	FLAT:?_Add_vtordisp1@?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@FI@AEXXZ
	DD	FLAT:?_Add_vtordisp2@?$basic_ios@DU?$char_traits@D@std@@@std@@UAEXXZ
CONST	ENDS
;	COMDAT ??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	070H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@ DD 00H ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	060H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8
	DD	FLAT:??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R4CAboutDlg@@6B@
rdata$r	SEGMENT
??_R4CAboutDlg@@6B@ DD 00H				; CAboutDlg::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCAboutDlg@@@8
	DD	FLAT:??_R3CAboutDlg@@8
rdata$r	ENDS
;	COMDAT ??_R4CEndoScopeMFCDlg@@6B@
rdata$r	SEGMENT
??_R4CEndoScopeMFCDlg@@6B@ DD 00H			; CEndoScopeMFCDlg::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCEndoScopeMFCDlg@@@8
	DD	FLAT:??_R3CEndoScopeMFCDlg@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_filebuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ifstream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ios@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD 00H	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_istream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_istream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_istream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ofstream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
_DATA	SEGMENT
??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCAboutDlg@@@8
_DATA	SEGMENT
??_R0?AVCAboutDlg@@@8 DD FLAT:??_7type_info@@6B@	; CAboutDlg `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCAboutDlg@@', 00H
_DATA	ENDS
;	COMDAT ??_R3CAboutDlg@@8
rdata$r	SEGMENT
??_R3CAboutDlg@@8 DD 00H				; CAboutDlg::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	06H
	DD	FLAT:??_R2CAboutDlg@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCEndoScopeMFCDlg@@@8
_DATA	SEGMENT
??_R0?AVCEndoScopeMFCDlg@@@8 DD FLAT:??_7type_info@@6B@	; CEndoScopeMFCDlg `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCEndoScopeMFCDlg@@', 00H
_DATA	ENDS
;	COMDAT ??_R3CEndoScopeMFCDlg@@8
rdata$r	SEGMENT
??_R3CEndoScopeMFCDlg@@8 DD 00H				; CEndoScopeMFCDlg::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	06H
	DD	FLAT:??_R2CEndoScopeMFCDlg@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ios_base@std@@8
rdata$r	SEGMENT
??_R3ios_base@std@@8 DD 00H				; std::ios_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ios_base@std@@8
rdata$r	SEGMENT
??_R2ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R3?$_Iosb@H@std@@8 DD 00H				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R2?$_Iosb@H@std@@8 DD FLAT:??_R1A@?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Iosb@H@std@@@8
_DATA	SEGMENT
??_R0?AV?$_Iosb@H@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Iosb<int> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$_Iosb@H@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVios_base@std@@@8
_DATA	SEGMENT
??_R0?AVios_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ios_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVios_base@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	FLAT:??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@A@3EA@ios_base@std@@8 DD FLAT:??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
	DD	01H
	DD	00H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17A@3EA@?$_Iosb@H@std@@8 DD FLAT:??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
	DD	00H
	DD	08H
	DD	00H
	DD	04H
	DD	040H
	DD	FLAT:??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R0?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CAboutDlg@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CAboutDlg@@8 DD FLAT:??_R0?AVCAboutDlg@@@8 ; CAboutDlg::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CAboutDlg@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CEndoScopeMFCDlg@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CEndoScopeMFCDlg@@8 DD FLAT:??_R0?AVCEndoScopeMFCDlg@@@8 ; CEndoScopeMFCDlg::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CEndoScopeMFCDlg@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_filebuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_filebuf<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ios_base@std@@8
	DD	FLAT:??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8 ; std::basic_istream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ifstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ifstream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ofstream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ofstream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2CAboutDlg@@8
rdata$r	SEGMENT
??_R2CAboutDlg@@8 DD FLAT:??_R1A@?0A@EA@CAboutDlg@@8	; CAboutDlg::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CDialogEx@@8
	DD	FLAT:??_R1A@?0A@EA@CDialog@@8
	DD	FLAT:??_R1A@?0A@EA@CWnd@@8
	DD	FLAT:??_R1A@?0A@EA@CCmdTarget@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CEndoScopeMFCDlg@@8
rdata$r	SEGMENT
??_R2CEndoScopeMFCDlg@@8 DD FLAT:??_R1A@?0A@EA@CEndoScopeMFCDlg@@8 ; CEndoScopeMFCDlg::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CDialogEx@@8
	DD	FLAT:??_R1A@?0A@EA@CDialog@@8
	DD	FLAT:??_R1A@?0A@EA@CWnd@@8
	DD	FLAT:??_R1A@?0A@EA@CCmdTarget@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@ DB 'list<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LBFJDOIG@Step?5must?5be?5a?5multiple?5of?5esz1?$AA@
CONST	SEGMENT
??_C@_0CA@LBFJDOIG@Step?5must?5be?5a?5multiple?5of?5esz1?$AA@ DB 'Step mu'
	DB	'st be a multiple of esz1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EEFOKAEN@total?$CI?$CJ?5?$DN?$DN?50?5?$HM?$HM?5data?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0BN@EEFOKAEN@total?$CI?$CJ?5?$DN?$DN?50?5?$HM?$HM?5data?5?$CB?$DN?5NULL?$AA@ DB 't'
	DB	'otal() == 0 || data != NULL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DDCCIDDE@cv?3?3Mat?3?3Mat?$AA@
CONST	SEGMENT
??_C@_0N@DDCCIDDE@cv?3?3Mat?3?3Mat?$AA@ DB 'cv::Mat::Mat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0IH@JPKEFHEF@E?3?2work_wm?2HXIJY_code?2endoscopem@
CONST	SEGMENT
??_C@_0IH@JPKEFHEF@E?3?2work_wm?2HXIJY_code?2endoscopem@ DB 'E:\work_wm\H'
	DB	'XIJY_code\endoscopemfc2012_menu_changepara_youhua_savepic_USB'
	DB	'_1114_twothread_svepic_save5\include\opencv2/core/mat.inl.hpp'
	DB	00H						; `string'
$SG4294957323 DB 00H
$SG4294957245 DB 00H
$SG4294957214 DB 00H
$SG4294957171 DB 00H
	ORG $+1
$SG4294957322 DB 00H, 00H
	ORG $+2
$SG4294957301 DB 'sec', 00H
$SG4294957300 DB 0c7H, 0ebH, 0bcH, 0ecH, 0b2H, 0e9H, 0cdH, 0e2H, 0b2H, 0bfH
	DB	0b4H, 0e6H, 0b4H, 0a2H, 0c9H, 0e8H, 0b1H, 0b8H, 0caH, 0c7H, 0b7H
	DB	0f1H, 0d5H, 0fdH, 0c8H, 0b7H, 0b2H, 0e5H, 0c8H, 0ebH, 00H
	ORG $+1
$SG4294957299 DB '%s', 00H
	ORG $+1
$SG4294957298 DB 0c8H, 0f4H, 0d2H, 0d1H, 0b2H, 0e5H, 0c8H, 0ebH, 0d4H, 0f2H
	DB	0b2H, 0e5H, 0b0H, 0ceH, 0d2H, 0bbH, 0b4H, 0ceH, 00H
	ORG $+1
$SG4294957297 DB '%s', 00H
	ORG $+1
$SG4294957296 DB '%s', 00H
	ORG $+1
$SG4294957295 DB '%s', 00H
	ORG $+1
$SG4294957294 DB 'DATA\', 00H
	ORG $+2
$SG4294957293 DB 'view', 00H
	ORG $+3
$SG4294957292 DB 'view', 00H
	ORG $+3
$SG4294957291 DB 'view', 00H
	ORG $+3
$SG4294957290 DB 0d2H, 0d1H, 0b2H, 0e5H, 0c8H, 0ebH, 00H
	ORG $+1
$SG4294957289 DB 0ceH, 0b4H, 0b2H, 0e5H, 0c8H, 0ebH, 00H
	ORG $+1
$SG4294957288 DB 'BRIGHTNESS', 00H
	ORG $+1
$SG4294957287 DB 'FACTORY', 00H
$SG4294957286 DB 'CONTRAST', 00H
	ORG $+3
$SG4294957285 DB 'FACTORY', 00H
$SG4294957284 DB 'SATURATION', 00H
	ORG $+1
$SG4294957283 DB 'FACTORY', 00H
$SG4294957282 DB 'HUE_R', 00H
	ORG $+2
$SG4294957281 DB 'FACTORY', 00H
$SG4294957280 DB 'HUE_B', 00H
	ORG $+2
$SG4294957279 DB 'FACTORY', 00H
$SG4294957278 DB 'GAIN', 00H
	ORG $+3
$SG4294957277 DB 'FACTORY', 00H
$SG4294957276 DB 'EXPOSURE', 00H
	ORG $+3
$SG4294957275 DB 'FACTORY', 00H
$SG4294957274 DB 'ADJBRIGHT', 00H
	ORG $+2
$SG4294957273 DB 'FACTORY', 00H
$SG4294957272 DB 0c6H, 0bdH, 0beH, 0f9H, 0b2H, 0e2H, 0b9H, 0e2H, 00H
	ORG $+3
$SG4294957271 DB 0b7H, 0e5H, 0d6H, 0b5H, 0b2H, 0e2H, 0b9H, 0e2H, 00H
	ORG $+3
$SG4294957270 DB 'CONTUOR', 00H
$SG4294957269 DB 'FACTORY', 00H
$SG4294957268 DB '1.0', 0b1H, 0b6H, 00H
	ORG $+2
$SG4294957267 DB 'PLC', 0b3H, 0f5H, 0caH, 0bcH, 0bbH, 0afH, 0caH, 0a7H, 0b0H
	DB	0dcH, '!', 00H
	ORG $+1
$SG4294957266 DB 'COM%d', 00H
	ORG $+2
$SG4294957265 DB 0cdH, 0bcH, 0cfH, 0f1H, 0b4H, 0a6H, 0c0H, 0edH, 0b4H, 0aeH
	DB	0bfH, 0daH, 0b3H, 0f5H, 0caH, 0bcH, 0bbH, 0afH, 0caH, 0a7H, 0b0H
	DB	0dcH, 0a3H, 0a1H, 00H
	ORG $+3
$SG4294957264 DB 'COM%d', 00H
	ORG $+2
$SG4294957263 DB 'R+0:B+0', 00H
$SG4294957262 DB 'view', 00H
	ORG $+3
$SG4294957261 DB 'view', 00H
	ORG $+3
$SG4294957260 DB 'view', 00H
	ORG $+3
$SG4294957259 DB 'view', 00H
	ORG $+3
$SG4294957258 DB 'view', 00H
	ORG $+3
$SG4294957257 DB 'view', 00H
	ORG $+3
$SG4294957256 DB 'view', 00H
	ORG $+3
$SG4294957255 DB 'view', 00H
	ORG $+3
$SG4294957254 DB 'view', 00H
	ORG $+3
$SG4294957253 DB 'view', 00H
	ORG $+3
$SG4294957252 DB '%d', 00H
	ORG $+1
$SG4294957251 DB 'DATA\', 00H
	ORG $+2
$SG4294957250 DB ' ', 00H
	ORG $+2
$SG4294957249 DB ' ', 00H
	ORG $+2
$SG4294957248 DB 'temp', 00H
	ORG $+3
$SG4294957247 DB '\', 00H
	ORG $+2
$SG4294957246 DB '\', 00H
	ORG $+2
$SG4294957244 DB '.', 00H, 'm', 00H, 'p', 00H, '4', 00H, 00H, 00H
	ORG $+2
$SG4294957243 DB '%Y_%m_%d_%H_%M_%S', 00H
	ORG $+2
$SG4294957242 DB '%s%s%02d%s', 00H
	ORG $+1
$SG4294957241 DB '.', 00H, 't', 00H, 'i', 00H, 'f', 00H, 'f', 00H, 00H, 00H
$SG4294957240 DB '%Y_%m_%d_%H_%M_%S', 00H
	ORG $+2
$SG4294957239 DB '%s%s_%d%s', 00H
	ORG $+2
$SG4294957238 DB 0cbH, 0ceH, 0ccH, 0e5H, 00H
	ORG $+3
$SG4294957237 DB 0d7H, 0bcH, 0b1H, 0b8H, 0beH, 0cdH, 0d0H, 0f7H, 00H
	ORG $+3
$SG4294957236 DB 0ceH, 0b4H, 0b2H, 0e5H, 0c8H, 0ebH, 00H
	ORG $+1
$SG4294957235 DB 0d2H, 0bbH, 0b4H, 0ceH, 0d0H, 0d4H, 00H
	ORG $+1
$SG4294957234 DB '310D', 00H
	ORG $+3
$SG4294957233 DB 0cbH, 0ceH, 0ccH, 0e5H, 00H
	ORG $+3
$SG4294957232 DB 0d4H, 0b2H, 0bdH, 0c7H, 00H
	ORG $+3
$SG4294957231 DB 0b7H, 0bdH, 0bdH, 0c7H, 00H
	ORG $+3
$SG4294957230 DB '1.0', 0b1H, 0b6H, 00H
	ORG $+2
$SG4294957229 DB '1.2', 0b1H, 0b6H, 00H
	ORG $+2
$SG4294957228 DB '1.5', 0b1H, 0b6H, 00H
	ORG $+2
$SG4294957227 DB '2.0', 0b1H, 0b6H, 00H
	ORG $+2
$SG4294957226 DB 0c6H, 0bdH, 0beH, 0f9H, 0b2H, 0e2H, 0b9H, 0e2H, 00H
	ORG $+3
$SG4294957225 DB 0b7H, 0e5H, 0d6H, 0b5H, 0b2H, 0e2H, 0b9H, 0e2H, 00H
	ORG $+3
$SG4294957224 DB '%.4d', 0c4H, 0eaH, '%.2d', 0d4H, 0c2H, '%.2d', 0c8H, 0d5H
	DB	'%.2d', 0caH, 0b1H, '%.2d', 0b7H, 0d6H, 00H
	ORG $+1
$SG4294957223 DB 0b0H, 0d7H, 0c6H, 0bdH, 0baH, 0e2H, 0d2H, 0d1H, 0cdH, 0eaH
	DB	0b3H, 0c9H, 0a3H, 0a1H, 00H
	ORG $+1
$SG4294957222 DB 'view', 00H
	ORG $+3
$SG4294957221 DB 'ENDE-', 00H
	ORG $+2
$SG4294957220 DB '%s%c%c%c%c', 00H
	ORG $+1
$SG4294957219 DB '%c%c%c%c-%c%c-%c%c', 00H
	ORG $+1
$SG4294957218 DB 'ENDE-240', 00H
	ORG $+3
$SG4294957217 DB 0b7H, 0f1H, 00H
	ORG $+1
$SG4294957216 DB 0caH, 0c7H, 00H
	ORG $+1
$SG4294957215 DB 0ceH, 0b4H, 0b2H, 0e5H, 0c8H, 0ebH, 00H
	ORG $+1
$SG4294957213 DB 'SHARPNESS', 00H
	ORG $+2
$SG4294957212 DB 'SHARPNESS', 00H
	ORG $+2
$SG4294957211 DB 0d5H, 0fdH, 0d4H, 0daH, 0bdH, 0f8H, 0d0H, 0d0H, 0b0H, 0d7H
	DB	0c6H, 0bdH, 0baH, 0e2H, '...', 00H
	ORG $+2
$SG4294957210 DB 0d5H, 0fdH, 0d4H, 0daH, 0bbH, 0d6H, 0b8H, 0b4H, 0b3H, 0f6H
	DB	0b3H, 0a7H, 0c9H, 0e8H, 0d6H, 0c3H, '...', 00H
$SG4294957209 DB 'BRIGHTNESS', 00H
	ORG $+1
$SG4294957208 DB 'FACTORY', 00H
$SG4294957207 DB 'CONTRAST', 00H
	ORG $+3
$SG4294957206 DB 'FACTORY', 00H
$SG4294957205 DB 'SATURATION', 00H
	ORG $+1
$SG4294957204 DB 'FACTORY', 00H
$SG4294957203 DB 'HUE_R', 00H
	ORG $+2
$SG4294957202 DB 'FACTORY', 00H
$SG4294957201 DB 'HUE_B', 00H
	ORG $+2
$SG4294957200 DB 'FACTORY', 00H
$SG4294957199 DB 'GAIN', 00H
	ORG $+3
$SG4294957198 DB 'FACTORY', 00H
$SG4294957197 DB 'EXPOSURE', 00H
	ORG $+3
$SG4294957196 DB 'FACTORY', 00H
$SG4294957195 DB 'ADJBRIGHT', 00H
	ORG $+2
$SG4294957194 DB 'FACTORY', 00H
$SG4294957193 DB 0c6H, 0bdH, 0beH, 0f9H, 0b2H, 0e2H, 0b9H, 0e2H, 00H
	ORG $+3
$SG4294957192 DB 0b7H, 0e5H, 0d6H, 0b5H, 0b2H, 0e2H, 0b9H, 0e2H, 00H
	ORG $+3
$SG4294957191 DB 'CONTUOR', 00H
$SG4294957190 DB 'FACTORY', 00H
$SG4294957189 DB '1.0', 0b1H, 0b6H, 00H
	ORG $+2
$SG4294957188 DB 0bbH, 0d6H, 0b8H, 0b4H, 0b3H, 0f6H, 0b3H, 0a7H, 0c9H, 0e8H
	DB	0d6H, 0c3H, 0cdH, 0eaH, 0b3H, 0c9H, 00H
	ORG $+3
$SG4294957187 DB 'get signal', 00H
	ORG $+1
$SG4294957186 DB 0c6H, 0bdH, 0beH, 0f9H, 0b2H, 0e2H, 0b9H, 0e2H, 00H
	ORG $+3
$SG4294957185 DB 0b7H, 0e5H, 0d6H, 0b5H, 0b2H, 0e2H, 0b9H, 0e2H, 00H
	ORG $+3
$SG4294957184 DB 0d5H, 0fdH, 0d4H, 0daH, 0c2H, 0bcH, 0d6H, 0c6H, 00H
	ORG $+3
$SG4294957183 DB 0c2H, 0bcH, 0d6H, 0c6H, 0cdH, 0eaH, 0b3H, 0c9H, 00H
	ORG $+3
$SG4294957182 DB 'BRIGHTNESS', 00H
	ORG $+1
$SG4294957181 DB 'BRIGHTNESS', 00H
	ORG $+1
$SG4294957180 DB '\*.*', 00H
	ORG $+3
$SG4294957179 DB 0d5H, 0fdH, 0d4H, 0daH, 0bfH, 0bdH, 0b1H, 0b4H, 0ceH, 0c4H
	DB	0bcH, 0feH, ',', 0c7H, 0ebH, 0c9H, 0d4H, 0baH, 0f2H, '...', 00H
	ORG $+1
$SG4294957178 DB 0c2H, 0bcH, 0d6H, 0c6H, 0cdH, 0eaH, 0b3H, 0c9H, 00H
	ORG $+3
$SG4294957177 DB 0d5H, 0fdH, 0d4H, 0daH, 0b4H, 0e6H, 0b4H, 0a2H, 00H
	ORG $+3
$SG4294957176 DB ':\', 00H
	ORG $+1
$SG4294957175 DB 0c4H, 0daH, 0bfH, 0faH, 0beH, 0b5H, 0caH, 0fdH, 0beH, 0ddH
	DB	00H
	ORG $+1
$SG4294957174 DB '\', 00H
	ORG $+2
$SG4294957173 DB 0b4H, 0e6H, 0b4H, 0a2H, 0cdH, 0eaH, 0b3H, 0c9H, 00H
	ORG $+3
$SG4294957172 DB 'lamda.txt', 00H
	ORG $+2
$SG4294957170 DB '%4lf', 0aH, '%.4lf', 0aH, '%.4lf', 0aH, 00H
	ORG $+2
$SG4294957169 DB 'lamda.txt', 00H
	ORG $+2
$SG4294953955 DB 'Invalid DateTime', 00H
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?OnClose@CWnd@@IAEXXZ				; CWnd::OnClose
PUBLIC	??0CStatic@@QAE@XZ				; CStatic::CStatic
PUBLIC	??_GCStatic@@UAEPAXI@Z				; CStatic::`scalar deleting destructor'
PUBLIC	??0CRect@@QAE@XZ				; CRect::CRect
PUBLIC	?LoadIconA@CWinApp@@QBEPAUHICON__@@I@Z		; CWinApp::LoadIconA
PUBLIC	?AfxGetApp@@YGPAVCWinApp@@XZ			; AfxGetApp
PUBLIC	?GetSystemMenu@CWnd@@QBEPAVCMenu@@H@Z		; CWnd::GetSystemMenu
PUBLIC	?AppendMenuA@CMenu@@QAEHIIPBD@Z			; CMenu::AppendMenuA
PUBLIC	?SetIcon@CWnd@@QAEPAUHICON__@@PAU2@H@Z		; CWnd::SetIcon
PUBLIC	?SetTimer@CWnd@@QAEIIIP6GXPAUHWND__@@IIK@Z@Z	; CWnd::SetTimer
PUBLIC	?OnSysCommand@CWnd@@IAEXIJ@Z			; CWnd::OnSysCommand
PUBLIC	?IsIconic@CWnd@@QBEHXZ				; CWnd::IsIconic
PUBLIC	?SendMessageA@CWnd@@QBEJIIJ@Z			; CWnd::SendMessageA
PUBLIC	?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ		; CDC::GetSafeHdc
PUBLIC	?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z		; CWnd::GetClientRect
PUBLIC	?Width@CRect@@QBEHXZ				; CRect::Width
PUBLIC	?Height@CRect@@QBEHXZ				; CRect::Height
PUBLIC	?DrawIcon@CDC@@QAEHHHPAUHICON__@@@Z		; CDC::DrawIcon
PUBLIC	?__autoclassinit@CDC@@QAEXI@Z			; CDC::__autoclassinit
PUBLIC	??0CRect@@QAE@PBUtagRECT@@@Z			; CRect::CRect
PUBLIC	?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ		; CWnd::GetSafeHwnd
PUBLIC	?GetDesktopWindow@CWnd@@SGPAV1@XZ		; CWnd::GetDesktopWindow
PUBLIC	??BCSyncObject@@QBEPAXXZ			; CSyncObject::operator void *
PUBLIC	?GetTickCount@COleDateTime@ATL@@SG?AV12@XZ	; ATL::COleDateTime::GetTickCount
PUBLIC	??0COleDateTime@ATL@@QAE@_J@Z			; ATL::COleDateTime::COleDateTime
PUBLIC	??4COleDateTime@ATL@@QAEAAV01@AB_J@Z		; ATL::COleDateTime::operator=
PUBLIC	?ConvertSystemTimeToVariantTime@COleDateTime@ATL@@IAEHABU_SYSTEMTIME@@@Z ; ATL::COleDateTime::ConvertSystemTimeToVariantTime
PUBLIC	?AtlConvertSystemTimeToVariantTime@ATL@@YAHABU_SYSTEMTIME@@PAN@Z ; ATL::AtlConvertSystemTimeToVariantTime
PUBLIC	?GetAsSystemTime@CTime@ATL@@QBE_NAAU_SYSTEMTIME@@@Z ; ATL::CTime::GetAsSystemTime
PUBLIC	?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z	; ATL::CTime::GetLocalTm
PUBLIC	??0CTime@ATL@@QAE@_J@Z				; ATL::CTime::CTime
PUBLIC	?Format@COleDateTime@ATL@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@2@PBD@Z ; ATL::COleDateTime::Format
PUBLIC	?GetStatus@COleDateTime@ATL@@QBE?AW4DateTimeStatus@12@XZ ; ATL::COleDateTime::GetStatus
PUBLIC	??0CFont@@QAE@XZ				; CFont::CFont
PUBLIC	??_GCFont@@UAEPAXI@Z				; CFont::`scalar deleting destructor'
PUBLIC	??0CGdiObject@@QAE@XZ				; CGdiObject::CGdiObject
PUBLIC	??0CObject@@IAE@XZ				; CObject::CObject
PUBLIC	??1CFont@@UAE@XZ				; CFont::~CFont
PUBLIC	??BCRect@@QAEPAUtagRECT@@XZ			; CRect::operator tagRECT *
PUBLIC	?CreateFontA@CFont@@QAEHHHHHHEEEEEEEEPBD@Z	; CFont::CreateFontA
PUBLIC	?SetFont@CWnd@@QAEXPAVCFont@@H@Z		; CWnd::SetFont
PUBLIC	?GetSafeHandle@CGdiObject@@QBEPAXXZ		; CGdiObject::GetSafeHandle
PUBLIC	??0CRgn@@QAE@XZ					; CRgn::CRgn
PUBLIC	??_GCRgn@@UAEPAXI@Z				; CRgn::`scalar deleting destructor'
PUBLIC	??1CRgn@@UAE@XZ					; CRgn::~CRgn
PUBLIC	?CreateRoundRectRgn@CRgn@@QAEHHHHHHH@Z		; CRgn::CreateRoundRectRgn
PUBLIC	??BCRgn@@QBEPAUHRGN__@@XZ			; CRgn::operator HRGN__ *
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0CPoint@@QAE@XZ				; CPoint::CPoint
PUBLIC	?CreatePolygonRgn@CRgn@@QAEHPAUtagPOINT@@HH@Z	; CRgn::CreatePolygonRgn
PUBLIC	??0CTime@ATL@@QAE@XZ				; ATL::CTime::CTime
PUBLIC	?GetTickCount@CTime@ATL@@SG?AV12@XZ		; ATL::CTime::GetTickCount
PUBLIC	?GetMinute@CTime@ATL@@QBEHXZ			; ATL::CTime::GetMinute
PUBLIC	?GetHour@CTime@ATL@@QBEHXZ			; ATL::CTime::GetHour
PUBLIC	?GetDay@CTime@ATL@@QBEHXZ			; ATL::CTime::GetDay
PUBLIC	?GetMonth@CTime@ATL@@QBEHXZ			; ATL::CTime::GetMonth
PUBLIC	?GetYear@CTime@ATL@@QBEHXZ			; ATL::CTime::GetYear
PUBLIC	?KillTimer@CWnd@@QAEHI@Z			; CWnd::KillTimer
PUBLIC	?OnTimer@CWnd@@IAEXI@Z				; CWnd::OnTimer
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ?$_Bool_struct@V?$basic_ostream@DU?$char_traits@D@std@@@std@@@2@HXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct<std::basic_ostream<char,std::char_traits<char> > >::*
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
PUBLIC	?to_int_type@?$char_traits@D@std@@SAHABD@Z	; std::char_traits<char>::to_int_type
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
PUBLIC	?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z	; std::locale::_Getfacet
PUBLIC	?not_eof@?$char_traits@D@std@@SAHABH@Z		; std::char_traits<char>::not_eof
PUBLIC	?to_char_type@?$char_traits@D@std@@SADABH@Z	; std::char_traits<char>::to_char_type
PUBLIC	??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z		; std::_Fputc<char>
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
PUBLIC	?assign@?$char_traits@D@std@@SAPADPADID@Z	; std::char_traits<char>::assign
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z		; std::_Ungetc<char>
PUBLIC	??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z		; std::_Fgetc<char>
PUBLIC	??0?$fpos@H@std@@QAE@_J@Z			; std::fpos<int>::fpos<int>
PUBLIC	??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBEPQ?$_Bool_struct@V?$basic_istream@DU?$char_traits@D@std@@@std@@@2@HXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct<std::basic_istream<char,std::char_traits<char> > >::*
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
PUBLIC	??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_ifstream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	?_Add_vtordisp1@?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@FI@AEXXZ ; std::basic_istream<char,std::char_traits<char> >::_Add_vtordisp1
PUBLIC	?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@FI@AEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Add_vtordisp2
PUBLIC	??$construct@PAEABQAE@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAEABQAE@Z ; std::allocator<std::_List_node<unsigned char *,void *> >::construct<unsigned char *,unsigned char * const &>
PUBLIC	??$construct@PAEABQAE@?$allocator_traits@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAEPAX@std@@@1@PAPAEABQAE@Z ; std::allocator_traits<std::allocator<std::_List_node<unsigned char *,void *> > >::construct<unsigned char *,unsigned char * const &>
PUBLIC	??0?$MatConstIterator_@M@cv@@QAE@PBV?$Mat_@M@1@@Z ; cv::MatConstIterator_<float>::MatConstIterator_<float>
PUBLIC	??$?0M@_OutputArray@cv@@QAE@AAV?$Mat_@M@1@@Z	; cv::_OutputArray::_OutputArray<float>
PUBLIC	?type@?$Mat_@M@cv@@QBEHXZ			; cv::Mat_<float>::type
PUBLIC	??4?$Mat_@M@cv@@QAEAAV01@$$QAVMat@1@@Z		; cv::Mat_<float>::operator=
PUBLIC	??$construct@PAU?$_List_node@PAEPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@AAPAU21@@Z ; std::allocator<std::_List_node<unsigned char *,void *> >::construct<std::_List_node<unsigned char *,void *> *,std::_List_node<unsigned char *,void *> * &>
PUBLIC	??$destroy@PAE@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAE@Z ; std::allocator<std::_List_node<unsigned char *,void *> >::destroy<unsigned char *>
PUBLIC	??$destroy@PAU?$_List_node@PAEPAX@std@@@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@@Z ; std::allocator<std::_List_node<unsigned char *,void *> >::destroy<std::_List_node<unsigned char *,void *> *>
PUBLIC	??$construct@PAEABQAE@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAPAEABQAE@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::construct<unsigned char *,unsigned char * const &>
PUBLIC	??0?$MatConstIterator_@M@cv@@QAE@ABV01@@Z	; cv::MatConstIterator_<float>::MatConstIterator_<float>
PUBLIC	??0?$MatIterator_@M@cv@@QAE@PAV?$Mat_@M@1@@Z	; cv::MatIterator_<float>::MatIterator_<float>
PUBLIC	??4?$Mat_@M@cv@@QAEAAV01@ABVMat@1@@Z		; cv::Mat_<float>::operator=
PUBLIC	??0?$Matx@N$03$00@cv@@QAE@XZ			; cv::Matx<double,4,1>::Matx<double,4,1>
PUBLIC	??$construct@PAU?$_List_node@PAEPAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAEPAX@std@@@1@PAPAU?$_List_node@PAEPAX@1@AAPAU31@@Z ; std::allocator_traits<std::allocator<std::_List_node<unsigned char *,void *> > >::construct<std::_List_node<unsigned char *,void *> *,std::_List_node<unsigned char *,void *> * &>
PUBLIC	??$forward@AAPAU?$_List_node@PAEPAX@std@@@std@@YAAAPAU?$_List_node@PAEPAX@0@AAPAU10@@Z ; std::forward<std::_List_node<unsigned char *,void *> * &>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >
PUBLIC	??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>
PUBLIC	??$destroy@PAE@?$allocator_traits@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAEPAX@std@@@1@PAPAE@Z ; std::allocator_traits<std::allocator<std::_List_node<unsigned char *,void *> > >::destroy<unsigned char *>
PUBLIC	??$destroy@PAU?$_List_node@PAEPAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAEPAX@std@@@1@PAPAU?$_List_node@PAEPAX@1@@Z ; std::allocator_traits<std::allocator<std::_List_node<unsigned char *,void *> > >::destroy<std::_List_node<unsigned char *,void *> *>
PUBLIC	??$_Buynode@ABQAE@?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAEPAU?$_List_node@PAEPAX@1@PAU21@0ABQAE@Z ; std::_List_buy<unsigned char *,std::allocator<unsigned char *> >::_Buynode<unsigned char * const &>
PUBLIC	??$forward@ABQAE@std@@YAABQAEABQAE@Z		; std::forward<unsigned char * const &>
PUBLIC	??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$move@AAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::move<std::basic_istream<char,std::char_traits<char> > &>
PUBLIC	??$_Fill@PANH@std@@YAXPAN0ABH@Z			; std::_Fill<double *,int>
PUBLIC	??$_Unchecked@PAN@std@@YAPANPAN@Z		; std::_Unchecked<double *>
PUBLIC	??E?$MatIterator_@M@cv@@QAEAAV01@XZ		; cv::MatIterator_<float>::operator++
PUBLIC	??D?$MatIterator_@M@cv@@QBEAAMXZ		; cv::MatIterator_<float>::operator*
PUBLIC	??0?$MatIterator_@M@cv@@QAE@ABV01@@Z		; cv::MatIterator_<float>::MatIterator_<float>
PUBLIC	??0?$MatCommaInitializer_@M@cv@@QAE@PAV?$Mat_@M@1@@Z ; cv::MatCommaInitializer_<float>::MatCommaInitializer_<float>
PUBLIC	??0?$Mat_@M@cv@@QAE@ABVMat@1@@Z			; cv::Mat_<float>::Mat_<float>
PUBLIC	??0?$Vec@N$03@cv@@QAE@XZ			; cv::Vec<double,4>::Vec<double,4>
PUBLIC	?max_size@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QBEIXZ ; std::allocator<std::_List_node<unsigned char *,void *> >::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@PAEPAX@std@@@2@@Z ; std::allocator_traits<std::allocator<std::_List_node<unsigned char *,void *> > >::max_size
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::max_size
PUBLIC	?max_size@?$list@PAEV?$allocator@PAE@std@@@std@@QBEIXZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::max_size
PUBLIC	?_Incsize@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXI@Z ; std::list<unsigned char *,std::allocator<unsigned char *> >::_Incsize
PUBLIC	?__autoclassinit@?$MatConstIterator_@M@cv@@QAEXI@Z ; cv::MatConstIterator_<float>::__autoclassinit
PUBLIC	?__autoclassinit@?$MatIterator_@M@cv@@QAEXI@Z	; cv::MatIterator_<float>::__autoclassinit
PUBLIC	??0?$MatCommaInitializer_@M@cv@@QAE@ABV01@@Z	; cv::MatCommaInitializer_<float>::MatCommaInitializer_<float>
PUBLIC	?__autoclassinit@?$MatCommaInitializer_@M@cv@@QAEXI@Z ; cv::MatCommaInitializer_<float>::__autoclassinit
PUBLIC	??$_Allocate@U?$_List_node@PAEPAX@std@@@std@@YAPAU?$_List_node@PAEPAX@0@IPAU10@@Z ; std::_Allocate<std::_List_node<unsigned char *,void *> >
PUBLIC	??$construct@PAU?$_List_node@PAEPAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::construct<std::_List_node<unsigned char *,void *> *,std::_List_node<unsigned char *,void *> * &>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >
PUBLIC	??$destroy@PAE@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAPAE@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::destroy<unsigned char *>
PUBLIC	??$addressof@PAE@std@@YAPAPAEAAPAE@Z		; std::addressof<unsigned char *>
PUBLIC	??$destroy@PAU?$_List_node@PAEPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::destroy<std::_List_node<unsigned char *,void *> *>
PUBLIC	??$addressof@PAU?$_List_node@PAEPAX@std@@@std@@YAPAPAU?$_List_node@PAEPAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<unsigned char *,void *> *>
PUBLIC	??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,int> >
PUBLIC	??$_Insert@ABQAE@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@U_Iterator_base0@2@@1@ABQAE@Z ; std::list<unsigned char *,std::allocator<unsigned char *> >::_Insert<unsigned char * const &>
PUBLIC	??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??A?$Vec@E$02@cv@@QAEAAEH@Z			; cv::Vec<unsigned char,3>::operator[]
PUBLIC	??$at@V?$Vec@E$02@cv@@@Mat@cv@@QAEAAV?$Vec@E$02@1@HH@Z ; cv::Mat::at<cv::Vec<unsigned char,3> >
PUBLIC	??$fill@PANH@std@@YAXPAN0ABH@Z			; std::fill<double *,int>
PUBLIC	??$strcpy_s@$0BAE@@@YAHAAY0BAE@DPBD@Z		; strcpy_s<260>
PUBLIC	??$?BH@CvSize@@QBE?AV?$Size_@H@cv@@XZ		; CvSize::operator<int> cv::Size_<int>
PUBLIC	??$?0N$03$00@_OutputArray@cv@@QAE@AAV?$Matx@N$03$00@1@@Z ; cv::_OutputArray::_OutputArray<double,4,1>
PUBLIC	??$?QH@?$MatCommaInitializer_@M@cv@@QAEAAV01@H@Z ; cv::MatCommaInitializer_<float>::operator,<int>
PUBLIC	??B?$MatCommaInitializer_@M@cv@@QBE?AV?$Mat_@M@1@XZ ; cv::MatCommaInitializer_<float>::operator cv::Mat_<float>
PUBLIC	??0?$Mat_@M@cv@@QAE@HH@Z			; cv::Mat_<float>::Mat_<float>
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??0?$Rect_@H@cv@@QAE@HHHH@Z			; cv::Rect_<int>::Rect_<int>
PUBLIC	??0?$Point_@H@cv@@QAE@HH@Z			; cv::Point_<int>::Point_<int>
PUBLIC	??4?$Size_@H@cv@@QAEAAV01@ABV01@@Z		; cv::Size_<int>::operator=
PUBLIC	??0?$Size_@H@cv@@QAE@XZ				; cv::Size_<int>::Size_<int>
PUBLIC	??0?$Size_@H@cv@@QAE@HH@Z			; cv::Size_<int>::Size_<int>
PUBLIC	??0?$Scalar_@N@cv@@QAE@XZ			; cv::Scalar_<double>::Scalar_<double>
PUBLIC	?allocate@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@I@Z ; std::allocator<std::_List_node<unsigned char *,void *> >::allocate
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::allocate
PUBLIC	??0?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAE@XZ ; std::allocator<std::_List_node<unsigned char *,void *> >::allocator<std::_List_node<unsigned char *,void *> >
PUBLIC	?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@PAU32@0@Z ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Buynode0
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PAEPAX@1@PBV?$_List_val@U?$_List_simple_types@PAE@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> >,std::_Iterator_base0>
PUBLIC	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::operator++
PUBLIC	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QAE@PAU?$_List_node@PAEPAX@1@PBV?$_List_val@U?$_List_simple_types@PAE@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >
PUBLIC	??0?$_List_val@U?$_List_simple_types@PAE@std@@@std@@QAE@XZ ; std::_List_val<std::_List_simple_types<unsigned char *> >::_List_val<std::_List_simple_types<unsigned char *> >
PUBLIC	?deallocate@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAU?$_List_node@PAEPAX@2@I@Z ; std::allocator<std::_List_node<unsigned char *,void *> >::deallocate
PUBLIC	??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >
PUBLIC	?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@XZ ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Buyheadnode
PUBLIC	??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<int> >::_Wrap_alloc<std::allocator<int> >
PUBLIC	?deallocate@?$allocator@H@std@@QAEXPAHI@Z	; std::allocator<int>::deallocate
PUBLIC	?__autoclassinit@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@U_Iterator_base0@2@@std@@QAEXI@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> >,std::_Iterator_base0>::__autoclassinit
PUBLIC	?__autoclassinit@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QAEXI@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::__autoclassinit
PUBLIC	??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QAE@PAU?$_List_node@PAEPAX@1@PBV?$_List_val@U?$_List_simple_types@PAE@std@@@1@@Z ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >
PUBLIC	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PAEPAX@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> >,std::_Iterator_base0>::_Mynode
PUBLIC	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QAE?AV01@H@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::operator++
PUBLIC	??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QBEABQAEXZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::operator*
PUBLIC	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QAE@PAU?$_List_node@PAEPAX@1@PBV?$_List_val@U?$_List_simple_types@PAE@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::_List_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >
PUBLIC	?_Myval@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAEPAU?$_List_node@PAEPAX@2@@Z ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Myval
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAEPAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::deallocate
PUBLIC	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Getal
PUBLIC	?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEXPAU?$_List_node@PAEPAX@2@@Z ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Freeheadnode
PUBLIC	??0?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >
PUBLIC	?_Make_iter@?$list@PAEV?$allocator@PAE@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@2@@Z ; std::list<unsigned char *,std::allocator<unsigned char *> >::_Make_iter
PUBLIC	??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::deallocate
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
PUBLIC	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
PUBLIC	??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
PUBLIC	??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QBEAAPAEXZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::operator*
PUBLIC	?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back
PUBLIC	?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
PUBLIC	?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
PUBLIC	?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
PUBLIC	?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init
PUBLIC	?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
PUBLIC	?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
PUBLIC	??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
PUBLIC	?_Prevnode@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAU?$_List_node@PAEPAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Prevnode
PUBLIC	?_Nextnode@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAU?$_List_node@PAEPAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Nextnode
PUBLIC	??1?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@XZ ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::~_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >
PUBLIC	?_Freenode@?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAEXPAU?$_List_node@PAEPAX@2@@Z ; std::_List_buy<unsigned char *,std::allocator<unsigned char *> >::_Freenode
PUBLIC	??0?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z ; std::_List_buy<unsigned char *,std::allocator<unsigned char *> >::_List_buy<unsigned char *,std::allocator<unsigned char *> >
PUBLIC	?_Tidy@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXXZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::_Tidy
PUBLIC	?erase@?$list@PAEV?$allocator@PAE@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@2@@Z ; std::list<unsigned char *,std::allocator<unsigned char *> >::erase
PUBLIC	?_Unchecked_end@?$list@PAEV?$allocator@PAE@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@2@XZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::_Unchecked_end
PUBLIC	?begin@?$list@PAEV?$allocator@PAE@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@2@XZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::begin
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >
PUBLIC	??0?$allocator@H@std@@QAE@XZ			; std::allocator<int>::allocator<int>
PUBLIC	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
PUBLIC	??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
PUBLIC	??B?$fpos@H@std@@QBE_JXZ			; std::fpos<int>::operator __int64
PUBLIC	?seekpos@?$fpos@H@std@@QBE_JXZ			; std::fpos<int>::seekpos
PUBLIC	?state@?$fpos@H@std@@QBEHXZ			; std::fpos<int>::state
PUBLIC	??0?$fpos@H@std@@QAE@H_J@Z			; std::fpos<int>::fpos<int>
PUBLIC	??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_ifstream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ; std::basic_ofstream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??1?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAE@XZ ; std::_List_buy<unsigned char *,std::allocator<unsigned char *> >::~_List_buy<unsigned char *,std::allocator<unsigned char *> >
PUBLIC	?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ifstream<char,std::char_traits<char> >::close
PUBLIC	??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >
PUBLIC	??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
PUBLIC	?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::imbue
PUBLIC	?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_filebuf<char,std::char_traits<char> >::sync
PUBLIC	?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z ; std::basic_filebuf<char,std::char_traits<char> >::setbuf
PUBLIC	?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
PUBLIC	?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
PUBLIC	?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_filebuf<char,std::char_traits<char> >::uflow
PUBLIC	?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ; std::basic_filebuf<char,std::char_traits<char> >::underflow
PUBLIC	?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail
PUBLIC	?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::overflow
PUBLIC	?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock
PUBLIC	?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Lock
PUBLIC	??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
PUBLIC	?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ofstream<char,std::char_traits<char> >::close
PUBLIC	??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >
PUBLIC	??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
PUBLIC	?clear@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXXZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::clear
PUBLIC	?push_back@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXABQAE@Z ; std::list<unsigned char *,std::allocator<unsigned char *> >::push_back
PUBLIC	?pop_front@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXXZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::pop_front
PUBLIC	?front@?$list@PAEV?$allocator@PAE@std@@@std@@QAEAAPAEXZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::front
PUBLIC	?empty@?$list@PAEV?$allocator@PAE@std@@@std@@QBE_NXZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::empty
PUBLIC	?size@?$list@PAEV?$allocator@PAE@std@@@std@@QBEIXZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::size
PUBLIC	??1?$list@PAEV?$allocator@PAE@std@@@std@@QAE@XZ	; std::list<unsigned char *,std::allocator<unsigned char *> >::~list<unsigned char *,std::allocator<unsigned char *> >
PUBLIC	??0?$list@PAEV?$allocator@PAE@std@@@std@@QAE@XZ	; std::list<unsigned char *,std::allocator<unsigned char *> >::list<unsigned char *,std::allocator<unsigned char *> >
PUBLIC	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
PUBLIC	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
PUBLIC	?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
PUBLIC	??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@0@Z ; ATL::operator+
PUBLIC	?SetZoom@CEndoScopeMFCDlg@@QAEXN@Z		; CEndoScopeMFCDlg::SetZoom
PUBLIC	?__autoclassinit@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXI@Z ; std::basic_ifstream<char,std::char_traits<char> >::__autoclassinit
PUBLIC	??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ifstream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	?IniWhilteLamda@CEndoScopeMFCDlg@@QAEXXZ	; CEndoScopeMFCDlg::IniWhilteLamda
PUBLIC	?__autoclassinit@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEXI@Z ; std::basic_filebuf<char,std::char_traits<char> >::__autoclassinit
PUBLIC	?__autoclassinit@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXI@Z ; std::basic_ofstream<char,std::char_traits<char> >::__autoclassinit
PUBLIC	??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ofstream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	?CalWhilteLamda@CEndoScopeMFCDlg@@QAEXPAE@Z	; CEndoScopeMFCDlg::CalWhilteLamda
PUBLIC	?AdjWhiteBalance@CEndoScopeMFCDlg@@QAEXPAEHHPAPAE@Z ; CEndoScopeMFCDlg::AdjWhiteBalance
PUBLIC	?OnBnClickedOk@CAboutDlg@@QAEXXZ		; CAboutDlg::OnBnClickedOk
PUBLIC	?__autoclassinit@CEdit@@QAEXI@Z			; CEdit::__autoclassinit
PUBLIC	?__autoclassinit@Login@@QAEXI@Z			; Login::__autoclassinit
PUBLIC	?SaveToPeripherals@CEndoScopeMFCDlg@@AAEXXZ	; CEndoScopeMFCDlg::SaveToPeripherals
PUBLIC	?CutDirFileAPI@@YAHV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z ; CutDirFileAPI
PUBLIC	?MenuEnter@CEndoScopeMFCDlg@@AAE_NXZ		; CEndoScopeMFCDlg::MenuEnter
PUBLIC	?MenuRight@CEndoScopeMFCDlg@@AAE_NXZ		; CEndoScopeMFCDlg::MenuRight
PUBLIC	?MenuLeft@CEndoScopeMFCDlg@@AAE_NXZ		; CEndoScopeMFCDlg::MenuLeft
PUBLIC	?MenuDown@CEndoScopeMFCDlg@@AAE_NXZ		; CEndoScopeMFCDlg::MenuDown
PUBLIC	?MenuUp@CEndoScopeMFCDlg@@AAE_NXZ		; CEndoScopeMFCDlg::MenuUp
PUBLIC	?MenuStop@CEndoScopeMFCDlg@@AAE_NXZ		; CEndoScopeMFCDlg::MenuStop
PUBLIC	?MenuStart@CEndoScopeMFCDlg@@AAE_NXZ		; CEndoScopeMFCDlg::MenuStart
PUBLIC	?ExposeSub@CEndoScopeMFCDlg@@AAE_NXZ		; CEndoScopeMFCDlg::ExposeSub
PUBLIC	?ExposeAdd@CEndoScopeMFCDlg@@AAE_NXZ		; CEndoScopeMFCDlg::ExposeAdd
PUBLIC	?GainSub@CEndoScopeMFCDlg@@AAEXXZ		; CEndoScopeMFCDlg::GainSub
PUBLIC	?GainAdd@CEndoScopeMFCDlg@@AAEXXZ		; CEndoScopeMFCDlg::GainAdd
PUBLIC	?SharpnessSub@CEndoScopeMFCDlg@@AAEXXZ		; CEndoScopeMFCDlg::SharpnessSub
PUBLIC	?SharpnessAdd@CEndoScopeMFCDlg@@AAEXXZ		; CEndoScopeMFCDlg::SharpnessAdd
PUBLIC	?SaturationSub@CEndoScopeMFCDlg@@AAEXXZ		; CEndoScopeMFCDlg::SaturationSub
PUBLIC	?SaturationAdd@CEndoScopeMFCDlg@@AAEXXZ		; CEndoScopeMFCDlg::SaturationAdd
PUBLIC	?ContrastSub@CEndoScopeMFCDlg@@AAEXXZ		; CEndoScopeMFCDlg::ContrastSub
PUBLIC	?ContrastAdd@CEndoScopeMFCDlg@@AAEXXZ		; CEndoScopeMFCDlg::ContrastAdd
PUBLIC	?BrightnessSub@CEndoScopeMFCDlg@@AAEXXZ		; CEndoScopeMFCDlg::BrightnessSub
PUBLIC	?BrightnessAdd@CEndoScopeMFCDlg@@AAEXXZ		; CEndoScopeMFCDlg::BrightnessAdd
PUBLIC	?EnterPatientInfo@CEndoScopeMFCDlg@@QAEXXZ	; CEndoScopeMFCDlg::EnterPatientInfo
PUBLIC	?MoveDatatoUSBDevice@CEndoScopeMFCDlg@@QAEXXZ	; CEndoScopeMFCDlg::MoveDatatoUSBDevice
PUBLIC	?SaveVideo@CEndoScopeMFCDlg@@QAEXXZ		; CEndoScopeMFCDlg::SaveVideo
PUBLIC	?ChangeImageRB@CEndoScopeMFCDlg@@QAEXPAEH@Z	; CEndoScopeMFCDlg::ChangeImageRB
PUBLIC	?SetModeofMeterLight@CEndoScopeMFCDlg@@QAEXPAE@Z ; CEndoScopeMFCDlg::SetModeofMeterLight
PUBLIC	?RestoreFactorySetting@CEndoScopeMFCDlg@@QAEXXZ	; CEndoScopeMFCDlg::RestoreFactorySetting
PUBLIC	?LightControler@CEndoScopeMFCDlg@@QAEXPAE@Z	; CEndoScopeMFCDlg::LightControler
PUBLIC	?UpdateWhiteBalance@CEndoScopeMFCDlg@@QAEXXZ	; CEndoScopeMFCDlg::UpdateWhiteBalance
PUBLIC	?ImageSetting@CEndoScopeMFCDlg@@QAEXPAE@Z	; CEndoScopeMFCDlg::ImageSetting
PUBLIC	?OnCtlData@CEndoScopeMFCDlg@@QAEJIJ@Z		; CEndoScopeMFCDlg::OnCtlData
PUBLIC	?ShowEndoscopeInfo@CEndoScopeMFCDlg@@QAEXPAEH@Z	; CEndoScopeMFCDlg::ShowEndoscopeInfo
PUBLIC	?ScreenCAPThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z	; CEndoScopeMFCDlg::ScreenCAPThreadProc
PUBLIC	?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z	; CEndoScopeMFCDlg::ShowVideoThreadFunc
PUBLIC	?RecvVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z	; CEndoScopeMFCDlg::RecvVideoThreadFunc
PUBLIC	?InitializeThread@CEndoScopeMFCDlg@@AAEXXZ	; CEndoScopeMFCDlg::InitializeThread
PUBLIC	?OnTimer@CEndoScopeMFCDlg@@QAEXI@Z		; CEndoScopeMFCDlg::OnTimer
PUBLIC	?ShowCurrentDateTime@CEndoScopeMFCDlg@@AAEXXZ	; CEndoScopeMFCDlg::ShowCurrentDateTime
PUBLIC	?PreTranslateMessage@CEndoScopeMFCDlg@@UAEHPAUtagMSG@@@Z ; CEndoScopeMFCDlg::PreTranslateMessage
PUBLIC	?VideoZoom@CEndoScopeMFCDlg@@AAEXXZ		; CEndoScopeMFCDlg::VideoZoom
PUBLIC	?__autoclassinit@CRgn@@QAEXI@Z			; CRgn::__autoclassinit
PUBLIC	?SetPicWidowShape@CEndoScopeMFCDlg@@QAEXXZ	; CEndoScopeMFCDlg::SetPicWidowShape
PUBLIC	?OnCtlColor@CEndoScopeMFCDlg@@QAEPAUHBRUSH__@@PAVCDC@@PAVCWnd@@I@Z ; CEndoScopeMFCDlg::OnCtlColor
PUBLIC	?__autoclassinit@CFont@@QAEXI@Z			; CFont::__autoclassinit
PUBLIC	?InitializeFormBoxLayout@CEndoScopeMFCDlg@@QAEXXZ ; CEndoScopeMFCDlg::InitializeFormBoxLayout
PUBLIC	?GetSaveImgPath@CEndoScopeMFCDlg@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CEndoScopeMFCDlg::GetSaveImgPath
PUBLIC	?ShotPicWindow@CEndoScopeMFCDlg@@QAEXXZ		; CEndoScopeMFCDlg::ShotPicWindow
PUBLIC	??1MatExpr@cv@@QAE@XZ				; cv::MatExpr::~MatExpr
PUBLIC	??1?$Mat_@M@cv@@QAE@XZ				; cv::Mat_<float>::~Mat_<float>
PUBLIC	?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z	; CEndoScopeMFCDlg::SavePicThreadProc
PUBLIC	?OnBnClickedButStop@CEndoScopeMFCDlg@@QAEXXZ	; CEndoScopeMFCDlg::OnBnClickedButStop
PUBLIC	?OnBnClickedButPause@CEndoScopeMFCDlg@@QAEXXZ	; CEndoScopeMFCDlg::OnBnClickedButPause
PUBLIC	?InitParameter@CEndoScopeMFCDlg@@AAEXXZ		; CEndoScopeMFCDlg::InitParameter
PUBLIC	?OnBnClickedButRun@CEndoScopeMFCDlg@@QAEXXZ	; CEndoScopeMFCDlg::OnBnClickedButRun
PUBLIC	?OnBnClickedButOk@CEndoScopeMFCDlg@@QAEXXZ	; CEndoScopeMFCDlg::OnBnClickedButOk
PUBLIC	?__autoclassinit@CProcessCard@@QAEXI@Z		; CProcessCard::__autoclassinit
PUBLIC	?__autoclassinit@CLightComIO@@QAEXI@Z		; CLightComIO::__autoclassinit
PUBLIC	?__autoclassinit@CVideoComIO@@QAEXI@Z		; CVideoComIO::__autoclassinit
PUBLIC	?__autoclassinit@CPLC@@QAEXI@Z			; CPLC::__autoclassinit
PUBLIC	?InitializePLC@CEndoScopeMFCDlg@@AAEXXZ		; CEndoScopeMFCDlg::InitializePLC
PUBLIC	?SetInitValue@CEndoScopeMFCDlg@@QAEXXZ		; CEndoScopeMFCDlg::SetInitValue
PUBLIC	?WindowProc@CEndoScopeMFCDlg@@MAEJIIJ@Z		; CEndoScopeMFCDlg::WindowProc
PUBLIC	?InitializecvWindow@CEndoScopeMFCDlg@@AAEXXZ	; CEndoScopeMFCDlg::InitializecvWindow
PUBLIC	?OnQueryDragIcon@CEndoScopeMFCDlg@@IAEPAUHICON__@@XZ ; CEndoScopeMFCDlg::OnQueryDragIcon
PUBLIC	?__autoclassinit@CPaintDC@@QAEXI@Z		; CPaintDC::__autoclassinit
PUBLIC	?OnPaint@CEndoScopeMFCDlg@@IAEXXZ		; CEndoScopeMFCDlg::OnPaint
PUBLIC	?OnSysCommand@CEndoScopeMFCDlg@@IAEXIJ@Z	; CEndoScopeMFCDlg::OnSysCommand
PUBLIC	?OnInitDialog@CEndoScopeMFCDlg@@MAEHXZ		; CEndoScopeMFCDlg::OnInitDialog
PUBLIC	?GetThisMessageMap@CEndoScopeMFCDlg@@KGPBUAFX_MSGMAP@@XZ ; CEndoScopeMFCDlg::GetThisMessageMap
PUBLIC	?GetMessageMap@CEndoScopeMFCDlg@@MBEPBUAFX_MSGMAP@@XZ ; CEndoScopeMFCDlg::GetMessageMap
PUBLIC	?DoDataExchange@CEndoScopeMFCDlg@@MAEXPAVCDataExchange@@@Z ; CEndoScopeMFCDlg::DoDataExchange
PUBLIC	??_GCEndoScopeMFCDlg@@UAEPAXI@Z			; CEndoScopeMFCDlg::`scalar deleting destructor'
PUBLIC	?OnInitDialog@CAboutDlg@@UAEHXZ			; CAboutDlg::OnInitDialog
PUBLIC	?OnClose@CAboutDlg@@QAEXXZ			; CAboutDlg::OnClose
PUBLIC	?GetThisMessageMap@CAboutDlg@@KGPBUAFX_MSGMAP@@XZ ; CAboutDlg::GetThisMessageMap
PUBLIC	?GetMessageMap@CAboutDlg@@MBEPBUAFX_MSGMAP@@XZ	; CAboutDlg::GetMessageMap
PUBLIC	?DoDataExchange@CAboutDlg@@MAEXPAVCDataExchange@@@Z ; CAboutDlg::DoDataExchange
PUBLIC	??1CAboutDlg@@UAE@XZ				; CAboutDlg::~CAboutDlg
PUBLIC	??_GCAboutDlg@@UAEPAXI@Z			; CAboutDlg::`scalar deleting destructor'
PUBLIC	??0CAboutDlg@@QAE@XZ				; CAboutDlg::CAboutDlg
PUBLIC	?FirstDriveFromMask@@YADK@Z			; FirstDriveFromMask
PUBLIC	?__autoclassinit@CSyncObject@@QAEXI@Z		; CSyncObject::__autoclassinit
PUBLIC	?__autoclassinit@CEvent@@QAEXI@Z		; CEvent::__autoclassinit
PUBLIC	?MenuEnter@CPLC@@QAEHXZ				; CPLC::MenuEnter
PUBLIC	?MenuRight@CPLC@@QAEHXZ				; CPLC::MenuRight
PUBLIC	?MenuLeft@CPLC@@QAEHXZ				; CPLC::MenuLeft
PUBLIC	?MenuDown@CPLC@@QAEHXZ				; CPLC::MenuDown
PUBLIC	?MenuUp@CPLC@@QAEHXZ				; CPLC::MenuUp
PUBLIC	?MenuStop@CPLC@@QAEHXZ				; CPLC::MenuStop
PUBLIC	?MenuStart@CPLC@@QAEHXZ				; CPLC::MenuStart
PUBLIC	?WhiteBalance@CPLC@@QAEHXZ			; CPLC::WhiteBalance
PUBLIC	?Gain@CPLC@@QAEHH@Z				; CPLC::Gain
PUBLIC	?Sharpness@CPLC@@QAEHH@Z			; CPLC::Sharpness
PUBLIC	?Exposure10@CPLC@@QAEHXZ			; CPLC::Exposure10
PUBLIC	?Exposure9@CPLC@@QAEHXZ				; CPLC::Exposure9
PUBLIC	?Exposure8@CPLC@@QAEHXZ				; CPLC::Exposure8
PUBLIC	?Exposure7@CPLC@@QAEHXZ				; CPLC::Exposure7
PUBLIC	?Exposure6@CPLC@@QAEHXZ				; CPLC::Exposure6
PUBLIC	?Exposure5@CPLC@@QAEHXZ				; CPLC::Exposure5
PUBLIC	?Exposure4@CPLC@@QAEHXZ				; CPLC::Exposure4
PUBLIC	?Exposure3@CPLC@@QAEHXZ				; CPLC::Exposure3
PUBLIC	?Exposure2@CPLC@@QAEHXZ				; CPLC::Exposure2
PUBLIC	?Exposure1@CPLC@@QAEHXZ				; CPLC::Exposure1
PUBLIC	?Exposure0@CPLC@@QAEHXZ				; CPLC::Exposure0
PUBLIC	?Saturation@CPLC@@QAEHH@Z			; CPLC::Saturation
PUBLIC	?Contrast@CPLC@@QAEHH@Z				; CPLC::Contrast
PUBLIC	?Brightness20@CPLC@@QAEHXZ			; CPLC::Brightness20
PUBLIC	?Brightness19@CPLC@@QAEHXZ			; CPLC::Brightness19
PUBLIC	?Brightness18@CPLC@@QAEHXZ			; CPLC::Brightness18
PUBLIC	?Brightness17@CPLC@@QAEHXZ			; CPLC::Brightness17
PUBLIC	?Brightness16@CPLC@@QAEHXZ			; CPLC::Brightness16
PUBLIC	?Brightness15@CPLC@@QAEHXZ			; CPLC::Brightness15
PUBLIC	?Brightness14@CPLC@@QAEHXZ			; CPLC::Brightness14
PUBLIC	?Brightness13@CPLC@@QAEHXZ			; CPLC::Brightness13
PUBLIC	?Brightness12@CPLC@@QAEHXZ			; CPLC::Brightness12
PUBLIC	?Brightness11@CPLC@@QAEHXZ			; CPLC::Brightness11
PUBLIC	?Brightness10@CPLC@@QAEHXZ			; CPLC::Brightness10
PUBLIC	?Brightness9@CPLC@@QAEHXZ			; CPLC::Brightness9
PUBLIC	?Brightness8@CPLC@@QAEHXZ			; CPLC::Brightness8
PUBLIC	?Brightness7@CPLC@@QAEHXZ			; CPLC::Brightness7
PUBLIC	?Brightness6@CPLC@@QAEHXZ			; CPLC::Brightness6
PUBLIC	?Brightness5@CPLC@@QAEHXZ			; CPLC::Brightness5
PUBLIC	?Brightness4@CPLC@@QAEHXZ			; CPLC::Brightness4
PUBLIC	?Brightness3@CPLC@@QAEHXZ			; CPLC::Brightness3
PUBLIC	?Brightness2@CPLC@@QAEHXZ			; CPLC::Brightness2
PUBLIC	?Brightness1@CPLC@@QAEHXZ			; CPLC::Brightness1
PUBLIC	?Brightness0@CPLC@@QAEHXZ			; CPLC::Brightness0
PUBLIC	?Light@CPLC@@QAEHH@Z				; CPLC::Light
PUBLIC	?CloseLight@CPLC@@QAEHXZ			; CPLC::CloseLight
PUBLIC	?OpenLight@CPLC@@QAEHXZ				; CPLC::OpenLight
PUBLIC	?SetSquare@CPLC@@QAEHXZ				; CPLC::SetSquare
PUBLIC	?SetCircular@CPLC@@QAEHXZ			; CPLC::SetCircular
PUBLIC	?Zoom4@CPLC@@QAEHXZ				; CPLC::Zoom4
PUBLIC	?Zoom3@CPLC@@QAEHXZ				; CPLC::Zoom3
PUBLIC	?Zoom2@CPLC@@QAEHXZ				; CPLC::Zoom2
PUBLIC	?Zoom1@CPLC@@QAEHXZ				; CPLC::Zoom1
PUBLIC	?R@CPLC@@QAEHH@Z				; CPLC::R
PUBLIC	?B@CPLC@@QAEHH@Z				; CPLC::B
PUBLIC	?PeakMetering@CPLC@@QAEHXZ			; CPLC::PeakMetering
PUBLIC	?AverageMetering@CPLC@@QAEHXZ			; CPLC::AverageMetering
PUBLIC	?NotLink@CPLC@@QAEHXZ				; CPLC::NotLink
PUBLIC	?OverSave@CPLC@@QAEHXZ				; CPLC::OverSave
PUBLIC	?NowSave@CPLC@@QAEHXZ				; CPLC::NowSave
PUBLIC	?StopVideo@CPLC@@QAEHXZ				; CPLC::StopVideo
PUBLIC	?NowVideo@CPLC@@QAEHXZ				; CPLC::NowVideo
PUBLIC	?OverEnter@CPLC@@QAEHXZ				; CPLC::OverEnter
PUBLIC	?NowEnter@CPLC@@QAEHXZ				; CPLC::NowEnter
PUBLIC	??0CvSize@@QAE@HH@Z				; CvSize::CvSize
PUBLIC	??0String@cv@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; cv::String::String
PUBLIC	??4Mat@cv@@QAEAAV01@ABVMatExpr@1@@Z		; cv::Mat::operator=
PUBLIC	??EMatConstIterator@cv@@QAEAAV01@XZ		; cv::MatConstIterator::operator++
PUBLIC	?__autoclassinit@MatConstIterator@cv@@QAEXI@Z	; cv::MatConstIterator::__autoclassinit
PUBLIC	??0MatConstIterator@cv@@QAE@ABV01@@Z		; cv::MatConstIterator::MatConstIterator
PUBLIC	??0MatConstIterator@cv@@QAE@PBVMat@1@@Z		; cv::MatConstIterator::MatConstIterator
PUBLIC	??AMatStep@cv@@QAEAAIH@Z			; cv::MatStep::operator[]
PUBLIC	??AMatStep@cv@@QBEABIH@Z			; cv::MatStep::operator[]
PUBLIC	??0MatStep@cv@@QAE@XZ				; cv::MatStep::MatStep
PUBLIC	??AMatSize@cv@@QBEABHH@Z			; cv::MatSize::operator[]
PUBLIC	??0MatSize@cv@@QAE@PAH@Z			; cv::MatSize::MatSize
PUBLIC	??4Mat@cv@@QAEAAV01@$$QAV01@@Z			; cv::Mat::operator=
PUBLIC	??0Mat@cv@@QAE@$$QAV01@@Z			; cv::Mat::Mat
PUBLIC	?ptr@Mat@cv@@QBEPBEH@Z				; cv::Mat::ptr
PUBLIC	?total@Mat@cv@@QBEIXZ				; cv::Mat::total
PUBLIC	?empty@Mat@cv@@QBE_NXZ				; cv::Mat::empty
PUBLIC	?depth@Mat@cv@@QBEHXZ				; cv::Mat::depth
PUBLIC	?type@Mat@cv@@QBEHXZ				; cv::Mat::type
PUBLIC	?elemSize@Mat@cv@@QBEIXZ			; cv::Mat::elemSize
PUBLIC	?isContinuous@Mat@cv@@QBE_NXZ			; cv::Mat::isContinuous
PUBLIC	??RMat@cv@@QBE?AV01@ABV?$Rect_@H@1@@Z		; cv::Mat::operator()
PUBLIC	?release@Mat@cv@@QAEXXZ				; cv::Mat::release
PUBLIC	?create@Mat@cv@@QAEXHHH@Z			; cv::Mat::create
PUBLIC	??4Mat@cv@@QAEAAV01@ABV01@@Z			; cv::Mat::operator=
PUBLIC	??1Mat@cv@@QAE@XZ				; cv::Mat::~Mat
PUBLIC	??0Mat@cv@@QAE@HHHPAXI@Z			; cv::Mat::Mat
PUBLIC	??0Mat@cv@@QAE@V?$Size_@H@1@H@Z			; cv::Mat::Mat
PUBLIC	??0Mat@cv@@QAE@HHH@Z				; cv::Mat::Mat
PUBLIC	??0Mat@cv@@QAE@XZ				; cv::Mat::Mat
PUBLIC	??1_OutputArray@cv@@QAE@XZ			; cv::_OutputArray::~_OutputArray
PUBLIC	??0_OutputArray@cv@@QAE@AAVMat@1@@Z		; cv::_OutputArray::_OutputArray
PUBLIC	??1_InputArray@cv@@QAE@XZ			; cv::_InputArray::~_InputArray
PUBLIC	??0_InputArray@cv@@QAE@ABVMat@1@@Z		; cv::_InputArray::_InputArray
PUBLIC	??0_InputArray@cv@@QAE@XZ			; cv::_InputArray::_InputArray
PUBLIC	?init@_InputArray@cv@@IAEXHPBXV?$Size_@H@2@@Z	; cv::_InputArray::init
PUBLIC	?init@_InputArray@cv@@IAEXHPBX@Z		; cv::_InputArray::init
PUBLIC	??1String@cv@@QAE@XZ				; cv::String::~String
PUBLIC	??0String@cv@@QAE@PBD@Z				; cv::String::String
PUBLIC	??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z		; CEndoScopeMFCDlg::CEndoScopeMFCDlg
PUBLIC	??1CEndoScopeMFCDlg@@UAE@XZ			; CEndoScopeMFCDlg::~CEndoScopeMFCDlg
PUBLIC	?g_videoevent@@3VCEvent@@A			; g_videoevent
PUBLIC	?g_resizeevent@@3VCEvent@@A			; g_resizeevent
PUBLIC	?g_picevent@@3VCEvent@@A			; g_picevent
PUBLIC	?g_showevent@@3VCEvent@@A			; g_showevent
PUBLIC	?g_capevent@@3VCEvent@@A			; g_capevent
PUBLIC	?b@@3PAUHBRUSH__@@A				; b
PUBLIC	?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
EXTRN	??_ECStatic@@UAEPAXI@Z:PROC			; CStatic::`vector deleting destructor'
EXTRN	??_ECFont@@UAEPAXI@Z:PROC			; CFont::`vector deleting destructor'
EXTRN	??_ECRgn@@UAEPAXI@Z:PROC			; CRgn::`vector deleting destructor'
EXTRN	??_E?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_filebuf<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_ECAboutDlg@@UAEPAXI@Z:PROC			; CAboutDlg::`vector deleting destructor'
EXTRN	??_ECEndoScopeMFCDlg@@UAEPAXI@Z:PROC		; CEndoScopeMFCDlg::`vector deleting destructor'
EXTRN	??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ifstream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z:PROC ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor'
?g_videoevent@@3VCEvent@@A DQ 01H DUP (?)		; g_videoevent
?g_resizeevent@@3VCEvent@@A DQ 01H DUP (?)		; g_resizeevent
?g_picevent@@3VCEvent@@A DQ 01H DUP (?)			; g_picevent
?g_showevent@@3VCEvent@@A DQ 01H DUP (?)		; g_showevent
?g_capevent@@3VCEvent@@A DQ 01H DUP (?)			; g_capevent
?b@@3PAUHBRUSH__@@A DD 01H DUP (?)			; b
_BSS	ENDS
;	COMDAT ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA
_BSS	SEGMENT
?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA DD 01H DUP (?) ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CEndoScopeMFCDlg@@UAE@XZ DD 019930522H
	DD	0eH
	DD	FLAT:__unwindtable$??1CEndoScopeMFCDlg@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
	ORG $+4
__unwindtable$??1CEndoScopeMFCDlg@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CEndoScopeMFCDlg@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CEndoScopeMFCDlg@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CEndoScopeMFCDlg@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CEndoScopeMFCDlg@@UAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CEndoScopeMFCDlg@@UAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CEndoScopeMFCDlg@@UAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1CEndoScopeMFCDlg@@UAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1CEndoScopeMFCDlg@@UAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??1CEndoScopeMFCDlg@@UAE@XZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$??1CEndoScopeMFCDlg@@UAE@XZ$9
	DD	09H
	DD	FLAT:__unwindfunclet$??1CEndoScopeMFCDlg@@UAE@XZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$??1CEndoScopeMFCDlg@@UAE@XZ$11
	DD	0bH
	DD	FLAT:__unwindfunclet$??1CEndoScopeMFCDlg@@UAE@XZ$12
	DD	0cH
	DD	FLAT:__unwindfunclet$??1CEndoScopeMFCDlg@@UAE@XZ$13
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z DD 019930522H
	DD	0eH
	DD	FLAT:__unwindtable$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
	ORG $+4
__unwindtable$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z$9
	DD	09H
	DD	FLAT:__unwindfunclet$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z$10
	DD	0aH
	DD	FLAT:__unwindfunclet$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z$11
	DD	0bH
	DD	FLAT:__unwindfunclet$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z$12
	DD	0cH
	DD	FLAT:__unwindfunclet$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z$13
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0_OutputArray@cv@@QAE@AAVMat@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0_OutputArray@cv@@QAE@AAVMat@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0_OutputArray@cv@@QAE@AAVMat@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_OutputArray@cv@@QAE@AAVMat@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0Mat@cv@@QAE@HHHPAXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0Mat@cv@@QAE@HHHPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0Mat@cv@@QAE@HHHPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Mat@cv@@QAE@HHHPAXI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0Mat@cv@@QAE@HHHPAXI@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CAboutDlg@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CAboutDlg@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CAboutDlg@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CAboutDlg@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CAboutDlg@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CAboutDlg@@QAE@XZ$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?OnInitDialog@CEndoScopeMFCDlg@@MAEHXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnInitDialog@CEndoScopeMFCDlg@@MAEHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?OnInitDialog@CEndoScopeMFCDlg@@MAEHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnInitDialog@CEndoScopeMFCDlg@@MAEHXZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?OnSysCommand@CEndoScopeMFCDlg@@IAEXIJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnSysCommand@CEndoScopeMFCDlg@@IAEXIJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?OnSysCommand@CEndoScopeMFCDlg@@IAEXIJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnSysCommand@CEndoScopeMFCDlg@@IAEXIJ@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?OnPaint@CEndoScopeMFCDlg@@IAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnPaint@CEndoScopeMFCDlg@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?OnPaint@CEndoScopeMFCDlg@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnPaint@CEndoScopeMFCDlg@@IAEXXZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?InitializecvWindow@CEndoScopeMFCDlg@@AAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?InitializecvWindow@CEndoScopeMFCDlg@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?InitializecvWindow@CEndoScopeMFCDlg@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InitializecvWindow@CEndoScopeMFCDlg@@AAEXXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitializecvWindow@CEndoScopeMFCDlg@@AAEXXZ$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?WindowProc@CEndoScopeMFCDlg@@MAEJIIJ@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?WindowProc@CEndoScopeMFCDlg@@MAEJIIJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?WindowProc@CEndoScopeMFCDlg@@MAEJIIJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?WindowProc@CEndoScopeMFCDlg@@MAEJIIJ@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?WindowProc@CEndoScopeMFCDlg@@MAEJIIJ@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?InitializePLC@CEndoScopeMFCDlg@@AAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?InitializePLC@CEndoScopeMFCDlg@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?InitializePLC@CEndoScopeMFCDlg@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InitializePLC@CEndoScopeMFCDlg@@AAEXXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitializePLC@CEndoScopeMFCDlg@@AAEXXZ$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?InitParameter@CEndoScopeMFCDlg@@AAEXXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?InitParameter@CEndoScopeMFCDlg@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?InitParameter@CEndoScopeMFCDlg@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InitParameter@CEndoScopeMFCDlg@@AAEXXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitParameter@CEndoScopeMFCDlg@@AAEXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitParameter@CEndoScopeMFCDlg@@AAEXXZ$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z DD 019930522H
	DD	039H
	DD	FLAT:__unwindtable$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
	ORG $+4
__unwindtable$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$7
	DD	05H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$7
	DD	04H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$7
	DD	03H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$7
	DD	0aH
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$8
	DD	0bH
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$9
	DD	0cH
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$10
	DD	0dH
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$11
	DD	0cH
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$11
	DD	0aH
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$11
	DD	011H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$12
	DD	012H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$13
	DD	013H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$14
	DD	014H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$15
	DD	015H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$16
	DD	014H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$17
	DD	017H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$18
	DD	018H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$19
	DD	014H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$20
	DD	01aH
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$21
	DD	01bH
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$22
	DD	014H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$23
	DD	014H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$24
	DD	01eH
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$25
	DD	01fH
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$26
	DD	014H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$27
	DD	021H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$28
	DD	022H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$29
	DD	023H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$30
	DD	021H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$31
	DD	025H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$32
	DD	021H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$33
	DD	027H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$34
	DD	021H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$35
	DD	029H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$36
	DD	021H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$37
	DD	02bH
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$38
	DD	021H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$39
	DD	02dH
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$40
	DD	021H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$41
	DD	02fH
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$42
	DD	021H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$43
	DD	031H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$44
	DD	021H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$45
	DD	033H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$46
	DD	021H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$47
	DD	035H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$48
	DD	021H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$49
	DD	037H
	DD	FLAT:__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$50
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1MatExpr@cv@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1MatExpr@cv@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1MatExpr@cv@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1MatExpr@cv@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1MatExpr@cv@@QAE@XZ$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?ShotPicWindow@CEndoScopeMFCDlg@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ShotPicWindow@CEndoScopeMFCDlg@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ShotPicWindow@CEndoScopeMFCDlg@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ShotPicWindow@CEndoScopeMFCDlg@@QAEXXZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetSaveImgPath@CEndoScopeMFCDlg@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?GetSaveImgPath@CEndoScopeMFCDlg@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetSaveImgPath@CEndoScopeMFCDlg@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetSaveImgPath@CEndoScopeMFCDlg@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetSaveImgPath@CEndoScopeMFCDlg@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetSaveImgPath@CEndoScopeMFCDlg@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?GetSaveImgPath@CEndoScopeMFCDlg@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?GetSaveImgPath@CEndoScopeMFCDlg@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?GetSaveImgPath@CEndoScopeMFCDlg@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$5
	DD	03H
	DD	FLAT:__unwindfunclet$?GetSaveImgPath@CEndoScopeMFCDlg@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$6
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?InitializeFormBoxLayout@CEndoScopeMFCDlg@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?InitializeFormBoxLayout@CEndoScopeMFCDlg@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?InitializeFormBoxLayout@CEndoScopeMFCDlg@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InitializeFormBoxLayout@CEndoScopeMFCDlg@@QAEXXZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?SetPicWidowShape@CEndoScopeMFCDlg@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SetPicWidowShape@CEndoScopeMFCDlg@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?SetPicWidowShape@CEndoScopeMFCDlg@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetPicWidowShape@CEndoScopeMFCDlg@@QAEXXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SetPicWidowShape@CEndoScopeMFCDlg@@QAEXXZ$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?ShowCurrentDateTime@CEndoScopeMFCDlg@@AAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ShowCurrentDateTime@CEndoScopeMFCDlg@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ShowCurrentDateTime@CEndoScopeMFCDlg@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ShowCurrentDateTime@CEndoScopeMFCDlg@@AAEXXZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z DD 019930522H
	DD	0cH
	DD	FLAT:__unwindtable$?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
	ORG $+4
__unwindtable$?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z$5
	DD	03H
	DD	FLAT:__unwindfunclet$?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z$7
	DD	00H
	DD	FLAT:__unwindfunclet$?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z$9
	DD	00H
	DD	FLAT:__unwindfunclet$?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z$11
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?ScreenCAPThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ScreenCAPThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ScreenCAPThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ScreenCAPThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?ShowEndoscopeInfo@CEndoScopeMFCDlg@@QAEXPAEH@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?ShowEndoscopeInfo@CEndoScopeMFCDlg@@QAEXPAEH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ShowEndoscopeInfo@CEndoScopeMFCDlg@@QAEXPAEH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ShowEndoscopeInfo@CEndoScopeMFCDlg@@QAEXPAEH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ShowEndoscopeInfo@CEndoScopeMFCDlg@@QAEXPAEH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?ShowEndoscopeInfo@CEndoScopeMFCDlg@@QAEXPAEH@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ShowEndoscopeInfo@CEndoScopeMFCDlg@@QAEXPAEH@Z$3
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?OnCtlData@CEndoScopeMFCDlg@@QAEJIJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnCtlData@CEndoScopeMFCDlg@@QAEJIJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?OnCtlData@CEndoScopeMFCDlg@@QAEJIJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnCtlData@CEndoScopeMFCDlg@@QAEJIJ@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?SaveVideo@CEndoScopeMFCDlg@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SaveVideo@CEndoScopeMFCDlg@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?SaveVideo@CEndoScopeMFCDlg@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SaveVideo@CEndoScopeMFCDlg@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SaveVideo@CEndoScopeMFCDlg@@QAEXXZ$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?CutDirFileAPI@@YAHV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?CutDirFileAPI@@YAHV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?CutDirFileAPI@@YAHV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CutDirFileAPI@@YAHV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CutDirFileAPI@@YAHV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?CutDirFileAPI@@YAHV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?CutDirFileAPI@@YAHV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?CutDirFileAPI@@YAHV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?SaveToPeripherals@CEndoScopeMFCDlg@@AAEXXZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?SaveToPeripherals@CEndoScopeMFCDlg@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?SaveToPeripherals@CEndoScopeMFCDlg@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SaveToPeripherals@CEndoScopeMFCDlg@@AAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SaveToPeripherals@CEndoScopeMFCDlg@@AAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?SaveToPeripherals@CEndoScopeMFCDlg@@AAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?SaveToPeripherals@CEndoScopeMFCDlg@@AAEXXZ$3
	DD	02H
	DD	FLAT:__unwindfunclet$?SaveToPeripherals@CEndoScopeMFCDlg@@AAEXXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?SaveToPeripherals@CEndoScopeMFCDlg@@AAEXXZ$5
	DD	02H
	DD	FLAT:__unwindfunclet$?SaveToPeripherals@CEndoScopeMFCDlg@@AAEXXZ$6
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?CalWhilteLamda@CEndoScopeMFCDlg@@QAEXPAE@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?CalWhilteLamda@CEndoScopeMFCDlg@@QAEXPAE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?CalWhilteLamda@CEndoScopeMFCDlg@@QAEXPAE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CalWhilteLamda@CEndoScopeMFCDlg@@QAEXPAE@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CalWhilteLamda@CEndoScopeMFCDlg@@QAEXPAE@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?CalWhilteLamda@CEndoScopeMFCDlg@@QAEXPAE@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?CalWhilteLamda@CEndoScopeMFCDlg@@QAEXPAE@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?CalWhilteLamda@CEndoScopeMFCDlg@@QAEXPAE@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?CalWhilteLamda@CEndoScopeMFCDlg@@QAEXPAE@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?IniWhilteLamda@CEndoScopeMFCDlg@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?IniWhilteLamda@CEndoScopeMFCDlg@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?IniWhilteLamda@CEndoScopeMFCDlg@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?IniWhilteLamda@CEndoScopeMFCDlg@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?IniWhilteLamda@CEndoScopeMFCDlg@@QAEXXZ$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@0@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@PAU32@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@PAU32@0@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@PAU32@0@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@PAU32@0@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@PAU32@0@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@PAU32@0@Z$2
__catchsym$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@PAU32@0@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@PAU32@0@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$?0N$03$00@_OutputArray@cv@@QAE@AAV?$Matx@N$03$00@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0N$03$00@_OutputArray@cv@@QAE@AAV?$Matx@N$03$00@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?0N$03$00@_OutputArray@cv@@QAE@AAV?$Matx@N$03$00@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0N$03$00@_OutputArray@cv@@QAE@AAV?$Matx@N$03$00@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$Mat_@M@cv@@QAE@ABVMat@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$Mat_@M@cv@@QAE@ABVMat@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0?$Mat_@M@cv@@QAE@ABVMat@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$Mat_@M@cv@@QAE@ABVMat@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__tryblocktable$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$3
__catchsym$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Buynode@ABQAE@?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAEPAU?$_List_node@PAEPAX@1@PAU21@0ABQAE@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Buynode@ABQAE@?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAEPAU?$_List_node@PAEPAX@1@PAU21@0ABQAE@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Buynode@ABQAE@?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAEPAU?$_List_node@PAEPAX@1@PAU21@0ABQAE@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$_Buynode@ABQAE@?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAEPAU?$_List_node@PAEPAX@1@PAU21@0ABQAE@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Buynode@ABQAE@?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAEPAU?$_List_node@PAEPAX@1@PAU21@0ABQAE@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Buynode@ABQAE@?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAEPAU?$_List_node@PAEPAX@1@PAU21@0ABQAE@Z$2
__catchsym$??$_Buynode@ABQAE@?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAEPAU?$_List_node@PAEPAX@1@PAU21@0ABQAE@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Buynode@ABQAE@?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAEPAU?$_List_node@PAEPAX@1@PAU21@0ABQAE@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??4?$Mat_@M@cv@@QAEAAV01@ABVMat@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??4?$Mat_@M@cv@@QAEAAV01@ABVMat@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??4?$Mat_@M@cv@@QAEAAV01@ABVMat@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4?$Mat_@M@cv@@QAEAAV01@ABVMat@1@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??4?$Mat_@M@cv@@QAEAAV01@ABVMat@1@@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$construct@PAU?$_List_node@PAEPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@AAPAU21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PAU?$_List_node@PAEPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@AAPAU21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$construct@PAU?$_List_node@PAEPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@AAPAU21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PAU?$_List_node@PAEPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@AAPAU21@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??4?$Mat_@M@cv@@QAEAAV01@$$QAVMat@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??4?$Mat_@M@cv@@QAEAAV01@$$QAVMat@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??4?$Mat_@M@cv@@QAEAAV01@$$QAVMat@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4?$Mat_@M@cv@@QAEAAV01@$$QAVMat@1@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??4?$Mat_@M@cv@@QAEAAV01@$$QAVMat@1@@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$?0M@_OutputArray@cv@@QAE@AAV?$Mat_@M@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0M@_OutputArray@cv@@QAE@AAV?$Mat_@M@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?0M@_OutputArray@cv@@QAE@AAV?$Mat_@M@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0M@_OutputArray@cv@@QAE@AAV?$Mat_@M@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$construct@PAEABQAE@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAEABQAE@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PAEABQAE@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAEABQAE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$construct@PAEABQAE@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAEABQAE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PAEABQAE@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAEABQAE@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?Format@COleDateTime@ATL@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@2@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?Format@COleDateTime@ATL@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@2@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Format@COleDateTime@ATL@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@2@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Format@COleDateTime@ATL@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@2@PBD@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Format@COleDateTime@ATL@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@2@PBD@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Format@COleDateTime@ATL@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@2@PBD@Z$3
_g_videoevent$initializer$ DD FLAT:??__Eg_videoevent@@YAXXZ
_g_resizeevent$initializer$ DD FLAT:??__Eg_resizeevent@@YAXXZ
_g_picevent$initializer$ DD FLAT:??__Eg_picevent@@YAXXZ
_g_showevent$initializer$ DD FLAT:??__Eg_showevent@@YAXXZ
_g_capevent$initializer$ DD FLAT:??__Eg_capevent@@YAXXZ
_b$initializer$ DD FLAT:??__Eb@@YAXXZ
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ??1CEndoScopeMFCDlg@@UAE@XZ
_TEXT	SEGMENT
tv200 = -64						; size = 4
$T2 = -60						; size = 4
tv188 = -56						; size = 4
tv168 = -52						; size = 4
$T3 = -48						; size = 4
$T4 = -44						; size = 4
$T5 = -40						; size = 4
$T6 = -36						; size = 4
_data$7 = -32						; size = 4
_i$8 = -28						; size = 4
_data$9 = -24						; size = 4
_i$10 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CEndoScopeMFCDlg@@UAE@XZ PROC			; CEndoScopeMFCDlg::~CEndoScopeMFCDlg, COMDAT
; _this$ = ecx

; 107  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CEndoScopeMFCDlg@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 34	 sub	 esp, 52			; 00000034H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00028	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CEndoScopeMFCDlg@@6B@
  00031	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 13 ; 0000000dH

; 108  : 	//if (m_pCCGrapgBuilder != NULL)
; 109  : 	//	delete m_pCCGrapgBuilder;
; 110  : 	//停止采图graph
; 111  : 	//关闭处理线程
; 112  : 	m_brecvvideo = false;

  00038	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	c6 81 b5 01 00
	00 00		 mov	 BYTE PTR [ecx+437], 0

; 113  : 	m_bshowvideo = false;

  00042	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00045	c6 82 b4 01 00
	00 00		 mov	 BYTE PTR [edx+436], 0

; 114  : 	if (m_lamda)

  0004c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	83 b8 b4 03 00
	00 00		 cmp	 DWORD PTR [eax+948], 0
  00056	74 26		 je	 SHORT $LN12@CEndoScope

; 115  : 	{
; 116  : 		delete[]m_lamda;

  00058	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	8b 91 b4 03 00
	00		 mov	 edx, DWORD PTR [ecx+948]
  00061	89 55 d0	 mov	 DWORD PTR $T3[ebp], edx
  00064	8b 45 d0	 mov	 eax, DWORD PTR $T3[ebp]
  00067	50		 push	 eax
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??_V@YAXPAX@Z
  0006e	83 c4 04	 add	 esp, 4

; 117  : 		m_lamda = NULL;

  00071	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	c7 81 b4 03 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+948], 0
$LN12@CEndoScope:

; 118  : 	}
; 119  : 	if (!m_src.empty())

  0007e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	81 c1 f4 03 00
	00		 add	 ecx, 1012		; 000003f4H
  00087	e8 00 00 00 00	 call	 ?empty@Mat@cv@@QBE_NXZ	; cv::Mat::empty
  0008c	0f b6 d0	 movzx	 edx, al
  0008f	85 d2		 test	 edx, edx
  00091	75 0e		 jne	 SHORT $LN11@CEndoScope

; 120  : 	{
; 121  : 		m_src.release();

  00093	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	81 c1 f4 03 00
	00		 add	 ecx, 1012		; 000003f4H
  0009c	e8 00 00 00 00	 call	 ?release@Mat@cv@@QAEXXZ	; cv::Mat::release
$LN11@CEndoScope:

; 122  : 		//delete buf;
; 123  : 	}
; 124  : 	if(Picimg.empty())

  000a1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a4	81 c1 2c 04 00
	00		 add	 ecx, 1068		; 0000042cH
  000aa	e8 00 00 00 00	 call	 ?empty@Mat@cv@@QBE_NXZ	; cv::Mat::empty
  000af	0f b6 c0	 movzx	 eax, al
  000b2	85 c0		 test	 eax, eax
  000b4	74 0e		 je	 SHORT $LN10@CEndoScope

; 125  : 	{
; 126  : 		Picimg.release();

  000b6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b9	81 c1 2c 04 00
	00		 add	 ecx, 1068		; 0000042cH
  000bf	e8 00 00 00 00	 call	 ?release@Mat@cv@@QAEXXZ	; cv::Mat::release
$LN10@CEndoScope:

; 127  : 	}
; 128  : 	if (!m_pTaskList.empty())

  000c4	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c7	81 c1 84 04 00
	00		 add	 ecx, 1156		; 00000484H
  000cd	e8 00 00 00 00	 call	 ?empty@?$list@PAEV?$allocator@PAE@std@@@std@@QBE_NXZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::empty
  000d2	0f b6 c8	 movzx	 ecx, al
  000d5	85 c9		 test	 ecx, ecx
  000d7	0f 85 85 00 00
	00		 jne	 $LN9@CEndoScope

; 129  : 	{
; 130  : 		for (int i=0;i<m_pTaskList.size();++i)

  000dd	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$10[ebp], 0
  000e4	eb 09		 jmp	 SHORT $LN8@CEndoScope
$LN7@CEndoScope:
  000e6	8b 55 ec	 mov	 edx, DWORD PTR _i$10[ebp]
  000e9	83 c2 01	 add	 edx, 1
  000ec	89 55 ec	 mov	 DWORD PTR _i$10[ebp], edx
$LN8@CEndoScope:
  000ef	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000f2	81 c1 84 04 00
	00		 add	 ecx, 1156		; 00000484H
  000f8	e8 00 00 00 00	 call	 ?size@?$list@PAEV?$allocator@PAE@std@@@std@@QBEIXZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::size
  000fd	39 45 ec	 cmp	 DWORD PTR _i$10[ebp], eax
  00100	73 52		 jae	 SHORT $LN6@CEndoScope

; 131  : 		{
; 132  : 			BYTE* data = m_pTaskList.front();

  00102	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00105	81 c1 84 04 00
	00		 add	 ecx, 1156		; 00000484H
  0010b	e8 00 00 00 00	 call	 ?front@?$list@PAEV?$allocator@PAE@std@@@std@@QAEAAPAEXZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::front
  00110	8b 00		 mov	 eax, DWORD PTR [eax]
  00112	89 45 e8	 mov	 DWORD PTR _data$9[ebp], eax

; 133  : 			delete[]data;

  00115	8b 4d e8	 mov	 ecx, DWORD PTR _data$9[ebp]
  00118	89 4d d8	 mov	 DWORD PTR $T5[ebp], ecx
  0011b	8b 55 d8	 mov	 edx, DWORD PTR $T5[ebp]
  0011e	52		 push	 edx
  0011f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??_V@YAXPAX@Z
  00125	83 c4 04	 add	 esp, 4
  00128	83 7d d8 00	 cmp	 DWORD PTR $T5[ebp], 0
  0012c	75 09		 jne	 SHORT $LN15@CEndoScope
  0012e	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR tv168[ebp], 0
  00135	eb 0d		 jmp	 SHORT $LN16@CEndoScope
$LN15@CEndoScope:
  00137	c7 45 e8 23 81
	00 00		 mov	 DWORD PTR _data$9[ebp], 33059 ; 00008123H
  0013e	8b 45 e8	 mov	 eax, DWORD PTR _data$9[ebp]
  00141	89 45 cc	 mov	 DWORD PTR tv168[ebp], eax
$LN16@CEndoScope:

; 134  : 			m_pTaskList.pop_front();

  00144	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00147	81 c1 84 04 00
	00		 add	 ecx, 1156		; 00000484H
  0014d	e8 00 00 00 00	 call	 ?pop_front@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXXZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::pop_front

; 135  : 		}

  00152	eb 92		 jmp	 SHORT $LN7@CEndoScope
$LN6@CEndoScope:

; 136  : 		m_pTaskList.clear();

  00154	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00157	81 c1 84 04 00
	00		 add	 ecx, 1156		; 00000484H
  0015d	e8 00 00 00 00	 call	 ?clear@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXXZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::clear
$LN9@CEndoScope:

; 137  : 	}
; 138  : 	if (!m_pPicList.empty())

  00162	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00165	81 c1 8c 04 00
	00		 add	 ecx, 1164		; 0000048cH
  0016b	e8 00 00 00 00	 call	 ?empty@?$list@PAEV?$allocator@PAE@std@@@std@@QBE_NXZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::empty
  00170	0f b6 c8	 movzx	 ecx, al
  00173	85 c9		 test	 ecx, ecx
  00175	0f 85 85 00 00
	00		 jne	 $LN5@CEndoScope

; 139  : 	{
; 140  : 		for (int i=0;i<m_pPicList.size();++i)

  0017b	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$8[ebp], 0
  00182	eb 09		 jmp	 SHORT $LN4@CEndoScope
$LN3@CEndoScope:
  00184	8b 55 e4	 mov	 edx, DWORD PTR _i$8[ebp]
  00187	83 c2 01	 add	 edx, 1
  0018a	89 55 e4	 mov	 DWORD PTR _i$8[ebp], edx
$LN4@CEndoScope:
  0018d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00190	81 c1 8c 04 00
	00		 add	 ecx, 1164		; 0000048cH
  00196	e8 00 00 00 00	 call	 ?size@?$list@PAEV?$allocator@PAE@std@@@std@@QBEIXZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::size
  0019b	39 45 e4	 cmp	 DWORD PTR _i$8[ebp], eax
  0019e	73 52		 jae	 SHORT $LN2@CEndoScope

; 141  : 		{
; 142  : 			BYTE* data = m_pPicList.front();

  001a0	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001a3	81 c1 8c 04 00
	00		 add	 ecx, 1164		; 0000048cH
  001a9	e8 00 00 00 00	 call	 ?front@?$list@PAEV?$allocator@PAE@std@@@std@@QAEAAPAEXZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::front
  001ae	8b 00		 mov	 eax, DWORD PTR [eax]
  001b0	89 45 e0	 mov	 DWORD PTR _data$7[ebp], eax

; 143  : 			delete[]data;

  001b3	8b 4d e0	 mov	 ecx, DWORD PTR _data$7[ebp]
  001b6	89 4d d4	 mov	 DWORD PTR $T4[ebp], ecx
  001b9	8b 55 d4	 mov	 edx, DWORD PTR $T4[ebp]
  001bc	52		 push	 edx
  001bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??_V@YAXPAX@Z
  001c3	83 c4 04	 add	 esp, 4
  001c6	83 7d d4 00	 cmp	 DWORD PTR $T4[ebp], 0
  001ca	75 09		 jne	 SHORT $LN17@CEndoScope
  001cc	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR tv188[ebp], 0
  001d3	eb 0d		 jmp	 SHORT $LN18@CEndoScope
$LN17@CEndoScope:
  001d5	c7 45 e0 23 81
	00 00		 mov	 DWORD PTR _data$7[ebp], 33059 ; 00008123H
  001dc	8b 45 e0	 mov	 eax, DWORD PTR _data$7[ebp]
  001df	89 45 c8	 mov	 DWORD PTR tv188[ebp], eax
$LN18@CEndoScope:

; 144  : 			m_pPicList.pop_front();

  001e2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001e5	81 c1 8c 04 00
	00		 add	 ecx, 1164		; 0000048cH
  001eb	e8 00 00 00 00	 call	 ?pop_front@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXXZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::pop_front

; 145  : 		}

  001f0	eb 92		 jmp	 SHORT $LN3@CEndoScope
$LN2@CEndoScope:

; 146  : 		m_pPicList.clear();

  001f2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001f5	81 c1 8c 04 00
	00		 add	 ecx, 1164		; 0000048cH
  001fb	e8 00 00 00 00	 call	 ?clear@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXXZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::clear
$LN5@CEndoScope:

; 147  : 	}
; 148  : 	SAFE_DELETE(g_pPLC);

  00200	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pPLC@@3PAVCPLC@@A, 0 ; g_pPLC
  00207	74 3a		 je	 SHORT $LN1@CEndoScope
  00209	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0020f	89 4d c4	 mov	 DWORD PTR $T2[ebp], ecx
  00212	8b 55 c4	 mov	 edx, DWORD PTR $T2[ebp]
  00215	89 55 dc	 mov	 DWORD PTR $T6[ebp], edx
  00218	83 7d dc 00	 cmp	 DWORD PTR $T6[ebp], 0
  0021c	74 14		 je	 SHORT $LN19@CEndoScope
  0021e	6a 01		 push	 1
  00220	8b 45 dc	 mov	 eax, DWORD PTR $T6[ebp]
  00223	8b 10		 mov	 edx, DWORD PTR [eax]
  00225	8b 4d dc	 mov	 ecx, DWORD PTR $T6[ebp]
  00228	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0022b	ff d0		 call	 eax
  0022d	89 45 c0	 mov	 DWORD PTR tv200[ebp], eax
  00230	eb 07		 jmp	 SHORT $LN20@CEndoScope
$LN19@CEndoScope:
  00232	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR tv200[ebp], 0
$LN20@CEndoScope:
  00239	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_pPLC@@3PAVCPLC@@A, 0 ; g_pPLC
$LN1@CEndoScope:

; 149  : 	g_bprocthread=false;

  00243	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?g_bprocthread@@3_NA, 0 ; g_bprocthread

; 150  : 	CloseHandle(m_hthreadprocess);

  0024a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0024d	8b 91 c4 01 00
	00		 mov	 edx, DWORD PTR [ecx+452]
  00253	52		 push	 edx
  00254	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 151  : 
; 152  : }

  0025a	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  0025e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00261	81 c1 94 04 00
	00		 add	 ecx, 1172		; 00000494H
  00267	e8 00 00 00 00	 call	 ??1?$list@PAEV?$allocator@PAE@std@@@std@@QAE@XZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::~list<unsigned char *,std::allocator<unsigned char *> >
  0026c	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  00270	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00273	81 c1 8c 04 00
	00		 add	 ecx, 1164		; 0000048cH
  00279	e8 00 00 00 00	 call	 ??1?$list@PAEV?$allocator@PAE@std@@@std@@QAE@XZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::~list<unsigned char *,std::allocator<unsigned char *> >
  0027e	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  00282	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00285	81 c1 84 04 00
	00		 add	 ecx, 1156		; 00000484H
  0028b	e8 00 00 00 00	 call	 ??1?$list@PAEV?$allocator@PAE@std@@@std@@QAE@XZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::~list<unsigned char *,std::allocator<unsigned char *> >
  00290	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  00294	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00297	81 c1 2c 04 00
	00		 add	 ecx, 1068		; 0000042cH
  0029d	e8 00 00 00 00	 call	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
  002a2	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  002a6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  002a9	81 c1 f4 03 00
	00		 add	 ecx, 1012		; 000003f4H
  002af	e8 00 00 00 00	 call	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
  002b4	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  002b8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  002bb	81 c1 bc 03 00
	00		 add	 ecx, 956		; 000003bcH
  002c1	e8 00 00 00 00	 call	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
  002c6	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  002ca	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  002cd	81 c1 f0 02 00
	00		 add	 ecx, 752		; 000002f0H
  002d3	e8 00 00 00 00	 call	 ??1CAboutDlg@@UAE@XZ
  002d8	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  002dc	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  002df	81 c1 18 02 00
	00		 add	 ecx, 536		; 00000218H
  002e5	e8 00 00 00 00	 call	 ??1CEDSCapture@@UAE@XZ	; CEDSCapture::~CEDSCapture
  002ea	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  002ee	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  002f1	81 c1 e8 01 00
	00		 add	 ecx, 488		; 000001e8H
  002f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1VideoWriter@cv@@UAE@XZ
  002fd	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00301	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00304	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  0030a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00310	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00314	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00317	81 c1 a8 01 00
	00		 add	 ecx, 424		; 000001a8H
  0031d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00323	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00327	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0032a	81 c1 70 01 00
	00		 add	 ecx, 368		; 00000170H
  00330	e8 00 00 00 00	 call	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
  00335	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00339	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0033c	81 c1 bc 00 00
	00		 add	 ecx, 188		; 000000bcH
  00342	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CStatic@@UAE@XZ
  00348	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0034f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00352	e8 00 00 00 00	 call	 ??1CDialogEx@@UAE@XZ
  00357	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0035a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00361	59		 pop	 ecx
  00362	8b e5		 mov	 esp, ebp
  00364	5d		 pop	 ebp
  00365	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CEndoScopeMFCDlg@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CDialogEx@@UAE@XZ
__unwindfunclet$??1CEndoScopeMFCDlg@@UAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 bc 00 00
	00		 add	 ecx, 188		; 000000bcH
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CStatic@@UAE@XZ
__unwindfunclet$??1CEndoScopeMFCDlg@@UAE@XZ$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 70 01 00
	00		 add	 ecx, 368		; 00000170H
  00020	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__unwindfunclet$??1CEndoScopeMFCDlg@@UAE@XZ$3:
  00025	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	81 c1 a8 01 00
	00		 add	 ecx, 424		; 000001a8H
  0002e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$??1CEndoScopeMFCDlg@@UAE@XZ$4:
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  0003d	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$??1CEndoScopeMFCDlg@@UAE@XZ$5:
  00043	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	81 c1 e8 01 00
	00		 add	 ecx, 488		; 000001e8H
  0004c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1VideoWriter@cv@@UAE@XZ
__unwindfunclet$??1CEndoScopeMFCDlg@@UAE@XZ$6:
  00052	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	81 c1 18 02 00
	00		 add	 ecx, 536		; 00000218H
  0005b	e9 00 00 00 00	 jmp	 ??1CEDSCapture@@UAE@XZ	; CEDSCapture::~CEDSCapture
__unwindfunclet$??1CEndoScopeMFCDlg@@UAE@XZ$7:
  00060	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	81 c1 f0 02 00
	00		 add	 ecx, 752		; 000002f0H
  00069	e9 00 00 00 00	 jmp	 ??1CAboutDlg@@UAE@XZ
__unwindfunclet$??1CEndoScopeMFCDlg@@UAE@XZ$8:
  0006e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	81 c1 bc 03 00
	00		 add	 ecx, 956		; 000003bcH
  00077	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__unwindfunclet$??1CEndoScopeMFCDlg@@UAE@XZ$9:
  0007c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	81 c1 f4 03 00
	00		 add	 ecx, 1012		; 000003f4H
  00085	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__unwindfunclet$??1CEndoScopeMFCDlg@@UAE@XZ$10:
  0008a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	81 c1 2c 04 00
	00		 add	 ecx, 1068		; 0000042cH
  00093	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__unwindfunclet$??1CEndoScopeMFCDlg@@UAE@XZ$11:
  00098	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	81 c1 84 04 00
	00		 add	 ecx, 1156		; 00000484H
  000a1	e9 00 00 00 00	 jmp	 ??1?$list@PAEV?$allocator@PAE@std@@@std@@QAE@XZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::~list<unsigned char *,std::allocator<unsigned char *> >
__unwindfunclet$??1CEndoScopeMFCDlg@@UAE@XZ$12:
  000a6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a9	81 c1 8c 04 00
	00		 add	 ecx, 1164		; 0000048cH
  000af	e9 00 00 00 00	 jmp	 ??1?$list@PAEV?$allocator@PAE@std@@@std@@QAE@XZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::~list<unsigned char *,std::allocator<unsigned char *> >
__unwindfunclet$??1CEndoScopeMFCDlg@@UAE@XZ$13:
  000b4	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b7	81 c1 94 04 00
	00		 add	 ecx, 1172		; 00000494H
  000bd	e9 00 00 00 00	 jmp	 ??1?$list@PAEV?$allocator@PAE@std@@@std@@QAE@XZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::~list<unsigned char *,std::allocator<unsigned char *> >
__ehhandler$??1CEndoScopeMFCDlg@@UAE@XZ:
  000c2	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000c6	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000c9	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  000cc	33 c8		 xor	 ecx, eax
  000ce	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d3	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CEndoScopeMFCDlg@@UAE@XZ
  000d8	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CEndoScopeMFCDlg@@UAE@XZ ENDP			; CEndoScopeMFCDlg::~CEndoScopeMFCDlg
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pParent$ = 8						; size = 4
??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z PROC		; CEndoScopeMFCDlg::CEndoScopeMFCDlg, COMDAT
; _this$ = ecx

; 102  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	8b 45 08	 mov	 eax, DWORD PTR _pParent$[ebp]
  00029	50		 push	 eax
  0002a	6a 66		 push	 102			; 00000066H
  0002c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CDialogEx@@QAE@IPAVCWnd@@@Z
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CEndoScopeMFCDlg@@6B@
  00045	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	81 c1 bc 00 00
	00		 add	 ecx, 188		; 000000bcH
  0004e	e8 00 00 00 00	 call	 ??0CStatic@@QAE@XZ	; CStatic::CStatic
  00053	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00057	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	81 c1 34 01 00
	00		 add	 ecx, 308		; 00000134H
  00060	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect
  00065	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	81 c1 58 01 00
	00		 add	 ecx, 344		; 00000158H
  0006e	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect
  00073	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	81 c1 70 01 00
	00		 add	 ecx, 368		; 00000170H
  0007c	e8 00 00 00 00	 call	 ??0Mat@cv@@QAE@XZ	; cv::Mat::Mat
  00081	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00085	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	81 c1 a8 01 00
	00		 add	 ecx, 424		; 000001a8H
  0008e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00094	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00098	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000a7	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  000ab	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ae	81 c1 e8 01 00
	00		 add	 ecx, 488		; 000001e8H
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0VideoWriter@cv@@QAE@XZ
  000ba	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  000be	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	81 c1 18 02 00
	00		 add	 ecx, 536		; 00000218H
  000c7	e8 00 00 00 00	 call	 ??0CEDSCapture@@QAE@XZ	; CEDSCapture::CEDSCapture
  000cc	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  000d0	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d3	81 c1 f0 02 00
	00		 add	 ecx, 752		; 000002f0H
  000d9	e8 00 00 00 00	 call	 ??0CAboutDlg@@QAE@XZ	; CAboutDlg::CAboutDlg
  000de	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  000e2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000e5	81 c1 bc 03 00
	00		 add	 ecx, 956		; 000003bcH
  000eb	e8 00 00 00 00	 call	 ??0Mat@cv@@QAE@XZ	; cv::Mat::Mat
  000f0	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  000f4	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000f7	81 c1 f4 03 00
	00		 add	 ecx, 1012		; 000003f4H
  000fd	e8 00 00 00 00	 call	 ??0Mat@cv@@QAE@XZ	; cv::Mat::Mat
  00102	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  00106	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00109	81 c1 2c 04 00
	00		 add	 ecx, 1068		; 0000042cH
  0010f	e8 00 00 00 00	 call	 ??0Mat@cv@@QAE@XZ	; cv::Mat::Mat
  00114	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  00118	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0011b	81 c1 84 04 00
	00		 add	 ecx, 1156		; 00000484H
  00121	e8 00 00 00 00	 call	 ??0?$list@PAEV?$allocator@PAE@std@@@std@@QAE@XZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::list<unsigned char *,std::allocator<unsigned char *> >
  00126	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  0012a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0012d	81 c1 8c 04 00
	00		 add	 ecx, 1164		; 0000048cH
  00133	e8 00 00 00 00	 call	 ??0?$list@PAEV?$allocator@PAE@std@@@std@@QAE@XZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::list<unsigned char *,std::allocator<unsigned char *> >
  00138	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  0013c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0013f	81 c1 94 04 00
	00		 add	 ecx, 1172		; 00000494H
  00145	e8 00 00 00 00	 call	 ??0?$list@PAEV?$allocator@PAE@std@@@std@@QAE@XZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::list<unsigned char *,std::allocator<unsigned char *> >
  0014a	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH

; 103  : 	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);

  0014e	68 80 00 00 00	 push	 128			; 00000080H
  00153	e8 00 00 00 00	 call	 ?AfxGetApp@@YGPAVCWinApp@@XZ ; AfxGetApp
  00158	8b c8		 mov	 ecx, eax
  0015a	e8 00 00 00 00	 call	 ?LoadIconA@CWinApp@@QBEPAUHICON__@@I@Z ; CWinApp::LoadIconA
  0015f	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00162	89 82 30 01 00
	00		 mov	 DWORD PTR [edx+304], eax

; 104  : }

  00168	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0016f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00172	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00175	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0017c	59		 pop	 ecx
  0017d	8b e5		 mov	 esp, ebp
  0017f	5d		 pop	 ebp
  00180	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CDialogEx@@UAE@XZ
__unwindfunclet$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 bc 00 00
	00		 add	 ecx, 188		; 000000bcH
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CStatic@@UAE@XZ
__unwindfunclet$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 70 01 00
	00		 add	 ecx, 368		; 00000170H
  00020	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__unwindfunclet$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z$3:
  00025	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	81 c1 a8 01 00
	00		 add	 ecx, 424		; 000001a8H
  0002e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z$4:
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  0003d	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z$5:
  00043	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	81 c1 e8 01 00
	00		 add	 ecx, 488		; 000001e8H
  0004c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1VideoWriter@cv@@UAE@XZ
__unwindfunclet$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z$6:
  00052	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	81 c1 18 02 00
	00		 add	 ecx, 536		; 00000218H
  0005b	e9 00 00 00 00	 jmp	 ??1CEDSCapture@@UAE@XZ	; CEDSCapture::~CEDSCapture
__unwindfunclet$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z$7:
  00060	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	81 c1 f0 02 00
	00		 add	 ecx, 752		; 000002f0H
  00069	e9 00 00 00 00	 jmp	 ??1CAboutDlg@@UAE@XZ
__unwindfunclet$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z$8:
  0006e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	81 c1 bc 03 00
	00		 add	 ecx, 956		; 000003bcH
  00077	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__unwindfunclet$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z$9:
  0007c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	81 c1 f4 03 00
	00		 add	 ecx, 1012		; 000003f4H
  00085	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__unwindfunclet$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z$10:
  0008a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	81 c1 2c 04 00
	00		 add	 ecx, 1068		; 0000042cH
  00093	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__unwindfunclet$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z$11:
  00098	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	81 c1 84 04 00
	00		 add	 ecx, 1156		; 00000484H
  000a1	e9 00 00 00 00	 jmp	 ??1?$list@PAEV?$allocator@PAE@std@@@std@@QAE@XZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::~list<unsigned char *,std::allocator<unsigned char *> >
__unwindfunclet$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z$12:
  000a6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a9	81 c1 8c 04 00
	00		 add	 ecx, 1164		; 0000048cH
  000af	e9 00 00 00 00	 jmp	 ??1?$list@PAEV?$allocator@PAE@std@@@std@@QAE@XZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::~list<unsigned char *,std::allocator<unsigned char *> >
__unwindfunclet$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z$13:
  000b4	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b7	81 c1 94 04 00
	00		 add	 ecx, 1172		; 00000494H
  000bd	e9 00 00 00 00	 jmp	 ??1?$list@PAEV?$allocator@PAE@std@@@std@@QAE@XZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::~list<unsigned char *,std::allocator<unsigned char *> >
__ehhandler$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z:
  000c2	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000c6	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000c9	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  000cc	33 c8		 xor	 ecx, eax
  000ce	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d3	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z
  000d8	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CEndoScopeMFCDlg@@QAE@PAVCWnd@@@Z ENDP		; CEndoScopeMFCDlg::CEndoScopeMFCDlg
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\cvstd.hpp
;	COMDAT ??0String@cv@@QAE@PBD@Z
_TEXT	SEGMENT
tv69 = -24						; size = 4
tv82 = -20						; size = 4
_len$ = -16						; size = 4
_this$ = -12						; size = 4
tv79 = -8						; size = 4
tv85 = -1						; size = 1
_s$ = 8							; size = 4
??0String@cv@@QAE@PBD@Z PROC				; cv::String::String, COMDAT
; _this$ = ecx

; 619  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00012	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 620  :     if (!s) return;

  0001c	83 7d 08 00	 cmp	 DWORD PTR _s$[ebp], 0
  00020	75 02		 jne	 SHORT $LN1@String
  00022	eb 4e		 jmp	 SHORT $LN2@String
$LN1@String:

; 621  :     size_t len = strlen(s);

  00024	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00027	89 55 f8	 mov	 DWORD PTR tv79[ebp], edx
  0002a	8b 45 f8	 mov	 eax, DWORD PTR tv79[ebp]
  0002d	83 c0 01	 add	 eax, 1
  00030	89 45 ec	 mov	 DWORD PTR tv82[ebp], eax
$LL4@String:
  00033	8b 4d f8	 mov	 ecx, DWORD PTR tv79[ebp]
  00036	8a 11		 mov	 dl, BYTE PTR [ecx]
  00038	88 55 ff	 mov	 BYTE PTR tv85[ebp], dl
  0003b	83 45 f8 01	 add	 DWORD PTR tv79[ebp], 1
  0003f	80 7d ff 00	 cmp	 BYTE PTR tv85[ebp], 0
  00043	75 ee		 jne	 SHORT $LL4@String
  00045	8b 45 f8	 mov	 eax, DWORD PTR tv79[ebp]
  00048	2b 45 ec	 sub	 eax, DWORD PTR tv82[ebp]
  0004b	89 45 e8	 mov	 DWORD PTR tv69[ebp], eax
  0004e	8b 4d e8	 mov	 ecx, DWORD PTR tv69[ebp]
  00051	89 4d f0	 mov	 DWORD PTR _len$[ebp], ecx

; 622  :     memcpy(allocate(len), s, len);

  00054	8b 55 f0	 mov	 edx, DWORD PTR _len$[ebp]
  00057	52		 push	 edx
  00058	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0005b	50		 push	 eax
  0005c	8b 4d f0	 mov	 ecx, DWORD PTR _len$[ebp]
  0005f	51		 push	 ecx
  00060	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?allocate@String@cv@@AAEPADI@Z
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 _memcpy
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@String:

; 623  : }

  00072	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 04 00	 ret	 4
??0String@cv@@QAE@PBD@Z ENDP				; cv::String::String
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\cvstd.hpp
;	COMDAT ??1String@cv@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1String@cv@@QAE@XZ PROC				; cv::String::~String, COMDAT
; _this$ = ecx

; 663  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 664  :     deallocate();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?deallocate@String@cv@@AAEXXZ

; 665  : }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??1String@cv@@QAE@XZ ENDP				; cv::String::~String
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ?init@_InputArray@cv@@IAEXHPBX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__flags$ = 8						; size = 4
__obj$ = 12						; size = 4
?init@_InputArray@cv@@IAEXHPBX@Z PROC			; cv::_InputArray::init, COMDAT
; _this$ = ecx

; 60   : { flags = _flags; obj = (void*)_obj; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __flags$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR __obj$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?init@_InputArray@cv@@IAEXHPBX@Z ENDP			; cv::_InputArray::init
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ?init@_InputArray@cv@@IAEXHPBXV?$Size_@H@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__flags$ = 8						; size = 4
__obj$ = 12						; size = 4
__sz$ = 16						; size = 8
?init@_InputArray@cv@@IAEXHPBXV?$Size_@H@2@@Z PROC	; cv::_InputArray::init, COMDAT
; _this$ = ecx

; 63   : { flags = _flags; obj = (void*)_obj; sz = _sz; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __flags$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR __obj$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8d 4d 10	 lea	 ecx, DWORD PTR __sz$[ebp]
  0001b	51		 push	 ecx
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 08	 add	 ecx, 8
  00022	e8 00 00 00 00	 call	 ??4?$Size_@H@cv@@QAEAAV01@ABV01@@Z ; cv::Size_<int>::operator=
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 10 00	 ret	 16			; 00000010H
?init@_InputArray@cv@@IAEXHPBXV?$Size_@H@2@@Z ENDP	; cv::_InputArray::init
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??0_InputArray@cv@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_InputArray@cv@@QAE@XZ PROC				; cv::_InputArray::_InputArray, COMDAT
; _this$ = ecx

; 69   : inline _InputArray::_InputArray() { init(NONE, 0); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 08	 add	 ecx, 8
  0000d	e8 00 00 00 00	 call	 ??0?$Size_@H@cv@@QAE@XZ	; cv::Size_<int>::Size_<int>
  00012	6a 00		 push	 0
  00014	6a 00		 push	 0
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?init@_InputArray@cv@@IAEXHPBX@Z ; cv::_InputArray::init
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??0_InputArray@cv@@QAE@XZ ENDP				; cv::_InputArray::_InputArray
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??0_InputArray@cv@@QAE@ABVMat@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??0_InputArray@cv@@QAE@ABVMat@1@@Z PROC			; cv::_InputArray::_InputArray, COMDAT
; _this$ = ecx

; 71   : inline _InputArray::_InputArray(const Mat& m) { init(MAT+ACCESS_READ, &m); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 08	 add	 ecx, 8
  0000d	e8 00 00 00 00	 call	 ??0?$Size_@H@cv@@QAE@XZ	; cv::Size_<int>::Size_<int>
  00012	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  00015	50		 push	 eax
  00016	68 00 00 01 01	 push	 16842752		; 01010000H
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?init@_InputArray@cv@@IAEXHPBX@Z ; cv::_InputArray::init
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
??0_InputArray@cv@@QAE@ABVMat@1@@Z ENDP			; cv::_InputArray::_InputArray
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??1_InputArray@cv@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_InputArray@cv@@QAE@XZ PROC				; cv::_InputArray::~_InputArray, COMDAT
; _this$ = ecx

; 122  : inline _InputArray::~_InputArray() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??1_InputArray@cv@@QAE@XZ ENDP				; cv::_InputArray::~_InputArray
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??0_OutputArray@cv@@QAE@AAVMat@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_m$ = 8							; size = 4
??0_OutputArray@cv@@QAE@AAVMat@1@@Z PROC		; cv::_OutputArray::_OutputArray, COMDAT
; _this$ = ecx

; 143  : inline _OutputArray::_OutputArray(Mat& m) { init(MAT+ACCESS_WRITE, &m); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0_OutputArray@cv@@QAE@AAVMat@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ??0_InputArray@cv@@QAE@XZ ; cv::_InputArray::_InputArray
  0002e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00035	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  00038	50		 push	 eax
  00039	68 00 00 01 02	 push	 33619968		; 02010000H
  0003e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	e8 00 00 00 00	 call	 ?init@_InputArray@cv@@IAEXHPBX@Z ; cv::_InputArray::init
  00046	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_OutputArray@cv@@QAE@AAVMat@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
__ehhandler$??0_OutputArray@cv@@QAE@AAVMat@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_OutputArray@cv@@QAE@AAVMat@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_OutputArray@cv@@QAE@AAVMat@1@@Z ENDP		; cv::_OutputArray::_OutputArray
; Function compile flags: /Odtp
;	COMDAT ??1_OutputArray@cv@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_OutputArray@cv@@QAE@XZ PROC				; cv::_OutputArray::~_OutputArray, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1_OutputArray@cv@@QAE@XZ ENDP				; cv::_OutputArray::~_OutputArray
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??0Mat@cv@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Mat@cv@@QAE@XZ PROC					; cv::Mat::Mat, COMDAT
; _this$ = ecx

; 336  : {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 ff
	42		 mov	 DWORD PTR [eax], 1124007936 ; 42ff0000H
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00038	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0
  00042	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00045	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0
  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
  00056	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00059	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0
  00060	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00063	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0
  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	83 c1 08	 add	 ecx, 8
  00070	51		 push	 ecx
  00071	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	83 c1 28	 add	 ecx, 40			; 00000028H
  00077	e8 00 00 00 00	 call	 ??0MatSize@cv@@QAE@PAH@Z ; cv::MatSize::MatSize
  0007c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00082	e8 00 00 00 00	 call	 ??0MatStep@cv@@QAE@XZ	; cv::MatStep::MatStep
  00087	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
??0Mat@cv@@QAE@XZ ENDP					; cv::Mat::Mat
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??0Mat@cv@@QAE@HHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__rows$ = 8						; size = 4
__cols$ = 12						; size = 4
__type$ = 16						; size = 4
??0Mat@cv@@QAE@HHH@Z PROC				; cv::Mat::Mat, COMDAT
; _this$ = ecx

; 342  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 ff
	42		 mov	 DWORD PTR [eax], 1124007936 ; 42ff0000H
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00038	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0
  00042	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00045	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0
  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
  00056	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00059	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0
  00060	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00063	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0
  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	83 c1 08	 add	 ecx, 8
  00070	51		 push	 ecx
  00071	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	83 c1 28	 add	 ecx, 40			; 00000028H
  00077	e8 00 00 00 00	 call	 ??0MatSize@cv@@QAE@PAH@Z ; cv::MatSize::MatSize
  0007c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00082	e8 00 00 00 00	 call	 ??0MatStep@cv@@QAE@XZ	; cv::MatStep::MatStep

; 343  :     create(_rows, _cols, _type);

  00087	8b 55 10	 mov	 edx, DWORD PTR __type$[ebp]
  0008a	52		 push	 edx
  0008b	8b 45 0c	 mov	 eax, DWORD PTR __cols$[ebp]
  0008e	50		 push	 eax
  0008f	8b 4d 08	 mov	 ecx, DWORD PTR __rows$[ebp]
  00092	51		 push	 ecx
  00093	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	e8 00 00 00 00	 call	 ?create@Mat@cv@@QAEXHHH@Z ; cv::Mat::create

; 344  : }

  0009b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 0c 00	 ret	 12			; 0000000cH
??0Mat@cv@@QAE@HHH@Z ENDP				; cv::Mat::Mat
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??0Mat@cv@@QAE@V?$Size_@H@1@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__sz$ = 8						; size = 8
__type$ = 16						; size = 4
??0Mat@cv@@QAE@V?$Size_@H@1@H@Z PROC			; cv::Mat::Mat, COMDAT
; _this$ = ecx

; 359  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 ff
	42		 mov	 DWORD PTR [eax], 1124007936 ; 42ff0000H
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00038	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0
  00042	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00045	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0
  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
  00056	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00059	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0
  00060	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00063	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0
  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	83 c1 08	 add	 ecx, 8
  00070	51		 push	 ecx
  00071	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	83 c1 28	 add	 ecx, 40			; 00000028H
  00077	e8 00 00 00 00	 call	 ??0MatSize@cv@@QAE@PAH@Z ; cv::MatSize::MatSize
  0007c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00082	e8 00 00 00 00	 call	 ??0MatStep@cv@@QAE@XZ	; cv::MatStep::MatStep

; 360  :     create( _sz.height, _sz.width, _type );

  00087	8b 55 10	 mov	 edx, DWORD PTR __type$[ebp]
  0008a	52		 push	 edx
  0008b	8b 45 08	 mov	 eax, DWORD PTR __sz$[ebp]
  0008e	50		 push	 eax
  0008f	8b 4d 0c	 mov	 ecx, DWORD PTR __sz$[ebp+4]
  00092	51		 push	 ecx
  00093	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	e8 00 00 00 00	 call	 ?create@Mat@cv@@QAEXHHH@Z ; cv::Mat::create

; 361  : }

  0009b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 0c 00	 ret	 12			; 0000000cH
??0Mat@cv@@QAE@V?$Size_@H@1@H@Z ENDP			; cv::Mat::Mat
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??0Mat@cv@@QAE@HHHPAXI@Z
_TEXT	SEGMENT
$T2 = -48						; size = 8
$T3 = -40						; size = 8
_esz1$ = -32						; size = 4
_esz$ = -28						; size = 4
tv161 = -24						; size = 4
_minstep$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__rows$ = 8						; size = 4
__cols$ = 12						; size = 4
__type$ = 16						; size = 4
__data$ = 20						; size = 4
__step$ = 24						; size = 4
??0Mat@cv@@QAE@HHHPAXI@Z PROC				; cv::Mat::Mat, COMDAT
; _this$ = ecx

; 430  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Mat@cv@@QAE@HHHPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00028	8b 45 10	 mov	 eax, DWORD PTR __type$[ebp]
  0002b	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00030	05 00 00 ff 42	 add	 eax, 1124007936		; 42ff0000H
  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	89 01		 mov	 DWORD PTR [ecx], eax
  0003a	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	c7 42 04 02 00
	00 00		 mov	 DWORD PTR [edx+4], 2
  00044	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 4d 08	 mov	 ecx, DWORD PTR __rows$[ebp]
  0004a	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0004d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00050	8b 45 0c	 mov	 eax, DWORD PTR __cols$[ebp]
  00053	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  00056	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	8b 55 14	 mov	 edx, DWORD PTR __data$[ebp]
  0005c	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  0005f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00062	8b 4d 14	 mov	 ecx, DWORD PTR __data$[ebp]
  00065	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  00068	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0006b	c7 42 18 00 00
	00 00		 mov	 DWORD PTR [edx+24], 0
  00072	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00075	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
  0007c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0
  00086	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00089	c7 42 24 00 00
	00 00		 mov	 DWORD PTR [edx+36], 0
  00090	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00093	83 c0 08	 add	 eax, 8
  00096	50		 push	 eax
  00097	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009a	83 c1 28	 add	 ecx, 40			; 00000028H
  0009d	e8 00 00 00 00	 call	 ??0MatSize@cv@@QAE@PAH@Z ; cv::MatSize::MatSize
  000a2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a5	83 c1 2c	 add	 ecx, 44			; 0000002cH
  000a8	e8 00 00 00 00	 call	 ??0MatStep@cv@@QAE@XZ	; cv::MatStep::MatStep

; 431  :     CV_Assert(total() == 0 || data != NULL);

  000ad	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b0	e8 00 00 00 00	 call	 ?total@Mat@cv@@QBEIXZ	; cv::Mat::total
  000b5	85 c0		 test	 eax, eax
  000b7	74 09		 je	 SHORT $LN6@Mat
  000b9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000bc	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  000c0	74 02		 je	 SHORT $LN7@Mat
$LN6@Mat:
  000c2	eb 44		 jmp	 SHORT $LN5@Mat
$LN7@Mat:
  000c4	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@EEFOKAEN@total?$CI?$CJ?5?$DN?$DN?50?5?$HM?$HM?5data?5?$CB?$DN?5NULL?$AA@
  000c9	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  000cc	e8 00 00 00 00	 call	 ??0String@cv@@QAE@PBD@Z	; cv::String::String
  000d1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000d8	68 af 01 00 00	 push	 431			; 000001afH
  000dd	68 00 00 00 00	 push	 OFFSET ??_C@_0IH@JPKEFHEF@E?3?2work_wm?2HXIJY_code?2endoscopem@
  000e2	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DDCCIDDE@cv?3?3Mat?3?3Mat?$AA@
  000e7	8d 55 d8	 lea	 edx, DWORD PTR $T3[ebp]
  000ea	52		 push	 edx
  000eb	68 29 ff ff ff	 push	 -215			; ffffff29H
  000f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?error@cv@@YAXHABVString@1@PBD1H@Z
  000f6	83 c4 14	 add	 esp, 20			; 00000014H
  000f9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00100	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00103	e8 00 00 00 00	 call	 ??1String@cv@@QAE@XZ	; cv::String::~String
$LN5@Mat:

; 432  : 
; 433  :     size_t esz = CV_ELEM_SIZE(_type), esz1 = CV_ELEM_SIZE1(_type);

  00108	8b 45 10	 mov	 eax, DWORD PTR __type$[ebp]
  0010b	25 f8 0f 00 00	 and	 eax, 4088		; 00000ff8H
  00110	c1 f8 03	 sar	 eax, 3
  00113	83 c0 01	 add	 eax, 1
  00116	8b 4d 10	 mov	 ecx, DWORD PTR __type$[ebp]
  00119	83 e1 07	 and	 ecx, 7
  0011c	d1 e1		 shl	 ecx, 1
  0011e	ba 50 ba 00 00	 mov	 edx, 47696		; 0000ba50H
  00123	d3 ea		 shr	 edx, cl
  00125	83 e2 03	 and	 edx, 3
  00128	8b ca		 mov	 ecx, edx
  0012a	d3 e0		 shl	 eax, cl
  0012c	89 45 e4	 mov	 DWORD PTR _esz$[ebp], eax
  0012f	8b 4d 10	 mov	 ecx, DWORD PTR __type$[ebp]
  00132	83 e1 07	 and	 ecx, 7
  00135	c1 e1 02	 shl	 ecx, 2
  00138	b8 11 22 44 48	 mov	 eax, 1212424721		; 48442211H
  0013d	d3 e8		 shr	 eax, cl
  0013f	83 e0 0f	 and	 eax, 15			; 0000000fH
  00142	89 45 e0	 mov	 DWORD PTR _esz1$[ebp], eax

; 434  :     size_t minstep = cols * esz;

  00145	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00148	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0014b	0f af 55 e4	 imul	 edx, DWORD PTR _esz$[ebp]
  0014f	89 55 ec	 mov	 DWORD PTR _minstep$[ebp], edx

; 435  :     if( _step == AUTO_STEP )

  00152	83 7d 18 00	 cmp	 DWORD PTR __step$[ebp], 0
  00156	75 1b		 jne	 SHORT $LN4@Mat

; 436  :     {
; 437  :         _step = minstep;

  00158	8b 45 ec	 mov	 eax, DWORD PTR _minstep$[ebp]
  0015b	89 45 18	 mov	 DWORD PTR __step$[ebp], eax

; 438  :         flags |= CONTINUOUS_FLAG;

  0015e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00161	8b 11		 mov	 edx, DWORD PTR [ecx]
  00163	81 ca 00 40 00
	00		 or	 edx, 16384		; 00004000H
  00169	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0016c	89 10		 mov	 DWORD PTR [eax], edx

; 439  :     }
; 440  :     else

  0016e	e9 81 00 00 00	 jmp	 $LN3@Mat
$LN4@Mat:

; 441  :     {
; 442  :         if( rows == 1 ) _step = minstep;

  00173	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00176	83 79 08 01	 cmp	 DWORD PTR [ecx+8], 1
  0017a	75 06		 jne	 SHORT $LN2@Mat
  0017c	8b 55 ec	 mov	 edx, DWORD PTR _minstep$[ebp]
  0017f	89 55 18	 mov	 DWORD PTR __step$[ebp], edx
$LN2@Mat:

; 443  :         CV_DbgAssert( _step >= minstep );
; 444  : 
; 445  :         if (_step % esz1 != 0)

  00182	8b 45 18	 mov	 eax, DWORD PTR __step$[ebp]
  00185	33 d2		 xor	 edx, edx
  00187	f7 75 e0	 div	 DWORD PTR _esz1$[ebp]
  0018a	85 d2		 test	 edx, edx
  0018c	74 41		 je	 SHORT $LN1@Mat

; 446  :         {
; 447  :             CV_Error(Error::BadStep, "Step must be a multiple of esz1");

  0018e	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@LBFJDOIG@Step?5must?5be?5a?5multiple?5of?5esz1?$AA@
  00193	8d 4d d0	 lea	 ecx, DWORD PTR $T2[ebp]
  00196	e8 00 00 00 00	 call	 ??0String@cv@@QAE@PBD@Z	; cv::String::String
  0019b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  001a2	68 bf 01 00 00	 push	 447			; 000001bfH
  001a7	68 00 00 00 00	 push	 OFFSET ??_C@_0IH@JPKEFHEF@E?3?2work_wm?2HXIJY_code?2endoscopem@
  001ac	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DDCCIDDE@cv?3?3Mat?3?3Mat?$AA@
  001b1	8d 45 d0	 lea	 eax, DWORD PTR $T2[ebp]
  001b4	50		 push	 eax
  001b5	6a f3		 push	 -13			; fffffff3H
  001b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?error@cv@@YAXHABVString@1@PBD1H@Z
  001bd	83 c4 14	 add	 esp, 20			; 00000014H
  001c0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001c7	8d 4d d0	 lea	 ecx, DWORD PTR $T2[ebp]
  001ca	e8 00 00 00 00	 call	 ??1String@cv@@QAE@XZ	; cv::String::~String
$LN1@Mat:

; 448  :         }
; 449  : 
; 450  :         flags |= _step == minstep ? CONTINUOUS_FLAG : 0;

  001cf	8b 4d 18	 mov	 ecx, DWORD PTR __step$[ebp]
  001d2	3b 4d ec	 cmp	 ecx, DWORD PTR _minstep$[ebp]
  001d5	75 09		 jne	 SHORT $LN10@Mat
  001d7	c7 45 e8 00 40
	00 00		 mov	 DWORD PTR tv161[ebp], 16384 ; 00004000H
  001de	eb 07		 jmp	 SHORT $LN11@Mat
$LN10@Mat:
  001e0	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv161[ebp], 0
$LN11@Mat:
  001e7	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  001ea	8b 02		 mov	 eax, DWORD PTR [edx]
  001ec	0b 45 e8	 or	 eax, DWORD PTR tv161[ebp]
  001ef	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001f2	89 01		 mov	 DWORD PTR [ecx], eax
$LN3@Mat:

; 451  :     }
; 452  :     step[0] = _step;

  001f4	6a 00		 push	 0
  001f6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001f9	83 c1 2c	 add	 ecx, 44			; 0000002cH
  001fc	e8 00 00 00 00	 call	 ??AMatStep@cv@@QAEAAIH@Z ; cv::MatStep::operator[]
  00201	8b 55 18	 mov	 edx, DWORD PTR __step$[ebp]
  00204	89 10		 mov	 DWORD PTR [eax], edx

; 453  :     step[1] = esz;

  00206	6a 01		 push	 1
  00208	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0020b	83 c1 2c	 add	 ecx, 44			; 0000002cH
  0020e	e8 00 00 00 00	 call	 ??AMatStep@cv@@QAEAAIH@Z ; cv::MatStep::operator[]
  00213	8b 4d e4	 mov	 ecx, DWORD PTR _esz$[ebp]
  00216	89 08		 mov	 DWORD PTR [eax], ecx

; 454  :     datalimit = datastart + _step * rows;

  00218	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0021b	8b 45 18	 mov	 eax, DWORD PTR __step$[ebp]
  0021e	0f af 42 08	 imul	 eax, DWORD PTR [edx+8]
  00222	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00225	03 41 14	 add	 eax, DWORD PTR [ecx+20]
  00228	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0022b	89 42 1c	 mov	 DWORD PTR [edx+28], eax

; 455  :     dataend = datalimit - _step + minstep;

  0022e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00231	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00234	2b 4d 18	 sub	 ecx, DWORD PTR __step$[ebp]
  00237	03 4d ec	 add	 ecx, DWORD PTR _minstep$[ebp]
  0023a	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0023d	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 456  : }

  00240	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00243	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00246	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0024d	59		 pop	 ecx
  0024e	8b e5		 mov	 esp, ebp
  00250	5d		 pop	 ebp
  00251	c2 14 00	 ret	 20			; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Mat@cv@@QAE@HHHPAXI@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1String@cv@@QAE@XZ	; cv::String::~String
__unwindfunclet$??0Mat@cv@@QAE@HHHPAXI@Z$1:
  00008	8d 4d d0	 lea	 ecx, DWORD PTR $T2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1String@cv@@QAE@XZ	; cv::String::~String
__ehhandler$??0Mat@cv@@QAE@HHHPAXI@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Mat@cv@@QAE@HHHPAXI@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Mat@cv@@QAE@HHHPAXI@Z ENDP				; cv::Mat::Mat
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??1Mat@cv@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Mat@cv@@QAE@XZ PROC					; cv::Mat::~Mat, COMDAT
; _this$ = ecx

; 589  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 590  :     release();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?release@Mat@cv@@QAEXXZ	; cv::Mat::release

; 591  :     if( step.p != step.buf )

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 c0 30	 add	 eax, 48			; 00000030H
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	39 41 2c	 cmp	 DWORD PTR [ecx+44], eax
  0001b	74 10		 je	 SHORT $LN2@Mat

; 592  :         fastFree(step.p);

  0001d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00020	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00023	50		 push	 eax
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fastFree@cv@@YAXPAX@Z
  0002a	83 c4 04	 add	 esp, 4
$LN2@Mat:

; 593  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??1Mat@cv@@QAE@XZ ENDP					; cv::Mat::~Mat
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??4Mat@cv@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??4Mat@cv@@QAEAAV01@ABV01@@Z PROC			; cv::Mat::operator=, COMDAT
; _this$ = ecx

; 597  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 598  :     if( this != &m )

  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	3b 45 08	 cmp	 eax, DWORD PTR _m$[ebp]
  0000e	0f 84 fa 00 00
	00		 je	 $LN4@operator

; 599  :     {
; 600  :         if( m.u )

  00014	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00017	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  0001b	74 12		 je	 SHORT $LN3@operator

; 601  :             CV_XADD(&m.u->refcount, 1);

  0001d	ba 01 00 00 00	 mov	 edx, 1
  00022	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  00025	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00028	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0002b	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
$LN3@operator:

; 602  :         release();

  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?release@Mat@cv@@QAEXXZ	; cv::Mat::release

; 603  :         flags = m.flags;

  00037	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003a	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  0003d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003f	89 0a		 mov	 DWORD PTR [edx], ecx

; 604  :         if( dims <= 2 && m.dims <= 2 )

  00041	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00044	83 7a 04 02	 cmp	 DWORD PTR [edx+4], 2
  00048	7f 6f		 jg	 SHORT $LN2@operator
  0004a	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  0004d	83 78 04 02	 cmp	 DWORD PTR [eax+4], 2
  00051	7f 66		 jg	 SHORT $LN2@operator

; 605  :         {
; 606  :             dims = m.dims;

  00053	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  00059	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0005c	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 607  :             rows = m.rows;

  0005f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  00065	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00068	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 608  :             cols = m.cols;

  0006b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  00071	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00074	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 609  :             step[0] = m.step[0];

  00077	6a 00		 push	 0
  00079	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0007c	83 c1 2c	 add	 ecx, 44			; 0000002cH
  0007f	e8 00 00 00 00	 call	 ??AMatStep@cv@@QBEABIH@Z ; cv::MatStep::operator[]
  00084	8b f0		 mov	 esi, eax
  00086	6a 00		 push	 0
  00088	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008b	83 c1 2c	 add	 ecx, 44			; 0000002cH
  0008e	e8 00 00 00 00	 call	 ??AMatStep@cv@@QAEAAIH@Z ; cv::MatStep::operator[]
  00093	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00095	89 08		 mov	 DWORD PTR [eax], ecx

; 610  :             step[1] = m.step[1];

  00097	6a 01		 push	 1
  00099	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0009c	83 c1 2c	 add	 ecx, 44			; 0000002cH
  0009f	e8 00 00 00 00	 call	 ??AMatStep@cv@@QBEABIH@Z ; cv::MatStep::operator[]
  000a4	8b f0		 mov	 esi, eax
  000a6	6a 01		 push	 1
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ab	83 c1 2c	 add	 ecx, 44			; 0000002cH
  000ae	e8 00 00 00 00	 call	 ??AMatStep@cv@@QAEAAIH@Z ; cv::MatStep::operator[]
  000b3	8b 16		 mov	 edx, DWORD PTR [esi]
  000b5	89 10		 mov	 DWORD PTR [eax], edx

; 611  :         }
; 612  :         else

  000b7	eb 0d		 jmp	 SHORT $LN1@operator
$LN2@operator:

; 613  :             copySize(m);

  000b9	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  000bc	50		 push	 eax
  000bd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?copySize@Mat@cv@@QAEXABV12@@Z
$LN1@operator:

; 614  :         data = m.data;

  000c6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c9	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  000cc	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000cf	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 615  :         datastart = m.datastart;

  000d2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d5	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  000d8	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000db	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 616  :         dataend = m.dataend;

  000de	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  000e4	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  000e7	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 617  :         datalimit = m.datalimit;

  000ea	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ed	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  000f0	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  000f3	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 618  :         allocator = m.allocator;

  000f6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f9	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  000fc	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  000ff	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 619  :         u = m.u;

  00102	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00105	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  00108	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0010b	89 41 24	 mov	 DWORD PTR [ecx+36], eax
$LN4@operator:

; 620  :     }
; 621  :     return *this;

  0010e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 622  : }

  00111	5e		 pop	 esi
  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c2 04 00	 ret	 4
??4Mat@cv@@QAEAAV01@ABV01@@Z ENDP			; cv::Mat::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ?create@Mat@cv@@QAEXHHH@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
_sz$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
__rows$ = 8						; size = 4
__cols$ = 12						; size = 4
__type$ = 16						; size = 4
?create@Mat@cv@@QAEXHHH@Z PROC				; cv::Mat::create, COMDAT
; _this$ = ecx

; 679  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 680  :     _type &= TYPE_MASK;

  00013	8b 45 10	 mov	 eax, DWORD PTR __type$[ebp]
  00016	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0001b	89 45 10	 mov	 DWORD PTR __type$[ebp], eax

; 681  :     if( dims <= 2 && rows == _rows && cols == _cols && type() == _type && data )

  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 79 04 02	 cmp	 DWORD PTR [ecx+4], 2
  00025	7f 2e		 jg	 SHORT $LN1@create
  00027	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0002a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0002d	3b 45 08	 cmp	 eax, DWORD PTR __rows$[ebp]
  00030	75 23		 jne	 SHORT $LN1@create
  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00038	3b 55 0c	 cmp	 edx, DWORD PTR __cols$[ebp]
  0003b	75 18		 jne	 SHORT $LN1@create
  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ?type@Mat@cv@@QBEHXZ	; cv::Mat::type
  00045	3b 45 10	 cmp	 eax, DWORD PTR __type$[ebp]
  00048	75 0b		 jne	 SHORT $LN1@create
  0004a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00051	74 02		 je	 SHORT $LN1@create

; 682  :         return;

  00053	eb 1f		 jmp	 SHORT $LN2@create
$LN1@create:

; 683  :     int sz[] = {_rows, _cols};

  00055	8b 4d 08	 mov	 ecx, DWORD PTR __rows$[ebp]
  00058	89 4d f4	 mov	 DWORD PTR _sz$[ebp], ecx
  0005b	8b 55 0c	 mov	 edx, DWORD PTR __cols$[ebp]
  0005e	89 55 f8	 mov	 DWORD PTR _sz$[ebp+4], edx

; 684  :     create(2, sz, _type);

  00061	8b 45 10	 mov	 eax, DWORD PTR __type$[ebp]
  00064	50		 push	 eax
  00065	8d 4d f4	 lea	 ecx, DWORD PTR _sz$[ebp]
  00068	51		 push	 ecx
  00069	6a 02		 push	 2
  0006b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?create@Mat@cv@@QAEXHPBHH@Z
$LN2@create:

; 685  : }

  00074	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00077	33 cd		 xor	 ecx, ebp
  00079	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 0c 00	 ret	 12			; 0000000cH
?create@Mat@cv@@QAEXHHH@Z ENDP				; cv::Mat::create
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ?release@Mat@cv@@QAEXXZ
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
?release@Mat@cv@@QAEXXZ PROC				; cv::Mat::release, COMDAT
; _this$ = ecx

; 702  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 703  :     if( u && CV_XADD(&u->refcount, -1) == 1 )

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  00010	74 1e		 je	 SHORT $LN4@release
  00012	83 c9 ff	 or	 ecx, -1
  00015	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00018	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0001b	83 c0 0c	 add	 eax, 12			; 0000000cH
  0001e	f0 0f c1 08	 lock	  xadd	 DWORD PTR [eax], ecx
  00022	83 f9 01	 cmp	 ecx, 1
  00025	75 09		 jne	 SHORT $LN4@release

; 704  :         deallocate();

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?deallocate@Mat@cv@@QAEXXZ
$LN4@release:

; 705  :     u = NULL;

  00030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0

; 706  :     datastart = dataend = datalimit = data = 0;

  0003a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0
  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  00058	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005b	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0

; 707  :     for(int i = 0; i < dims; i++)

  00062	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00069	eb 09		 jmp	 SHORT $LN3@release
$LN2@release:
  0006b	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  0006e	83 c0 01	 add	 eax, 1
  00071	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN3@release:
  00074	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	8b 55 f8	 mov	 edx, DWORD PTR _i$1[ebp]
  0007a	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0007d	7d 12		 jge	 SHORT $LN5@release

; 708  :         size.p[i] = 0;

  0007f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00082	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00085	8b 55 f8	 mov	 edx, DWORD PTR _i$1[ebp]
  00088	c7 04 91 00 00
	00 00		 mov	 DWORD PTR [ecx+edx*4], 0
  0008f	eb da		 jmp	 SHORT $LN2@release
$LN5@release:

; 709  : #ifdef _DEBUG
; 710  :     flags = MAGIC_VAL;
; 711  :     dims = rows = cols = 0;
; 712  :     if(step.p != step.buf)
; 713  :     {
; 714  :         fastFree(step.p);
; 715  :         step.p = step.buf;
; 716  :         size.p = &rows;
; 717  :     }
; 718  : #endif
; 719  : }

  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
?release@Mat@cv@@QAEXXZ ENDP				; cv::Mat::release
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??RMat@cv@@QBE?AV01@ABV?$Rect_@H@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_roi$ = 12						; size = 4
??RMat@cv@@QBE?AV01@ABV?$Rect_@H@1@@Z PROC		; cv::Mat::operator(), COMDAT
; _this$ = ecx

; 729  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0

; 730  :     return Mat(*this, roi);

  00010	8b 45 0c	 mov	 eax, DWORD PTR _roi$[ebp]
  00013	50		 push	 eax
  00014	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	51		 push	 ecx
  00018	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0Mat@cv@@QAE@ABV01@ABV?$Rect_@H@1@@Z
  00021	8b 55 fc	 mov	 edx, DWORD PTR $T1[ebp]
  00024	83 ca 01	 or	 edx, 1
  00027	89 55 fc	 mov	 DWORD PTR $T1[ebp], edx
  0002a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 731  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
??RMat@cv@@QBE?AV01@ABV?$Rect_@H@1@@Z ENDP		; cv::Mat::operator()
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ?isContinuous@Mat@cv@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?isContinuous@Mat@cv@@QBE_NXZ PROC			; cv::Mat::isContinuous, COMDAT
; _this$ = ecx

; 747  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 748  :     return (flags & CONTINUOUS_FLAG) != 0;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  00014	74 09		 je	 SHORT $LN3@isContinuo
  00016	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
  0001d	eb 07		 jmp	 SHORT $LN4@isContinuo
$LN3@isContinuo:
  0001f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
$LN4@isContinuo:
  00026	8a 45 fc	 mov	 al, BYTE PTR tv67[ebp]

; 749  : }

  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
?isContinuous@Mat@cv@@QBE_NXZ ENDP			; cv::Mat::isContinuous
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ?elemSize@Mat@cv@@QBEIXZ
_TEXT	SEGMENT
tv73 = -8						; size = 4
_this$ = -4						; size = 4
?elemSize@Mat@cv@@QBEIXZ PROC				; cv::Mat::elemSize, COMDAT
; _this$ = ecx

; 759  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 760  :     return dims > 0 ? step.p[dims - 1] : 0;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00010	7e 15		 jle	 SHORT $LN3@elemSize
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0001e	8b 54 91 fc	 mov	 edx, DWORD PTR [ecx+edx*4-4]
  00022	89 55 f8	 mov	 DWORD PTR tv73[ebp], edx
  00025	eb 07		 jmp	 SHORT $LN4@elemSize
$LN3@elemSize:
  00027	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN4@elemSize:
  0002e	8b 45 f8	 mov	 eax, DWORD PTR tv73[ebp]

; 761  : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?elemSize@Mat@cv@@QBEIXZ ENDP				; cv::Mat::elemSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ?type@Mat@cv@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?type@Mat@cv@@QBEHXZ PROC				; cv::Mat::type, COMDAT
; _this$ = ecx

; 771  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 772  :     return CV_MAT_TYPE(flags);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH

; 773  : }

  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?type@Mat@cv@@QBEHXZ ENDP				; cv::Mat::type
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ?depth@Mat@cv@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?depth@Mat@cv@@QBEHXZ PROC				; cv::Mat::depth, COMDAT
; _this$ = ecx

; 777  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 778  :     return CV_MAT_DEPTH(flags);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	83 e0 07	 and	 eax, 7

; 779  : }

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?depth@Mat@cv@@QBEHXZ ENDP				; cv::Mat::depth
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ?empty@Mat@cv@@QBE_NXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?empty@Mat@cv@@QBE_NXZ PROC				; cv::Mat::empty, COMDAT
; _this$ = ecx

; 795  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 796  :     return data == 0 || total() == 0;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00010	74 15		 je	 SHORT $LN3@empty
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?total@Mat@cv@@QBEIXZ	; cv::Mat::total
  0001a	85 c0		 test	 eax, eax
  0001c	74 09		 je	 SHORT $LN3@empty
  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
  00025	eb 07		 jmp	 SHORT $LN4@empty
$LN3@empty:
  00027	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
$LN4@empty:
  0002e	8a 45 f8	 mov	 al, BYTE PTR tv69[ebp]

; 797  : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?empty@Mat@cv@@QBE_NXZ ENDP				; cv::Mat::empty
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ?total@Mat@cv@@QBEIXZ
_TEXT	SEGMENT
_p$ = -12						; size = 4
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
?total@Mat@cv@@QBEIXZ PROC				; cv::Mat::total, COMDAT
; _this$ = ecx

; 801  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 802  :     if( dims <= 2 )

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 04 02	 cmp	 DWORD PTR [eax+4], 2
  00010	7f 0f		 jg	 SHORT $LN4@total

; 803  :         return (size_t)rows * cols;

  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00018	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0001b	0f af 42 0c	 imul	 eax, DWORD PTR [edx+12]
  0001f	eb 41		 jmp	 SHORT $LN5@total
$LN4@total:

; 804  :     size_t p = 1;

  00021	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _p$[ebp], 1

; 805  :     for( int i = 0; i < dims; i++ )

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0002f	eb 09		 jmp	 SHORT $LN3@total
$LN2@total:
  00031	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN3@total:
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	8b 55 f8	 mov	 edx, DWORD PTR _i$1[ebp]
  00040	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00043	7d 1a		 jge	 SHORT $LN1@total

; 806  :         p *= size[i];

  00045	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00048	50		 push	 eax
  00049	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	83 c1 28	 add	 ecx, 40			; 00000028H
  0004f	e8 00 00 00 00	 call	 ??AMatSize@cv@@QBEABHH@Z ; cv::MatSize::operator[]
  00054	8b 4d f4	 mov	 ecx, DWORD PTR _p$[ebp]
  00057	0f af 08	 imul	 ecx, DWORD PTR [eax]
  0005a	89 4d f4	 mov	 DWORD PTR _p$[ebp], ecx
  0005d	eb d2		 jmp	 SHORT $LN2@total
$LN1@total:

; 807  :     return p;

  0005f	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp]
$LN5@total:

; 808  : }

  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
?total@Mat@cv@@QBEIXZ ENDP				; cv::Mat::total
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ?ptr@Mat@cv@@QBEPBEH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_y$ = 8							; size = 4
?ptr@Mat@cv@@QBEPBEH@Z PROC				; cv::Mat::ptr, COMDAT
; _this$ = ecx

; 819  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 820  :     CV_DbgAssert( y == 0 || (data && dims >= 1 && (unsigned)y < (unsigned)size.p[0]) );
; 821  :     return data + step.p[0] * y;

  00007	b8 04 00 00 00	 mov	 eax, 4
  0000c	6b c0 00	 imul	 eax, 0
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00015	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  00018	0f af 45 08	 imul	 eax, DWORD PTR _y$[ebp]
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	03 41 10	 add	 eax, DWORD PTR [ecx+16]

; 822  : }

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?ptr@Mat@cv@@QBEPBEH@Z ENDP				; cv::Mat::ptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??0Mat@cv@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??0Mat@cv@@QAE@$$QAV01@@Z PROC				; cv::Mat::Mat, COMDAT
; _this$ = ecx

; 1183 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0000e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00010	89 10		 mov	 DWORD PTR [eax], edx
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00018	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00024	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00027	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00030	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00033	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00036	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00039	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0003c	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0003f	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00042	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00048	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0004b	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0004e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00051	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00054	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00057	89 50 18	 mov	 DWORD PTR [eax+24], edx
  0005a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00060	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00063	89 50 1c	 mov	 DWORD PTR [eax+28], edx
  00066	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00069	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0006c	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0006f	89 50 20	 mov	 DWORD PTR [eax+32], edx
  00072	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00075	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00078	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0007b	89 50 24	 mov	 DWORD PTR [eax+36], edx
  0007e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00081	83 c0 08	 add	 eax, 8
  00084	50		 push	 eax
  00085	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	83 c1 28	 add	 ecx, 40			; 00000028H
  0008b	e8 00 00 00 00	 call	 ??0MatSize@cv@@QAE@PAH@Z ; cv::MatSize::MatSize
  00090	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00096	e8 00 00 00 00	 call	 ??0MatStep@cv@@QAE@XZ	; cv::MatStep::MatStep

; 1184 :     if (m.dims <= 2)  // move new step/size info

  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0009e	83 79 04 02	 cmp	 DWORD PTR [ecx+4], 2
  000a2	7f 42		 jg	 SHORT $LN2@Mat

; 1185 :     {
; 1186 :         step[0] = m.step[0];

  000a4	6a 00		 push	 0
  000a6	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  000a9	83 c1 2c	 add	 ecx, 44			; 0000002cH
  000ac	e8 00 00 00 00	 call	 ??AMatStep@cv@@QAEAAIH@Z ; cv::MatStep::operator[]
  000b1	8b f0		 mov	 esi, eax
  000b3	6a 00		 push	 0
  000b5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b8	83 c1 2c	 add	 ecx, 44			; 0000002cH
  000bb	e8 00 00 00 00	 call	 ??AMatStep@cv@@QAEAAIH@Z ; cv::MatStep::operator[]
  000c0	8b 16		 mov	 edx, DWORD PTR [esi]
  000c2	89 10		 mov	 DWORD PTR [eax], edx

; 1187 :         step[1] = m.step[1];

  000c4	6a 01		 push	 1
  000c6	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  000c9	83 c1 2c	 add	 ecx, 44			; 0000002cH
  000cc	e8 00 00 00 00	 call	 ??AMatStep@cv@@QAEAAIH@Z ; cv::MatStep::operator[]
  000d1	8b f0		 mov	 esi, eax
  000d3	6a 01		 push	 1
  000d5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d8	83 c1 2c	 add	 ecx, 44			; 0000002cH
  000db	e8 00 00 00 00	 call	 ??AMatStep@cv@@QAEAAIH@Z ; cv::MatStep::operator[]
  000e0	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000e2	89 08		 mov	 DWORD PTR [eax], ecx

; 1188 :     }
; 1189 :     else

  000e4	eb 30		 jmp	 SHORT $LN1@Mat
$LN2@Mat:

; 1190 :     {
; 1191 :         CV_DbgAssert(m.step.p != m.step.buf);
; 1192 :         step.p = m.step.p;

  000e6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000e9	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  000ec	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  000ef	89 4a 2c	 mov	 DWORD PTR [edx+44], ecx

; 1193 :         size.p = m.size.p;

  000f2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000f5	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  000f8	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  000fb	89 4a 28	 mov	 DWORD PTR [edx+40], ecx

; 1194 :         m.step.p = m.step.buf;

  000fe	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  00101	83 c2 30	 add	 edx, 48			; 00000030H
  00104	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  00107	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 1195 :         m.size.p = &m.rows;

  0010a	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0010d	83 c1 08	 add	 ecx, 8
  00110	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  00113	89 4a 28	 mov	 DWORD PTR [edx+40], ecx
$LN1@Mat:

; 1196 :     }
; 1197 :     m.flags = MAGIC_VAL; m.dims = m.rows = m.cols = 0;

  00116	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  00119	c7 00 00 00 ff
	42		 mov	 DWORD PTR [eax], 1124007936 ; 42ff0000H
  0011f	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00122	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00129	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  0012c	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0
  00133	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  00136	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1198 :     m.data = NULL; m.datastart = NULL; m.dataend = NULL; m.datalimit = NULL;

  0013d	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00140	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00147	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  0014a	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0
  00151	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  00154	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0
  0015b	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0015e	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 1199 :     m.allocator = NULL;

  00165	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  00168	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0

; 1200 :     m.u = NULL;

  0016f	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  00172	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0

; 1201 : }

  00179	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0017c	5e		 pop	 esi
  0017d	8b e5		 mov	 esp, ebp
  0017f	5d		 pop	 ebp
  00180	c2 04 00	 ret	 4
??0Mat@cv@@QAE@$$QAV01@@Z ENDP				; cv::Mat::Mat
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??4Mat@cv@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??4Mat@cv@@QAEAAV01@$$QAV01@@Z PROC			; cv::Mat::operator=, COMDAT
; _this$ = ecx

; 1205 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1206 :     if (this == &m)

  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	3b 45 08	 cmp	 eax, DWORD PTR _m$[ebp]
  0000e	75 08		 jne	 SHORT $LN4@operator

; 1207 :       return *this;

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	e9 95 01 00 00	 jmp	 $LN5@operator
$LN4@operator:

; 1208 : 
; 1209 :     release();

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?release@Mat@cv@@QAEXXZ	; cv::Mat::release

; 1210 :     flags = m.flags; dims = m.dims; rows = m.rows; cols = m.cols; data = m.data;

  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  00026	8b 02		 mov	 eax, DWORD PTR [edx]
  00028	89 01		 mov	 DWORD PTR [ecx], eax
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  00030	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00033	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  0003c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0003f	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  00048	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0004b	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  00054	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00057	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 1211 :     datastart = m.datastart; dataend = m.dataend; datalimit = m.datalimit; allocator = m.allocator;

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  00060	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00063	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  0006c	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0006f	89 41 18	 mov	 DWORD PTR [ecx+24], eax
  00072	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  00078	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0007b	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
  0007e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  00084	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  00087	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 1212 :     u = m.u;

  0008a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  00090	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00093	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 1213 :     if (step.p != step.buf) // release self step/size

  00096	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	83 c1 30	 add	 ecx, 48			; 00000030H
  0009c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0009f	39 4a 2c	 cmp	 DWORD PTR [edx+44], ecx
  000a2	74 28		 je	 SHORT $LN3@operator

; 1214 :     {
; 1215 :         fastFree(step.p);

  000a4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a7	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  000aa	51		 push	 ecx
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fastFree@cv@@YAXPAX@Z
  000b1	83 c4 04	 add	 esp, 4

; 1216 :         step.p = step.buf;

  000b4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b7	83 c2 30	 add	 edx, 48			; 00000030H
  000ba	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bd	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 1217 :         size.p = &rows;

  000c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c3	83 c1 08	 add	 ecx, 8
  000c6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c9	89 4a 28	 mov	 DWORD PTR [edx+40], ecx
$LN3@operator:

; 1218 :     }
; 1219 :     if (m.dims <= 2) // move new step/size info

  000cc	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  000cf	83 78 04 02	 cmp	 DWORD PTR [eax+4], 2
  000d3	7f 42		 jg	 SHORT $LN2@operator

; 1220 :     {
; 1221 :         step[0] = m.step[0];

  000d5	6a 00		 push	 0
  000d7	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  000da	83 c1 2c	 add	 ecx, 44			; 0000002cH
  000dd	e8 00 00 00 00	 call	 ??AMatStep@cv@@QAEAAIH@Z ; cv::MatStep::operator[]
  000e2	8b f0		 mov	 esi, eax
  000e4	6a 00		 push	 0
  000e6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e9	83 c1 2c	 add	 ecx, 44			; 0000002cH
  000ec	e8 00 00 00 00	 call	 ??AMatStep@cv@@QAEAAIH@Z ; cv::MatStep::operator[]
  000f1	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000f3	89 08		 mov	 DWORD PTR [eax], ecx

; 1222 :         step[1] = m.step[1];

  000f5	6a 01		 push	 1
  000f7	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  000fa	83 c1 2c	 add	 ecx, 44			; 0000002cH
  000fd	e8 00 00 00 00	 call	 ??AMatStep@cv@@QAEAAIH@Z ; cv::MatStep::operator[]
  00102	8b f0		 mov	 esi, eax
  00104	6a 01		 push	 1
  00106	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00109	83 c1 2c	 add	 ecx, 44			; 0000002cH
  0010c	e8 00 00 00 00	 call	 ??AMatStep@cv@@QAEAAIH@Z ; cv::MatStep::operator[]
  00111	8b 16		 mov	 edx, DWORD PTR [esi]
  00113	89 10		 mov	 DWORD PTR [eax], edx

; 1223 :     }
; 1224 :     else

  00115	eb 30		 jmp	 SHORT $LN1@operator
$LN2@operator:

; 1225 :     {
; 1226 :         CV_DbgAssert(m.step.p != m.step.buf);
; 1227 :         step.p = m.step.p;

  00117	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011a	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0011d	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00120	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 1228 :         size.p = m.size.p;

  00123	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00126	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00129	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  0012c	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 1229 :         m.step.p = m.step.buf;

  0012f	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  00132	83 c0 30	 add	 eax, 48			; 00000030H
  00135	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00138	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 1230 :         m.size.p = &m.rows;

  0013b	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  0013e	83 c2 08	 add	 edx, 8
  00141	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  00144	89 50 28	 mov	 DWORD PTR [eax+40], edx
$LN1@operator:

; 1231 :     }
; 1232 :     m.flags = MAGIC_VAL; m.dims = m.rows = m.cols = 0;

  00147	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0014a	c7 01 00 00 ff
	42		 mov	 DWORD PTR [ecx], 1124007936 ; 42ff0000H
  00150	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  00153	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0
  0015a	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  0015d	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00164	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00167	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 1233 :     m.data = NULL; m.datastart = NULL; m.dataend = NULL; m.datalimit = NULL;

  0016e	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  00171	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0
  00178	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  0017b	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
  00182	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00185	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  0018c	8b 55 08	 mov	 edx, DWORD PTR _m$[ebp]
  0018f	c7 42 1c 00 00
	00 00		 mov	 DWORD PTR [edx+28], 0

; 1234 :     m.allocator = NULL;

  00196	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  00199	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 1235 :     m.u = NULL;

  001a0	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  001a3	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0

; 1236 :     return *this;

  001aa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@operator:

; 1237 : }

  001ad	5e		 pop	 esi
  001ae	8b e5		 mov	 esp, ebp
  001b0	5d		 pop	 ebp
  001b1	c2 04 00	 ret	 4
??4Mat@cv@@QAEAAV01@$$QAV01@@Z ENDP			; cv::Mat::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??0MatSize@cv@@QAE@PAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__p$ = 8						; size = 4
??0MatSize@cv@@QAE@PAH@Z PROC				; cv::MatSize::MatSize, COMDAT
; _this$ = ecx

; 1246 :     : p(_p) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __p$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0MatSize@cv@@QAE@PAH@Z ENDP				; cv::MatSize::MatSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??AMatSize@cv@@QBEABHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatSize@cv@@QBEABHH@Z PROC				; cv::MatSize::operator[], COMDAT
; _this$ = ecx

; 1257 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1258 :     return p[i];

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	8b 55 08	 mov	 edx, DWORD PTR _i$[ebp]
  0000f	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]

; 1259 : }

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??AMatSize@cv@@QBEABHH@Z ENDP				; cv::MatSize::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??0MatStep@cv@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0MatStep@cv@@QAE@XZ PROC				; cv::MatStep::MatStep, COMDAT
; _this$ = ecx

; 1301 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1302 :     p = buf; p[0] = p[1] = 0;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 04	 add	 eax, 4
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	89 01		 mov	 DWORD PTR [ecx], eax
  00012	ba 04 00 00 00	 mov	 edx, 4
  00017	c1 e2 00	 shl	 edx, 0
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	c7 04 0a 00 00
	00 00		 mov	 DWORD PTR [edx+ecx], 0
  00026	ba 04 00 00 00	 mov	 edx, 4
  0002b	6b d2 00	 imul	 edx, 0
  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 08		 mov	 ecx, DWORD PTR [eax]
  00033	c7 04 0a 00 00
	00 00		 mov	 DWORD PTR [edx+ecx], 0

; 1303 : }

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??0MatStep@cv@@QAE@XZ ENDP				; cv::MatStep::MatStep
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??AMatStep@cv@@QBEABIH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatStep@cv@@QBEABIH@Z PROC				; cv::MatStep::operator[], COMDAT
; _this$ = ecx

; 1313 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1314 :     return p[i];

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	8b 55 08	 mov	 edx, DWORD PTR _i$[ebp]
  0000f	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]

; 1315 : }

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??AMatStep@cv@@QBEABIH@Z ENDP				; cv::MatStep::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??AMatStep@cv@@QAEAAIH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AMatStep@cv@@QAEAAIH@Z PROC				; cv::MatStep::operator[], COMDAT
; _this$ = ecx

; 1319 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1320 :     return p[i];

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	8b 55 08	 mov	 edx, DWORD PTR _i$[ebp]
  0000f	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]

; 1321 : }

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??AMatStep@cv@@QAEAAIH@Z ENDP				; cv::MatStep::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??0MatConstIterator@cv@@QAE@PBVMat@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__m$ = 8						; size = 4
??0MatConstIterator@cv@@QAE@PBVMat@1@@Z PROC		; cv::MatConstIterator::MatConstIterator, COMDAT
; _this$ = ecx

; 2373 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __m$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __m$[ebp]
  00012	e8 00 00 00 00	 call	 ?elemSize@Mat@cv@@QBEIXZ ; cv::Mat::elemSize
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	89 42 04	 mov	 DWORD PTR [edx+4], eax
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00031	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00034	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0

; 2374 :     if( m && m->isContinuous() )

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	83 38 00	 cmp	 DWORD PTR [eax], 0
  00041	74 40		 je	 SHORT $LN1@MatConstIt
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00048	e8 00 00 00 00	 call	 ?isContinuous@Mat@cv@@QBE_NXZ ; cv::Mat::isContinuous
  0004d	0f b6 d0	 movzx	 edx, al
  00050	85 d2		 test	 edx, edx
  00052	74 2f		 je	 SHORT $LN1@MatConstIt

; 2375 :     {
; 2376 :         sliceStart = m->ptr();

  00054	6a 00		 push	 0
  00056	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00059	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005b	e8 00 00 00 00	 call	 ?ptr@Mat@cv@@QBEPBEH@Z	; cv::Mat::ptr
  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 2377 :         sliceEnd = sliceStart + m->total()*elemSize;

  00066	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00069	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0006b	e8 00 00 00 00	 call	 ?total@Mat@cv@@QBEIXZ	; cv::Mat::total
  00070	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	0f af 41 04	 imul	 eax, DWORD PTR [ecx+4]
  00077	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0007a	03 42 0c	 add	 eax, DWORD PTR [edx+12]
  0007d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN1@MatConstIt:

; 2378 :     }
; 2379 :     seek((const int*)0);

  00083	6a 00		 push	 0
  00085	6a 00		 push	 0
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?seek@MatConstIterator@cv@@QAEXPBH_N@Z

; 2380 : }

  00090	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 04 00	 ret	 4
??0MatConstIterator@cv@@QAE@PBVMat@1@@Z ENDP		; cv::MatConstIterator::MatConstIterator
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??0MatConstIterator@cv@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_it$ = 8						; size = 4
??0MatConstIterator@cv@@QAE@ABV01@@Z PROC		; cv::MatConstIterator::MatConstIterator, COMDAT
; _this$ = ecx

; 2413 : {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _it$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _it$[ebp]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 4d 08	 mov	 ecx, DWORD PTR _it$[ebp]
  00023	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00026	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _it$[ebp]
  0002f	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00032	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 4d 08	 mov	 ecx, DWORD PTR _it$[ebp]
  0003b	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0003e	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00041	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
??0MatConstIterator@cv@@QAE@ABV01@@Z ENDP		; cv::MatConstIterator::MatConstIterator
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?__autoclassinit@MatConstIterator@cv@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_$initVBases$ = 8					; size = 4
?__autoclassinit@MatConstIterator@cv@@QAEXI@Z PROC	; cv::MatConstIterator::__autoclassinit, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?__autoclassinit@MatConstIterator@cv@@QAEXI@Z ENDP	; cv::MatConstIterator::__autoclassinit
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??EMatConstIterator@cv@@QAEAAV01@XZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
??EMatConstIterator@cv@@QAEAAV01@XZ PROC		; cv::MatConstIterator::operator++, COMDAT
; _this$ = ecx

; 2470 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2471 :     if( m && (ptr += elemSize) >= sliceEnd )

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000f	74 42		 je	 SHORT $LN1@operator
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00017	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0001a	03 42 04	 add	 eax, DWORD PTR [edx+4]
  0001d	89 45 f8	 mov	 DWORD PTR tv69[ebp], eax
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	8b 55 f8	 mov	 edx, DWORD PTR tv69[ebp]
  00026	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8b 4d f8	 mov	 ecx, DWORD PTR tv69[ebp]
  0002f	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00032	72 1f		 jb	 SHORT $LN1@operator

; 2472 :     {
; 2473 :         ptr -= elemSize;

  00034	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0003d	2b 48 04	 sub	 ecx, DWORD PTR [eax+4]
  00040	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00043	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 2474 :         seek(1, true);

  00046	6a 01		 push	 1
  00048	6a 01		 push	 1
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?seek@MatConstIterator@cv@@QAEXH_N@Z
$LN1@operator:

; 2475 :     }
; 2476 :     return *this;

  00053	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 2477 : }

  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
??EMatConstIterator@cv@@QAEAAV01@XZ ENDP		; cv::MatConstIterator::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??4Mat@cv@@QAEAAV01@ABVMatExpr@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_e$ = 8							; size = 4
??4Mat@cv@@QAEAAV01@ABVMatExpr@1@@Z PROC		; cv::Mat::operator=, COMDAT
; _this$ = ecx

; 3105 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3106 :     e.op->assign(e, *this);

  00007	6a ff		 push	 -1
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _e$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 08	 mov	 edx, DWORD PTR _e$[ebp]
  00014	8b 02		 mov	 eax, DWORD PTR [edx]
  00016	8b 4d 08	 mov	 ecx, DWORD PTR _e$[ebp]
  00019	8b 10		 mov	 edx, DWORD PTR [eax]
  0001b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0001d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00020	ff d0		 call	 eax

; 3107 :     return *this;

  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 3108 : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
??4Mat@cv@@QAEAAV01@ABVMatExpr@1@@Z ENDP		; cv::Mat::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\cvstd.inl.hpp
;	COMDAT ??0String@cv@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_len$1 = -8						; size = 4
_this$ = -4						; size = 4
_str$ = 8						; size = 4
??0String@cv@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; cv::String::String, COMDAT
; _this$ = ecx

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 78   :     if (!str.empty())

  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  0001f	e8 00 00 00 00	 call	 ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
  00024	0f b6 d0	 movzx	 edx, al
  00027	85 d2		 test	 edx, edx
  00029	75 2e		 jne	 SHORT $LN2@String

; 79   :     {
; 80   :         size_t len = str.size();

  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  0002e	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00033	89 45 f8	 mov	 DWORD PTR _len$1[ebp], eax

; 81   :         memcpy(allocate(len), str.c_str(), len);

  00036	8b 45 f8	 mov	 eax, DWORD PTR _len$1[ebp]
  00039	50		 push	 eax
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  0003d	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00042	50		 push	 eax
  00043	8b 4d f8	 mov	 ecx, DWORD PTR _len$1[ebp]
  00046	51		 push	 ecx
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?allocate@String@cv@@AAEPADI@Z
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _memcpy
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@String:

; 82   :     }
; 83   : }

  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 04 00	 ret	 4
??0String@cv@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; cv::String::String
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\types_c.h
;	COMDAT ??0CvSize@@QAE@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_w$ = 8							; size = 4
_h$ = 12						; size = 4
??0CvSize@@QAE@HH@Z PROC				; CvSize::CvSize, COMDAT
; _this$ = ecx

; 1013 :     CvSize(int w = 0, int h = 0): width(w), height(h) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _w$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _h$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??0CvSize@@QAE@HH@Z ENDP				; CvSize::CvSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\types_c.h
;	COMDAT ?cvSize@@YA?AUCvSize@@HH@Z
_TEXT	SEGMENT
_s$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
?cvSize@@YA?AUCvSize@@HH@Z PROC				; cvSize, COMDAT

; 1024 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1025 :     CvSize s;

  00010	6a 00		 push	 0
  00012	6a 00		 push	 0
  00014	8d 4d f4	 lea	 ecx, DWORD PTR _s$[ebp]
  00017	e8 00 00 00 00	 call	 ??0CvSize@@QAE@HH@Z	; CvSize::CvSize

; 1026 : 
; 1027 :     s.width = width;

  0001c	8b 45 0c	 mov	 eax, DWORD PTR _width$[ebp]
  0001f	89 45 f4	 mov	 DWORD PTR _s$[ebp], eax

; 1028 :     s.height = height;

  00022	8b 4d 10	 mov	 ecx, DWORD PTR _height$[ebp]
  00025	89 4d f8	 mov	 DWORD PTR _s$[ebp+4], ecx

; 1029 : 
; 1030 :     return s;

  00028	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  0002b	8b 45 f4	 mov	 eax, DWORD PTR _s$[ebp]
  0002e	89 02		 mov	 DWORD PTR [edx], eax
  00030	8b 4d f8	 mov	 ecx, DWORD PTR _s$[ebp+4]
  00033	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00036	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1031 : }

  00039	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003c	33 cd		 xor	 ecx, ebp
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?cvSize@@YA?AUCvSize@@HH@Z ENDP				; cvSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?NowEnter@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?NowEnter@CPLC@@QAEHXZ PROC				; CPLC::NowEnter, COMDAT
; _this$ = ecx

; 63   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 64   : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0x31, 0x00, 0x01};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 31	 mov	 BYTE PTR _bBuf$[ebp+3], 49 ; 00000031H
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 01	 mov	 BYTE PTR _bBuf$[ebp+5], 1

; 65   : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  0002b	6a 06		 push	 6
  0002d	8d 45 f4	 lea	 eax, DWORD PTR _bBuf$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00037	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 66   : 	}

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003f	33 cd		 xor	 ecx, ebp
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?NowEnter@CPLC@@QAEHXZ ENDP				; CPLC::NowEnter
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?OverEnter@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?OverEnter@CPLC@@QAEHXZ PROC				; CPLC::OverEnter, COMDAT
; _this$ = ecx

; 69   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 70   : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0x31, 0x00, 0x00};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 31	 mov	 BYTE PTR _bBuf$[ebp+3], 49 ; 00000031H
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 00	 mov	 BYTE PTR _bBuf$[ebp+5], 0

; 71   : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  0002b	6a 06		 push	 6
  0002d	8d 45 f4	 lea	 eax, DWORD PTR _bBuf$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00037	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 72   : 	}

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003f	33 cd		 xor	 ecx, ebp
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?OverEnter@CPLC@@QAEHXZ ENDP				; CPLC::OverEnter
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?NowVideo@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?NowVideo@CPLC@@QAEHXZ PROC				; CPLC::NowVideo, COMDAT
; _this$ = ecx

; 82   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 83   : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0x33, 0x00, 0x03};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 33	 mov	 BYTE PTR _bBuf$[ebp+3], 51 ; 00000033H
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 03	 mov	 BYTE PTR _bBuf$[ebp+5], 3

; 84   : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  0002b	6a 06		 push	 6
  0002d	8d 45 f4	 lea	 eax, DWORD PTR _bBuf$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00037	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 85   : 	}

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003f	33 cd		 xor	 ecx, ebp
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?NowVideo@CPLC@@QAEHXZ ENDP				; CPLC::NowVideo
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?StopVideo@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?StopVideo@CPLC@@QAEHXZ PROC				; CPLC::StopVideo, COMDAT
; _this$ = ecx

; 88   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 89   : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0x33, 0x00, 0x02};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 33	 mov	 BYTE PTR _bBuf$[ebp+3], 51 ; 00000033H
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 02	 mov	 BYTE PTR _bBuf$[ebp+5], 2

; 90   : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  0002b	6a 06		 push	 6
  0002d	8d 45 f4	 lea	 eax, DWORD PTR _bBuf$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00037	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 91   : 	}

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003f	33 cd		 xor	 ecx, ebp
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?StopVideo@CPLC@@QAEHXZ ENDP				; CPLC::StopVideo
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?NowSave@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?NowSave@CPLC@@QAEHXZ PROC				; CPLC::NowSave, COMDAT
; _this$ = ecx

; 101  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 102  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0x35, 0x00, 0x05};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 35	 mov	 BYTE PTR _bBuf$[ebp+3], 53 ; 00000035H
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 05	 mov	 BYTE PTR _bBuf$[ebp+5], 5

; 103  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  0002b	6a 06		 push	 6
  0002d	8d 45 f4	 lea	 eax, DWORD PTR _bBuf$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00037	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 104  : 	}

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003f	33 cd		 xor	 ecx, ebp
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?NowSave@CPLC@@QAEHXZ ENDP				; CPLC::NowSave
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?OverSave@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?OverSave@CPLC@@QAEHXZ PROC				; CPLC::OverSave, COMDAT
; _this$ = ecx

; 113  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 114  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0x35, 0x00, 0x04};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 35	 mov	 BYTE PTR _bBuf$[ebp+3], 53 ; 00000035H
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 04	 mov	 BYTE PTR _bBuf$[ebp+5], 4

; 115  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  0002b	6a 06		 push	 6
  0002d	8d 45 f4	 lea	 eax, DWORD PTR _bBuf$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00037	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 116  : 	}

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003f	33 cd		 xor	 ecx, ebp
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?OverSave@CPLC@@QAEHXZ ENDP				; CPLC::OverSave
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?NotLink@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?NotLink@CPLC@@QAEHXZ PROC				; CPLC::NotLink, COMDAT
; _this$ = ecx

; 119  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 120  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0x35, 0x00, 0x06};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 35	 mov	 BYTE PTR _bBuf$[ebp+3], 53 ; 00000035H
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 06	 mov	 BYTE PTR _bBuf$[ebp+5], 6

; 121  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  0002b	6a 06		 push	 6
  0002d	8d 45 f4	 lea	 eax, DWORD PTR _bBuf$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00037	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 122  : 	}

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003f	33 cd		 xor	 ecx, ebp
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?NotLink@CPLC@@QAEHXZ ENDP				; CPLC::NotLink
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?AverageMetering@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_Buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?AverageMetering@CPLC@@QAEHXZ PROC			; CPLC::AverageMetering, COMDAT
; _this$ = ecx

; 169  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 170  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0x02, 0x00, 0x00};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 02	 mov	 BYTE PTR _bBuf$[ebp+3], 2
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 00	 mov	 BYTE PTR _bBuf$[ebp+5], 0

; 171  : 		 m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  0002b	6a 06		 push	 6
  0002d	8d 45 f4	 lea	 eax, DWORD PTR _bBuf$[ebp]
  00030	50		 push	 eax
  00031	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00037	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 172  : 		BYTE Buf[15]={0xFF,0xAA,0x03,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

  0003c	c6 45 e4 ff	 mov	 BYTE PTR _Buf$[ebp], 255 ; 000000ffH
  00040	c6 45 e5 aa	 mov	 BYTE PTR _Buf$[ebp+1], 170 ; 000000aaH
  00044	c6 45 e6 03	 mov	 BYTE PTR _Buf$[ebp+2], 3
  00048	c6 45 e7 03	 mov	 BYTE PTR _Buf$[ebp+3], 3
  0004c	c6 45 e8 00	 mov	 BYTE PTR _Buf$[ebp+4], 0
  00050	c6 45 e9 00	 mov	 BYTE PTR _Buf$[ebp+5], 0
  00054	c6 45 ea 00	 mov	 BYTE PTR _Buf$[ebp+6], 0
  00058	c6 45 eb 00	 mov	 BYTE PTR _Buf$[ebp+7], 0
  0005c	c6 45 ec 00	 mov	 BYTE PTR _Buf$[ebp+8], 0
  00060	c6 45 ed 00	 mov	 BYTE PTR _Buf$[ebp+9], 0
  00064	c6 45 ee 00	 mov	 BYTE PTR _Buf$[ebp+10], 0
  00068	c6 45 ef 00	 mov	 BYTE PTR _Buf$[ebp+11], 0
  0006c	c6 45 f0 00	 mov	 BYTE PTR _Buf$[ebp+12], 0
  00070	c6 45 f1 00	 mov	 BYTE PTR _Buf$[ebp+13], 0
  00074	c6 45 f2 00	 mov	 BYTE PTR _Buf$[ebp+14], 0

; 173  : 		return m_ProcessCardComIO.SendData(Buf,sizeof(Buf)/sizeof(Buf[0]));

  00078	6a 0f		 push	 15			; 0000000fH
  0007a	8d 4d e4	 lea	 ecx, DWORD PTR _Buf$[ebp]
  0007d	51		 push	 ecx
  0007e	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00087	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 174  : 	}

  0008c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008f	33 cd		 xor	 ecx, ebp
  00091	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
?AverageMetering@CPLC@@QAEHXZ ENDP			; CPLC::AverageMetering
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?PeakMetering@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_Buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?PeakMetering@CPLC@@QAEHXZ PROC				; CPLC::PeakMetering, COMDAT
; _this$ = ecx

; 177  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 178  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0x02, 0x00, 0x01};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 02	 mov	 BYTE PTR _bBuf$[ebp+3], 2
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 01	 mov	 BYTE PTR _bBuf$[ebp+5], 1

; 179  : 		 m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  0002b	6a 06		 push	 6
  0002d	8d 45 f4	 lea	 eax, DWORD PTR _bBuf$[ebp]
  00030	50		 push	 eax
  00031	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00037	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 180  : 		BYTE Buf[15]={0xFF,0xAA,0x03,0x03,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

  0003c	c6 45 e4 ff	 mov	 BYTE PTR _Buf$[ebp], 255 ; 000000ffH
  00040	c6 45 e5 aa	 mov	 BYTE PTR _Buf$[ebp+1], 170 ; 000000aaH
  00044	c6 45 e6 03	 mov	 BYTE PTR _Buf$[ebp+2], 3
  00048	c6 45 e7 03	 mov	 BYTE PTR _Buf$[ebp+3], 3
  0004c	c6 45 e8 00	 mov	 BYTE PTR _Buf$[ebp+4], 0
  00050	c6 45 e9 00	 mov	 BYTE PTR _Buf$[ebp+5], 0
  00054	c6 45 ea 00	 mov	 BYTE PTR _Buf$[ebp+6], 0
  00058	c6 45 eb 01	 mov	 BYTE PTR _Buf$[ebp+7], 1
  0005c	c6 45 ec 00	 mov	 BYTE PTR _Buf$[ebp+8], 0
  00060	c6 45 ed 00	 mov	 BYTE PTR _Buf$[ebp+9], 0
  00064	c6 45 ee 00	 mov	 BYTE PTR _Buf$[ebp+10], 0
  00068	c6 45 ef 00	 mov	 BYTE PTR _Buf$[ebp+11], 0
  0006c	c6 45 f0 00	 mov	 BYTE PTR _Buf$[ebp+12], 0
  00070	c6 45 f1 00	 mov	 BYTE PTR _Buf$[ebp+13], 0
  00074	c6 45 f2 00	 mov	 BYTE PTR _Buf$[ebp+14], 0

; 181  : 		return m_ProcessCardComIO.SendData(Buf,sizeof(Buf)/sizeof(Buf[0]));

  00078	6a 0f		 push	 15			; 0000000fH
  0007a	8d 4d e4	 lea	 ecx, DWORD PTR _Buf$[ebp]
  0007d	51		 push	 ecx
  0007e	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00087	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 182  : 	}

  0008c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008f	33 cd		 xor	 ecx, ebp
  00091	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
?PeakMetering@CPLC@@QAEHXZ ENDP				; CPLC::PeakMetering
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?B@CPLC@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
_nVal$ = 8						; size = 4
?B@CPLC@@QAEHH@Z PROC					; CPLC::B, COMDAT
; _this$ = ecx

; 185  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 186  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0x91, 0x00, 0x00};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 91	 mov	 BYTE PTR _bBuf$[ebp+3], 145 ; 00000091H
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 00	 mov	 BYTE PTR _bBuf$[ebp+5], 0

; 187  : 		BYTE buf[15] = { 0xFF,0xAA,0x03,0x02,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 02	 mov	 BYTE PTR _buf$[ebp+3], 2
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 03	 mov	 BYTE PTR _buf$[ebp+5], 3
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 00	 mov	 BYTE PTR _buf$[ebp+7], 0
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 188  : 		//int temp = nVal + 5;
; 189  : 		buf[7] =(BYTE)(nVal+0x37);

  00067	8b 45 08	 mov	 eax, DWORD PTR _nVal$[ebp]
  0006a	83 c0 37	 add	 eax, 55			; 00000037H
  0006d	b9 01 00 00 00	 mov	 ecx, 1
  00072	6b c9 07	 imul	 ecx, 7
  00075	88 44 0d e4	 mov	 BYTE PTR _buf$[ebp+ecx], al

; 190  : 		m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00079	6a 0f		 push	 15			; 0000000fH
  0007b	8d 55 e4	 lea	 edx, DWORD PTR _buf$[ebp]
  0007e	52		 push	 edx
  0007f	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00088	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 191  : 		if ( nVal >= 0 )

  0008d	83 7d 08 00	 cmp	 DWORD PTR _nVal$[ebp], 0
  00091	7c 11		 jl	 SHORT $LN2@B

; 192  : 		{
; 193  : 			bBuf[5] = (BYTE)nVal;

  00093	b8 01 00 00 00	 mov	 eax, 1
  00098	6b c0 05	 imul	 eax, 5
  0009b	8a 4d 08	 mov	 cl, BYTE PTR _nVal$[ebp]
  0009e	88 4c 05 f4	 mov	 BYTE PTR _bBuf$[ebp+eax], cl

; 194  : 		}
; 195  : 		else

  000a2	eb 21		 jmp	 SHORT $LN1@B
$LN2@B:

; 196  : 		{
; 197  : 			bBuf[4] = 0xFF;

  000a4	ba 01 00 00 00	 mov	 edx, 1
  000a9	c1 e2 02	 shl	 edx, 2
  000ac	c6 44 15 f4 ff	 mov	 BYTE PTR _bBuf$[ebp+edx], 255 ; 000000ffH

; 198  : 			bBuf[5] = (BYTE)(0xFF + nVal + 1);

  000b1	8b 45 08	 mov	 eax, DWORD PTR _nVal$[ebp]
  000b4	05 00 01 00 00	 add	 eax, 256		; 00000100H
  000b9	b9 01 00 00 00	 mov	 ecx, 1
  000be	6b c9 05	 imul	 ecx, 5
  000c1	88 44 0d f4	 mov	 BYTE PTR _bBuf$[ebp+ecx], al
$LN1@B:

; 199  : 		}
; 200  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  000c5	6a 06		 push	 6
  000c7	8d 55 f4	 lea	 edx, DWORD PTR _bBuf$[ebp]
  000ca	52		 push	 edx
  000cb	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ce	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000d1	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 201  : 	}

  000d6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d9	33 cd		 xor	 ecx, ebp
  000db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 04 00	 ret	 4
?B@CPLC@@QAEHH@Z ENDP					; CPLC::B
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?R@CPLC@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
_nVal$ = 8						; size = 4
?R@CPLC@@QAEHH@Z PROC					; CPLC::R, COMDAT
; _this$ = ecx

; 204  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 205  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0x95, 0x00, 0x00};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 95	 mov	 BYTE PTR _bBuf$[ebp+3], 149 ; 00000095H
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 00	 mov	 BYTE PTR _bBuf$[ebp+5], 0

; 206  : 		BYTE buf[15] = { 0xFF,0xAA,0x03,0x02,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 02	 mov	 BYTE PTR _buf$[ebp+3], 2
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 01	 mov	 BYTE PTR _buf$[ebp+5], 1
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 00	 mov	 BYTE PTR _buf$[ebp+7], 0
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 207  : 		//int temp = nVal + 5;
; 208  : 		buf[7] = (BYTE)(nVal+0x37);

  00067	8b 45 08	 mov	 eax, DWORD PTR _nVal$[ebp]
  0006a	83 c0 37	 add	 eax, 55			; 00000037H
  0006d	b9 01 00 00 00	 mov	 ecx, 1
  00072	6b c9 07	 imul	 ecx, 7
  00075	88 44 0d e4	 mov	 BYTE PTR _buf$[ebp+ecx], al

; 209  : 		m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00079	6a 0f		 push	 15			; 0000000fH
  0007b	8d 55 e4	 lea	 edx, DWORD PTR _buf$[ebp]
  0007e	52		 push	 edx
  0007f	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00088	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 210  : 		if ( nVal >= 0 )

  0008d	83 7d 08 00	 cmp	 DWORD PTR _nVal$[ebp], 0
  00091	7c 11		 jl	 SHORT $LN2@R

; 211  : 		{
; 212  : 			bBuf[5] = (BYTE)nVal;

  00093	b8 01 00 00 00	 mov	 eax, 1
  00098	6b c0 05	 imul	 eax, 5
  0009b	8a 4d 08	 mov	 cl, BYTE PTR _nVal$[ebp]
  0009e	88 4c 05 f4	 mov	 BYTE PTR _bBuf$[ebp+eax], cl

; 213  : 		}
; 214  : 		else

  000a2	eb 21		 jmp	 SHORT $LN1@R
$LN2@R:

; 215  : 		{
; 216  : 			bBuf[4] = 0xFF;

  000a4	ba 01 00 00 00	 mov	 edx, 1
  000a9	c1 e2 02	 shl	 edx, 2
  000ac	c6 44 15 f4 ff	 mov	 BYTE PTR _bBuf$[ebp+edx], 255 ; 000000ffH

; 217  : 			bBuf[5] = (BYTE)(0xFF + nVal + 1);

  000b1	8b 45 08	 mov	 eax, DWORD PTR _nVal$[ebp]
  000b4	05 00 01 00 00	 add	 eax, 256		; 00000100H
  000b9	b9 01 00 00 00	 mov	 ecx, 1
  000be	6b c9 05	 imul	 ecx, 5
  000c1	88 44 0d f4	 mov	 BYTE PTR _bBuf$[ebp+ecx], al
$LN1@R:

; 218  : 		}
; 219  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  000c5	6a 06		 push	 6
  000c7	8d 55 f4	 lea	 edx, DWORD PTR _bBuf$[ebp]
  000ca	52		 push	 edx
  000cb	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ce	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000d1	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 220  : 	}

  000d6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d9	33 cd		 xor	 ecx, ebp
  000db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 04 00	 ret	 4
?R@CPLC@@QAEHH@Z ENDP					; CPLC::R
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Zoom1@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Zoom1@CPLC@@QAEHXZ PROC				; CPLC::Zoom1, COMDAT
; _this$ = ecx

; 234  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 235  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x11, 0x01, 0x00, 0x0A};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 11	 mov	 BYTE PTR _bBuf$[ebp+2], 17 ; 00000011H
  0001f	c6 45 f7 01	 mov	 BYTE PTR _bBuf$[ebp+3], 1
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 0a	 mov	 BYTE PTR _bBuf$[ebp+5], 10 ; 0000000aH

; 236  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  0002b	6a 06		 push	 6
  0002d	8d 45 f4	 lea	 eax, DWORD PTR _bBuf$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00037	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 237  : 	}

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003f	33 cd		 xor	 ecx, ebp
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?Zoom1@CPLC@@QAEHXZ ENDP				; CPLC::Zoom1
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Zoom2@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Zoom2@CPLC@@QAEHXZ PROC				; CPLC::Zoom2, COMDAT
; _this$ = ecx

; 240  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 241  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x11, 0x01, 0x00, 0x0C};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 11	 mov	 BYTE PTR _bBuf$[ebp+2], 17 ; 00000011H
  0001f	c6 45 f7 01	 mov	 BYTE PTR _bBuf$[ebp+3], 1
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 0c	 mov	 BYTE PTR _bBuf$[ebp+5], 12 ; 0000000cH

; 242  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  0002b	6a 06		 push	 6
  0002d	8d 45 f4	 lea	 eax, DWORD PTR _bBuf$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00037	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 243  : 	}

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003f	33 cd		 xor	 ecx, ebp
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?Zoom2@CPLC@@QAEHXZ ENDP				; CPLC::Zoom2
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Zoom3@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Zoom3@CPLC@@QAEHXZ PROC				; CPLC::Zoom3, COMDAT
; _this$ = ecx

; 246  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 247  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x11, 0x01, 0x00, 0x0F};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 11	 mov	 BYTE PTR _bBuf$[ebp+2], 17 ; 00000011H
  0001f	c6 45 f7 01	 mov	 BYTE PTR _bBuf$[ebp+3], 1
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 0f	 mov	 BYTE PTR _bBuf$[ebp+5], 15 ; 0000000fH

; 248  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  0002b	6a 06		 push	 6
  0002d	8d 45 f4	 lea	 eax, DWORD PTR _bBuf$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00037	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 249  : 	}

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003f	33 cd		 xor	 ecx, ebp
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?Zoom3@CPLC@@QAEHXZ ENDP				; CPLC::Zoom3
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Zoom4@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Zoom4@CPLC@@QAEHXZ PROC				; CPLC::Zoom4, COMDAT
; _this$ = ecx

; 252  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x11, 0x01, 0x00, 0x14};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 11	 mov	 BYTE PTR _bBuf$[ebp+2], 17 ; 00000011H
  0001f	c6 45 f7 01	 mov	 BYTE PTR _bBuf$[ebp+3], 1
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 14	 mov	 BYTE PTR _bBuf$[ebp+5], 20 ; 00000014H

; 254  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  0002b	6a 06		 push	 6
  0002d	8d 45 f4	 lea	 eax, DWORD PTR _bBuf$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00037	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 255  : 	}

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003f	33 cd		 xor	 ecx, ebp
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?Zoom4@CPLC@@QAEHXZ ENDP				; CPLC::Zoom4
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?SetCircular@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?SetCircular@CPLC@@QAEHXZ PROC				; CPLC::SetCircular, COMDAT
; _this$ = ecx

; 259  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 260  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0x06, 0x00, 0x00};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 06	 mov	 BYTE PTR _bBuf$[ebp+3], 6
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 00	 mov	 BYTE PTR _bBuf$[ebp+5], 0

; 261  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  0002b	6a 06		 push	 6
  0002d	8d 45 f4	 lea	 eax, DWORD PTR _bBuf$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00037	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 262  : 	}

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003f	33 cd		 xor	 ecx, ebp
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?SetCircular@CPLC@@QAEHXZ ENDP				; CPLC::SetCircular
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?SetSquare@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?SetSquare@CPLC@@QAEHXZ PROC				; CPLC::SetSquare, COMDAT
; _this$ = ecx

; 265  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 266  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0x06, 0x00, 0x01};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 06	 mov	 BYTE PTR _bBuf$[ebp+3], 6
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 01	 mov	 BYTE PTR _bBuf$[ebp+5], 1

; 267  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  0002b	6a 06		 push	 6
  0002d	8d 45 f4	 lea	 eax, DWORD PTR _bBuf$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00037	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 268  : 	}

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003f	33 cd		 xor	 ecx, ebp
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?SetSquare@CPLC@@QAEHXZ ENDP				; CPLC::SetSquare
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?OpenLight@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?OpenLight@CPLC@@QAEHXZ PROC				; CPLC::OpenLight, COMDAT
; _this$ = ecx

; 272  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 273  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0x71, 0x00, 0x01};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 71	 mov	 BYTE PTR _bBuf$[ebp+3], 113 ; 00000071H
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 01	 mov	 BYTE PTR _bBuf$[ebp+5], 1

; 274  : #ifdef _LPort
; 275  : 		return m_LightComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  0002b	6a 06		 push	 6
  0002d	8d 45 f4	 lea	 eax, DWORD PTR _bBuf$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	83 c1 48	 add	 ecx, 72			; 00000048H
  00037	e8 00 00 00 00	 call	 ?SendData@CLightComIO@@QAEHPAEH@Z ; CLightComIO::SendData

; 276  : #else
; 277  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));
; 278  : #endif
; 279  : 	}

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003f	33 cd		 xor	 ecx, ebp
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?OpenLight@CPLC@@QAEHXZ ENDP				; CPLC::OpenLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?CloseLight@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?CloseLight@CPLC@@QAEHXZ PROC				; CPLC::CloseLight, COMDAT
; _this$ = ecx

; 282  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 283  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0x71, 0x00, 0x00};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 71	 mov	 BYTE PTR _bBuf$[ebp+3], 113 ; 00000071H
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 00	 mov	 BYTE PTR _bBuf$[ebp+5], 0

; 284  : #ifdef _LPort
; 285  : 		return m_LightComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  0002b	6a 06		 push	 6
  0002d	8d 45 f4	 lea	 eax, DWORD PTR _bBuf$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	83 c1 48	 add	 ecx, 72			; 00000048H
  00037	e8 00 00 00 00	 call	 ?SendData@CLightComIO@@QAEHPAEH@Z ; CLightComIO::SendData

; 286  : #else
; 287  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));
; 288  : #endif
; 289  : 	}

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003f	33 cd		 xor	 ecx, ebp
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?CloseLight@CPLC@@QAEHXZ ENDP				; CPLC::CloseLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Light@CPLC@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
_nVal$ = 8						; size = 4
?Light@CPLC@@QAEHH@Z PROC				; CPLC::Light, COMDAT
; _this$ = ecx

; 291  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 292  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0x21, 0x00, 0x00};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 21	 mov	 BYTE PTR _bBuf$[ebp+3], 33 ; 00000021H
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 00	 mov	 BYTE PTR _bBuf$[ebp+5], 0

; 293  : 		bBuf[5] = (BYTE)nVal;

  0002b	b8 01 00 00 00	 mov	 eax, 1
  00030	6b c0 05	 imul	 eax, 5
  00033	8a 4d 08	 mov	 cl, BYTE PTR _nVal$[ebp]
  00036	88 4c 05 f4	 mov	 BYTE PTR _bBuf$[ebp+eax], cl

; 294  : #ifdef _LPort
; 295  : 		return m_LightComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  0003a	6a 06		 push	 6
  0003c	8d 55 f4	 lea	 edx, DWORD PTR _bBuf$[ebp]
  0003f	52		 push	 edx
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	83 c1 48	 add	 ecx, 72			; 00000048H
  00046	e8 00 00 00 00	 call	 ?SendData@CLightComIO@@QAEHPAEH@Z ; CLightComIO::SendData

; 296  : #else
; 297  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));
; 298  : #endif
; 299  : 	}

  0004b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004e	33 cd		 xor	 ecx, ebp
  00050	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
?Light@CPLC@@QAEHH@Z ENDP				; CPLC::Light
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Brightness0@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Brightness0@CPLC@@QAEHXZ PROC				; CPLC::Brightness0, COMDAT
; _this$ = ecx

; 330  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 331  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA1, 0x00, 0x00};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a1	 mov	 BYTE PTR _bBuf$[ebp+3], 161 ; 000000a1H
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 00	 mov	 BYTE PTR _bBuf$[ebp+5], 0

; 332  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x0C, 0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 0c	 mov	 BYTE PTR _buf$[ebp+3], 12 ; 0000000cH
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 3c	 mov	 BYTE PTR _buf$[ebp+7], 60 ; 0000003cH
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 333  : 		m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00067	6a 0f		 push	 15			; 0000000fH
  00069	8d 45 e4	 lea	 eax, DWORD PTR _buf$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00076	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 334  : 
; 335  : 		Sleep(5);

  0007b	6a 05		 push	 5
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 336  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  00083	6a 06		 push	 6
  00085	8d 4d f4	 lea	 ecx, DWORD PTR _bBuf$[ebp]
  00088	51		 push	 ecx
  00089	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0008f	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 337  : 	}

  00094	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00097	33 cd		 xor	 ecx, ebp
  00099	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
?Brightness0@CPLC@@QAEHXZ ENDP				; CPLC::Brightness0
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Brightness1@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Brightness1@CPLC@@QAEHXZ PROC				; CPLC::Brightness1, COMDAT
; _this$ = ecx

; 340  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 341  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA1, 0x00, 0x01};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a1	 mov	 BYTE PTR _bBuf$[ebp+3], 161 ; 000000a1H
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 01	 mov	 BYTE PTR _bBuf$[ebp+5], 1

; 342  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x0C, 0x00,0x00,0x00,0x3D,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 0c	 mov	 BYTE PTR _buf$[ebp+3], 12 ; 0000000cH
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 3d	 mov	 BYTE PTR _buf$[ebp+7], 61 ; 0000003dH
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 343  : 		m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00067	6a 0f		 push	 15			; 0000000fH
  00069	8d 45 e4	 lea	 eax, DWORD PTR _buf$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00076	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 344  : 		Sleep(5);

  0007b	6a 05		 push	 5
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 345  : 
; 346  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  00083	6a 06		 push	 6
  00085	8d 4d f4	 lea	 ecx, DWORD PTR _bBuf$[ebp]
  00088	51		 push	 ecx
  00089	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0008f	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 347  : 	}

  00094	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00097	33 cd		 xor	 ecx, ebp
  00099	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
?Brightness1@CPLC@@QAEHXZ ENDP				; CPLC::Brightness1
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Brightness2@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Brightness2@CPLC@@QAEHXZ PROC				; CPLC::Brightness2, COMDAT
; _this$ = ecx

; 350  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 351  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA1, 0x00, 0x02};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a1	 mov	 BYTE PTR _bBuf$[ebp+3], 161 ; 000000a1H
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 02	 mov	 BYTE PTR _bBuf$[ebp+5], 2

; 352  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x0C, 0x00,0x00,0x00,0x3E,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 0c	 mov	 BYTE PTR _buf$[ebp+3], 12 ; 0000000cH
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 3e	 mov	 BYTE PTR _buf$[ebp+7], 62 ; 0000003eH
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 353  : 		m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00067	6a 0f		 push	 15			; 0000000fH
  00069	8d 45 e4	 lea	 eax, DWORD PTR _buf$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00076	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 354  : 		Sleep(5);

  0007b	6a 05		 push	 5
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 355  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  00083	6a 06		 push	 6
  00085	8d 4d f4	 lea	 ecx, DWORD PTR _bBuf$[ebp]
  00088	51		 push	 ecx
  00089	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0008f	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 356  : 	}

  00094	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00097	33 cd		 xor	 ecx, ebp
  00099	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
?Brightness2@CPLC@@QAEHXZ ENDP				; CPLC::Brightness2
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Brightness3@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Brightness3@CPLC@@QAEHXZ PROC				; CPLC::Brightness3, COMDAT
; _this$ = ecx

; 359  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 360  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA1, 0x00, 0x03};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a1	 mov	 BYTE PTR _bBuf$[ebp+3], 161 ; 000000a1H
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 03	 mov	 BYTE PTR _bBuf$[ebp+5], 3

; 361  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x0C, 0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 0c	 mov	 BYTE PTR _buf$[ebp+3], 12 ; 0000000cH
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 3f	 mov	 BYTE PTR _buf$[ebp+7], 63 ; 0000003fH
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 362  : 		m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00067	6a 0f		 push	 15			; 0000000fH
  00069	8d 45 e4	 lea	 eax, DWORD PTR _buf$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00076	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 363  : 		Sleep(5);

  0007b	6a 05		 push	 5
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 364  : 
; 365  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  00083	6a 06		 push	 6
  00085	8d 4d f4	 lea	 ecx, DWORD PTR _bBuf$[ebp]
  00088	51		 push	 ecx
  00089	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0008f	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 366  : 	}

  00094	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00097	33 cd		 xor	 ecx, ebp
  00099	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
?Brightness3@CPLC@@QAEHXZ ENDP				; CPLC::Brightness3
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Brightness4@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Brightness4@CPLC@@QAEHXZ PROC				; CPLC::Brightness4, COMDAT
; _this$ = ecx

; 369  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 370  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA1, 0x00, 0x04};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a1	 mov	 BYTE PTR _bBuf$[ebp+3], 161 ; 000000a1H
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 04	 mov	 BYTE PTR _bBuf$[ebp+5], 4

; 371  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x0C, 0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 0c	 mov	 BYTE PTR _buf$[ebp+3], 12 ; 0000000cH
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 40	 mov	 BYTE PTR _buf$[ebp+7], 64 ; 00000040H
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 372  : 		m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00067	6a 0f		 push	 15			; 0000000fH
  00069	8d 45 e4	 lea	 eax, DWORD PTR _buf$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00076	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 373  : 		Sleep(5);

  0007b	6a 05		 push	 5
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 374  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  00083	6a 06		 push	 6
  00085	8d 4d f4	 lea	 ecx, DWORD PTR _bBuf$[ebp]
  00088	51		 push	 ecx
  00089	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0008f	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 375  : 	}

  00094	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00097	33 cd		 xor	 ecx, ebp
  00099	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
?Brightness4@CPLC@@QAEHXZ ENDP				; CPLC::Brightness4
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Brightness5@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Brightness5@CPLC@@QAEHXZ PROC				; CPLC::Brightness5, COMDAT
; _this$ = ecx

; 378  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 379  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA1, 0x00, 0x05};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a1	 mov	 BYTE PTR _bBuf$[ebp+3], 161 ; 000000a1H
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 05	 mov	 BYTE PTR _bBuf$[ebp+5], 5

; 380  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x0C, 0x00,0x00,0x00,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 0c	 mov	 BYTE PTR _buf$[ebp+3], 12 ; 0000000cH
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 41	 mov	 BYTE PTR _buf$[ebp+7], 65 ; 00000041H
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 381  : 		 m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00067	6a 0f		 push	 15			; 0000000fH
  00069	8d 45 e4	 lea	 eax, DWORD PTR _buf$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00076	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 382  : 		 Sleep(5);

  0007b	6a 05		 push	 5
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 383  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  00083	6a 06		 push	 6
  00085	8d 4d f4	 lea	 ecx, DWORD PTR _bBuf$[ebp]
  00088	51		 push	 ecx
  00089	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0008f	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 384  : 	}

  00094	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00097	33 cd		 xor	 ecx, ebp
  00099	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
?Brightness5@CPLC@@QAEHXZ ENDP				; CPLC::Brightness5
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Brightness6@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Brightness6@CPLC@@QAEHXZ PROC				; CPLC::Brightness6, COMDAT
; _this$ = ecx

; 387  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 388  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA1, 0x00, 0x06};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a1	 mov	 BYTE PTR _bBuf$[ebp+3], 161 ; 000000a1H
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 06	 mov	 BYTE PTR _bBuf$[ebp+5], 6

; 389  : 
; 390  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x0C, 0x00,0x00,0x00,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 0c	 mov	 BYTE PTR _buf$[ebp+3], 12 ; 0000000cH
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 42	 mov	 BYTE PTR _buf$[ebp+7], 66 ; 00000042H
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 391  : 		m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00067	6a 0f		 push	 15			; 0000000fH
  00069	8d 45 e4	 lea	 eax, DWORD PTR _buf$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00076	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 392  : 		Sleep(5);

  0007b	6a 05		 push	 5
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 393  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  00083	6a 06		 push	 6
  00085	8d 4d f4	 lea	 ecx, DWORD PTR _bBuf$[ebp]
  00088	51		 push	 ecx
  00089	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0008f	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 394  : 	}

  00094	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00097	33 cd		 xor	 ecx, ebp
  00099	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
?Brightness6@CPLC@@QAEHXZ ENDP				; CPLC::Brightness6
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Brightness7@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Brightness7@CPLC@@QAEHXZ PROC				; CPLC::Brightness7, COMDAT
; _this$ = ecx

; 397  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 398  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA1, 0x00, 0x07};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a1	 mov	 BYTE PTR _bBuf$[ebp+3], 161 ; 000000a1H
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 07	 mov	 BYTE PTR _bBuf$[ebp+5], 7

; 399  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x0C, 0x00,0x00,0x00,0x43,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 0c	 mov	 BYTE PTR _buf$[ebp+3], 12 ; 0000000cH
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 43	 mov	 BYTE PTR _buf$[ebp+7], 67 ; 00000043H
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 400  : 		m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00067	6a 0f		 push	 15			; 0000000fH
  00069	8d 45 e4	 lea	 eax, DWORD PTR _buf$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00076	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 401  : 		Sleep(5);

  0007b	6a 05		 push	 5
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 402  : 		 return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  00083	6a 06		 push	 6
  00085	8d 4d f4	 lea	 ecx, DWORD PTR _bBuf$[ebp]
  00088	51		 push	 ecx
  00089	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0008f	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 403  : 	}

  00094	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00097	33 cd		 xor	 ecx, ebp
  00099	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
?Brightness7@CPLC@@QAEHXZ ENDP				; CPLC::Brightness7
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Brightness8@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Brightness8@CPLC@@QAEHXZ PROC				; CPLC::Brightness8, COMDAT
; _this$ = ecx

; 406  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 407  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA1, 0x00, 0x08};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a1	 mov	 BYTE PTR _bBuf$[ebp+3], 161 ; 000000a1H
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 08	 mov	 BYTE PTR _bBuf$[ebp+5], 8

; 408  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x0C, 0x00,0x00,0x00,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 0c	 mov	 BYTE PTR _buf$[ebp+3], 12 ; 0000000cH
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 44	 mov	 BYTE PTR _buf$[ebp+7], 68 ; 00000044H
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 409  : 		m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00067	6a 0f		 push	 15			; 0000000fH
  00069	8d 45 e4	 lea	 eax, DWORD PTR _buf$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00076	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 410  : 		Sleep(5);

  0007b	6a 05		 push	 5
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 411  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  00083	6a 06		 push	 6
  00085	8d 4d f4	 lea	 ecx, DWORD PTR _bBuf$[ebp]
  00088	51		 push	 ecx
  00089	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0008f	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 412  : 	}

  00094	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00097	33 cd		 xor	 ecx, ebp
  00099	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
?Brightness8@CPLC@@QAEHXZ ENDP				; CPLC::Brightness8
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Brightness9@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Brightness9@CPLC@@QAEHXZ PROC				; CPLC::Brightness9, COMDAT
; _this$ = ecx

; 415  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 416  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA1, 0x00, 0x09};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a1	 mov	 BYTE PTR _bBuf$[ebp+3], 161 ; 000000a1H
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 09	 mov	 BYTE PTR _bBuf$[ebp+5], 9

; 417  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x0C, 0x00,0x00,0x00,0x45,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 0c	 mov	 BYTE PTR _buf$[ebp+3], 12 ; 0000000cH
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 45	 mov	 BYTE PTR _buf$[ebp+7], 69 ; 00000045H
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 418  : 		m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00067	6a 0f		 push	 15			; 0000000fH
  00069	8d 45 e4	 lea	 eax, DWORD PTR _buf$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00076	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 419  : 		Sleep(5);

  0007b	6a 05		 push	 5
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 420  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  00083	6a 06		 push	 6
  00085	8d 4d f4	 lea	 ecx, DWORD PTR _bBuf$[ebp]
  00088	51		 push	 ecx
  00089	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0008f	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 421  : 	}

  00094	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00097	33 cd		 xor	 ecx, ebp
  00099	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
?Brightness9@CPLC@@QAEHXZ ENDP				; CPLC::Brightness9
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Brightness10@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Brightness10@CPLC@@QAEHXZ PROC				; CPLC::Brightness10, COMDAT
; _this$ = ecx

; 424  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 425  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA1, 0x00, 0x0A};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a1	 mov	 BYTE PTR _bBuf$[ebp+3], 161 ; 000000a1H
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 0a	 mov	 BYTE PTR _bBuf$[ebp+5], 10 ; 0000000aH

; 426  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x0C, 0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 0c	 mov	 BYTE PTR _buf$[ebp+3], 12 ; 0000000cH
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 46	 mov	 BYTE PTR _buf$[ebp+7], 70 ; 00000046H
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 427  : 		m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00067	6a 0f		 push	 15			; 0000000fH
  00069	8d 45 e4	 lea	 eax, DWORD PTR _buf$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00076	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 428  : 		Sleep(5);

  0007b	6a 05		 push	 5
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 429  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  00083	6a 06		 push	 6
  00085	8d 4d f4	 lea	 ecx, DWORD PTR _bBuf$[ebp]
  00088	51		 push	 ecx
  00089	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0008f	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 430  : 	}

  00094	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00097	33 cd		 xor	 ecx, ebp
  00099	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
?Brightness10@CPLC@@QAEHXZ ENDP				; CPLC::Brightness10
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Brightness11@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Brightness11@CPLC@@QAEHXZ PROC				; CPLC::Brightness11, COMDAT
; _this$ = ecx

; 433  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 434  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA1, 0xFF, 0xFF};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a1	 mov	 BYTE PTR _bBuf$[ebp+3], 161 ; 000000a1H
  00023	c6 45 f8 ff	 mov	 BYTE PTR _bBuf$[ebp+4], 255 ; 000000ffH
  00027	c6 45 f9 ff	 mov	 BYTE PTR _bBuf$[ebp+5], 255 ; 000000ffH

; 435  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x0C, 0x00,0x00,0x00,0x3B,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 0c	 mov	 BYTE PTR _buf$[ebp+3], 12 ; 0000000cH
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 3b	 mov	 BYTE PTR _buf$[ebp+7], 59 ; 0000003bH
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 436  : 		return m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00067	6a 0f		 push	 15			; 0000000fH
  00069	8d 45 e4	 lea	 eax, DWORD PTR _buf$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00076	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData
  0007b	eb 19		 jmp	 SHORT $LN1@Brightness

; 437  : 		Sleep(5);

  0007d	6a 05		 push	 5
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 438  : 		 m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  00085	6a 06		 push	 6
  00087	8d 4d f4	 lea	 ecx, DWORD PTR _bBuf$[ebp]
  0008a	51		 push	 ecx
  0008b	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00091	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData
$LN1@Brightness:

; 439  : 	}

  00096	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00099	33 cd		 xor	 ecx, ebp
  0009b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c3		 ret	 0
?Brightness11@CPLC@@QAEHXZ ENDP				; CPLC::Brightness11
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Brightness12@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Brightness12@CPLC@@QAEHXZ PROC				; CPLC::Brightness12, COMDAT
; _this$ = ecx

; 442  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 443  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA1, 0xFF, 0xFE};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a1	 mov	 BYTE PTR _bBuf$[ebp+3], 161 ; 000000a1H
  00023	c6 45 f8 ff	 mov	 BYTE PTR _bBuf$[ebp+4], 255 ; 000000ffH
  00027	c6 45 f9 fe	 mov	 BYTE PTR _bBuf$[ebp+5], 254 ; 000000feH

; 444  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x0C, 0x00,0x00,0x00,0x3A,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 0c	 mov	 BYTE PTR _buf$[ebp+3], 12 ; 0000000cH
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 3a	 mov	 BYTE PTR _buf$[ebp+7], 58 ; 0000003aH
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 445  : 		return m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00067	6a 0f		 push	 15			; 0000000fH
  00069	8d 45 e4	 lea	 eax, DWORD PTR _buf$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00076	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData
  0007b	eb 19		 jmp	 SHORT $LN1@Brightness

; 446  : 		Sleep(5);

  0007d	6a 05		 push	 5
  0007f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 447  : 		 m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  00085	6a 06		 push	 6
  00087	8d 4d f4	 lea	 ecx, DWORD PTR _bBuf$[ebp]
  0008a	51		 push	 ecx
  0008b	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008e	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00091	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData
$LN1@Brightness:

; 448  : 	}

  00096	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00099	33 cd		 xor	 ecx, ebp
  0009b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c3		 ret	 0
?Brightness12@CPLC@@QAEHXZ ENDP				; CPLC::Brightness12
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Brightness13@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Brightness13@CPLC@@QAEHXZ PROC				; CPLC::Brightness13, COMDAT
; _this$ = ecx

; 451  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 452  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA1, 0xFF, 0xFD};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a1	 mov	 BYTE PTR _bBuf$[ebp+3], 161 ; 000000a1H
  00023	c6 45 f8 ff	 mov	 BYTE PTR _bBuf$[ebp+4], 255 ; 000000ffH
  00027	c6 45 f9 fd	 mov	 BYTE PTR _bBuf$[ebp+5], 253 ; 000000fdH

; 453  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x0C, 0x00,0x00,0x00,0x39,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 0c	 mov	 BYTE PTR _buf$[ebp+3], 12 ; 0000000cH
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 39	 mov	 BYTE PTR _buf$[ebp+7], 57 ; 00000039H
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 454  : 		 m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00067	6a 0f		 push	 15			; 0000000fH
  00069	8d 45 e4	 lea	 eax, DWORD PTR _buf$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00076	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 455  : 		 Sleep(5);

  0007b	6a 05		 push	 5
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 456  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  00083	6a 06		 push	 6
  00085	8d 4d f4	 lea	 ecx, DWORD PTR _bBuf$[ebp]
  00088	51		 push	 ecx
  00089	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0008f	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 457  : 	}

  00094	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00097	33 cd		 xor	 ecx, ebp
  00099	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
?Brightness13@CPLC@@QAEHXZ ENDP				; CPLC::Brightness13
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Brightness14@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Brightness14@CPLC@@QAEHXZ PROC				; CPLC::Brightness14, COMDAT
; _this$ = ecx

; 460  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 461  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA1, 0xFF, 0xFC};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a1	 mov	 BYTE PTR _bBuf$[ebp+3], 161 ; 000000a1H
  00023	c6 45 f8 ff	 mov	 BYTE PTR _bBuf$[ebp+4], 255 ; 000000ffH
  00027	c6 45 f9 fc	 mov	 BYTE PTR _bBuf$[ebp+5], 252 ; 000000fcH

; 462  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x0C, 0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 0c	 mov	 BYTE PTR _buf$[ebp+3], 12 ; 0000000cH
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 38	 mov	 BYTE PTR _buf$[ebp+7], 56 ; 00000038H
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 463  : 		 m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00067	6a 0f		 push	 15			; 0000000fH
  00069	8d 45 e4	 lea	 eax, DWORD PTR _buf$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00076	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 464  : 		 Sleep(5);

  0007b	6a 05		 push	 5
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 465  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  00083	6a 06		 push	 6
  00085	8d 4d f4	 lea	 ecx, DWORD PTR _bBuf$[ebp]
  00088	51		 push	 ecx
  00089	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0008f	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 466  : 	}

  00094	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00097	33 cd		 xor	 ecx, ebp
  00099	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
?Brightness14@CPLC@@QAEHXZ ENDP				; CPLC::Brightness14
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Brightness15@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Brightness15@CPLC@@QAEHXZ PROC				; CPLC::Brightness15, COMDAT
; _this$ = ecx

; 469  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 470  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA1, 0xFF, 0xFB};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a1	 mov	 BYTE PTR _bBuf$[ebp+3], 161 ; 000000a1H
  00023	c6 45 f8 ff	 mov	 BYTE PTR _bBuf$[ebp+4], 255 ; 000000ffH
  00027	c6 45 f9 fb	 mov	 BYTE PTR _bBuf$[ebp+5], 251 ; 000000fbH

; 471  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x0C, 0x00,0x00,0x00,0x37,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 0c	 mov	 BYTE PTR _buf$[ebp+3], 12 ; 0000000cH
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 37	 mov	 BYTE PTR _buf$[ebp+7], 55 ; 00000037H
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 472  : 		 m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00067	6a 0f		 push	 15			; 0000000fH
  00069	8d 45 e4	 lea	 eax, DWORD PTR _buf$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00076	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 473  : 		 Sleep(5);

  0007b	6a 05		 push	 5
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 474  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  00083	6a 06		 push	 6
  00085	8d 4d f4	 lea	 ecx, DWORD PTR _bBuf$[ebp]
  00088	51		 push	 ecx
  00089	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0008f	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 475  : 	}

  00094	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00097	33 cd		 xor	 ecx, ebp
  00099	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
?Brightness15@CPLC@@QAEHXZ ENDP				; CPLC::Brightness15
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Brightness16@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Brightness16@CPLC@@QAEHXZ PROC				; CPLC::Brightness16, COMDAT
; _this$ = ecx

; 478  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 479  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA1, 0xFF, 0xFA};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a1	 mov	 BYTE PTR _bBuf$[ebp+3], 161 ; 000000a1H
  00023	c6 45 f8 ff	 mov	 BYTE PTR _bBuf$[ebp+4], 255 ; 000000ffH
  00027	c6 45 f9 fa	 mov	 BYTE PTR _bBuf$[ebp+5], 250 ; 000000faH

; 480  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x0C, 0x00,0x00,0x00,0x36,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 0c	 mov	 BYTE PTR _buf$[ebp+3], 12 ; 0000000cH
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 36	 mov	 BYTE PTR _buf$[ebp+7], 54 ; 00000036H
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 481  : 		 m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00067	6a 0f		 push	 15			; 0000000fH
  00069	8d 45 e4	 lea	 eax, DWORD PTR _buf$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00076	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 482  : 		 Sleep(5);

  0007b	6a 05		 push	 5
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 483  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  00083	6a 06		 push	 6
  00085	8d 4d f4	 lea	 ecx, DWORD PTR _bBuf$[ebp]
  00088	51		 push	 ecx
  00089	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0008f	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 484  : 	}

  00094	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00097	33 cd		 xor	 ecx, ebp
  00099	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
?Brightness16@CPLC@@QAEHXZ ENDP				; CPLC::Brightness16
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Brightness17@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Brightness17@CPLC@@QAEHXZ PROC				; CPLC::Brightness17, COMDAT
; _this$ = ecx

; 487  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 488  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA1, 0xFF, 0xF9};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a1	 mov	 BYTE PTR _bBuf$[ebp+3], 161 ; 000000a1H
  00023	c6 45 f8 ff	 mov	 BYTE PTR _bBuf$[ebp+4], 255 ; 000000ffH
  00027	c6 45 f9 f9	 mov	 BYTE PTR _bBuf$[ebp+5], 249 ; 000000f9H

; 489  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x0C, 0x00,0x00,0x00,0x35,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 0c	 mov	 BYTE PTR _buf$[ebp+3], 12 ; 0000000cH
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 35	 mov	 BYTE PTR _buf$[ebp+7], 53 ; 00000035H
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 490  : 		 m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00067	6a 0f		 push	 15			; 0000000fH
  00069	8d 45 e4	 lea	 eax, DWORD PTR _buf$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00076	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 491  : 		 Sleep(5);

  0007b	6a 05		 push	 5
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 492  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  00083	6a 06		 push	 6
  00085	8d 4d f4	 lea	 ecx, DWORD PTR _bBuf$[ebp]
  00088	51		 push	 ecx
  00089	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0008f	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 493  : 	}

  00094	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00097	33 cd		 xor	 ecx, ebp
  00099	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
?Brightness17@CPLC@@QAEHXZ ENDP				; CPLC::Brightness17
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Brightness18@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Brightness18@CPLC@@QAEHXZ PROC				; CPLC::Brightness18, COMDAT
; _this$ = ecx

; 496  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 497  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA1, 0xFF, 0xF8};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a1	 mov	 BYTE PTR _bBuf$[ebp+3], 161 ; 000000a1H
  00023	c6 45 f8 ff	 mov	 BYTE PTR _bBuf$[ebp+4], 255 ; 000000ffH
  00027	c6 45 f9 f8	 mov	 BYTE PTR _bBuf$[ebp+5], 248 ; 000000f8H

; 498  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x0C, 0x00,0x00,0x00,0x34,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 0c	 mov	 BYTE PTR _buf$[ebp+3], 12 ; 0000000cH
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 34	 mov	 BYTE PTR _buf$[ebp+7], 52 ; 00000034H
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 499  : 		 m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00067	6a 0f		 push	 15			; 0000000fH
  00069	8d 45 e4	 lea	 eax, DWORD PTR _buf$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00076	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 500  : 		 Sleep(5);

  0007b	6a 05		 push	 5
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 501  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  00083	6a 06		 push	 6
  00085	8d 4d f4	 lea	 ecx, DWORD PTR _bBuf$[ebp]
  00088	51		 push	 ecx
  00089	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0008f	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 502  : 	}

  00094	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00097	33 cd		 xor	 ecx, ebp
  00099	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
?Brightness18@CPLC@@QAEHXZ ENDP				; CPLC::Brightness18
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Brightness19@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Brightness19@CPLC@@QAEHXZ PROC				; CPLC::Brightness19, COMDAT
; _this$ = ecx

; 505  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 506  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA1, 0xFF, 0xF7};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a1	 mov	 BYTE PTR _bBuf$[ebp+3], 161 ; 000000a1H
  00023	c6 45 f8 ff	 mov	 BYTE PTR _bBuf$[ebp+4], 255 ; 000000ffH
  00027	c6 45 f9 f7	 mov	 BYTE PTR _bBuf$[ebp+5], 247 ; 000000f7H

; 507  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x0C, 0x00,0x00,0x00,0x33,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 0c	 mov	 BYTE PTR _buf$[ebp+3], 12 ; 0000000cH
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 33	 mov	 BYTE PTR _buf$[ebp+7], 51 ; 00000033H
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 508  : 		 m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00067	6a 0f		 push	 15			; 0000000fH
  00069	8d 45 e4	 lea	 eax, DWORD PTR _buf$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00076	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 509  : 		 Sleep(5);

  0007b	6a 05		 push	 5
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 510  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  00083	6a 06		 push	 6
  00085	8d 4d f4	 lea	 ecx, DWORD PTR _bBuf$[ebp]
  00088	51		 push	 ecx
  00089	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0008f	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 511  : 	}

  00094	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00097	33 cd		 xor	 ecx, ebp
  00099	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
?Brightness19@CPLC@@QAEHXZ ENDP				; CPLC::Brightness19
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Brightness20@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Brightness20@CPLC@@QAEHXZ PROC				; CPLC::Brightness20, COMDAT
; _this$ = ecx

; 514  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 515  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA1, 0xFF, 0xF6};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a1	 mov	 BYTE PTR _bBuf$[ebp+3], 161 ; 000000a1H
  00023	c6 45 f8 ff	 mov	 BYTE PTR _bBuf$[ebp+4], 255 ; 000000ffH
  00027	c6 45 f9 f6	 mov	 BYTE PTR _bBuf$[ebp+5], 246 ; 000000f6H

; 516  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x0C, 0x00,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 0c	 mov	 BYTE PTR _buf$[ebp+3], 12 ; 0000000cH
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 32	 mov	 BYTE PTR _buf$[ebp+7], 50 ; 00000032H
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 517  : 		 m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00067	6a 0f		 push	 15			; 0000000fH
  00069	8d 45 e4	 lea	 eax, DWORD PTR _buf$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00076	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 518  : 		 Sleep(5);

  0007b	6a 05		 push	 5
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 519  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  00083	6a 06		 push	 6
  00085	8d 4d f4	 lea	 ecx, DWORD PTR _bBuf$[ebp]
  00088	51		 push	 ecx
  00089	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0008f	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 520  : 	}

  00094	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00097	33 cd		 xor	 ecx, ebp
  00099	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
?Brightness20@CPLC@@QAEHXZ ENDP				; CPLC::Brightness20
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Contrast@CPLC@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
_nVal$ = 8						; size = 4
?Contrast@CPLC@@QAEHH@Z PROC				; CPLC::Contrast, COMDAT
; _this$ = ecx

; 523  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 524  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x0D, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  00013	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  00017	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  0001b	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  0001f	c6 45 e7 0d	 mov	 BYTE PTR _buf$[ebp+3], 13 ; 0000000dH
  00023	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  00027	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  0002b	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  0002f	c6 45 eb 00	 mov	 BYTE PTR _buf$[ebp+7], 0
  00033	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  00037	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  0003b	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  0003f	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  00043	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  00047	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  0004b	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 525  : 		buf[7] = (BYTE)(nVal+5);

  0004f	8b 45 08	 mov	 eax, DWORD PTR _nVal$[ebp]
  00052	83 c0 05	 add	 eax, 5
  00055	b9 01 00 00 00	 mov	 ecx, 1
  0005a	6b c9 07	 imul	 ecx, 7
  0005d	88 44 0d e4	 mov	 BYTE PTR _buf$[ebp+ecx], al

; 526  : 		m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00061	6a 0f		 push	 15			; 0000000fH
  00063	8d 55 e4	 lea	 edx, DWORD PTR _buf$[ebp]
  00066	52		 push	 edx
  00067	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00070	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 527  : 		Sleep(5);

  00075	6a 05		 push	 5
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 528  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA2, 0x00, 0x00};

  0007d	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00081	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  00085	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  00089	c6 45 f7 a2	 mov	 BYTE PTR _bBuf$[ebp+3], 162 ; 000000a2H
  0008d	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00091	c6 45 f9 00	 mov	 BYTE PTR _bBuf$[ebp+5], 0

; 529  : 		bBuf[5] = (BYTE)nVal;

  00095	b8 01 00 00 00	 mov	 eax, 1
  0009a	6b c0 05	 imul	 eax, 5
  0009d	8a 4d 08	 mov	 cl, BYTE PTR _nVal$[ebp]
  000a0	88 4c 05 f4	 mov	 BYTE PTR _bBuf$[ebp+eax], cl

; 530  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  000a4	6a 06		 push	 6
  000a6	8d 55 f4	 lea	 edx, DWORD PTR _bBuf$[ebp]
  000a9	52		 push	 edx
  000aa	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ad	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000b0	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 531  : 	}

  000b5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b8	33 cd		 xor	 ecx, ebp
  000ba	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c2 04 00	 ret	 4
?Contrast@CPLC@@QAEHH@Z ENDP				; CPLC::Contrast
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Saturation@CPLC@@QAEHH@Z
_TEXT	SEGMENT
_temp$ = -36						; size = 4
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
_nVal$ = 8						; size = 4
?Saturation@CPLC@@QAEHH@Z PROC				; CPLC::Saturation, COMDAT
; _this$ = ecx

; 534  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 535  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x02, 0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  00013	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  00017	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  0001b	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  0001f	c6 45 e7 02	 mov	 BYTE PTR _buf$[ebp+3], 2
  00023	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  00027	c6 45 e9 02	 mov	 BYTE PTR _buf$[ebp+5], 2
  0002b	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  0002f	c6 45 eb 00	 mov	 BYTE PTR _buf$[ebp+7], 0
  00033	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  00037	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  0003b	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  0003f	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  00043	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  00047	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  0004b	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 536  : 		//buf[7] = nVal*10;
; 537  : 		int temp = nVal+60;

  0004f	8b 45 08	 mov	 eax, DWORD PTR _nVal$[ebp]
  00052	83 c0 3c	 add	 eax, 60			; 0000003cH
  00055	89 45 dc	 mov	 DWORD PTR _temp$[ebp], eax

; 538  : 		buf[7] = (BYTE)temp;

  00058	b9 01 00 00 00	 mov	 ecx, 1
  0005d	6b c9 07	 imul	 ecx, 7
  00060	8a 55 dc	 mov	 dl, BYTE PTR _temp$[ebp]
  00063	88 54 0d e4	 mov	 BYTE PTR _buf$[ebp+ecx], dl

; 539  : 		m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00067	6a 0f		 push	 15			; 0000000fH
  00069	8d 45 e4	 lea	 eax, DWORD PTR _buf$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00076	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 540  : 		Sleep(5);

  0007b	6a 05		 push	 5
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 541  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA3, 0x00, 0x00};

  00083	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00087	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0008b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0008f	c6 45 f7 a3	 mov	 BYTE PTR _bBuf$[ebp+3], 163 ; 000000a3H
  00093	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00097	c6 45 f9 00	 mov	 BYTE PTR _bBuf$[ebp+5], 0

; 542  : 		bBuf[5] = (BYTE)nVal;

  0009b	b9 01 00 00 00	 mov	 ecx, 1
  000a0	6b c9 05	 imul	 ecx, 5
  000a3	8a 55 08	 mov	 dl, BYTE PTR _nVal$[ebp]
  000a6	88 54 0d f4	 mov	 BYTE PTR _bBuf$[ebp+ecx], dl

; 543  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  000aa	6a 06		 push	 6
  000ac	8d 45 f4	 lea	 eax, DWORD PTR _bBuf$[ebp]
  000af	50		 push	 eax
  000b0	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b3	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000b6	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 544  : 	}

  000bb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000be	33 cd		 xor	 ecx, ebp
  000c0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c2 04 00	 ret	 4
?Saturation@CPLC@@QAEHH@Z ENDP				; CPLC::Saturation
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Exposure0@CPLC@@QAEHXZ
_TEXT	SEGMENT
$T1 = -36						; size = 4
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Exposure0@CPLC@@QAEHXZ PROC				; CPLC::Exposure0, COMDAT
; _this$ = ecx

; 548  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 549  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA4, 0x00, 0x00};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a4	 mov	 BYTE PTR _bBuf$[ebp+3], 164 ; 000000a4H
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 00	 mov	 BYTE PTR _bBuf$[ebp+5], 0

; 550  : 		//BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x0C, 0x00,0x00,0x00,0x64,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
; 551  : 		
; 552  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x05, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 05	 mov	 BYTE PTR _buf$[ebp+3], 5
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 00	 mov	 BYTE PTR _buf$[ebp+7], 0
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 553  : 		buf[7] = 0;

  00067	b8 01 00 00 00	 mov	 eax, 1
  0006c	6b c0 07	 imul	 eax, 7
  0006f	89 45 dc	 mov	 DWORD PTR $T1[ebp], eax
  00072	83 7d dc 0f	 cmp	 DWORD PTR $T1[ebp], 15	; 0000000fH
  00076	73 02		 jae	 SHORT $LN3@Exposure0
  00078	eb 05		 jmp	 SHORT $LN4@Exposure0
$LN3@Exposure0:
  0007a	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN4@Exposure0:
  0007f	8b 4d dc	 mov	 ecx, DWORD PTR $T1[ebp]
  00082	c6 44 0d e4 00	 mov	 BYTE PTR _buf$[ebp+ecx], 0

; 554  : 		 m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00087	6a 0f		 push	 15			; 0000000fH
  00089	8d 55 e4	 lea	 edx, DWORD PTR _buf$[ebp]
  0008c	52		 push	 edx
  0008d	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00096	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 555  : 		 Sleep(5);

  0009b	6a 05		 push	 5
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 556  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  000a3	6a 06		 push	 6
  000a5	8d 45 f4	 lea	 eax, DWORD PTR _bBuf$[ebp]
  000a8	50		 push	 eax
  000a9	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000af	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData
$LN2@Exposure0:

; 557  : 	}

  000b4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b7	33 cd		 xor	 ecx, ebp
  000b9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c3		 ret	 0
?Exposure0@CPLC@@QAEHXZ ENDP				; CPLC::Exposure0
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Exposure1@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Exposure1@CPLC@@QAEHXZ PROC				; CPLC::Exposure1, COMDAT
; _this$ = ecx

; 560  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 561  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA4, 0xFF, 0xFF};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a4	 mov	 BYTE PTR _bBuf$[ebp+3], 164 ; 000000a4H
  00023	c6 45 f8 ff	 mov	 BYTE PTR _bBuf$[ebp+4], 255 ; 000000ffH
  00027	c6 45 f9 ff	 mov	 BYTE PTR _bBuf$[ebp+5], 255 ; 000000ffH

; 562  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x05, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 05	 mov	 BYTE PTR _buf$[ebp+3], 5
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 00	 mov	 BYTE PTR _buf$[ebp+7], 0
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 563  : 		buf[7] = 0x01;

  00067	b8 01 00 00 00	 mov	 eax, 1
  0006c	6b c0 07	 imul	 eax, 7
  0006f	c6 44 05 e4 01	 mov	 BYTE PTR _buf$[ebp+eax], 1

; 564  : 		 m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00074	6a 0f		 push	 15			; 0000000fH
  00076	8d 4d e4	 lea	 ecx, DWORD PTR _buf$[ebp]
  00079	51		 push	 ecx
  0007a	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00083	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 565  : 		 Sleep(5);

  00088	6a 05		 push	 5
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 566  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  00090	6a 06		 push	 6
  00092	8d 55 f4	 lea	 edx, DWORD PTR _bBuf$[ebp]
  00095	52		 push	 edx
  00096	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0009c	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 567  : 	}

  000a1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a4	33 cd		 xor	 ecx, ebp
  000a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
?Exposure1@CPLC@@QAEHXZ ENDP				; CPLC::Exposure1
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Exposure2@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Exposure2@CPLC@@QAEHXZ PROC				; CPLC::Exposure2, COMDAT
; _this$ = ecx

; 570  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 571  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA4, 0xFF, 0xFE};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a4	 mov	 BYTE PTR _bBuf$[ebp+3], 164 ; 000000a4H
  00023	c6 45 f8 ff	 mov	 BYTE PTR _bBuf$[ebp+4], 255 ; 000000ffH
  00027	c6 45 f9 fe	 mov	 BYTE PTR _bBuf$[ebp+5], 254 ; 000000feH

; 572  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x05, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 05	 mov	 BYTE PTR _buf$[ebp+3], 5
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 00	 mov	 BYTE PTR _buf$[ebp+7], 0
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 573  : 		buf[7] = 0x02;

  00067	b8 01 00 00 00	 mov	 eax, 1
  0006c	6b c0 07	 imul	 eax, 7
  0006f	c6 44 05 e4 02	 mov	 BYTE PTR _buf$[ebp+eax], 2

; 574  : 		 m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00074	6a 0f		 push	 15			; 0000000fH
  00076	8d 4d e4	 lea	 ecx, DWORD PTR _buf$[ebp]
  00079	51		 push	 ecx
  0007a	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00083	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 575  : 		 Sleep(5);

  00088	6a 05		 push	 5
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 576  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  00090	6a 06		 push	 6
  00092	8d 55 f4	 lea	 edx, DWORD PTR _bBuf$[ebp]
  00095	52		 push	 edx
  00096	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0009c	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 577  : 	}

  000a1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a4	33 cd		 xor	 ecx, ebp
  000a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
?Exposure2@CPLC@@QAEHXZ ENDP				; CPLC::Exposure2
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Exposure3@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Exposure3@CPLC@@QAEHXZ PROC				; CPLC::Exposure3, COMDAT
; _this$ = ecx

; 580  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 581  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA4, 0xFF, 0xFD};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a4	 mov	 BYTE PTR _bBuf$[ebp+3], 164 ; 000000a4H
  00023	c6 45 f8 ff	 mov	 BYTE PTR _bBuf$[ebp+4], 255 ; 000000ffH
  00027	c6 45 f9 fd	 mov	 BYTE PTR _bBuf$[ebp+5], 253 ; 000000fdH

; 582  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x05, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 05	 mov	 BYTE PTR _buf$[ebp+3], 5
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 00	 mov	 BYTE PTR _buf$[ebp+7], 0
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 583  : 		buf[7] = 0x03;

  00067	b8 01 00 00 00	 mov	 eax, 1
  0006c	6b c0 07	 imul	 eax, 7
  0006f	c6 44 05 e4 03	 mov	 BYTE PTR _buf$[ebp+eax], 3

; 584  : 		 m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00074	6a 0f		 push	 15			; 0000000fH
  00076	8d 4d e4	 lea	 ecx, DWORD PTR _buf$[ebp]
  00079	51		 push	 ecx
  0007a	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00083	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 585  : 		 Sleep(5);

  00088	6a 05		 push	 5
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 586  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  00090	6a 06		 push	 6
  00092	8d 55 f4	 lea	 edx, DWORD PTR _bBuf$[ebp]
  00095	52		 push	 edx
  00096	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0009c	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 587  : 	}

  000a1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a4	33 cd		 xor	 ecx, ebp
  000a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
?Exposure3@CPLC@@QAEHXZ ENDP				; CPLC::Exposure3
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Exposure4@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Exposure4@CPLC@@QAEHXZ PROC				; CPLC::Exposure4, COMDAT
; _this$ = ecx

; 590  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 591  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA4, 0xFF, 0xFC};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a4	 mov	 BYTE PTR _bBuf$[ebp+3], 164 ; 000000a4H
  00023	c6 45 f8 ff	 mov	 BYTE PTR _bBuf$[ebp+4], 255 ; 000000ffH
  00027	c6 45 f9 fc	 mov	 BYTE PTR _bBuf$[ebp+5], 252 ; 000000fcH

; 592  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x05, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 05	 mov	 BYTE PTR _buf$[ebp+3], 5
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 00	 mov	 BYTE PTR _buf$[ebp+7], 0
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 593  : 		buf[7] = 0x04;

  00067	b8 01 00 00 00	 mov	 eax, 1
  0006c	6b c0 07	 imul	 eax, 7
  0006f	c6 44 05 e4 04	 mov	 BYTE PTR _buf$[ebp+eax], 4

; 594  : 		 m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00074	6a 0f		 push	 15			; 0000000fH
  00076	8d 4d e4	 lea	 ecx, DWORD PTR _buf$[ebp]
  00079	51		 push	 ecx
  0007a	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00083	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 595  : 		 Sleep(5);

  00088	6a 05		 push	 5
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 596  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  00090	6a 06		 push	 6
  00092	8d 55 f4	 lea	 edx, DWORD PTR _bBuf$[ebp]
  00095	52		 push	 edx
  00096	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0009c	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 597  : 	}

  000a1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a4	33 cd		 xor	 ecx, ebp
  000a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
?Exposure4@CPLC@@QAEHXZ ENDP				; CPLC::Exposure4
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Exposure5@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Exposure5@CPLC@@QAEHXZ PROC				; CPLC::Exposure5, COMDAT
; _this$ = ecx

; 600  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 601  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA4, 0xFF, 0xFB};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a4	 mov	 BYTE PTR _bBuf$[ebp+3], 164 ; 000000a4H
  00023	c6 45 f8 ff	 mov	 BYTE PTR _bBuf$[ebp+4], 255 ; 000000ffH
  00027	c6 45 f9 fb	 mov	 BYTE PTR _bBuf$[ebp+5], 251 ; 000000fbH

; 602  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x05, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 05	 mov	 BYTE PTR _buf$[ebp+3], 5
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 00	 mov	 BYTE PTR _buf$[ebp+7], 0
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 603  : 		buf[7] = 0x05;

  00067	b8 01 00 00 00	 mov	 eax, 1
  0006c	6b c0 07	 imul	 eax, 7
  0006f	c6 44 05 e4 05	 mov	 BYTE PTR _buf$[ebp+eax], 5

; 604  : 		 m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00074	6a 0f		 push	 15			; 0000000fH
  00076	8d 4d e4	 lea	 ecx, DWORD PTR _buf$[ebp]
  00079	51		 push	 ecx
  0007a	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00083	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 605  : 		 Sleep(5);

  00088	6a 05		 push	 5
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 606  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  00090	6a 06		 push	 6
  00092	8d 55 f4	 lea	 edx, DWORD PTR _bBuf$[ebp]
  00095	52		 push	 edx
  00096	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0009c	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 607  : 	}

  000a1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a4	33 cd		 xor	 ecx, ebp
  000a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
?Exposure5@CPLC@@QAEHXZ ENDP				; CPLC::Exposure5
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Exposure6@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Exposure6@CPLC@@QAEHXZ PROC				; CPLC::Exposure6, COMDAT
; _this$ = ecx

; 610  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 611  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA4, 0xFF, 0xFA};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a4	 mov	 BYTE PTR _bBuf$[ebp+3], 164 ; 000000a4H
  00023	c6 45 f8 ff	 mov	 BYTE PTR _bBuf$[ebp+4], 255 ; 000000ffH
  00027	c6 45 f9 fa	 mov	 BYTE PTR _bBuf$[ebp+5], 250 ; 000000faH

; 612  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x05, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 05	 mov	 BYTE PTR _buf$[ebp+3], 5
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 00	 mov	 BYTE PTR _buf$[ebp+7], 0
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 613  : 		buf[7] = 0x06;

  00067	b8 01 00 00 00	 mov	 eax, 1
  0006c	6b c0 07	 imul	 eax, 7
  0006f	c6 44 05 e4 06	 mov	 BYTE PTR _buf$[ebp+eax], 6

; 614  : 		 m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00074	6a 0f		 push	 15			; 0000000fH
  00076	8d 4d e4	 lea	 ecx, DWORD PTR _buf$[ebp]
  00079	51		 push	 ecx
  0007a	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00083	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 615  : 		 Sleep(5);

  00088	6a 05		 push	 5
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 616  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  00090	6a 06		 push	 6
  00092	8d 55 f4	 lea	 edx, DWORD PTR _bBuf$[ebp]
  00095	52		 push	 edx
  00096	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0009c	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 617  : 	}

  000a1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a4	33 cd		 xor	 ecx, ebp
  000a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
?Exposure6@CPLC@@QAEHXZ ENDP				; CPLC::Exposure6
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Exposure7@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Exposure7@CPLC@@QAEHXZ PROC				; CPLC::Exposure7, COMDAT
; _this$ = ecx

; 620  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 621  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA4, 0xFF, 0xF9};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a4	 mov	 BYTE PTR _bBuf$[ebp+3], 164 ; 000000a4H
  00023	c6 45 f8 ff	 mov	 BYTE PTR _bBuf$[ebp+4], 255 ; 000000ffH
  00027	c6 45 f9 f9	 mov	 BYTE PTR _bBuf$[ebp+5], 249 ; 000000f9H

; 622  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x05, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 05	 mov	 BYTE PTR _buf$[ebp+3], 5
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 00	 mov	 BYTE PTR _buf$[ebp+7], 0
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 623  : 		buf[7] = 0x07;

  00067	b8 01 00 00 00	 mov	 eax, 1
  0006c	6b c0 07	 imul	 eax, 7
  0006f	c6 44 05 e4 07	 mov	 BYTE PTR _buf$[ebp+eax], 7

; 624  : 		 m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00074	6a 0f		 push	 15			; 0000000fH
  00076	8d 4d e4	 lea	 ecx, DWORD PTR _buf$[ebp]
  00079	51		 push	 ecx
  0007a	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00083	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 625  : 		 Sleep(5);

  00088	6a 05		 push	 5
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 626  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  00090	6a 06		 push	 6
  00092	8d 55 f4	 lea	 edx, DWORD PTR _bBuf$[ebp]
  00095	52		 push	 edx
  00096	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0009c	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 627  : 	}

  000a1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a4	33 cd		 xor	 ecx, ebp
  000a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
?Exposure7@CPLC@@QAEHXZ ENDP				; CPLC::Exposure7
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Exposure8@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Exposure8@CPLC@@QAEHXZ PROC				; CPLC::Exposure8, COMDAT
; _this$ = ecx

; 630  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 631  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA4, 0xFF, 0xF8};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a4	 mov	 BYTE PTR _bBuf$[ebp+3], 164 ; 000000a4H
  00023	c6 45 f8 ff	 mov	 BYTE PTR _bBuf$[ebp+4], 255 ; 000000ffH
  00027	c6 45 f9 f8	 mov	 BYTE PTR _bBuf$[ebp+5], 248 ; 000000f8H

; 632  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x05, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 05	 mov	 BYTE PTR _buf$[ebp+3], 5
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 00	 mov	 BYTE PTR _buf$[ebp+7], 0
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 633  : 		buf[7] = 0x08;

  00067	b8 01 00 00 00	 mov	 eax, 1
  0006c	6b c0 07	 imul	 eax, 7
  0006f	c6 44 05 e4 08	 mov	 BYTE PTR _buf$[ebp+eax], 8

; 634  : 		 m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00074	6a 0f		 push	 15			; 0000000fH
  00076	8d 4d e4	 lea	 ecx, DWORD PTR _buf$[ebp]
  00079	51		 push	 ecx
  0007a	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00083	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 635  : 		 Sleep(5);

  00088	6a 05		 push	 5
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 636  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  00090	6a 06		 push	 6
  00092	8d 55 f4	 lea	 edx, DWORD PTR _bBuf$[ebp]
  00095	52		 push	 edx
  00096	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0009c	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 637  : 	}

  000a1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a4	33 cd		 xor	 ecx, ebp
  000a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
?Exposure8@CPLC@@QAEHXZ ENDP				; CPLC::Exposure8
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Exposure9@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Exposure9@CPLC@@QAEHXZ PROC				; CPLC::Exposure9, COMDAT
; _this$ = ecx

; 640  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 641  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA4, 0xFF, 0xF7};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a4	 mov	 BYTE PTR _bBuf$[ebp+3], 164 ; 000000a4H
  00023	c6 45 f8 ff	 mov	 BYTE PTR _bBuf$[ebp+4], 255 ; 000000ffH
  00027	c6 45 f9 f7	 mov	 BYTE PTR _bBuf$[ebp+5], 247 ; 000000f7H

; 642  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x05, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 05	 mov	 BYTE PTR _buf$[ebp+3], 5
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 00	 mov	 BYTE PTR _buf$[ebp+7], 0
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 643  : 		buf[7] = 0x09;

  00067	b8 01 00 00 00	 mov	 eax, 1
  0006c	6b c0 07	 imul	 eax, 7
  0006f	c6 44 05 e4 09	 mov	 BYTE PTR _buf$[ebp+eax], 9

; 644  : 		 m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00074	6a 0f		 push	 15			; 0000000fH
  00076	8d 4d e4	 lea	 ecx, DWORD PTR _buf$[ebp]
  00079	51		 push	 ecx
  0007a	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00083	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 645  : 		 Sleep(5);

  00088	6a 05		 push	 5
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 646  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  00090	6a 06		 push	 6
  00092	8d 55 f4	 lea	 edx, DWORD PTR _bBuf$[ebp]
  00095	52		 push	 edx
  00096	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0009c	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 647  : 	}

  000a1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a4	33 cd		 xor	 ecx, ebp
  000a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
?Exposure9@CPLC@@QAEHXZ ENDP				; CPLC::Exposure9
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Exposure10@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?Exposure10@CPLC@@QAEHXZ PROC				; CPLC::Exposure10, COMDAT
; _this$ = ecx

; 650  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 651  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA4, 0xFF, 0xF6};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a4	 mov	 BYTE PTR _bBuf$[ebp+3], 164 ; 000000a4H
  00023	c6 45 f8 ff	 mov	 BYTE PTR _bBuf$[ebp+4], 255 ; 000000ffH
  00027	c6 45 f9 f6	 mov	 BYTE PTR _bBuf$[ebp+5], 246 ; 000000f6H

; 652  : 		BYTE buf[15] = { 0xFF, 0xAA, 0x03, 0x05, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0002b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0002f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00033	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00037	c6 45 e7 05	 mov	 BYTE PTR _buf$[ebp+3], 5
  0003b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0003f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00043	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00047	c6 45 eb 00	 mov	 BYTE PTR _buf$[ebp+7], 0
  0004b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0004f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00053	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00057	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0005b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0005f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00063	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 653  : 		buf[7] = 0x0A;

  00067	b8 01 00 00 00	 mov	 eax, 1
  0006c	6b c0 07	 imul	 eax, 7
  0006f	c6 44 05 e4 0a	 mov	 BYTE PTR _buf$[ebp+eax], 10 ; 0000000aH

; 654  : 		 m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  00074	6a 0f		 push	 15			; 0000000fH
  00076	8d 4d e4	 lea	 ecx, DWORD PTR _buf$[ebp]
  00079	51		 push	 ecx
  0007a	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  00083	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 655  : 		 Sleep(5);

  00088	6a 05		 push	 5
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 656  : 		return m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  00090	6a 06		 push	 6
  00092	8d 55 f4	 lea	 edx, DWORD PTR _bBuf$[ebp]
  00095	52		 push	 edx
  00096	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0009c	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 657  : 	}

  000a1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a4	33 cd		 xor	 ecx, ebp
  000a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
?Exposure10@CPLC@@QAEHXZ ENDP				; CPLC::Exposure10
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Sharpness@CPLC@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
_val$ = 8						; size = 4
?Sharpness@CPLC@@QAEHH@Z PROC				; CPLC::Sharpness, COMDAT
; _this$ = ecx

; 660  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 661  : 		BYTE bBuf[8] = { 0xA5, 0x5A, 0x05, 0x82, 0x00, 0xA0, 0x00, 0x00};

  00013	c6 45 f4 a5	 mov	 BYTE PTR _bBuf$[ebp], 165 ; 000000a5H
  00017	c6 45 f5 5a	 mov	 BYTE PTR _bBuf$[ebp+1], 90 ; 0000005aH
  0001b	c6 45 f6 05	 mov	 BYTE PTR _bBuf$[ebp+2], 5
  0001f	c6 45 f7 82	 mov	 BYTE PTR _bBuf$[ebp+3], 130 ; 00000082H
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 a0	 mov	 BYTE PTR _bBuf$[ebp+5], 160 ; 000000a0H
  0002b	c6 45 fa 00	 mov	 BYTE PTR _bBuf$[ebp+6], 0
  0002f	c6 45 fb 00	 mov	 BYTE PTR _bBuf$[ebp+7], 0

; 662  : 		bBuf[7] = val;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	6b c0 07	 imul	 eax, 7
  0003b	8a 4d 08	 mov	 cl, BYTE PTR _val$[ebp]
  0003e	88 4c 05 f4	 mov	 BYTE PTR _bBuf$[ebp+eax], cl

; 663  : 		m_VideoComIO.SendData(bBuf, sizeof(bBuf) / sizeof(bBuf[0]));

  00042	6a 08		 push	 8
  00044	8d 55 f4	 lea	 edx, DWORD PTR _bBuf$[ebp]
  00047	52		 push	 edx
  00048	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0004e	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 664  : 		Sleep(5);

  00053	6a 05		 push	 5
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 665  : 		BYTE buf[15]= { 0xFF, 0xAA, 0x03, 0x05, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };

  0005b	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  0005f	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  00063	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  00067	c6 45 e7 05	 mov	 BYTE PTR _buf$[ebp+3], 5
  0006b	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  0006f	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  00073	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  00077	c6 45 eb 00	 mov	 BYTE PTR _buf$[ebp+7], 0
  0007b	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  0007f	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  00083	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  00087	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  0008b	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  0008f	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  00093	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 666  : 		buf[7] = val;

  00097	b8 01 00 00 00	 mov	 eax, 1
  0009c	6b c0 07	 imul	 eax, 7
  0009f	8a 4d 08	 mov	 cl, BYTE PTR _val$[ebp]
  000a2	88 4c 05 e4	 mov	 BYTE PTR _buf$[ebp+eax], cl

; 667  : 		return m_ProcessCardComIO.SendData(buf, sizeof(buf) / sizeof(buf[0]));

  000a6	6a 0f		 push	 15			; 0000000fH
  000a8	8d 55 e4	 lea	 edx, DWORD PTR _buf$[ebp]
  000ab	52		 push	 edx
  000ac	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  000af	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  000b5	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 668  : 
; 669  : 	}

  000ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000bd	33 cd		 xor	 ecx, ebp
  000bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c2 04 00	 ret	 4
?Sharpness@CPLC@@QAEHH@Z ENDP				; CPLC::Sharpness
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?Gain@CPLC@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -32						; size = 4
_buf$ = -28						; size = 15
_bBuf$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
_nVal$ = 8						; size = 4
?Gain@CPLC@@QAEHH@Z PROC				; CPLC::Gain, COMDAT
; _this$ = ecx

; 684  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 685  : 		//std::cout<<"Gain:"<<nVal<<endl;
; 686  : 		BYTE bBuf[ 6 ] = {0x05, 0x82, 0x00, 0xA5, 0x00, 0x00};

  00013	c6 45 f4 05	 mov	 BYTE PTR _bBuf$[ebp], 5
  00017	c6 45 f5 82	 mov	 BYTE PTR _bBuf$[ebp+1], 130 ; 00000082H
  0001b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+2], 0
  0001f	c6 45 f7 a5	 mov	 BYTE PTR _bBuf$[ebp+3], 165 ; 000000a5H
  00023	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f9 00	 mov	 BYTE PTR _bBuf$[ebp+5], 0

; 687  : 		bBuf[5] = (BYTE)nVal;

  0002b	b8 01 00 00 00	 mov	 eax, 1
  00030	6b c0 05	 imul	 eax, 5
  00033	8a 4d 08	 mov	 cl, BYTE PTR _nVal$[ebp]
  00036	88 4c 05 f4	 mov	 BYTE PTR _bBuf$[ebp+eax], cl

; 688  : 		 m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  0003a	6a 06		 push	 6
  0003c	8d 55 f4	 lea	 edx, DWORD PTR _bBuf$[ebp]
  0003f	52		 push	 edx
  00040	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00046	e8 00 00 00 00	 call	 ?SendData@CVideoComIO@@QAEHPAEH@Z ; CVideoComIO::SendData

; 689  : 		 Sleep(5);

  0004b	6a 05		 push	 5
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 690  : 		BYTE buf[ 15 ] = {0xFF, 0xAA, 0x03, 0x07, 0x00, 0x00, 0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

  00053	c6 45 e4 ff	 mov	 BYTE PTR _buf$[ebp], 255 ; 000000ffH
  00057	c6 45 e5 aa	 mov	 BYTE PTR _buf$[ebp+1], 170 ; 000000aaH
  0005b	c6 45 e6 03	 mov	 BYTE PTR _buf$[ebp+2], 3
  0005f	c6 45 e7 07	 mov	 BYTE PTR _buf$[ebp+3], 7
  00063	c6 45 e8 00	 mov	 BYTE PTR _buf$[ebp+4], 0
  00067	c6 45 e9 00	 mov	 BYTE PTR _buf$[ebp+5], 0
  0006b	c6 45 ea 00	 mov	 BYTE PTR _buf$[ebp+6], 0
  0006f	c6 45 eb 01	 mov	 BYTE PTR _buf$[ebp+7], 1
  00073	c6 45 ec 00	 mov	 BYTE PTR _buf$[ebp+8], 0
  00077	c6 45 ed 00	 mov	 BYTE PTR _buf$[ebp+9], 0
  0007b	c6 45 ee 00	 mov	 BYTE PTR _buf$[ebp+10], 0
  0007f	c6 45 ef 00	 mov	 BYTE PTR _buf$[ebp+11], 0
  00083	c6 45 f0 00	 mov	 BYTE PTR _buf$[ebp+12], 0
  00087	c6 45 f1 00	 mov	 BYTE PTR _buf$[ebp+13], 0
  0008b	c6 45 f2 00	 mov	 BYTE PTR _buf$[ebp+14], 0

; 691  : 		buf[7] = (BYTE)nVal;

  0008f	b8 01 00 00 00	 mov	 eax, 1
  00094	6b c0 07	 imul	 eax, 7
  00097	8a 4d 08	 mov	 cl, BYTE PTR _nVal$[ebp]
  0009a	88 4c 05 e4	 mov	 BYTE PTR _buf$[ebp+eax], cl

; 692  : 		return m_ProcessCardComIO.SendData( buf, sizeof(buf)/sizeof(buf[0]));

  0009e	6a 0f		 push	 15			; 0000000fH
  000a0	8d 55 e4	 lea	 edx, DWORD PTR _buf$[ebp]
  000a3	52		 push	 edx
  000a4	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a7	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  000ad	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 693  : 	}

  000b2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b5	33 cd		 xor	 ecx, ebp
  000b7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c2 04 00	 ret	 4
?Gain@CPLC@@QAEHH@Z ENDP				; CPLC::Gain
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?WhiteBalance@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
_ok$ = -24						; size = 4
_cBuf$ = -20						; size = 15
__$ArrayPad$ = -4					; size = 4
?WhiteBalance@CPLC@@QAEHXZ PROC				; CPLC::WhiteBalance, COMDAT
; _this$ = ecx

; 722  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 723  : 		//BYTE bBuf[ 7 ] = {0x06, 0x83, 0x00, 0x24, 0x01, 0x00, 0x08};
; 724  : 		BYTE cBuf[ 15 ] = {0xFF, 0xAA, 0x03, 0x0A, 0x00, 0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

  00013	c6 45 ec ff	 mov	 BYTE PTR _cBuf$[ebp], 255 ; 000000ffH
  00017	c6 45 ed aa	 mov	 BYTE PTR _cBuf$[ebp+1], 170 ; 000000aaH
  0001b	c6 45 ee 03	 mov	 BYTE PTR _cBuf$[ebp+2], 3
  0001f	c6 45 ef 0a	 mov	 BYTE PTR _cBuf$[ebp+3], 10 ; 0000000aH
  00023	c6 45 f0 00	 mov	 BYTE PTR _cBuf$[ebp+4], 0
  00027	c6 45 f1 00	 mov	 BYTE PTR _cBuf$[ebp+5], 0
  0002b	c6 45 f2 00	 mov	 BYTE PTR _cBuf$[ebp+6], 0
  0002f	c6 45 f3 00	 mov	 BYTE PTR _cBuf$[ebp+7], 0
  00033	c6 45 f4 00	 mov	 BYTE PTR _cBuf$[ebp+8], 0
  00037	c6 45 f5 00	 mov	 BYTE PTR _cBuf$[ebp+9], 0
  0003b	c6 45 f6 00	 mov	 BYTE PTR _cBuf$[ebp+10], 0
  0003f	c6 45 f7 00	 mov	 BYTE PTR _cBuf$[ebp+11], 0
  00043	c6 45 f8 00	 mov	 BYTE PTR _cBuf$[ebp+12], 0
  00047	c6 45 f9 00	 mov	 BYTE PTR _cBuf$[ebp+13], 0
  0004b	c6 45 fa 00	 mov	 BYTE PTR _cBuf$[ebp+14], 0

; 725  : 		//AfxMessageBox("updatewhite");
; 726  : 		BOOL ok=m_ProcessCardComIO.SendData( cBuf, sizeof(cBuf)/sizeof(cBuf[0]));

  0004f	6a 0f		 push	 15			; 0000000fH
  00051	8d 45 ec	 lea	 eax, DWORD PTR _cBuf$[ebp]
  00054	50		 push	 eax
  00055	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  0005e	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData
  00063	89 45 e8	 mov	 DWORD PTR _ok$[ebp], eax

; 727  : 		//BOOL ok2=m_VideoComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));
; 728  : 		return ok;//&ok2;

  00066	8b 45 e8	 mov	 eax, DWORD PTR _ok$[ebp]

; 729  : 	}

  00069	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006c	33 cd		 xor	 ecx, ebp
  0006e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
?WhiteBalance@CPLC@@QAEHXZ ENDP				; CPLC::WhiteBalance
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?MenuStart@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
_bBuf$ = -20						; size = 15
__$ArrayPad$ = -4					; size = 4
?MenuStart@CPLC@@QAEHXZ PROC				; CPLC::MenuStart, COMDAT
; _this$ = ecx

; 750  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 751  : 		BYTE bBuf[ 15 ] = {0xFF, 0xAA, 0x03, 0x10, 0x00, 0x01, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

  00013	c6 45 ec ff	 mov	 BYTE PTR _bBuf$[ebp], 255 ; 000000ffH
  00017	c6 45 ed aa	 mov	 BYTE PTR _bBuf$[ebp+1], 170 ; 000000aaH
  0001b	c6 45 ee 03	 mov	 BYTE PTR _bBuf$[ebp+2], 3
  0001f	c6 45 ef 10	 mov	 BYTE PTR _bBuf$[ebp+3], 16 ; 00000010H
  00023	c6 45 f0 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f1 01	 mov	 BYTE PTR _bBuf$[ebp+5], 1
  0002b	c6 45 f2 00	 mov	 BYTE PTR _bBuf$[ebp+6], 0
  0002f	c6 45 f3 00	 mov	 BYTE PTR _bBuf$[ebp+7], 0
  00033	c6 45 f4 00	 mov	 BYTE PTR _bBuf$[ebp+8], 0
  00037	c6 45 f5 00	 mov	 BYTE PTR _bBuf$[ebp+9], 0
  0003b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+10], 0
  0003f	c6 45 f7 00	 mov	 BYTE PTR _bBuf$[ebp+11], 0
  00043	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+12], 0
  00047	c6 45 f9 00	 mov	 BYTE PTR _bBuf$[ebp+13], 0
  0004b	c6 45 fa 00	 mov	 BYTE PTR _bBuf$[ebp+14], 0

; 752  : 		return m_ProcessCardComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  0004f	6a 0f		 push	 15			; 0000000fH
  00051	8d 45 ec	 lea	 eax, DWORD PTR _bBuf$[ebp]
  00054	50		 push	 eax
  00055	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  0005e	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 753  : 	}

  00063	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00066	33 cd		 xor	 ecx, ebp
  00068	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
?MenuStart@CPLC@@QAEHXZ ENDP				; CPLC::MenuStart
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?MenuStop@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
_bBuf$ = -20						; size = 15
__$ArrayPad$ = -4					; size = 4
?MenuStop@CPLC@@QAEHXZ PROC				; CPLC::MenuStop, COMDAT
; _this$ = ecx

; 755  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 756  : 		BYTE bBuf[ 15 ] = {0xFF, 0xAA, 0x03, 0x10, 0x00, 0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

  00013	c6 45 ec ff	 mov	 BYTE PTR _bBuf$[ebp], 255 ; 000000ffH
  00017	c6 45 ed aa	 mov	 BYTE PTR _bBuf$[ebp+1], 170 ; 000000aaH
  0001b	c6 45 ee 03	 mov	 BYTE PTR _bBuf$[ebp+2], 3
  0001f	c6 45 ef 10	 mov	 BYTE PTR _bBuf$[ebp+3], 16 ; 00000010H
  00023	c6 45 f0 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f1 00	 mov	 BYTE PTR _bBuf$[ebp+5], 0
  0002b	c6 45 f2 00	 mov	 BYTE PTR _bBuf$[ebp+6], 0
  0002f	c6 45 f3 00	 mov	 BYTE PTR _bBuf$[ebp+7], 0
  00033	c6 45 f4 00	 mov	 BYTE PTR _bBuf$[ebp+8], 0
  00037	c6 45 f5 00	 mov	 BYTE PTR _bBuf$[ebp+9], 0
  0003b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+10], 0
  0003f	c6 45 f7 00	 mov	 BYTE PTR _bBuf$[ebp+11], 0
  00043	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+12], 0
  00047	c6 45 f9 00	 mov	 BYTE PTR _bBuf$[ebp+13], 0
  0004b	c6 45 fa 00	 mov	 BYTE PTR _bBuf$[ebp+14], 0

; 757  : 		return m_ProcessCardComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  0004f	6a 0f		 push	 15			; 0000000fH
  00051	8d 45 ec	 lea	 eax, DWORD PTR _bBuf$[ebp]
  00054	50		 push	 eax
  00055	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  0005e	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 758  : 	}

  00063	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00066	33 cd		 xor	 ecx, ebp
  00068	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
?MenuStop@CPLC@@QAEHXZ ENDP				; CPLC::MenuStop
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?MenuUp@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
_bBuf$ = -20						; size = 15
__$ArrayPad$ = -4					; size = 4
?MenuUp@CPLC@@QAEHXZ PROC				; CPLC::MenuUp, COMDAT
; _this$ = ecx

; 760  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 761  : 		BYTE bBuf[ 15 ] = {0xFF, 0xAA, 0x03, 0x11, 0x00, 0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

  00013	c6 45 ec ff	 mov	 BYTE PTR _bBuf$[ebp], 255 ; 000000ffH
  00017	c6 45 ed aa	 mov	 BYTE PTR _bBuf$[ebp+1], 170 ; 000000aaH
  0001b	c6 45 ee 03	 mov	 BYTE PTR _bBuf$[ebp+2], 3
  0001f	c6 45 ef 11	 mov	 BYTE PTR _bBuf$[ebp+3], 17 ; 00000011H
  00023	c6 45 f0 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f1 00	 mov	 BYTE PTR _bBuf$[ebp+5], 0
  0002b	c6 45 f2 00	 mov	 BYTE PTR _bBuf$[ebp+6], 0
  0002f	c6 45 f3 00	 mov	 BYTE PTR _bBuf$[ebp+7], 0
  00033	c6 45 f4 00	 mov	 BYTE PTR _bBuf$[ebp+8], 0
  00037	c6 45 f5 00	 mov	 BYTE PTR _bBuf$[ebp+9], 0
  0003b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+10], 0
  0003f	c6 45 f7 00	 mov	 BYTE PTR _bBuf$[ebp+11], 0
  00043	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+12], 0
  00047	c6 45 f9 00	 mov	 BYTE PTR _bBuf$[ebp+13], 0
  0004b	c6 45 fa 00	 mov	 BYTE PTR _bBuf$[ebp+14], 0

; 762  : 		return m_ProcessCardComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  0004f	6a 0f		 push	 15			; 0000000fH
  00051	8d 45 ec	 lea	 eax, DWORD PTR _bBuf$[ebp]
  00054	50		 push	 eax
  00055	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  0005e	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 763  : 	}

  00063	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00066	33 cd		 xor	 ecx, ebp
  00068	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
?MenuUp@CPLC@@QAEHXZ ENDP				; CPLC::MenuUp
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?MenuDown@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
_bBuf$ = -20						; size = 15
__$ArrayPad$ = -4					; size = 4
?MenuDown@CPLC@@QAEHXZ PROC				; CPLC::MenuDown, COMDAT
; _this$ = ecx

; 765  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 766  : 		BYTE bBuf[ 15 ] = {0xFF, 0xAA, 0x03, 0x12, 0x00, 0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

  00013	c6 45 ec ff	 mov	 BYTE PTR _bBuf$[ebp], 255 ; 000000ffH
  00017	c6 45 ed aa	 mov	 BYTE PTR _bBuf$[ebp+1], 170 ; 000000aaH
  0001b	c6 45 ee 03	 mov	 BYTE PTR _bBuf$[ebp+2], 3
  0001f	c6 45 ef 12	 mov	 BYTE PTR _bBuf$[ebp+3], 18 ; 00000012H
  00023	c6 45 f0 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f1 00	 mov	 BYTE PTR _bBuf$[ebp+5], 0
  0002b	c6 45 f2 00	 mov	 BYTE PTR _bBuf$[ebp+6], 0
  0002f	c6 45 f3 00	 mov	 BYTE PTR _bBuf$[ebp+7], 0
  00033	c6 45 f4 00	 mov	 BYTE PTR _bBuf$[ebp+8], 0
  00037	c6 45 f5 00	 mov	 BYTE PTR _bBuf$[ebp+9], 0
  0003b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+10], 0
  0003f	c6 45 f7 00	 mov	 BYTE PTR _bBuf$[ebp+11], 0
  00043	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+12], 0
  00047	c6 45 f9 00	 mov	 BYTE PTR _bBuf$[ebp+13], 0
  0004b	c6 45 fa 00	 mov	 BYTE PTR _bBuf$[ebp+14], 0

; 767  : 		return m_ProcessCardComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  0004f	6a 0f		 push	 15			; 0000000fH
  00051	8d 45 ec	 lea	 eax, DWORD PTR _bBuf$[ebp]
  00054	50		 push	 eax
  00055	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  0005e	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 768  : 	}

  00063	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00066	33 cd		 xor	 ecx, ebp
  00068	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
?MenuDown@CPLC@@QAEHXZ ENDP				; CPLC::MenuDown
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?MenuLeft@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
_bBuf$ = -20						; size = 15
__$ArrayPad$ = -4					; size = 4
?MenuLeft@CPLC@@QAEHXZ PROC				; CPLC::MenuLeft, COMDAT
; _this$ = ecx

; 770  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 771  : 		BYTE bBuf[ 15 ] = {0xFF, 0xAA, 0x03, 0x13, 0x00, 0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

  00013	c6 45 ec ff	 mov	 BYTE PTR _bBuf$[ebp], 255 ; 000000ffH
  00017	c6 45 ed aa	 mov	 BYTE PTR _bBuf$[ebp+1], 170 ; 000000aaH
  0001b	c6 45 ee 03	 mov	 BYTE PTR _bBuf$[ebp+2], 3
  0001f	c6 45 ef 13	 mov	 BYTE PTR _bBuf$[ebp+3], 19 ; 00000013H
  00023	c6 45 f0 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f1 00	 mov	 BYTE PTR _bBuf$[ebp+5], 0
  0002b	c6 45 f2 00	 mov	 BYTE PTR _bBuf$[ebp+6], 0
  0002f	c6 45 f3 00	 mov	 BYTE PTR _bBuf$[ebp+7], 0
  00033	c6 45 f4 00	 mov	 BYTE PTR _bBuf$[ebp+8], 0
  00037	c6 45 f5 00	 mov	 BYTE PTR _bBuf$[ebp+9], 0
  0003b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+10], 0
  0003f	c6 45 f7 00	 mov	 BYTE PTR _bBuf$[ebp+11], 0
  00043	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+12], 0
  00047	c6 45 f9 00	 mov	 BYTE PTR _bBuf$[ebp+13], 0
  0004b	c6 45 fa 00	 mov	 BYTE PTR _bBuf$[ebp+14], 0

; 772  : 		return m_ProcessCardComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  0004f	6a 0f		 push	 15			; 0000000fH
  00051	8d 45 ec	 lea	 eax, DWORD PTR _bBuf$[ebp]
  00054	50		 push	 eax
  00055	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  0005e	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 773  : 	}

  00063	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00066	33 cd		 xor	 ecx, ebp
  00068	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
?MenuLeft@CPLC@@QAEHXZ ENDP				; CPLC::MenuLeft
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?MenuRight@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
_bBuf$ = -20						; size = 15
__$ArrayPad$ = -4					; size = 4
?MenuRight@CPLC@@QAEHXZ PROC				; CPLC::MenuRight, COMDAT
; _this$ = ecx

; 775  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 776  : 		BYTE bBuf[ 15 ] = {0xFF, 0xAA, 0x03, 0x14, 0x00, 0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

  00013	c6 45 ec ff	 mov	 BYTE PTR _bBuf$[ebp], 255 ; 000000ffH
  00017	c6 45 ed aa	 mov	 BYTE PTR _bBuf$[ebp+1], 170 ; 000000aaH
  0001b	c6 45 ee 03	 mov	 BYTE PTR _bBuf$[ebp+2], 3
  0001f	c6 45 ef 14	 mov	 BYTE PTR _bBuf$[ebp+3], 20 ; 00000014H
  00023	c6 45 f0 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f1 00	 mov	 BYTE PTR _bBuf$[ebp+5], 0
  0002b	c6 45 f2 00	 mov	 BYTE PTR _bBuf$[ebp+6], 0
  0002f	c6 45 f3 00	 mov	 BYTE PTR _bBuf$[ebp+7], 0
  00033	c6 45 f4 00	 mov	 BYTE PTR _bBuf$[ebp+8], 0
  00037	c6 45 f5 00	 mov	 BYTE PTR _bBuf$[ebp+9], 0
  0003b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+10], 0
  0003f	c6 45 f7 00	 mov	 BYTE PTR _bBuf$[ebp+11], 0
  00043	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+12], 0
  00047	c6 45 f9 00	 mov	 BYTE PTR _bBuf$[ebp+13], 0
  0004b	c6 45 fa 00	 mov	 BYTE PTR _bBuf$[ebp+14], 0

; 777  : 		return m_ProcessCardComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  0004f	6a 0f		 push	 15			; 0000000fH
  00051	8d 45 ec	 lea	 eax, DWORD PTR _bBuf$[ebp]
  00054	50		 push	 eax
  00055	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  0005e	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 778  : 	}

  00063	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00066	33 cd		 xor	 ecx, ebp
  00068	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
?MenuRight@CPLC@@QAEHXZ ENDP				; CPLC::MenuRight
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\plc.h
;	COMDAT ?MenuEnter@CPLC@@QAEHXZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
_bBuf$ = -20						; size = 15
__$ArrayPad$ = -4					; size = 4
?MenuEnter@CPLC@@QAEHXZ PROC				; CPLC::MenuEnter, COMDAT
; _this$ = ecx

; 780  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 781  : 		BYTE bBuf[ 15 ] = {0xFF, 0xAA, 0x03, 0x15, 0x00, 0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

  00013	c6 45 ec ff	 mov	 BYTE PTR _bBuf$[ebp], 255 ; 000000ffH
  00017	c6 45 ed aa	 mov	 BYTE PTR _bBuf$[ebp+1], 170 ; 000000aaH
  0001b	c6 45 ee 03	 mov	 BYTE PTR _bBuf$[ebp+2], 3
  0001f	c6 45 ef 15	 mov	 BYTE PTR _bBuf$[ebp+3], 21 ; 00000015H
  00023	c6 45 f0 00	 mov	 BYTE PTR _bBuf$[ebp+4], 0
  00027	c6 45 f1 00	 mov	 BYTE PTR _bBuf$[ebp+5], 0
  0002b	c6 45 f2 00	 mov	 BYTE PTR _bBuf$[ebp+6], 0
  0002f	c6 45 f3 00	 mov	 BYTE PTR _bBuf$[ebp+7], 0
  00033	c6 45 f4 00	 mov	 BYTE PTR _bBuf$[ebp+8], 0
  00037	c6 45 f5 00	 mov	 BYTE PTR _bBuf$[ebp+9], 0
  0003b	c6 45 f6 00	 mov	 BYTE PTR _bBuf$[ebp+10], 0
  0003f	c6 45 f7 00	 mov	 BYTE PTR _bBuf$[ebp+11], 0
  00043	c6 45 f8 00	 mov	 BYTE PTR _bBuf$[ebp+12], 0
  00047	c6 45 f9 00	 mov	 BYTE PTR _bBuf$[ebp+13], 0
  0004b	c6 45 fa 00	 mov	 BYTE PTR _bBuf$[ebp+14], 0

; 782  : 		return m_ProcessCardComIO.SendData( bBuf, sizeof(bBuf)/sizeof(bBuf[0]));

  0004f	6a 0f		 push	 15			; 0000000fH
  00051	8d 45 ec	 lea	 eax, DWORD PTR _bBuf$[ebp]
  00054	50		 push	 eax
  00055	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  0005e	e8 00 00 00 00	 call	 ?SendData@CProcessCard@@QAEHPAEH@Z ; CProcessCard::SendData

; 783  : 	}

  00063	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00066	33 cd		 xor	 ecx, ebp
  00068	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
?MenuEnter@CPLC@@QAEHXZ ENDP				; CPLC::MenuEnter
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ??__Eg_videoevent@@YAXXZ
text$yc	SEGMENT
??__Eg_videoevent@@YAXXZ PROC				; `dynamic initializer for 'g_videoevent'', COMDAT

; 34   : CEvent g_videoevent(NULL,FALSE,FALSE,NULL);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a 01		 push	 1
  00005	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_videoevent@@3VCEvent@@A ; g_videoevent
  0000a	e8 00 00 00 00	 call	 ?__autoclassinit@CEvent@@QAEXI@Z
  0000f	6a 00		 push	 0
  00011	6a 00		 push	 0
  00013	6a 00		 push	 0
  00015	6a 00		 push	 0
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_videoevent@@3VCEvent@@A ; g_videoevent
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CEvent@@QAE@HHPBDPAU_SECURITY_ATTRIBUTES@@@Z
  00022	68 00 00 00 00	 push	 OFFSET ??__Fg_videoevent@@YAXXZ ; `dynamic atexit destructor for 'g_videoevent''
  00027	e8 00 00 00 00	 call	 _atexit
  0002c	83 c4 04	 add	 esp, 4
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??__Eg_videoevent@@YAXXZ ENDP				; `dynamic initializer for 'g_videoevent''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Fg_videoevent@@YAXXZ
text$yd	SEGMENT
??__Fg_videoevent@@YAXXZ PROC				; `dynamic atexit destructor for 'g_videoevent'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_videoevent@@3VCEvent@@A ; g_videoevent
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CEvent@@UAE@XZ
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??__Fg_videoevent@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_videoevent''
text$yd	ENDS
; Function compile flags: /Odtp
;	COMDAT ?__autoclassinit@CEvent@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_$initVBases$ = 8					; size = 4
?__autoclassinit@CEvent@@QAEXI@Z PROC			; CEvent::__autoclassinit, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?__autoclassinit@CSyncObject@@QAEXI@Z
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?__autoclassinit@CEvent@@QAEXI@Z ENDP			; CEvent::__autoclassinit
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?__autoclassinit@CSyncObject@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_$initVBases$ = 8					; size = 4
?__autoclassinit@CSyncObject@@QAEXI@Z PROC		; CSyncObject::__autoclassinit, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?__autoclassinit@CSyncObject@@QAEXI@Z ENDP		; CSyncObject::__autoclassinit
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ??__Eg_resizeevent@@YAXXZ
text$yc	SEGMENT
??__Eg_resizeevent@@YAXXZ PROC				; `dynamic initializer for 'g_resizeevent'', COMDAT

; 35   : CEvent g_resizeevent(NULL,FALSE,FALSE,NULL);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a 01		 push	 1
  00005	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_resizeevent@@3VCEvent@@A ; g_resizeevent
  0000a	e8 00 00 00 00	 call	 ?__autoclassinit@CEvent@@QAEXI@Z
  0000f	6a 00		 push	 0
  00011	6a 00		 push	 0
  00013	6a 00		 push	 0
  00015	6a 00		 push	 0
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_resizeevent@@3VCEvent@@A ; g_resizeevent
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CEvent@@QAE@HHPBDPAU_SECURITY_ATTRIBUTES@@@Z
  00022	68 00 00 00 00	 push	 OFFSET ??__Fg_resizeevent@@YAXXZ ; `dynamic atexit destructor for 'g_resizeevent''
  00027	e8 00 00 00 00	 call	 _atexit
  0002c	83 c4 04	 add	 esp, 4
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??__Eg_resizeevent@@YAXXZ ENDP				; `dynamic initializer for 'g_resizeevent''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Fg_resizeevent@@YAXXZ
text$yd	SEGMENT
??__Fg_resizeevent@@YAXXZ PROC				; `dynamic atexit destructor for 'g_resizeevent'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_resizeevent@@3VCEvent@@A ; g_resizeevent
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CEvent@@UAE@XZ
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??__Fg_resizeevent@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_resizeevent''
text$yd	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ??__Eg_picevent@@YAXXZ
text$yc	SEGMENT
??__Eg_picevent@@YAXXZ PROC				; `dynamic initializer for 'g_picevent'', COMDAT

; 36   : CEvent g_picevent(NULL,FALSE,FALSE,NULL);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a 01		 push	 1
  00005	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_picevent@@3VCEvent@@A ; g_picevent
  0000a	e8 00 00 00 00	 call	 ?__autoclassinit@CEvent@@QAEXI@Z
  0000f	6a 00		 push	 0
  00011	6a 00		 push	 0
  00013	6a 00		 push	 0
  00015	6a 00		 push	 0
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_picevent@@3VCEvent@@A ; g_picevent
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CEvent@@QAE@HHPBDPAU_SECURITY_ATTRIBUTES@@@Z
  00022	68 00 00 00 00	 push	 OFFSET ??__Fg_picevent@@YAXXZ ; `dynamic atexit destructor for 'g_picevent''
  00027	e8 00 00 00 00	 call	 _atexit
  0002c	83 c4 04	 add	 esp, 4
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??__Eg_picevent@@YAXXZ ENDP				; `dynamic initializer for 'g_picevent''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Fg_picevent@@YAXXZ
text$yd	SEGMENT
??__Fg_picevent@@YAXXZ PROC				; `dynamic atexit destructor for 'g_picevent'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_picevent@@3VCEvent@@A ; g_picevent
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CEvent@@UAE@XZ
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??__Fg_picevent@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_picevent''
text$yd	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ??__Eg_showevent@@YAXXZ
text$yc	SEGMENT
??__Eg_showevent@@YAXXZ PROC				; `dynamic initializer for 'g_showevent'', COMDAT

; 37   : CEvent g_showevent(NULL,FALSE,FALSE,NULL);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a 01		 push	 1
  00005	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_showevent@@3VCEvent@@A ; g_showevent
  0000a	e8 00 00 00 00	 call	 ?__autoclassinit@CEvent@@QAEXI@Z
  0000f	6a 00		 push	 0
  00011	6a 00		 push	 0
  00013	6a 00		 push	 0
  00015	6a 00		 push	 0
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_showevent@@3VCEvent@@A ; g_showevent
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CEvent@@QAE@HHPBDPAU_SECURITY_ATTRIBUTES@@@Z
  00022	68 00 00 00 00	 push	 OFFSET ??__Fg_showevent@@YAXXZ ; `dynamic atexit destructor for 'g_showevent''
  00027	e8 00 00 00 00	 call	 _atexit
  0002c	83 c4 04	 add	 esp, 4
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??__Eg_showevent@@YAXXZ ENDP				; `dynamic initializer for 'g_showevent''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Fg_showevent@@YAXXZ
text$yd	SEGMENT
??__Fg_showevent@@YAXXZ PROC				; `dynamic atexit destructor for 'g_showevent'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_showevent@@3VCEvent@@A ; g_showevent
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CEvent@@UAE@XZ
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??__Fg_showevent@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_showevent''
text$yd	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ??__Eg_capevent@@YAXXZ
text$yc	SEGMENT
??__Eg_capevent@@YAXXZ PROC				; `dynamic initializer for 'g_capevent'', COMDAT

; 38   : CEvent g_capevent(NULL,FALSE,FALSE,NULL);

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a 01		 push	 1
  00005	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_capevent@@3VCEvent@@A ; g_capevent
  0000a	e8 00 00 00 00	 call	 ?__autoclassinit@CEvent@@QAEXI@Z
  0000f	6a 00		 push	 0
  00011	6a 00		 push	 0
  00013	6a 00		 push	 0
  00015	6a 00		 push	 0
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_capevent@@3VCEvent@@A ; g_capevent
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CEvent@@QAE@HHPBDPAU_SECURITY_ATTRIBUTES@@@Z
  00022	68 00 00 00 00	 push	 OFFSET ??__Fg_capevent@@YAXXZ ; `dynamic atexit destructor for 'g_capevent''
  00027	e8 00 00 00 00	 call	 _atexit
  0002c	83 c4 04	 add	 esp, 4
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??__Eg_capevent@@YAXXZ ENDP				; `dynamic initializer for 'g_capevent''
text$yc	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Fg_capevent@@YAXXZ
text$yd	SEGMENT
??__Fg_capevent@@YAXXZ PROC				; `dynamic atexit destructor for 'g_capevent'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_capevent@@3VCEvent@@A ; g_capevent
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CEvent@@UAE@XZ
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??__Fg_capevent@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_capevent''
text$yd	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?FirstDriveFromMask@@YADK@Z
_TEXT	SEGMENT
_i$ = -1						; size = 1
_unitmask$ = 8						; size = 4
?FirstDriveFromMask@@YADK@Z PROC			; FirstDriveFromMask, COMDAT

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 45   : 	char i;
; 46   : 	for (i = 0; i < 26; ++i)

  00004	c6 45 ff 00	 mov	 BYTE PTR _i$[ebp], 0
  00008	eb 08		 jmp	 SHORT $LN4@FirstDrive
$LN3@FirstDrive:
  0000a	8a 45 ff	 mov	 al, BYTE PTR _i$[ebp]
  0000d	04 01		 add	 al, 1
  0000f	88 45 ff	 mov	 BYTE PTR _i$[ebp], al
$LN4@FirstDrive:
  00012	0f be 4d ff	 movsx	 ecx, BYTE PTR _i$[ebp]
  00016	83 f9 1a	 cmp	 ecx, 26			; 0000001aH
  00019	7d 14		 jge	 SHORT $LN2@FirstDrive

; 47   : 	{
; 48   : 		if (unitmask & 0x1)

  0001b	8b 55 08	 mov	 edx, DWORD PTR _unitmask$[ebp]
  0001e	83 e2 01	 and	 edx, 1
  00021	74 02		 je	 SHORT $LN1@FirstDrive

; 49   : 			break;

  00023	eb 0a		 jmp	 SHORT $LN2@FirstDrive
$LN1@FirstDrive:

; 50   : 		unitmask = unitmask >> 1;

  00025	8b 45 08	 mov	 eax, DWORD PTR _unitmask$[ebp]
  00028	d1 e8		 shr	 eax, 1
  0002a	89 45 08	 mov	 DWORD PTR _unitmask$[ebp], eax

; 51   : 	}

  0002d	eb db		 jmp	 SHORT $LN3@FirstDrive
$LN2@FirstDrive:

; 52   : 	return (i + 'A');

  0002f	0f be 45 ff	 movsx	 eax, BYTE PTR _i$[ebp]
  00033	83 c0 41	 add	 eax, 65			; 00000041H

; 53   : }

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
?FirstDriveFromMask@@YADK@Z ENDP			; FirstDriveFromMask
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ??0CAboutDlg@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CAboutDlg@@QAE@XZ PROC				; CAboutDlg::CAboutDlg, COMDAT
; _this$ = ecx

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CAboutDlg@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	6a 00		 push	 0
  00028	6a 64		 push	 100			; 00000064H
  0002a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CDialogEx@@QAE@IPAVCWnd@@@Z
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CAboutDlg@@6B@
  00043	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	81 c1 b8 00 00
	00		 add	 ecx, 184		; 000000b8H
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00052	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00056	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	81 c1 bc 00 00
	00		 add	 ecx, 188		; 000000bcH
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00065	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 57   : 	msg1.Format("%s", "请检查外部存储设备是否正确插入");

  00069	68 00 00 00 00	 push	 OFFSET $SG4294957300
  0006e	68 00 00 00 00	 push	 OFFSET $SG4294957299
  00073	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	81 c1 b8 00 00
	00		 add	 ecx, 184		; 000000b8H
  0007c	51		 push	 ecx
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  00083	83 c4 0c	 add	 esp, 12			; 0000000cH

; 58   : 	msg2.Format("%s", "若已插入则插拔一次");

  00086	68 00 00 00 00	 push	 OFFSET $SG4294957298
  0008b	68 00 00 00 00	 push	 OFFSET $SG4294957297
  00090	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00093	81 c2 bc 00 00
	00		 add	 edx, 188		; 000000bcH
  00099	52		 push	 edx
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  000a0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 59   : 	bHaveDlg = FALSE;

  000a3	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a6	c7 80 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+192], 0

; 60   : }

  000b0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b7	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000ba	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c4	59		 pop	 ecx
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CAboutDlg@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CDialogEx@@UAE@XZ
__unwindfunclet$??0CAboutDlg@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 b8 00 00
	00		 add	 ecx, 184		; 000000b8H
  00011	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$??0CAboutDlg@@QAE@XZ$2:
  00017	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	81 c1 bc 00 00
	00		 add	 ecx, 188		; 000000bcH
  00020	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$??0CAboutDlg@@QAE@XZ:
  00026	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002d	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CAboutDlg@@QAE@XZ
  0003c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CAboutDlg@@QAE@XZ ENDP				; CAboutDlg::CAboutDlg
; Function compile flags: /Odtp
;	COMDAT ??_GCAboutDlg@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCAboutDlg@@UAEPAXI@Z PROC				; CAboutDlg::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CAboutDlg@@UAE@XZ
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $LN1@scalar
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$LN1@scalar:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_GCAboutDlg@@UAEPAXI@Z ENDP				; CAboutDlg::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1CAboutDlg@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CAboutDlg@@UAE@XZ PROC				; CAboutDlg::~CAboutDlg, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	81 c1 bc 00 00
	00		 add	 ecx, 188		; 000000bcH
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 b8 00 00
	00		 add	 ecx, 184		; 000000b8H
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ??1CDialogEx@@UAE@XZ
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??1CAboutDlg@@UAE@XZ ENDP				; CAboutDlg::~CAboutDlg
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?DoDataExchange@CAboutDlg@@MAEXPAVCDataExchange@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pDX$ = 8						; size = 4
?DoDataExchange@CAboutDlg@@MAEXPAVCDataExchange@@@Z PROC ; CAboutDlg::DoDataExchange, COMDAT
; _this$ = ecx

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 64   : 	CDialogEx::DoDataExchange(pDX);

  00007	8b 45 08	 mov	 eax, DWORD PTR _pDX$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z ; CWnd::DoDataExchange

; 65   : }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?DoDataExchange@CAboutDlg@@MAEXPAVCDataExchange@@@Z ENDP ; CAboutDlg::DoDataExchange
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?GetMessageMap@CAboutDlg@@MBEPBUAFX_MSGMAP@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMessageMap@CAboutDlg@@MBEPBUAFX_MSGMAP@@XZ PROC	; CAboutDlg::GetMessageMap, COMDAT
; _this$ = ecx

; 67   : BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	e8 00 00 00 00	 call	 ?GetThisMessageMap@CAboutDlg@@KGPBUAFX_MSGMAP@@XZ ; CAboutDlg::GetThisMessageMap
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetMessageMap@CAboutDlg@@MBEPBUAFX_MSGMAP@@XZ ENDP	; CAboutDlg::GetMessageMap
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?GetThisMessageMap@CAboutDlg@@KGPBUAFX_MSGMAP@@XZ
_TEXT	SEGMENT
?GetThisMessageMap@CAboutDlg@@KGPBUAFX_MSGMAP@@XZ PROC	; CAboutDlg::GetThisMessageMap, COMDAT

; 67   : BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   : 	ON_BN_CLICKED(IDOK, &CAboutDlg::OnBnClickedOk)
; 69   : 	ON_WM_CLOSE()
; 70   : END_MESSAGE_MAP()

  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?messageMap@?1??GetThisMessageMap@CAboutDlg@@KGPBUAFX_MSGMAP@@XZ@4U3@B
  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?GetThisMessageMap@CAboutDlg@@KGPBUAFX_MSGMAP@@XZ ENDP	; CAboutDlg::GetThisMessageMap
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?OnClose@CAboutDlg@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnClose@CAboutDlg@@QAEXXZ PROC				; CAboutDlg::OnClose, COMDAT
; _this$ = ecx

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 74   : 	// TODO: 在此添加消息处理程序代码和/或调用默认值
; 75   : 	bHaveDlg = FALSE;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 80 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+192], 0

; 76   : 	CDialog::OnClose();

  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?OnClose@CWnd@@IAEXXZ	; CWnd::OnClose

; 77   : }

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?OnClose@CAboutDlg@@QAEXXZ ENDP				; CAboutDlg::OnClose
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?OnInitDialog@CAboutDlg@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnInitDialog@CAboutDlg@@UAEHXZ PROC			; CAboutDlg::OnInitDialog, COMDAT
; _this$ = ecx

; 79   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 80   : 	CDialog::OnInitDialog();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?OnInitDialog@CDialog@@UAEHXZ

; 81   : 	SetDlgItemText(IDC_STATIC1, msg1);

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	81 c1 b8 00 00
	00		 add	 ecx, 184		; 000000b8H
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0001f	50		 push	 eax
  00020	68 1a 04 00 00	 push	 1050			; 0000041aH
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetDlgItemTextA@CWnd@@QAEXHPBD@Z

; 82   : 	SetDlgItemText(IDC_STATIC2, msg2);

  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	81 c1 bc 00 00
	00		 add	 ecx, 188		; 000000bcH
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0003d	50		 push	 eax
  0003e	68 1b 04 00 00	 push	 1051			; 0000041bH
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetDlgItemTextA@CWnd@@QAEXHPBD@Z

; 83   : 	bHaveDlg = TRUE;

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	c7 80 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+192], 1

; 84   : 	return TRUE;

  00059	b8 01 00 00 00	 mov	 eax, 1

; 85   : }

  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
?OnInitDialog@CAboutDlg@@UAEHXZ ENDP			; CAboutDlg::OnInitDialog
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GCEndoScopeMFCDlg@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCEndoScopeMFCDlg@@UAEPAXI@Z PROC			; CEndoScopeMFCDlg::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CEndoScopeMFCDlg@@UAE@XZ ; CEndoScopeMFCDlg::~CEndoScopeMFCDlg
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $LN1@scalar
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$LN1@scalar:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_GCEndoScopeMFCDlg@@UAEPAXI@Z ENDP			; CEndoScopeMFCDlg::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?DoDataExchange@CEndoScopeMFCDlg@@MAEXPAVCDataExchange@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pDX$ = 8						; size = 4
?DoDataExchange@CEndoScopeMFCDlg@@MAEXPAVCDataExchange@@@Z PROC ; CEndoScopeMFCDlg::DoDataExchange, COMDAT
; _this$ = ecx

; 154  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 155  : 	CDialogEx::DoDataExchange(pDX);

  00007	8b 45 08	 mov	 eax, DWORD PTR _pDX$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z ; CWnd::DoDataExchange

; 156  : }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?DoDataExchange@CEndoScopeMFCDlg@@MAEXPAVCDataExchange@@@Z ENDP ; CEndoScopeMFCDlg::DoDataExchange
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?GetMessageMap@CEndoScopeMFCDlg@@MBEPBUAFX_MSGMAP@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMessageMap@CEndoScopeMFCDlg@@MBEPBUAFX_MSGMAP@@XZ PROC ; CEndoScopeMFCDlg::GetMessageMap, COMDAT
; _this$ = ecx

; 158  : BEGIN_MESSAGE_MAP(CEndoScopeMFCDlg, CDialogEx)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	e8 00 00 00 00	 call	 ?GetThisMessageMap@CEndoScopeMFCDlg@@KGPBUAFX_MSGMAP@@XZ ; CEndoScopeMFCDlg::GetThisMessageMap
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetMessageMap@CEndoScopeMFCDlg@@MBEPBUAFX_MSGMAP@@XZ ENDP ; CEndoScopeMFCDlg::GetMessageMap
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?GetThisMessageMap@CEndoScopeMFCDlg@@KGPBUAFX_MSGMAP@@XZ
_TEXT	SEGMENT
?GetThisMessageMap@CEndoScopeMFCDlg@@KGPBUAFX_MSGMAP@@XZ PROC ; CEndoScopeMFCDlg::GetThisMessageMap, COMDAT

; 158  : BEGIN_MESSAGE_MAP(CEndoScopeMFCDlg, CDialogEx)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 159  : 	ON_WM_SYSCOMMAND()
; 160  : 	ON_WM_PAINT()
; 161  : 	ON_WM_QUERYDRAGICON()
; 162  : 	ON_BN_CLICKED(IDC_BUT_OK, &CEndoScopeMFCDlg::OnBnClickedButOk)
; 163  : 	ON_BN_CLICKED(IDC_BUT_RUN, &CEndoScopeMFCDlg::OnBnClickedButRun)
; 164  : 	ON_BN_CLICKED(IDC_BUT_PAUSE, &CEndoScopeMFCDlg::OnBnClickedButPause)
; 165  : 	ON_BN_CLICKED(IDC_BUT_STOP, &CEndoScopeMFCDlg::OnBnClickedButStop)
; 166  : 	ON_WM_CTLCOLOR()
; 167  : 	ON_MESSAGE(WM_SERIALPORT_MSG, OnCtlData)
; 168  : 
; 169  : 	//	ON_WM_SIZE()
; 170  : 	ON_WM_TIMER()
; 171  : END_MESSAGE_MAP()

  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?messageMap@?1??GetThisMessageMap@CEndoScopeMFCDlg@@KGPBUAFX_MSGMAP@@XZ@4U3@B
  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?GetThisMessageMap@CEndoScopeMFCDlg@@KGPBUAFX_MSGMAP@@XZ ENDP ; CEndoScopeMFCDlg::GetThisMessageMap
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?OnInitDialog@CEndoScopeMFCDlg@@MAEHXZ
_TEXT	SEGMENT
_bNameValid$2 = -36					; size = 4
_hr$ = -32						; size = 4
_pSysMenu$ = -28					; size = 4
_this$ = -24						; size = 4
_strAboutMenu$3 = -20					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?OnInitDialog@CEndoScopeMFCDlg@@MAEHXZ PROC		; CEndoScopeMFCDlg::OnInitDialog, COMDAT
; _this$ = ecx

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnInitDialog@CEndoScopeMFCDlg@@MAEHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 178  : 	CDialogEx::OnInitDialog();

  0002b	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?OnInitDialog@CDialog@@UAEHXZ

; 179  : 
; 180  : 	// 将“关于...”菜单项添加到系统菜单中。
; 181  : 
; 182  : 	// IDM_ABOUTBOX 必须在系统命令范围内。
; 183  : 	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
; 184  : 	ASSERT(IDM_ABOUTBOX < 0xF000);
; 185  : 
; 186  : 	CMenu* pSysMenu = GetSystemMenu(FALSE);

  00034	6a 00		 push	 0
  00036	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?GetSystemMenu@CWnd@@QBEPAVCMenu@@H@Z ; CWnd::GetSystemMenu
  0003e	89 45 e4	 mov	 DWORD PTR _pSysMenu$[ebp], eax

; 187  : 	if (pSysMenu != nullptr)

  00041	83 7d e4 00	 cmp	 DWORD PTR _pSysMenu$[ebp], 0
  00045	74 65		 je	 SHORT $LN5@OnInitDial

; 188  : 	{
; 189  : 		BOOL bNameValid;
; 190  : 		CString strAboutMenu;

  00047	8d 4d ec	 lea	 ecx, DWORD PTR _strAboutMenu$3[ebp]
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00050	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 191  : 		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);

  00057	6a 65		 push	 101			; 00000065H
  00059	8d 4d ec	 lea	 ecx, DWORD PTR _strAboutMenu$3[ebp]
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEHI@Z
  00062	89 45 dc	 mov	 DWORD PTR _bNameValid$2[ebp], eax

; 192  : 		ASSERT(bNameValid);
; 193  : 		if (!strAboutMenu.IsEmpty())

  00065	8d 4d ec	 lea	 ecx, DWORD PTR _strAboutMenu$3[ebp]
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@?$CSimpleStringT@D$00@ATL@@QBE_NXZ
  0006e	0f b6 c0	 movzx	 eax, al
  00071	85 c0		 test	 eax, eax
  00073	75 27		 jne	 SHORT $LN4@OnInitDial

; 194  : 		{
; 195  : 			pSysMenu->AppendMenu(MF_SEPARATOR);

  00075	6a 00		 push	 0
  00077	6a 00		 push	 0
  00079	68 00 08 00 00	 push	 2048			; 00000800H
  0007e	8b 4d e4	 mov	 ecx, DWORD PTR _pSysMenu$[ebp]
  00081	e8 00 00 00 00	 call	 ?AppendMenuA@CMenu@@QAEHIIPBD@Z ; CMenu::AppendMenuA

; 196  : 			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);

  00086	8d 4d ec	 lea	 ecx, DWORD PTR _strAboutMenu$3[ebp]
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0008f	50		 push	 eax
  00090	6a 10		 push	 16			; 00000010H
  00092	6a 00		 push	 0
  00094	8b 4d e4	 mov	 ecx, DWORD PTR _pSysMenu$[ebp]
  00097	e8 00 00 00 00	 call	 ?AppendMenuA@CMenu@@QAEHIIPBD@Z ; CMenu::AppendMenuA
$LN4@OnInitDial:

; 197  : 		}
; 198  : 	}

  0009c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a3	8d 4d ec	 lea	 ecx, DWORD PTR _strAboutMenu$3[ebp]
  000a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$LN5@OnInitDial:

; 199  : 
; 200  : 	// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动
; 201  : 	//  执行此操作
; 202  : 	SetIcon(m_hIcon, TRUE);			// 设置大图标

  000ac	6a 01		 push	 1
  000ae	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b1	8b 91 30 01 00
	00		 mov	 edx, DWORD PTR [ecx+304]
  000b7	52		 push	 edx
  000b8	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	e8 00 00 00 00	 call	 ?SetIcon@CWnd@@QAEPAUHICON__@@PAU2@H@Z ; CWnd::SetIcon

; 203  : 	SetIcon(m_hIcon, FALSE);		// 设置小图标

  000c0	6a 00		 push	 0
  000c2	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000c5	8b 88 30 01 00
	00		 mov	 ecx, DWORD PTR [eax+304]
  000cb	51		 push	 ecx
  000cc	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000cf	e8 00 00 00 00	 call	 ?SetIcon@CWnd@@QAEPAUHICON__@@PAU2@H@Z ; CWnd::SetIcon

; 204  : 
; 205  : 	// TODO: 在此添加额外的初始化代码
; 206  : 	m_sdatapath = "DATA\\";

  000d4	68 00 00 00 00	 push	 OFFSET $SG4294957294
  000d9	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000dc	81 c1 a8 01 00
	00		 add	 ecx, 424		; 000001a8H
  000e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 207  : 	if (!PathIsDirectory(m_sdatapath))

  000e8	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000eb	81 c1 a8 01 00
	00		 add	 ecx, 424		; 000001a8H
  000f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  000f7	50		 push	 eax
  000f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PathIsDirectoryA@4
  000fe	85 c0		 test	 eax, eax
  00100	75 18		 jne	 SHORT $LN3@OnInitDial

; 208  : 	{
; 209  : 		::CreateDirectory(m_sdatapath, NULL);//创建目录,已有的话不影响  

  00102	6a 00		 push	 0
  00104	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00107	81 c1 a8 01 00
	00		 add	 ecx, 424		; 000001a8H
  0010d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00113	50		 push	 eax
  00114	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDirectoryA@8
$LN3@OnInitDial:

; 210  : 	}
; 211  : 	InitParameter();

  0011a	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0011d	e8 00 00 00 00	 call	 ?InitParameter@CEndoScopeMFCDlg@@AAEXXZ ; CEndoScopeMFCDlg::InitParameter

; 212  : 	InitializePLC();

  00122	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00125	e8 00 00 00 00	 call	 ?InitializePLC@CEndoScopeMFCDlg@@AAEXXZ ; CEndoScopeMFCDlg::InitializePLC

; 213  : 	InitializeFormBoxLayout();//设置窗口大小位置

  0012a	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0012d	e8 00 00 00 00	 call	 ?InitializeFormBoxLayout@CEndoScopeMFCDlg@@QAEXXZ ; CEndoScopeMFCDlg::InitializeFormBoxLayout

; 214  : 	InitializecvWindow();//初始化opencv window

  00132	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00135	e8 00 00 00 00	 call	 ?InitializecvWindow@CEndoScopeMFCDlg@@AAEXXZ ; CEndoScopeMFCDlg::InitializecvWindow

; 215  : 	SetPicWidowShape();//设置视频窗口形状

  0013a	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0013d	e8 00 00 00 00	 call	 ?SetPicWidowShape@CEndoScopeMFCDlg@@QAEXXZ ; CEndoScopeMFCDlg::SetPicWidowShape

; 216  : 	IniWhilteLamda();//初始化白平衡

  00142	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00145	e8 00 00 00 00	 call	 ?IniWhilteLamda@CEndoScopeMFCDlg@@QAEXXZ ; CEndoScopeMFCDlg::IniWhilteLamda

; 217  : 	SetInitValue();

  0014a	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0014d	e8 00 00 00 00	 call	 ?SetInitValue@CEndoScopeMFCDlg@@QAEXXZ ; CEndoScopeMFCDlg::SetInitValue

; 218  : 	InitializeThread();//初始化线程

  00152	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00155	e8 00 00 00 00	 call	 ?InitializeThread@CEndoScopeMFCDlg@@AAEXXZ ; CEndoScopeMFCDlg::InitializeThread

; 219  : 	/*官方采集*/
; 220  : 	//m_pCCGrapgBuilder = new MWCCGraphBuilder();
; 221  : 
; 222  : 	//m_pCCGrapgBuilder->InitVMR9(m_hPicWindow);
; 223  : 	//m_pCCGrapgBuilder->EnumDevices();
; 224  : 	//m_pCCGrapgBuilder->CreateCCDecoder();
; 225  : 	/*回调采集*/
; 226  : 	m_eCurrent = EDS_Init;

  0015a	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0015d	c7 82 80 04 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+1152], 0

; 227  : 	//CWnd *pwnd = GetDlgItem(IDC_STILL);
; 228  : 	//HWND hwnd = pwnd->GetSafeHwnd();
; 229  : 	HRESULT hr=m_dwcap.Init(0, m_hPicWindow);

  00167	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0016a	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  00170	51		 push	 ecx
  00171	6a 00		 push	 0
  00173	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00176	81 c1 18 02 00
	00		 add	 ecx, 536		; 00000218H
  0017c	e8 00 00 00 00	 call	 ?Init@CEDSCapture@@QAEJHPAUHWND__@@@Z ; CEDSCapture::Init
  00181	89 45 e0	 mov	 DWORD PTR _hr$[ebp], eax

; 230  : 	if (FAILED(hr)) {

  00184	83 7d e0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00188	7d 0f		 jge	 SHORT $LN2@OnInitDial

; 231  : 		m_eCurrent = EDS_Stopped;

  0018a	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0018d	c7 82 80 04 00
	00 01 00 00 00	 mov	 DWORD PTR [edx+1152], 1

; 232  : 	}
; 233  : 	else

  00197	eb 0d		 jmp	 SHORT $LN1@OnInitDial
$LN2@OnInitDial:

; 234  : 		m_eCurrent = EDS_Running;

  00199	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0019c	c7 80 80 04 00
	00 03 00 00 00	 mov	 DWORD PTR [eax+1152], 3
$LN1@OnInitDial:

; 235  : 	//GetDlgItem(IDC_STILL)->SetFocus();
; 236  : 	SetTimer(SHOWTIME, 1000,NULL);

  001a6	6a 00		 push	 0
  001a8	68 e8 03 00 00	 push	 1000			; 000003e8H
  001ad	6a 01		 push	 1
  001af	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001b2	e8 00 00 00 00	 call	 ?SetTimer@CWnd@@QAEIIIP6GXPAUHWND__@@IIK@Z@Z ; CWnd::SetTimer

; 237  : 	SetTimer(SHOWFPS, 1000, NULL);

  001b7	6a 00		 push	 0
  001b9	68 e8 03 00 00	 push	 1000			; 000003e8H
  001be	6a 02		 push	 2
  001c0	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001c3	e8 00 00 00 00	 call	 ?SetTimer@CWnd@@QAEIIIP6GXPAUHWND__@@IIK@Z@Z ; CWnd::SetTimer

; 238  : 	//g_bprocthread = true;
; 239  : 	//ResumeThread(m_hthreadprocess);
; 240  : 	//cout<<"main thread"<<std::this_thread::get_id() << endl;
; 241  : 	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE

  001c8	b8 01 00 00 00	 mov	 eax, 1

; 242  : }

  001cd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001d0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d7	59		 pop	 ecx
  001d8	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001db	33 cd		 xor	 ecx, ebp
  001dd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e2	8b e5		 mov	 esp, ebp
  001e4	5d		 pop	 ebp
  001e5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnInitDialog@CEndoScopeMFCDlg@@MAEHXZ$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _strAboutMenu$3[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?OnInitDialog@CEndoScopeMFCDlg@@MAEHXZ:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnInitDialog@CEndoScopeMFCDlg@@MAEHXZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnInitDialog@CEndoScopeMFCDlg@@MAEHXZ ENDP		; CEndoScopeMFCDlg::OnInitDialog
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?OnSysCommand@CEndoScopeMFCDlg@@IAEXIJ@Z
_TEXT	SEGMENT
_this$ = -216						; size = 4
_dlgAbout$2 = -212					; size = 196
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_nID$ = 8						; size = 4
_lParam$ = 12						; size = 4
?OnSysCommand@CEndoScopeMFCDlg@@IAEXIJ@Z PROC		; CEndoScopeMFCDlg::OnSysCommand, COMDAT
; _this$ = ecx

; 245  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnSysCommand@CEndoScopeMFCDlg@@IAEXIJ@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 8d 28 ff ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 246  : 	if ((nID & 0xFFF0) == IDM_ABOUTBOX)

  00031	8b 45 08	 mov	 eax, DWORD PTR _nID$[ebp]
  00034	25 f0 ff 00 00	 and	 eax, 65520		; 0000fff0H
  00039	83 f8 10	 cmp	 eax, 16			; 00000010H
  0003c	75 3f		 jne	 SHORT $LN2@OnSysComma

; 247  : 	{
; 248  : 		CAboutDlg dlgAbout;

  0003e	6a 01		 push	 1
  00040	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _dlgAbout$2[ebp]
  00046	e8 00 00 00 00	 call	 ?__autoclassinit@CAboutDlg@@QAEXI@Z
  0004b	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _dlgAbout$2[ebp]
  00051	e8 00 00 00 00	 call	 ??0CAboutDlg@@QAE@XZ	; CAboutDlg::CAboutDlg
  00056	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 249  : 		dlgAbout.DoModal();

  0005d	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _dlgAbout$2[ebp]
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?DoModal@CDialog@@UAEHXZ

; 250  : 	}

  00069	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00070	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _dlgAbout$2[ebp]
  00076	e8 00 00 00 00	 call	 ??1CAboutDlg@@UAE@XZ

; 251  : 	else

  0007b	eb 13		 jmp	 SHORT $LN3@OnSysComma
$LN2@OnSysComma:

; 252  : 	{
; 253  : 		CDialogEx::OnSysCommand(nID, lParam);

  0007d	8b 4d 0c	 mov	 ecx, DWORD PTR _lParam$[ebp]
  00080	51		 push	 ecx
  00081	8b 55 08	 mov	 edx, DWORD PTR _nID$[ebp]
  00084	52		 push	 edx
  00085	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0008b	e8 00 00 00 00	 call	 ?OnSysCommand@CWnd@@IAEXIJ@Z ; CWnd::OnSysCommand
$LN3@OnSysComma:

; 254  : 	}
; 255  : }

  00090	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00093	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009a	59		 pop	 ecx
  0009b	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009e	33 cd		 xor	 ecx, ebp
  000a0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnSysCommand@CEndoScopeMFCDlg@@IAEXIJ@Z$0:
  00000	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _dlgAbout$2[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CAboutDlg@@UAE@XZ
__ehhandler$?OnSysCommand@CEndoScopeMFCDlg@@IAEXIJ@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a 30 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-208]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnSysCommand@CEndoScopeMFCDlg@@IAEXIJ@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnSysCommand@CEndoScopeMFCDlg@@IAEXIJ@Z ENDP		; CEndoScopeMFCDlg::OnSysCommand
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?OnPaint@CEndoScopeMFCDlg@@IAEXXZ
_TEXT	SEGMENT
_cxIcon$2 = -136					; size = 4
_x$3 = -132						; size = 4
_cyIcon$4 = -128					; size = 4
_y$5 = -124						; size = 4
_this$ = -120						; size = 4
_dc$6 = -116						; size = 84
_rect$7 = -32						; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?OnPaint@CEndoScopeMFCDlg@@IAEXXZ PROC			; CEndoScopeMFCDlg::OnPaint, COMDAT
; _this$ = ecx

; 262  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnPaint@CEndoScopeMFCDlg@@IAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d 88	 mov	 DWORD PTR _this$[ebp], ecx

; 263  : 	//SetPicWidowShape();
; 264  : 	if (IsIconic())

  0002b	8b 4d 88	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?IsIconic@CWnd@@QBEHXZ	; CWnd::IsIconic
  00033	85 c0		 test	 eax, eax
  00035	0f 84 c1 00 00
	00		 je	 $LN2@OnPaint

; 265  : 	{
; 266  : 		CPaintDC dc(this); // 用于绘制的设备上下文

  0003b	6a 01		 push	 1
  0003d	8d 4d 8c	 lea	 ecx, DWORD PTR _dc$6[ebp]
  00040	e8 00 00 00 00	 call	 ?__autoclassinit@CPaintDC@@QAEXI@Z
  00045	8b 45 88	 mov	 eax, DWORD PTR _this$[ebp]
  00048	50		 push	 eax
  00049	8d 4d 8c	 lea	 ecx, DWORD PTR _dc$6[ebp]
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CPaintDC@@QAE@PAVCWnd@@@Z
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 267  : 
; 268  : 		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

  00059	6a 00		 push	 0
  0005b	8d 4d 8c	 lea	 ecx, DWORD PTR _dc$6[ebp]
  0005e	e8 00 00 00 00	 call	 ?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ ; CDC::GetSafeHdc
  00063	50		 push	 eax
  00064	6a 27		 push	 39			; 00000027H
  00066	8b 4d 88	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?SendMessageA@CWnd@@QBEJIIJ@Z ; CWnd::SendMessageA

; 269  : 
; 270  : 		// 使图标在工作区矩形中居中
; 271  : 		int cxIcon = GetSystemMetrics(SM_CXICON);

  0006e	6a 0b		 push	 11			; 0000000bH
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  00076	89 85 78 ff ff
	ff		 mov	 DWORD PTR _cxIcon$2[ebp], eax

; 272  : 		int cyIcon = GetSystemMetrics(SM_CYICON);

  0007c	6a 0c		 push	 12			; 0000000cH
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  00084	89 45 80	 mov	 DWORD PTR _cyIcon$4[ebp], eax

; 273  : 		CRect rect;

  00087	8d 4d e0	 lea	 ecx, DWORD PTR _rect$7[ebp]
  0008a	e8 00 00 00 00	 call	 ??0CRect@@QAE@XZ	; CRect::CRect

; 274  : 		GetClientRect(&rect);

  0008f	8d 4d e0	 lea	 ecx, DWORD PTR _rect$7[ebp]
  00092	51		 push	 ecx
  00093	8b 4d 88	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	e8 00 00 00 00	 call	 ?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetClientRect

; 275  : 		int x = (rect.Width() - cxIcon + 1) / 2;

  0009b	8d 4d e0	 lea	 ecx, DWORD PTR _rect$7[ebp]
  0009e	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  000a3	2b 85 78 ff ff
	ff		 sub	 eax, DWORD PTR _cxIcon$2[ebp]
  000a9	83 c0 01	 add	 eax, 1
  000ac	99		 cdq
  000ad	2b c2		 sub	 eax, edx
  000af	d1 f8		 sar	 eax, 1
  000b1	89 85 7c ff ff
	ff		 mov	 DWORD PTR _x$3[ebp], eax

; 276  : 		int y = (rect.Height() - cyIcon + 1) / 2;

  000b7	8d 4d e0	 lea	 ecx, DWORD PTR _rect$7[ebp]
  000ba	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  000bf	2b 45 80	 sub	 eax, DWORD PTR _cyIcon$4[ebp]
  000c2	83 c0 01	 add	 eax, 1
  000c5	99		 cdq
  000c6	2b c2		 sub	 eax, edx
  000c8	d1 f8		 sar	 eax, 1
  000ca	89 45 84	 mov	 DWORD PTR _y$5[ebp], eax

; 277  : 
; 278  : 		// 绘制图标
; 279  : 		dc.DrawIcon(x, y, m_hIcon);

  000cd	8b 55 88	 mov	 edx, DWORD PTR _this$[ebp]
  000d0	8b 82 30 01 00
	00		 mov	 eax, DWORD PTR [edx+304]
  000d6	50		 push	 eax
  000d7	8b 4d 84	 mov	 ecx, DWORD PTR _y$5[ebp]
  000da	51		 push	 ecx
  000db	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _x$3[ebp]
  000e1	52		 push	 edx
  000e2	8d 4d 8c	 lea	 ecx, DWORD PTR _dc$6[ebp]
  000e5	e8 00 00 00 00	 call	 ?DrawIcon@CDC@@QAEHHHPAUHICON__@@@Z ; CDC::DrawIcon

; 280  : 	}

  000ea	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f1	8d 4d 8c	 lea	 ecx, DWORD PTR _dc$6[ebp]
  000f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CPaintDC@@UAE@XZ

; 281  : 	else

  000fa	eb 09		 jmp	 SHORT $LN3@OnPaint
$LN2@OnPaint:

; 282  : 	{
; 283  : 		CDialogEx::OnPaint();

  000fc	8b 4d 88	 mov	 ecx, DWORD PTR _this$[ebp]
  000ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?OnPaint@CDialog@@IAEXXZ
$LN3@OnPaint:

; 284  : 	}
; 285  : }

  00105	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00108	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010f	59		 pop	 ecx
  00110	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00113	33 cd		 xor	 ecx, ebp
  00115	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011a	8b e5		 mov	 esp, ebp
  0011c	5d		 pop	 ebp
  0011d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnPaint@CEndoScopeMFCDlg@@IAEXXZ$0:
  00000	8d 4d 8c	 lea	 ecx, DWORD PTR _dc$6[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1CPaintDC@@UAE@XZ
__ehhandler$?OnPaint@CEndoScopeMFCDlg@@IAEXXZ:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a 80	 mov	 ecx, DWORD PTR [edx-128]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnPaint@CEndoScopeMFCDlg@@IAEXXZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnPaint@CEndoScopeMFCDlg@@IAEXXZ ENDP			; CEndoScopeMFCDlg::OnPaint
; Function compile flags: /Odtp
;	COMDAT ?__autoclassinit@CPaintDC@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_$initVBases$ = 8					; size = 4
?__autoclassinit@CPaintDC@@QAEXI@Z PROC			; CPaintDC::__autoclassinit, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?__autoclassinit@CDC@@QAEXI@Z
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?__autoclassinit@CPaintDC@@QAEXI@Z ENDP			; CPaintDC::__autoclassinit
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?OnQueryDragIcon@CEndoScopeMFCDlg@@IAEPAUHICON__@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnQueryDragIcon@CEndoScopeMFCDlg@@IAEPAUHICON__@@XZ PROC ; CEndoScopeMFCDlg::OnQueryDragIcon, COMDAT
; _this$ = ecx

; 290  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 291  : 	return static_cast<HCURSOR>(m_hIcon);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 80 30 01 00
	00		 mov	 eax, DWORD PTR [eax+304]

; 292  : }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?OnQueryDragIcon@CEndoScopeMFCDlg@@IAEPAUHICON__@@XZ ENDP ; CEndoScopeMFCDlg::OnQueryDragIcon
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?InitializecvWindow@CEndoScopeMFCDlg@@AAEXXZ
_TEXT	SEGMENT
$T2 = -40						; size = 8
$T3 = -32						; size = 8
_hParent$ = -24						; size = 4
_hWnd$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?InitializecvWindow@CEndoScopeMFCDlg@@AAEXXZ PROC	; CEndoScopeMFCDlg::InitializecvWindow, COMDAT
; _this$ = ecx

; 295  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?InitializecvWindow@CEndoScopeMFCDlg@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 296  : 	//设置opencv窗口	
; 297  : 	cv::namedWindow("view", WINDOW_NORMAL);

  00028	68 00 00 00 00	 push	 OFFSET $SG4294957293
  0002d	8d 4d e0	 lea	 ecx, DWORD PTR $T3[ebp]
  00030	e8 00 00 00 00	 call	 ??0String@cv@@QAE@PBD@Z	; cv::String::String
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003c	6a 00		 push	 0
  0003e	8d 45 e0	 lea	 eax, DWORD PTR $T3[ebp]
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?namedWindow@cv@@YAXABVString@1@H@Z
  00048	83 c4 08	 add	 esp, 8
  0004b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00052	8d 4d e0	 lea	 ecx, DWORD PTR $T3[ebp]
  00055	e8 00 00 00 00	 call	 ??1String@cv@@QAE@XZ	; cv::String::~String

; 298  : 	//CRect rc;
; 299  : 	//GetDlgItem(IDC_STILL)->GetClientRect(rc);
; 300  : 	cv::resizeWindow("view", m_rPicRect.right - m_rPicRect.left-1, m_rPicRect.bottom - m_rPicRect.top-1);

  0005a	68 00 00 00 00	 push	 OFFSET $SG4294957292
  0005f	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00062	e8 00 00 00 00	 call	 ??0String@cv@@QAE@PBD@Z	; cv::String::String
  00067	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0006e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00074	8b 81 64 01 00
	00		 mov	 eax, DWORD PTR [ecx+356]
  0007a	2b 82 5c 01 00
	00		 sub	 eax, DWORD PTR [edx+348]
  00080	83 e8 01	 sub	 eax, 1
  00083	50		 push	 eax
  00084	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0008a	8b 81 60 01 00
	00		 mov	 eax, DWORD PTR [ecx+352]
  00090	2b 82 58 01 00
	00		 sub	 eax, DWORD PTR [edx+344]
  00096	83 e8 01	 sub	 eax, 1
  00099	50		 push	 eax
  0009a	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  0009d	51		 push	 ecx
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?resizeWindow@cv@@YAXABVString@1@HH@Z
  000a4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ae	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  000b1	e8 00 00 00 00	 call	 ??1String@cv@@QAE@XZ	; cv::String::~String

; 301  : 	HWND hWnd = (HWND)cvGetWindowHandle("view");

  000b6	68 00 00 00 00	 push	 OFFSET $SG4294957291
  000bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__cvGetWindowHandle
  000c1	83 c4 04	 add	 esp, 4
  000c4	89 45 ec	 mov	 DWORD PTR _hWnd$[ebp], eax

; 302  : 	HWND hParent = ::GetParent(hWnd);

  000c7	8b 55 ec	 mov	 edx, DWORD PTR _hWnd$[ebp]
  000ca	52		 push	 edx
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetParent@4
  000d1	89 45 e8	 mov	 DWORD PTR _hParent$[ebp], eax

; 303  : 	::SetParent(hWnd, GetDlgItem(IDC_STILL)->m_hWnd);

  000d4	68 0d 04 00 00	 push	 1037			; 0000040dH
  000d9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  000e2	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  000e5	50		 push	 eax
  000e6	8b 4d ec	 mov	 ecx, DWORD PTR _hWnd$[ebp]
  000e9	51		 push	 ecx
  000ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetParent@8

; 304  : 	//::SetParent(hWnd, m_hPicWindow);
; 305  : 
; 306  : 	//::SetParent(hWnd, this->m_hWnd);//wm_1022
; 307  : 	//CWnd *pWnd = CWnd::FromHandle(hWnd);
; 308  : 	//pWnd->SetWindowPos(&CWnd::wndTopMost, m_nPicWindow_left, m_nPicWindow_top, m_nPicWindow_width, m_nPicWindow_height, SWP_SHOWWINDOW);
; 309  : 	//LONG_PTR Style = GetWindowLongPtr(m_hPicWindow,GWL_STYLE);   //获取xx2属性
; 310  : 	//Style = Style|WS_CLIPCHILDREN;         //xx2属性+WS_CLIPCHILDREN      即父窗口不再重绘子窗口覆盖部分
; 311  : 	//SetWindowLongPtr(m_hPicWindow, GWL_STYLE, Style);                       //重置xx2属性
; 312  : 	::ShowWindow(hParent, SW_HIDE);

  000f0	6a 00		 push	 0
  000f2	8b 55 e8	 mov	 edx, DWORD PTR _hParent$[ebp]
  000f5	52		 push	 edx
  000f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8

; 313  : 	//::ShowWindow(hWnd, SW_HIDE);
; 314  : 	//::ShowWindow(m_hPicWindow,SW_SHOW);
; 315  : 
; 316  : }

  000fc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ff	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00106	59		 pop	 ecx
  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?InitializecvWindow@CEndoScopeMFCDlg@@AAEXXZ$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1String@cv@@QAE@XZ	; cv::String::~String
__unwindfunclet$?InitializecvWindow@CEndoScopeMFCDlg@@AAEXXZ$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1String@cv@@QAE@XZ	; cv::String::~String
__ehhandler$?InitializecvWindow@CEndoScopeMFCDlg@@AAEXXZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?InitializecvWindow@CEndoScopeMFCDlg@@AAEXXZ
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?InitializecvWindow@CEndoScopeMFCDlg@@AAEXXZ ENDP	; CEndoScopeMFCDlg::InitializecvWindow
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?WindowProc@CEndoScopeMFCDlg@@MAEJIIJ@Z
_TEXT	SEGMENT
tv128 = -56						; size = 4
tv70 = -52						; size = 4
tv64 = -48						; size = 4
tv65 = -44						; size = 4
_lpdbv$2 = -40						; size = 4
_lpdbv$3 = -36						; size = 4
_this$ = -32						; size = 4
_lpdb$4 = -28						; size = 4
_decDriver$5 = -24					; size = 4
_decDriver$6 = -20					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
?WindowProc@CEndoScopeMFCDlg@@MAEJIIJ@Z PROC		; CEndoScopeMFCDlg::WindowProc, COMDAT
; _this$ = ecx

; 319  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?WindowProc@CEndoScopeMFCDlg@@MAEJIIJ@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 320  : 	switch(message)

  0002b	8b 45 08	 mov	 eax, DWORD PTR _message$[ebp]
  0002e	89 45 d0	 mov	 DWORD PTR tv64[ebp], eax
  00031	81 7d d0 19 02
	00 00		 cmp	 DWORD PTR tv64[ebp], 537 ; 00000219H
  00038	74 05		 je	 SHORT $LN14@WindowProc
  0003a	e9 75 01 00 00	 jmp	 $LN15@WindowProc
$LN14@WindowProc:

; 321  : 	{
; 322  : 	case WM_DEVICECHANGE:
; 323  : 		{
; 324  : 			PDEV_BROADCAST_HDR lpdb = (PDEV_BROADCAST_HDR)lParam;

  0003f	8b 4d 10	 mov	 ecx, DWORD PTR _lParam$[ebp]
  00042	89 4d e4	 mov	 DWORD PTR _lpdb$4[ebp], ecx

; 325  : 			switch(wParam)

  00045	8b 55 0c	 mov	 edx, DWORD PTR _wParam$[ebp]
  00048	89 55 d4	 mov	 DWORD PTR tv65[ebp], edx
  0004b	81 7d d4 00 80
	00 00		 cmp	 DWORD PTR tv65[ebp], 32768 ; 00008000H
  00052	74 17		 je	 SHORT $LN10@WindowProc
  00054	81 7d d4 04 80
	00 00		 cmp	 DWORD PTR tv65[ebp], 32772 ; 00008004H
  0005b	0f 84 af 00 00
	00		 je	 $LN5@WindowProc
  00061	e9 4e 01 00 00	 jmp	 $LN15@WindowProc

; 326  : 			{
; 327  : 			case WM_DEVICECHANGE:
; 328  : 				break;

  00066	e9 49 01 00 00	 jmp	 $LN15@WindowProc
$LN10@WindowProc:

; 329  : 			case DBT_DEVICEARRIVAL:
; 330  : 				{
; 331  : 					if (lpdb->dbch_devicetype == DBT_DEVTYP_VOLUME)//逻辑卷

  0006b	8b 45 e4	 mov	 eax, DWORD PTR _lpdb$4[ebp]
  0006e	83 78 04 02	 cmp	 DWORD PTR [eax+4], 2
  00072	0f 85 93 00 00
	00		 jne	 $LN9@WindowProc

; 332  : 					{
; 333  : 						PDEV_BROADCAST_VOLUME lpdbv = (PDEV_BROADCAST_VOLUME)lpdb;

  00078	8b 4d e4	 mov	 ecx, DWORD PTR _lpdb$4[ebp]
  0007b	89 4d dc	 mov	 DWORD PTR _lpdbv$3[ebp], ecx

; 334  : 						switch (lpdbv->dbcv_flags)

  0007e	8b 55 dc	 mov	 edx, DWORD PTR _lpdbv$3[ebp]
  00081	0f b7 42 10	 movzx	 eax, WORD PTR [edx+16]
  00085	89 45 cc	 mov	 DWORD PTR tv70[ebp], eax
  00088	83 7d cc 00	 cmp	 DWORD PTR tv70[ebp], 0
  0008c	74 02		 je	 SHORT $LN6@WindowProc
  0008e	eb 7b		 jmp	 SHORT $LN9@WindowProc
$LN6@WindowProc:

; 335  : 						{
; 336  : 						case 0://U盘
; 337  : 							{
; 338  : 								g_bIsUpan = TRUE;

  00090	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?g_bIsUpan@@3HA, 1 ; g_bIsUpan

; 339  : 								CString decDriver;

  0009a	8d 4d ec	 lea	 ecx, DWORD PTR _decDriver$6[ebp]
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000a3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 340  : 								decDriver = FirstDriveFromMask(lpdbv->dbcv_unitmask);

  000aa	8b 4d dc	 mov	 ecx, DWORD PTR _lpdbv$3[ebp]
  000ad	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000b0	52		 push	 edx
  000b1	e8 00 00 00 00	 call	 ?FirstDriveFromMask@@YADK@Z ; FirstDriveFromMask
  000b6	83 c4 04	 add	 esp, 4
  000b9	0f b6 c0	 movzx	 eax, al
  000bc	50		 push	 eax
  000bd	8d 4d ec	 lea	 ecx, DWORD PTR _decDriver$6[ebp]
  000c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@D@Z

; 341  : 								g_decDriver = decDriver;

  000c6	8d 4d ec	 lea	 ecx, DWORD PTR _decDriver$6[ebp]
  000c9	51		 push	 ecx
  000ca	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_decDriver@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@A ; g_decDriver
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z

; 342  : 								GetDlgItem(IDC_STORAGE_INFO_STATIC)->SetWindowText(_T("已插入"));

  000d5	68 00 00 00 00	 push	 OFFSET $SG4294957290
  000da	68 09 04 00 00	 push	 1033			; 00000409H
  000df	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  000e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  000e8	8b c8		 mov	 ecx, eax
  000ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 343  : 								TRACE("检测到U盘:[%s]插入!\n", decDriver.GetBuffer(0));
; 344  : 								g_pPLC->OverSave();

  000f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  000f6	e8 00 00 00 00	 call	 ?OverSave@CPLC@@QAEHXZ	; CPLC::OverSave

; 345  : 							}

  000fb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00102	8d 4d ec	 lea	 ecx, DWORD PTR _decDriver$6[ebp]
  00105	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$LN9@WindowProc:

; 346  : 							break;
; 347  : 						}
; 348  : 					}
; 349  : 				}
; 350  : 				break;

  0010b	e9 a4 00 00 00	 jmp	 $LN15@WindowProc
$LN5@WindowProc:

; 351  : 			case DBT_DEVICEREMOVECOMPLETE://DBT_DEVICEREMOVECOMPLETE,设备卸载或者拔出
; 352  : 				{
; 353  : 					if (lpdb->dbch_devicetype == DBT_DEVTYP_VOLUME)//逻辑卷

  00110	8b 55 e4	 mov	 edx, DWORD PTR _lpdb$4[ebp]
  00113	83 7a 04 02	 cmp	 DWORD PTR [edx+4], 2
  00117	0f 85 97 00 00
	00		 jne	 $LN15@WindowProc

; 354  : 					{
; 355  : 						PDEV_BROADCAST_VOLUME lpdbv = (PDEV_BROADCAST_VOLUME)lpdb;

  0011d	8b 45 e4	 mov	 eax, DWORD PTR _lpdb$4[ebp]
  00120	89 45 d8	 mov	 DWORD PTR _lpdbv$2[ebp], eax

; 356  : 						switch (lpdbv->dbcv_flags)

  00123	8b 4d d8	 mov	 ecx, DWORD PTR _lpdbv$2[ebp]
  00126	0f b7 51 10	 movzx	 edx, WORD PTR [ecx+16]
  0012a	89 55 c8	 mov	 DWORD PTR tv128[ebp], edx
  0012d	83 7d c8 00	 cmp	 DWORD PTR tv128[ebp], 0
  00131	74 02		 je	 SHORT $LN1@WindowProc
  00133	eb 7f		 jmp	 SHORT $LN15@WindowProc
$LN1@WindowProc:

; 357  : 						{
; 358  : 						case 0:                //U盘
; 359  : 							{
; 360  : 								g_bIsUpan = FALSE;

  00135	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_bIsUpan@@3HA, 0 ; g_bIsUpan

; 361  : 								CString decDriver;

  0013f	8d 4d e8	 lea	 ecx, DWORD PTR _decDriver$5[ebp]
  00142	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00148	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 362  : 								decDriver = FirstDriveFromMask(lpdbv->dbcv_unitmask);

  0014f	8b 45 d8	 mov	 eax, DWORD PTR _lpdbv$2[ebp]
  00152	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00155	51		 push	 ecx
  00156	e8 00 00 00 00	 call	 ?FirstDriveFromMask@@YADK@Z ; FirstDriveFromMask
  0015b	83 c4 04	 add	 esp, 4
  0015e	0f b6 d0	 movzx	 edx, al
  00161	52		 push	 edx
  00162	8d 4d e8	 lea	 ecx, DWORD PTR _decDriver$5[ebp]
  00165	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@D@Z

; 363  : 								GetDlgItem(IDC_STORAGE_INFO_STATIC)->SetWindowText(_T("未插入"));

  0016b	68 00 00 00 00	 push	 OFFSET $SG4294957289
  00170	68 09 04 00 00	 push	 1033			; 00000409H
  00175	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00178	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0017e	8b c8		 mov	 ecx, eax
  00180	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 364  : 								TRACE("检测到U盘:[%s]拔出!\n", decDriver.GetBuffer(0));
; 365  : 								g_pPLC->NotLink();

  00186	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0018c	e8 00 00 00 00	 call	 ?NotLink@CPLC@@QAEHXZ	; CPLC::NotLink

; 366  : 								Sleep(100);

  00191	6a 64		 push	 100			; 00000064H
  00193	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 367  : 								g_pPLC->OverSave();//LJ

  00199	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0019f	e8 00 00 00 00	 call	 ?OverSave@CPLC@@QAEHXZ	; CPLC::OverSave

; 368  : 							}

  001a4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001ab	8d 4d e8	 lea	 ecx, DWORD PTR _decDriver$5[ebp]
  001ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$LN15@WindowProc:

; 369  : 							break;
; 370  : 						}
; 371  : 					}
; 372  : 
; 373  : 				}
; 374  : 				break;
; 375  : 			}
; 376  : 		}
; 377  : 		break;
; 378  : 
; 379  : 		//case WM_GRAPHNOTIFY:
; 380  : 		//HandleDshowEvent();
; 381  : 		//break;
; 382  : 	}
; 383  : 
; 384  : 	return CDialog::WindowProc(message, wParam, lParam);

  001b4	8b 45 10	 mov	 eax, DWORD PTR _lParam$[ebp]
  001b7	50		 push	 eax
  001b8	8b 4d 0c	 mov	 ecx, DWORD PTR _wParam$[ebp]
  001bb	51		 push	 ecx
  001bc	8b 55 08	 mov	 edx, DWORD PTR _message$[ebp]
  001bf	52		 push	 edx
  001c0	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  001c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?WindowProc@CWnd@@MAEJIIJ@Z

; 385  : }

  001c9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001cc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d3	59		 pop	 ecx
  001d4	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d7	33 cd		 xor	 ecx, ebp
  001d9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001de	8b e5		 mov	 esp, ebp
  001e0	5d		 pop	 ebp
  001e1	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?WindowProc@CEndoScopeMFCDlg@@MAEJIIJ@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _decDriver$6[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?WindowProc@CEndoScopeMFCDlg@@MAEJIIJ@Z$1:
  00009	8d 4d e8	 lea	 ecx, DWORD PTR _decDriver$5[ebp]
  0000c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?WindowProc@CEndoScopeMFCDlg@@MAEJIIJ@Z:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?WindowProc@CEndoScopeMFCDlg@@MAEJIIJ@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?WindowProc@CEndoScopeMFCDlg@@MAEJIIJ@Z ENDP		; CEndoScopeMFCDlg::WindowProc
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?SetInitValue@CEndoScopeMFCDlg@@QAEXXZ
_TEXT	SEGMENT
_nShowShape$ = -44					; size = 4
_nMetering$ = -40					; size = 4
_nBrightness$ = -36					; size = 4
_nExposure$ = -32					; size = 4
_nGain$ = -28						; size = 4
_nBlue$ = -24						; size = 4
_nRed$ = -20						; size = 4
_nSaturation$ = -16					; size = 4
_nContrast$ = -12					; size = 4
_pos$ = -8						; size = 4
_this$ = -4						; size = 4
?SetInitValue@CEndoScopeMFCDlg@@QAEXXZ PROC		; CEndoScopeMFCDlg::SetInitValue, COMDAT
; _this$ = ecx

; 387  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 388  : 	//1.相机亮度恢复
; 389  : 	int nBrightness = GetPrivateProfileInt(_T("FACTORY"), _T("BRIGHTNESS"), 1, g_ConfigPath);

  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ConfigPath@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@A ; g_ConfigPath
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00014	50		 push	 eax
  00015	6a 01		 push	 1
  00017	68 00 00 00 00	 push	 OFFSET $SG4294957288
  0001c	68 00 00 00 00	 push	 OFFSET $SG4294957287
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00027	89 45 dc	 mov	 DWORD PTR _nBrightness$[ebp], eax

; 390  : 	if((g_nBrightness<-10)||(g_nBrightness>10))

  0002a	83 3d 00 00 00
	00 f6		 cmp	 DWORD PTR ?g_nBrightness@@3HA, -10 ; g_nBrightness, fffffff6H
  00031	7c 09		 jl	 SHORT $LN19@SetInitVal
  00033	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR ?g_nBrightness@@3HA, 10 ; g_nBrightness, 0000000aH
  0003a	7e 07		 jle	 SHORT $LN20@SetInitVal
$LN19@SetInitVal:

; 391  : 	{
; 392  : 		nBrightness=0;

  0003c	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _nBrightness$[ebp], 0
$LN20@SetInitVal:

; 393  : 	}
; 394  : 	g_pPLC->Brightness5();

  00043	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00049	e8 00 00 00 00	 call	 ?Brightness5@CPLC@@QAEHXZ ; CPLC::Brightness5

; 395  : 	g_nBrightness = nBrightness;

  0004e	8b 45 dc	 mov	 eax, DWORD PTR _nBrightness$[ebp]
  00051	a3 00 00 00 00	 mov	 DWORD PTR ?g_nBrightness@@3HA, eax ; g_nBrightness

; 396  : 	Sleep(20);

  00056	6a 14		 push	 20			; 00000014H
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 397  : 	//2.相机对比度恢复
; 398  : 	int nContrast = GetPrivateProfileInt(_T("FACTORY"), _T("CONTRAST"), 1, g_ConfigPath);

  0005e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ConfigPath@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@A ; g_ConfigPath
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00069	50		 push	 eax
  0006a	6a 01		 push	 1
  0006c	68 00 00 00 00	 push	 OFFSET $SG4294957286
  00071	68 00 00 00 00	 push	 OFFSET $SG4294957285
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0007c	89 45 f4	 mov	 DWORD PTR _nContrast$[ebp], eax

; 399  : 	if((nContrast<0)||(nContrast>10))

  0007f	83 7d f4 00	 cmp	 DWORD PTR _nContrast$[ebp], 0
  00083	7c 06		 jl	 SHORT $LN17@SetInitVal
  00085	83 7d f4 0a	 cmp	 DWORD PTR _nContrast$[ebp], 10 ; 0000000aH
  00089	7e 07		 jle	 SHORT $LN18@SetInitVal
$LN17@SetInitVal:

; 400  : 	{
; 401  : 		nContrast=0;

  0008b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _nContrast$[ebp], 0
$LN18@SetInitVal:

; 402  : 	}
; 403  : 	g_pPLC->Contrast(nContrast);

  00092	8b 4d f4	 mov	 ecx, DWORD PTR _nContrast$[ebp]
  00095	51		 push	 ecx
  00096	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0009c	e8 00 00 00 00	 call	 ?Contrast@CPLC@@QAEHH@Z	; CPLC::Contrast

; 404  : 	g_nContrast = nContrast;

  000a1	8b 55 f4	 mov	 edx, DWORD PTR _nContrast$[ebp]
  000a4	89 15 00 00 00
	00		 mov	 DWORD PTR ?g_nContrast@@3HA, edx ; g_nContrast

; 405  : 	Sleep(20);

  000aa	6a 14		 push	 20			; 00000014H
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 406  : 	//3.相机饱和度恢复
; 407  : 	int nSaturation = GetPrivateProfileInt(_T("FACTORY"), _T("SATURATION"), 1, g_ConfigPath);

  000b2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ConfigPath@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@A ; g_ConfigPath
  000b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  000bd	50		 push	 eax
  000be	6a 01		 push	 1
  000c0	68 00 00 00 00	 push	 OFFSET $SG4294957284
  000c5	68 00 00 00 00	 push	 OFFSET $SG4294957283
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  000d0	89 45 f0	 mov	 DWORD PTR _nSaturation$[ebp], eax

; 408  : 	if((nSaturation<0)||(nSaturation>10))

  000d3	83 7d f0 00	 cmp	 DWORD PTR _nSaturation$[ebp], 0
  000d7	7c 06		 jl	 SHORT $LN15@SetInitVal
  000d9	83 7d f0 0a	 cmp	 DWORD PTR _nSaturation$[ebp], 10 ; 0000000aH
  000dd	7e 07		 jle	 SHORT $LN16@SetInitVal
$LN15@SetInitVal:

; 409  : 	{
; 410  : 		nSaturation=5;

  000df	c7 45 f0 05 00
	00 00		 mov	 DWORD PTR _nSaturation$[ebp], 5
$LN16@SetInitVal:

; 411  : 	}
; 412  : 	g_pPLC->Saturation(nSaturation);

  000e6	8b 45 f0	 mov	 eax, DWORD PTR _nSaturation$[ebp]
  000e9	50		 push	 eax
  000ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  000f0	e8 00 00 00 00	 call	 ?Saturation@CPLC@@QAEHH@Z ; CPLC::Saturation

; 413  : 	g_nSaturation = nSaturation;

  000f5	8b 4d f0	 mov	 ecx, DWORD PTR _nSaturation$[ebp]
  000f8	89 0d 00 00 00
	00		 mov	 DWORD PTR ?g_nSaturation@@3HA, ecx ; g_nSaturation

; 414  : 	Sleep(20);

  000fe	6a 14		 push	 20			; 00000014H
  00100	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 415  : 	//13.色调R B
; 416  : 	int nRed = GetPrivateProfileInt(_T("FACTORY"), _T("HUE_R"), 1, g_ConfigPath);

  00106	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ConfigPath@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@A ; g_ConfigPath
  0010b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00111	50		 push	 eax
  00112	6a 01		 push	 1
  00114	68 00 00 00 00	 push	 OFFSET $SG4294957282
  00119	68 00 00 00 00	 push	 OFFSET $SG4294957281
  0011e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00124	89 45 ec	 mov	 DWORD PTR _nRed$[ebp], eax

; 417  : 	if((nRed<-9)||(nRed>9))

  00127	83 7d ec f7	 cmp	 DWORD PTR _nRed$[ebp], -9 ; fffffff7H
  0012b	7c 06		 jl	 SHORT $LN13@SetInitVal
  0012d	83 7d ec 09	 cmp	 DWORD PTR _nRed$[ebp], 9
  00131	7e 07		 jle	 SHORT $LN14@SetInitVal
$LN13@SetInitVal:

; 418  : 	{
; 419  : 		nRed = 0;

  00133	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _nRed$[ebp], 0
$LN14@SetInitVal:

; 420  : 	}
; 421  : 	g_pPLC->R(nRed);

  0013a	8b 55 ec	 mov	 edx, DWORD PTR _nRed$[ebp]
  0013d	52		 push	 edx
  0013e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00144	e8 00 00 00 00	 call	 ?R@CPLC@@QAEHH@Z	; CPLC::R

; 422  : 	int pos = m_strRB.Find('R');

  00149	6a 00		 push	 0
  0014b	6a 52		 push	 82			; 00000052H
  0014d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00150	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  00156	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHDH@Z
  0015c	89 45 f8	 mov	 DWORD PTR _pos$[ebp], eax

; 423  : 	m_strRB.SetAt(++pos, '+');

  0015f	8b 45 f8	 mov	 eax, DWORD PTR _pos$[ebp]
  00162	83 c0 01	 add	 eax, 1
  00165	89 45 f8	 mov	 DWORD PTR _pos$[ebp], eax
  00168	6a 2b		 push	 43			; 0000002bH
  0016a	8b 4d f8	 mov	 ecx, DWORD PTR _pos$[ebp]
  0016d	51		 push	 ecx
  0016e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00171	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  00177	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAt@?$CSimpleStringT@D$00@ATL@@QAEXHD@Z

; 424  : 	m_strRB.SetAt(++pos, '0');

  0017d	8b 55 f8	 mov	 edx, DWORD PTR _pos$[ebp]
  00180	83 c2 01	 add	 edx, 1
  00183	89 55 f8	 mov	 DWORD PTR _pos$[ebp], edx
  00186	6a 30		 push	 48			; 00000030H
  00188	8b 45 f8	 mov	 eax, DWORD PTR _pos$[ebp]
  0018b	50		 push	 eax
  0018c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0018f	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  00195	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAt@?$CSimpleStringT@D$00@ATL@@QAEXHD@Z

; 425  : 	GetDlgItem(IDC_IMGCLR_INFO_STATIC)->SetWindowText(m_strRB);

  0019b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0019e	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  001a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  001aa	50		 push	 eax
  001ab	68 04 04 00 00	 push	 1028			; 00000404H
  001b0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  001b9	8b c8		 mov	 ecx, eax
  001bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 426  : 	g_nRed = nRed;

  001c1	8b 4d ec	 mov	 ecx, DWORD PTR _nRed$[ebp]
  001c4	89 0d 00 00 00
	00		 mov	 DWORD PTR ?g_nRed@@3HA, ecx ; g_nRed

; 427  : 	Sleep(20);

  001ca	6a 14		 push	 20			; 00000014H
  001cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 428  : 
; 429  : 	int nBlue = GetPrivateProfileInt(_T("FACTORY"), _T("HUE_B"), 1, g_ConfigPath);

  001d2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ConfigPath@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@A ; g_ConfigPath
  001d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  001dd	50		 push	 eax
  001de	6a 01		 push	 1
  001e0	68 00 00 00 00	 push	 OFFSET $SG4294957280
  001e5	68 00 00 00 00	 push	 OFFSET $SG4294957279
  001ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  001f0	89 45 e8	 mov	 DWORD PTR _nBlue$[ebp], eax

; 430  : 	if((nBlue<-9)||(nBlue>9))

  001f3	83 7d e8 f7	 cmp	 DWORD PTR _nBlue$[ebp], -9 ; fffffff7H
  001f7	7c 06		 jl	 SHORT $LN11@SetInitVal
  001f9	83 7d e8 09	 cmp	 DWORD PTR _nBlue$[ebp], 9
  001fd	7e 07		 jle	 SHORT $LN12@SetInitVal
$LN11@SetInitVal:

; 431  : 	{
; 432  : 		nBlue = 0;

  001ff	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _nBlue$[ebp], 0
$LN12@SetInitVal:

; 433  : 	}
; 434  : 	g_pPLC->B(nBlue);

  00206	8b 55 e8	 mov	 edx, DWORD PTR _nBlue$[ebp]
  00209	52		 push	 edx
  0020a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00210	e8 00 00 00 00	 call	 ?B@CPLC@@QAEHH@Z	; CPLC::B

; 435  : 	pos = m_strRB.Find('B');

  00215	6a 00		 push	 0
  00217	6a 42		 push	 66			; 00000042H
  00219	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0021c	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  00222	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHDH@Z
  00228	89 45 f8	 mov	 DWORD PTR _pos$[ebp], eax

; 436  : 	m_strRB.SetAt(++pos, '+');

  0022b	8b 45 f8	 mov	 eax, DWORD PTR _pos$[ebp]
  0022e	83 c0 01	 add	 eax, 1
  00231	89 45 f8	 mov	 DWORD PTR _pos$[ebp], eax
  00234	6a 2b		 push	 43			; 0000002bH
  00236	8b 4d f8	 mov	 ecx, DWORD PTR _pos$[ebp]
  00239	51		 push	 ecx
  0023a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0023d	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  00243	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAt@?$CSimpleStringT@D$00@ATL@@QAEXHD@Z

; 437  : 	m_strRB.SetAt(++pos, '0');

  00249	8b 55 f8	 mov	 edx, DWORD PTR _pos$[ebp]
  0024c	83 c2 01	 add	 edx, 1
  0024f	89 55 f8	 mov	 DWORD PTR _pos$[ebp], edx
  00252	6a 30		 push	 48			; 00000030H
  00254	8b 45 f8	 mov	 eax, DWORD PTR _pos$[ebp]
  00257	50		 push	 eax
  00258	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0025b	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  00261	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAt@?$CSimpleStringT@D$00@ATL@@QAEXHD@Z

; 438  : 	GetDlgItem(IDC_IMGCLR_INFO_STATIC)->SetWindowText(m_strRB);

  00267	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0026a	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  00270	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00276	50		 push	 eax
  00277	68 04 04 00 00	 push	 1028			; 00000404H
  0027c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0027f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00285	8b c8		 mov	 ecx, eax
  00287	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 439  : 	g_nBlue = nBlue;

  0028d	8b 4d e8	 mov	 ecx, DWORD PTR _nBlue$[ebp]
  00290	89 0d 00 00 00
	00		 mov	 DWORD PTR ?g_nBlue@@3HA, ecx ; g_nBlue

; 440  : 	Sleep(20);

  00296	6a 14		 push	 20			; 00000014H
  00298	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 441  : 	//4.相机增益恢复
; 442  : 	int nGain = GetPrivateProfileInt(_T("FACTORY"), _T("GAIN"), 1, g_ConfigPath);

  0029e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ConfigPath@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@A ; g_ConfigPath
  002a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  002a9	50		 push	 eax
  002aa	6a 01		 push	 1
  002ac	68 00 00 00 00	 push	 OFFSET $SG4294957278
  002b1	68 00 00 00 00	 push	 OFFSET $SG4294957277
  002b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  002bc	89 45 e4	 mov	 DWORD PTR _nGain$[ebp], eax

; 443  : 	if((nGain<0)||(nGain>10))

  002bf	83 7d e4 00	 cmp	 DWORD PTR _nGain$[ebp], 0
  002c3	7c 06		 jl	 SHORT $LN9@SetInitVal
  002c5	83 7d e4 0a	 cmp	 DWORD PTR _nGain$[ebp], 10 ; 0000000aH
  002c9	7e 07		 jle	 SHORT $LN10@SetInitVal
$LN9@SetInitVal:

; 444  : 	{
; 445  : 		nGain=0;

  002cb	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _nGain$[ebp], 0
$LN10@SetInitVal:

; 446  : 	}
; 447  : 	g_pPLC->Gain(nGain);

  002d2	8b 55 e4	 mov	 edx, DWORD PTR _nGain$[ebp]
  002d5	52		 push	 edx
  002d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  002dc	e8 00 00 00 00	 call	 ?Gain@CPLC@@QAEHH@Z	; CPLC::Gain

; 448  : 	g_nGain = nGain;

  002e1	8b 45 e4	 mov	 eax, DWORD PTR _nGain$[ebp]
  002e4	a3 00 00 00 00	 mov	 DWORD PTR ?g_nGain@@3HA, eax ; g_nGain

; 449  : 	Sleep(20);

  002e9	6a 14		 push	 20			; 00000014H
  002eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 450  : 	//5.相机曝光恢复
; 451  : 	int nExposure = GetPrivateProfileInt(_T("FACTORY"), _T("EXPOSURE"), 1, g_ConfigPath);

  002f1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ConfigPath@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@A ; g_ConfigPath
  002f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  002fc	50		 push	 eax
  002fd	6a 01		 push	 1
  002ff	68 00 00 00 00	 push	 OFFSET $SG4294957276
  00304	68 00 00 00 00	 push	 OFFSET $SG4294957275
  00309	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0030f	89 45 e0	 mov	 DWORD PTR _nExposure$[ebp], eax

; 452  : 	if((nExposure>0)||(nExposure<-10))

  00312	83 7d e0 00	 cmp	 DWORD PTR _nExposure$[ebp], 0
  00316	7f 06		 jg	 SHORT $LN7@SetInitVal
  00318	83 7d e0 f6	 cmp	 DWORD PTR _nExposure$[ebp], -10 ; fffffff6H
  0031c	7d 07		 jge	 SHORT $LN8@SetInitVal
$LN7@SetInitVal:

; 453  : 	{
; 454  : 		nExposure=0;

  0031e	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _nExposure$[ebp], 0
$LN8@SetInitVal:

; 455  : 	}
; 456  : 	g_pPLC->Exposure2();

  00325	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0032b	e8 00 00 00 00	 call	 ?Exposure2@CPLC@@QAEHXZ	; CPLC::Exposure2

; 457  : 	g_nExposure = nExposure;

  00330	8b 4d e0	 mov	 ecx, DWORD PTR _nExposure$[ebp]
  00333	89 0d 00 00 00
	00		 mov	 DWORD PTR ?g_nExposure@@3HA, ecx ; g_nExposure

; 458  : 	//g_nSharpness = 6;
; 459  : 	Sleep(20);

  00339	6a 14		 push	 20			; 00000014H
  0033b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 460  : 	//6.白平衡设置
; 461  : 	//7.色调设置
; 462  : 	//8.清晰度设置
; 463  : 	//int nSharpness=GetPrivateProfileInt(_T("FACTORY"),_T("SHARPNESS"),1,g_ConfigPath);
; 464  : 	//if((nSharpness<0)||(nSharpness>15))
; 465  : 	//{
; 466  : 	//	nSharpness=4 ;
; 467  : 	//}
; 468  : 	//g_pPLC->Sharpness(nSharpness);
; 469  : 	//Sleep(5);
; 470  : 	//9.伽马设置
; 471  : 	//10.测光模式
; 472  : 	int nMetering = GetPrivateProfileInt(_T("FACTORY"), _T("ADJBRIGHT"), 1, g_ConfigPath);

  00341	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ConfigPath@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@A ; g_ConfigPath
  00346	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0034c	50		 push	 eax
  0034d	6a 01		 push	 1
  0034f	68 00 00 00 00	 push	 OFFSET $SG4294957274
  00354	68 00 00 00 00	 push	 OFFSET $SG4294957273
  00359	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0035f	89 45 d8	 mov	 DWORD PTR _nMetering$[ebp], eax

; 473  : 	if(0 == nMetering)

  00362	83 7d d8 00	 cmp	 DWORD PTR _nMetering$[ebp], 0
  00366	75 32		 jne	 SHORT $LN6@SetInitVal

; 474  : 	{
; 475  : 		g_nMetering = 0;

  00368	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_nMetering@@3HA, 0 ; g_nMetering

; 476  : 		g_pPLC->AverageMetering();

  00372	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00378	e8 00 00 00 00	 call	 ?AverageMetering@CPLC@@QAEHXZ ; CPLC::AverageMetering

; 477  : 		GetDlgItem(IDC_TESTLIGHT_INFO_STATIC)->SetWindowText(_T("平均测光"));

  0037d	68 00 00 00 00	 push	 OFFSET $SG4294957272
  00382	68 03 04 00 00	 push	 1027			; 00000403H
  00387	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0038a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00390	8b c8		 mov	 ecx, eax
  00392	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z
  00398	eb 36		 jmp	 SHORT $LN4@SetInitVal
$LN6@SetInitVal:

; 478  : 	}
; 479  : 	else if(1 == nMetering)

  0039a	83 7d d8 01	 cmp	 DWORD PTR _nMetering$[ebp], 1
  0039e	75 30		 jne	 SHORT $LN4@SetInitVal

; 480  : 	{
; 481  : 		g_nMetering = 1;

  003a0	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?g_nMetering@@3HA, 1 ; g_nMetering

; 482  : 		g_pPLC->PeakMetering();

  003aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  003b0	e8 00 00 00 00	 call	 ?PeakMetering@CPLC@@QAEHXZ ; CPLC::PeakMetering

; 483  : 		GetDlgItem(IDC_TESTLIGHT_INFO_STATIC)->SetWindowText(_T("峰值测光"));

  003b5	68 00 00 00 00	 push	 OFFSET $SG4294957271
  003ba	68 03 04 00 00	 push	 1027			; 00000403H
  003bf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  003c8	8b c8		 mov	 ecx, eax
  003ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z
$LN4@SetInitVal:

; 484  : 	}
; 485  : 	Sleep(20);

  003d0	6a 14		 push	 20			; 00000014H
  003d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 486  : 	//11.轮廓
; 487  : 	int nShowShape = GetPrivateProfileInt(_T("FACTORY"), _T("CONTUOR"), 0, g_ConfigPath);

  003d8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ConfigPath@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@A ; g_ConfigPath
  003dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  003e3	50		 push	 eax
  003e4	6a 00		 push	 0
  003e6	68 00 00 00 00	 push	 OFFSET $SG4294957270
  003eb	68 00 00 00 00	 push	 OFFSET $SG4294957269
  003f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  003f6	89 45 d4	 mov	 DWORD PTR _nShowShape$[ebp], eax

; 488  : 	if(0 == nShowShape)

  003f9	83 7d d4 00	 cmp	 DWORD PTR _nShowShape$[ebp], 0
  003fd	75 0f		 jne	 SHORT $LN3@SetInitVal

; 489  : 	{
; 490  : 		m_nPicWindowShape = 0;//设置成圆角

  003ff	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00402	c7 82 68 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+360], 0
  0040c	eb 13		 jmp	 SHORT $LN1@SetInitVal
$LN3@SetInitVal:

; 491  : 
; 492  : 	}
; 493  : 	else if(1 == nShowShape)

  0040e	83 7d d4 01	 cmp	 DWORD PTR _nShowShape$[ebp], 1
  00412	75 0d		 jne	 SHORT $LN1@SetInitVal

; 494  : 	{
; 495  : 		m_nPicWindowShape = 1;//设置成方角

  00414	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00417	c7 80 68 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+360], 1
$LN1@SetInitVal:

; 496  : 	}
; 497  : 	SetPicWidowShape();

  00421	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00424	e8 00 00 00 00	 call	 ?SetPicWidowShape@CEndoScopeMFCDlg@@QAEXXZ ; CEndoScopeMFCDlg::SetPicWidowShape

; 498  : 	Sleep(20);

  00429	6a 14		 push	 20			; 00000014H
  0042b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 499  : 	//12.放大
; 500  : 	g_pPLC->Zoom1();

  00431	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00437	e8 00 00 00 00	 call	 ?Zoom1@CPLC@@QAEHXZ	; CPLC::Zoom1

; 501  : 	GetDlgItem(IDC_ENLARGE_INFO_STATIC)->SetWindowText(_T("1.0倍"));

  0043c	68 00 00 00 00	 push	 OFFSET $SG4294957268
  00441	68 05 04 00 00	 push	 1029			; 00000405H
  00446	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00449	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0044f	8b c8		 mov	 ecx, eax
  00451	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 502  : 	SetZoom(1);

  00457	83 ec 08	 sub	 esp, 8
  0045a	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00462	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00467	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0046a	e8 00 00 00 00	 call	 ?SetZoom@CEndoScopeMFCDlg@@QAEXN@Z ; CEndoScopeMFCDlg::SetZoom

; 503  : 	m_nZoomIn = 1;

  0046f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00472	c7 81 6c 01 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+364], 1

; 504  : 	Sleep(20);

  0047c	6a 14		 push	 20			; 00000014H
  0047e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 505  : }

  00484	8b e5		 mov	 esp, ebp
  00486	5d		 pop	 ebp
  00487	c3		 ret	 0
?SetInitValue@CEndoScopeMFCDlg@@QAEXXZ ENDP		; CEndoScopeMFCDlg::SetInitValue
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?InitializePLC@CEndoScopeMFCDlg@@AAEXXZ
_TEXT	SEGMENT
tv177 = -56						; size = 4
tv174 = -52						; size = 4
$T2 = -48						; size = 4
$T3 = -44						; size = 4
$T4 = -40						; size = 4
tv79 = -36						; size = 4
_this$ = -32						; size = 4
$T5 = -28						; size = 4
tv95 = -22						; size = 1
tv152 = -21						; size = 1
_tempPort$ = -20					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?InitializePLC@CEndoScopeMFCDlg@@AAEXXZ PROC		; CEndoScopeMFCDlg::InitializePLC, COMDAT
; _this$ = ecx

; 513  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?InitializePLC@CEndoScopeMFCDlg@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 514  : 
; 515  : 	g_pPLC->GetShowDlgPointer(this);

  0002b	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	50		 push	 eax
  0002f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00035	e8 00 00 00 00	 call	 ?GetShowDlgPointer@CPLC@@QAEXPAVCWnd@@@Z ; CPLC::GetShowDlgPointer

; 516  : 	g_pPLC = new CPLC();

  0003a	68 9c 01 00 00	 push	 412			; 0000019cH
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??2@YAPAXI@Z
  00045	83 c4 04	 add	 esp, 4
  00048	89 45 e4	 mov	 DWORD PTR $T5[ebp], eax
  0004b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00052	83 7d e4 00	 cmp	 DWORD PTR $T5[ebp], 0
  00056	74 17		 je	 SHORT $LN6@Initialize
  00058	6a 01		 push	 1
  0005a	8b 4d e4	 mov	 ecx, DWORD PTR $T5[ebp]
  0005d	e8 00 00 00 00	 call	 ?__autoclassinit@CPLC@@QAEXI@Z
  00062	8b 4d e4	 mov	 ecx, DWORD PTR $T5[ebp]
  00065	e8 00 00 00 00	 call	 ??0CPLC@@QAE@XZ		; CPLC::CPLC
  0006a	89 45 dc	 mov	 DWORD PTR tv79[ebp], eax
  0006d	eb 07		 jmp	 SHORT $LN7@Initialize
$LN6@Initialize:
  0006f	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$LN7@Initialize:
  00076	8b 4d dc	 mov	 ecx, DWORD PTR tv79[ebp]
  00079	89 4d d8	 mov	 DWORD PTR $T4[ebp], ecx
  0007c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00083	8b 55 d8	 mov	 edx, DWORD PTR $T4[ebp]
  00086	89 15 00 00 00
	00		 mov	 DWORD PTR ?g_pPLC@@3PAVCPLC@@A, edx ; g_pPLC

; 517  : 	if (NULL == g_pPLC)

  0008c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pPLC@@3PAVCPLC@@A, 0 ; g_pPLC
  00093	75 12		 jne	 SHORT $LN3@Initialize

; 518  : 	{
; 519  : 		MessageBox(_T("PLC初始化失败!"));

  00095	6a 00		 push	 0
  00097	6a 00		 push	 0
  00099	68 00 00 00 00	 push	 OFFSET $SG4294957267
  0009e	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?MessageBoxA@CWnd@@QAEHPBD0I@Z
$LN3@Initialize:

; 520  : 		//exit(0);
; 521  : 	}
; 522  : 	CString tempPort;

  000a7	8d 4d ec	 lea	 ecx, DWORD PTR _tempPort$[ebp]
  000aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000b0	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 523  : 	tempPort.Format(_T("COM%d"), g_nCCOM);

  000b7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_nCCOM@@3HA ; g_nCCOM
  000bc	50		 push	 eax
  000bd	68 00 00 00 00	 push	 OFFSET $SG4294957266
  000c2	8d 4d ec	 lea	 ecx, DWORD PTR _tempPort$[ebp]
  000c5	51		 push	 ecx
  000c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  000cc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 524  : 	if (!g_pPLC->ProcessCardInitialize(tempPort,CBR_115200))

  000cf	68 00 c2 01 00	 push	 115200			; 0001c200H
  000d4	51		 push	 ecx
  000d5	8b cc		 mov	 ecx, esp
  000d7	89 65 d4	 mov	 DWORD PTR $T3[ebp], esp
  000da	8d 55 ec	 lea	 edx, DWORD PTR _tempPort$[ebp]
  000dd	52		 push	 edx
  000de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  000e4	89 45 cc	 mov	 DWORD PTR tv174[ebp], eax
  000e7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  000ed	e8 00 00 00 00	 call	 ?ProcessCardInitialize@CPLC@@QAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@H@Z ; CPLC::ProcessCardInitialize
  000f2	88 45 ea	 mov	 BYTE PTR tv95[ebp], al
  000f5	0f b6 45 ea	 movzx	 eax, BYTE PTR tv95[ebp]
  000f9	85 c0		 test	 eax, eax
  000fb	75 0f		 jne	 SHORT $LN2@Initialize

; 525  : 	{
; 526  : 		AfxMessageBox( _T("图像处理串口初始化失败！") );

  000fd	6a 00		 push	 0
  000ff	6a 00		 push	 0
  00101	68 00 00 00 00	 push	 OFFSET $SG4294957265
  00106	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AfxMessageBox@@YGHPBDII@Z
$LN2@Initialize:

; 527  : 	}
; 528  : 
; 529  : 	tempPort.Format(_T("COM%d"), g_nVCOM);

  0010c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_nVCOM@@3HA ; g_nVCOM
  00112	51		 push	 ecx
  00113	68 00 00 00 00	 push	 OFFSET $SG4294957264
  00118	8d 55 ec	 lea	 edx, DWORD PTR _tempPort$[ebp]
  0011b	52		 push	 edx
  0011c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  00122	83 c4 0c	 add	 esp, 12			; 0000000cH

; 530  : 	if (!g_pPLC->VideoInitialize(tempPort, CBR_115200))

  00125	68 00 c2 01 00	 push	 115200			; 0001c200H
  0012a	51		 push	 ecx
  0012b	8b cc		 mov	 ecx, esp
  0012d	89 65 d0	 mov	 DWORD PTR $T2[ebp], esp
  00130	8d 45 ec	 lea	 eax, DWORD PTR _tempPort$[ebp]
  00133	50		 push	 eax
  00134	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  0013a	89 45 c8	 mov	 DWORD PTR tv177[ebp], eax
  0013d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00143	e8 00 00 00 00	 call	 ?VideoInitialize@CPLC@@QAE_NV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@H@Z ; CPLC::VideoInitialize
  00148	88 45 eb	 mov	 BYTE PTR tv152[ebp], al

; 531  : 	{
; 532  : 		//AfxMessageBox( _T("图像处理串口初始化失败！") );
; 533  : 		//exit(0);
; 534  : 	}
; 535  : #ifdef _LPort
; 536  : 	//tempPort.Format(_T("COM%d"), g_nLCOM);
; 537  : 	//if (!g_pPLC->LightInitialize(tempPort, CBR_115200))
; 538  : 	//{
; 539  : 	//	AfxMessageBox( _T("冷光源串口初始化失败！") );
; 540  : 		//exit(0);
; 541  : 	//}
; 542  : #endif
; 543  : }

  0014b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00152	8d 4d ec	 lea	 ecx, DWORD PTR _tempPort$[ebp]
  00155	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0015b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0015e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00165	59		 pop	 ecx
  00166	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00169	33 cd		 xor	 ecx, ebp
  0016b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00170	8b e5		 mov	 esp, ebp
  00172	5d		 pop	 ebp
  00173	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?InitializePLC@CEndoScopeMFCDlg@@AAEXXZ$0:
  00000	8b 45 e4	 mov	 eax, DWORD PTR $T5[ebp]
  00003	50		 push	 eax
  00004	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??3@YAXPAX@Z
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
__unwindfunclet$?InitializePLC@CEndoScopeMFCDlg@@AAEXXZ$1:
  0000c	8d 4d ec	 lea	 ecx, DWORD PTR _tempPort$[ebp]
  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?InitializePLC@CEndoScopeMFCDlg@@AAEXXZ:
  00015	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00019	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001c	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?InitializePLC@CEndoScopeMFCDlg@@AAEXXZ
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?InitializePLC@CEndoScopeMFCDlg@@AAEXXZ ENDP		; CEndoScopeMFCDlg::InitializePLC
; Function compile flags: /Odtp
;	COMDAT ?__autoclassinit@CPLC@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_$initVBases$ = 8					; size = 4
?__autoclassinit@CPLC@@QAEXI@Z PROC			; CPLC::__autoclassinit, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 01		 push	 1
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000f	e8 00 00 00 00	 call	 ?__autoclassinit@CVideoComIO@@QAEXI@Z
  00014	6a 01		 push	 1
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 48	 add	 ecx, 72			; 00000048H
  0001c	e8 00 00 00 00	 call	 ?__autoclassinit@CLightComIO@@QAEXI@Z
  00021	6a 01		 push	 1
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	81 c1 84 00 00
	00		 add	 ecx, 132		; 00000084H
  0002c	e8 00 00 00 00	 call	 ?__autoclassinit@CProcessCard@@QAEXI@Z
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
?__autoclassinit@CPLC@@QAEXI@Z ENDP			; CPLC::__autoclassinit
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?__autoclassinit@CVideoComIO@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_$initVBases$ = 8					; size = 4
?__autoclassinit@CVideoComIO@@QAEXI@Z PROC		; CVideoComIO::__autoclassinit, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	c7 42 38 00 00
	00 00		 mov	 DWORD PTR [edx+56], 0
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?__autoclassinit@CVideoComIO@@QAEXI@Z ENDP		; CVideoComIO::__autoclassinit
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?__autoclassinit@CLightComIO@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_$initVBases$ = 8					; size = 4
?__autoclassinit@CLightComIO@@QAEXI@Z PROC		; CLightComIO::__autoclassinit, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	c7 42 38 00 00
	00 00		 mov	 DWORD PTR [edx+56], 0
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?__autoclassinit@CLightComIO@@QAEXI@Z ENDP		; CLightComIO::__autoclassinit
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?__autoclassinit@CProcessCard@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_$initVBases$ = 8					; size = 4
?__autoclassinit@CProcessCard@@QAEXI@Z PROC		; CProcessCard::__autoclassinit, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	c7 82 14 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+276], 0
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?__autoclassinit@CProcessCard@@QAEXI@Z ENDP		; CProcessCard::__autoclassinit
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?OnBnClickedButOk@CEndoScopeMFCDlg@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnBnClickedButOk@CEndoScopeMFCDlg@@QAEXXZ PROC		; CEndoScopeMFCDlg::OnBnClickedButOk, COMDAT
; _this$ = ecx

; 546  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 547  : 	/*官方采集*/
; 548  : 	//HRESULT hr = m_pCCGrapgBuilder->ConnectFilters(1);
; 549  : 
; 550  : }

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?OnBnClickedButOk@CEndoScopeMFCDlg@@QAEXXZ ENDP		; CEndoScopeMFCDlg::OnBnClickedButOk
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?OnBnClickedButRun@CEndoScopeMFCDlg@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnBnClickedButRun@CEndoScopeMFCDlg@@QAEXXZ PROC	; CEndoScopeMFCDlg::OnBnClickedButRun, COMDAT
; _this$ = ecx

; 555  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 556  : 	if (m_eCurrent==EDS_Paused||m_eCurrent==EDS_Stopped)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 b8 80 04 00
	00 02		 cmp	 DWORD PTR [eax+1152], 2
  00011	74 0c		 je	 SHORT $LN1@OnBnClicke
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 b9 80 04 00
	00 01		 cmp	 DWORD PTR [ecx+1152], 1
  0001d	75 1b		 jne	 SHORT $LN3@OnBnClicke
$LN1@OnBnClicke:

; 557  : 	{
; 558  : 		m_dwcap.Run();

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	81 c1 18 02 00
	00		 add	 ecx, 536		; 00000218H
  00028	e8 00 00 00 00	 call	 ?Run@CEDSCapture@@QAEXXZ ; CEDSCapture::Run

; 559  : 		m_eCurrent = EDS_Running;

  0002d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00030	c7 82 80 04 00
	00 03 00 00 00	 mov	 DWORD PTR [edx+1152], 3
$LN3@OnBnClicke:

; 560  : 	}
; 561  : }

  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?OnBnClickedButRun@CEndoScopeMFCDlg@@QAEXXZ ENDP	; CEndoScopeMFCDlg::OnBnClickedButRun
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?InitParameter@CEndoScopeMFCDlg@@AAEXXZ
_TEXT	SEGMENT
$T2 = -240						; size = 56
$T3 = -184						; size = 56
$T4 = -128						; size = 56
$T5 = -72						; size = 4
$T6 = -68						; size = 4
$T7 = -64						; size = 4
$T8 = -60						; size = 16
tv257 = -44						; size = 4
tv258 = -40						; size = 4
tv259 = -36						; size = 4
tv252 = -32						; size = 4
$T9 = -28						; size = 4
tv254 = -24						; size = 4
tv256 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?InitParameter@CEndoScopeMFCDlg@@AAEXXZ PROC		; CEndoScopeMFCDlg::InitParameter, COMDAT
; _this$ = ecx

; 564  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?InitParameter@CEndoScopeMFCDlg@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 565  : 	m_badjwhite = false;

  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c6 80 b8 03 00
	00 00		 mov	 BYTE PTR [eax+952], 0

; 566  : 	m_bwhiteok = false;

  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	c6 81 b9 03 00
	00 00		 mov	 BYTE PTR [ecx+953], 0

; 567  : 	m_dZoom=1.0;

  0003f	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00042	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0004a	f2 0f 11 82 78
	04 00 00	 movsd	 QWORD PTR [edx+1144], xmm0

; 568  : 	roi_w = IMGWIDTH;

  00052	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00055	c7 80 64 04 00
	00 00 05 00 00	 mov	 DWORD PTR [eax+1124], 1280 ; 00000500H

; 569  : 	roi_h = IMGHEIGHT;

  0005f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	c7 81 68 04 00
	00 d0 02 00 00	 mov	 DWORD PTR [ecx+1128], 720 ; 000002d0H

; 570  : 	roi_c=(roi_w-IMGWIDTH)/2;

  0006c	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0006f	8b 82 64 04 00
	00		 mov	 eax, DWORD PTR [edx+1124]
  00075	2d 00 05 00 00	 sub	 eax, 1280		; 00000500H
  0007a	99		 cdq
  0007b	2b c2		 sub	 eax, edx
  0007d	d1 f8		 sar	 eax, 1
  0007f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	89 81 6c 04 00
	00		 mov	 DWORD PTR [ecx+1132], eax

; 571  : 	roi_r=(roi_h-IMGHEIGHT)/2;

  00088	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0008b	8b 82 68 04 00
	00		 mov	 eax, DWORD PTR [edx+1128]
  00091	2d d0 02 00 00	 sub	 eax, 720		; 000002d0H
  00096	99		 cdq
  00097	2b c2		 sub	 eax, edx
  00099	d1 f8		 sar	 eax, 1
  0009b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	89 81 70 04 00
	00		 mov	 DWORD PTR [ecx+1136], eax

; 572  : 	m_src = Mat(Size(IMGWIDTH, IMGHEIGHT), CV_8UC3);

  000a4	6a 10		 push	 16			; 00000010H
  000a6	83 ec 08	 sub	 esp, 8
  000a9	8b cc		 mov	 ecx, esp
  000ab	89 65 c0	 mov	 DWORD PTR $T7[ebp], esp
  000ae	68 d0 02 00 00	 push	 720			; 000002d0H
  000b3	68 00 05 00 00	 push	 1280			; 00000500H
  000b8	e8 00 00 00 00	 call	 ??0?$Size_@H@cv@@QAE@HH@Z ; cv::Size_<int>::Size_<int>
  000bd	8d 4d 80	 lea	 ecx, DWORD PTR $T4[ebp]
  000c0	e8 00 00 00 00	 call	 ??0Mat@cv@@QAE@V?$Size_@H@1@H@Z ; cv::Mat::Mat
  000c5	89 45 d4	 mov	 DWORD PTR tv257[ebp], eax
  000c8	8b 55 d4	 mov	 edx, DWORD PTR tv257[ebp]
  000cb	89 55 e0	 mov	 DWORD PTR tv252[ebp], edx
  000ce	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000d5	8b 45 e0	 mov	 eax, DWORD PTR tv252[ebp]
  000d8	50		 push	 eax
  000d9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000dc	81 c1 f4 03 00
	00		 add	 ecx, 1012		; 000003f4H
  000e2	e8 00 00 00 00	 call	 ??4Mat@cv@@QAEAAV01@$$QAV01@@Z ; cv::Mat::operator=
  000e7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ee	8d 4d 80	 lea	 ecx, DWORD PTR $T4[ebp]
  000f1	e8 00 00 00 00	 call	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat

; 573  : 	m_lamda = new double[IMGSIZE];

  000f6	68 00 80 51 01	 push	 22118400		; 01518000H
  000fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??_U@YAPAXI@Z
  00101	83 c4 04	 add	 esp, 4
  00104	89 45 e4	 mov	 DWORD PTR $T9[ebp], eax
  00107	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0010a	8b 55 e4	 mov	 edx, DWORD PTR $T9[ebp]
  0010d	89 91 b4 03 00
	00		 mov	 DWORD PTR [ecx+948], edx

; 574  : 	m_dst=Mat(Size(1536,864),CV_8UC3);

  00113	6a 10		 push	 16			; 00000010H
  00115	83 ec 08	 sub	 esp, 8
  00118	8b cc		 mov	 ecx, esp
  0011a	89 65 b8	 mov	 DWORD PTR $T5[ebp], esp
  0011d	68 60 03 00 00	 push	 864			; 00000360H
  00122	68 00 06 00 00	 push	 1536			; 00000600H
  00127	e8 00 00 00 00	 call	 ??0?$Size_@H@cv@@QAE@HH@Z ; cv::Size_<int>::Size_<int>
  0012c	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00132	e8 00 00 00 00	 call	 ??0Mat@cv@@QAE@V?$Size_@H@1@H@Z ; cv::Mat::Mat
  00137	89 45 d8	 mov	 DWORD PTR tv258[ebp], eax
  0013a	8b 45 d8	 mov	 eax, DWORD PTR tv258[ebp]
  0013d	89 45 e8	 mov	 DWORD PTR tv254[ebp], eax
  00140	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00147	8b 4d e8	 mov	 ecx, DWORD PTR tv254[ebp]
  0014a	51		 push	 ecx
  0014b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0014e	81 c1 bc 03 00
	00		 add	 ecx, 956		; 000003bcH
  00154	e8 00 00 00 00	 call	 ??4Mat@cv@@QAEAAV01@$$QAV01@@Z ; cv::Mat::operator=
  00159	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00160	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00166	e8 00 00 00 00	 call	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat

; 575  : 	Picimg = Mat(Size(IMGWIDTH, IMGHEIGHT), CV_8UC3);

  0016b	6a 10		 push	 16			; 00000010H
  0016d	83 ec 08	 sub	 esp, 8
  00170	8b cc		 mov	 ecx, esp
  00172	89 65 bc	 mov	 DWORD PTR $T6[ebp], esp
  00175	68 d0 02 00 00	 push	 720			; 000002d0H
  0017a	68 00 05 00 00	 push	 1280			; 00000500H
  0017f	e8 00 00 00 00	 call	 ??0?$Size_@H@cv@@QAE@HH@Z ; cv::Size_<int>::Size_<int>
  00184	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0018a	e8 00 00 00 00	 call	 ??0Mat@cv@@QAE@V?$Size_@H@1@H@Z ; cv::Mat::Mat
  0018f	89 45 dc	 mov	 DWORD PTR tv259[ebp], eax
  00192	8b 55 dc	 mov	 edx, DWORD PTR tv259[ebp]
  00195	89 55 ec	 mov	 DWORD PTR tv256[ebp], edx
  00198	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0019f	8b 45 ec	 mov	 eax, DWORD PTR tv256[ebp]
  001a2	50		 push	 eax
  001a3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001a6	81 c1 2c 04 00
	00		 add	 ecx, 1068		; 0000042cH
  001ac	e8 00 00 00 00	 call	 ??4Mat@cv@@QAEAAV01@$$QAV01@@Z ; cv::Mat::operator=
  001b1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001b8	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  001be	e8 00 00 00 00	 call	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat

; 576  : 
; 577  : 	m_nPicWindow_width = 1536;

  001c3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001c6	c7 81 44 01 00
	00 00 06 00 00	 mov	 DWORD PTR [ecx+324], 1536 ; 00000600H

; 578  : 	m_nPicWindow_height = 864;

  001d0	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  001d3	c7 82 48 01 00
	00 60 03 00 00	 mov	 DWORD PTR [edx+328], 864 ; 00000360H

; 579  : 	m_nPicWindow_left = 300;//起始点

  001dd	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001e0	c7 80 4c 01 00
	00 2c 01 00 00	 mov	 DWORD PTR [eax+332], 300 ; 0000012cH

; 580  : 	m_nPicWindow_top = 100;//起始点

  001ea	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001ed	c7 81 50 01 00
	00 64 00 00 00	 mov	 DWORD PTR [ecx+336], 100 ; 00000064H

; 581  : 	m_hPicWindow = NULL;

  001f7	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  001fa	c7 82 54 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+340], 0

; 582  : 	m_rPicRect = NULL;

  00204	6a 00		 push	 0
  00206	8d 4d c4	 lea	 ecx, DWORD PTR $T8[ebp]
  00209	e8 00 00 00 00	 call	 ??0CRect@@QAE@PBUtagRECT@@@Z ; CRect::CRect
  0020e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00211	05 58 01 00 00	 add	 eax, 344		; 00000158H
  00216	8b 4d c4	 mov	 ecx, DWORD PTR $T8[ebp]
  00219	89 08		 mov	 DWORD PTR [eax], ecx
  0021b	8b 55 c8	 mov	 edx, DWORD PTR $T8[ebp+4]
  0021e	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00221	8b 4d cc	 mov	 ecx, DWORD PTR $T8[ebp+8]
  00224	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00227	8b 55 d0	 mov	 edx, DWORD PTR $T8[ebp+12]
  0022a	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 583  : 	m_bwritevideo = false;//是否录屏

  0022d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00230	c6 80 ac 01 00
	00 00		 mov	 BYTE PTR [eax+428], 0

; 584  : 	m_bstartsave = false;

  00237	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0023a	c6 81 ad 01 00
	00 00		 mov	 BYTE PTR [ecx+429], 0

; 585  : 	m_bwritepicture = false;

  00241	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00244	c6 82 ae 01 00
	00 00		 mov	 BYTE PTR [edx+430], 0

; 586  : 	m_brealsavepic = true;

  0024b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0024e	c6 80 af 01 00
	00 01		 mov	 BYTE PTR [eax+431], 1

; 587  : 	m_bstartpicture = false;

  00255	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00258	c6 81 b0 01 00
	00 00		 mov	 BYTE PTR [ecx+432], 0

; 588  : 	m_bshowpause = false;

  0025f	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00262	c6 82 b1 01 00
	00 00		 mov	 BYTE PTR [edx+433], 0

; 589  : 	m_nPic=0;//记录截屏数量，软件启动初始化为0

  00269	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0026c	c7 80 14 02 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+532], 0

; 590  : 	m_bsetuplamda = true;//第一次激活更改

  00276	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00279	c6 81 b2 01 00
	00 01		 mov	 BYTE PTR [ecx+434], 1

; 591  : 	m_bInputInfo = true;//第一次激活可以输入

  00280	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00283	c6 82 b3 01 00
	00 01		 mov	 BYTE PTR [edx+435], 1

; 592  : 	//键盘键值
; 593  : 	m_f3key=0;

  0028a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0028d	c7 80 cc 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+460], 0

; 594  : 	m_f4key=0;

  00297	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0029a	c7 81 d0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+464], 0

; 595  : 	m_f5key=0;

  002a4	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  002a7	c7 82 d4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+468], 0

; 596  : 	m_f6key=0;

  002b1	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  002b4	c7 80 d8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+472], 0

; 597  : 	m_f11key=0;

  002be	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  002c1	c7 81 dc 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+476], 0

; 598  : 	m_f2key=g_iMenu;

  002cb	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  002ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_iMenu@@3HA ; g_iMenu
  002d3	89 82 e0 01 00
	00		 mov	 DWORD PTR [edx+480], eax

; 599  : 	m_f7key = 0;

  002d9	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  002dc	c7 81 e4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+484], 0

; 600  : 	//获取屏幕分辨率
; 601  : 	m_nScreenWidth = GetSystemMetrics(SM_CXSCREEN);

  002e6	6a 00		 push	 0
  002e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  002ee	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  002f1	89 82 fc 01 00
	00		 mov	 DWORD PTR [edx+508], eax

; 602  : 	m_nScreenHeight = GetSystemMetrics(SM_CYSCREEN);

  002f7	6a 01		 push	 1
  002f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMetrics@4
  002ff	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00302	89 81 00 02 00
	00		 mov	 DWORD PTR [ecx+512], eax

; 603  : 	m_nZoomIn=1;//初始1

  00308	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0030b	c7 82 6c 01 00
	00 01 00 00 00	 mov	 DWORD PTR [edx+364], 1

; 604  : 	m_strRB="R+0:B+0";

  00315	68 00 00 00 00	 push	 OFFSET $SG4294957263
  0031a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0031d	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  00323	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 605  : 	//这块做什么用的
; 606  : 	m_hDeskWindow = GetDesktopWindow()->GetSafeHwnd();

  00329	e8 00 00 00 00	 call	 ?GetDesktopWindow@CWnd@@SGPAV1@XZ ; CWnd::GetDesktopWindow
  0032e	8b c8		 mov	 ecx, eax
  00330	e8 00 00 00 00	 call	 ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ ; CWnd::GetSafeHwnd
  00335	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00338	89 81 04 02 00
	00		 mov	 DWORD PTR [ecx+516], eax

; 607  : 	m_hDesktopDC = ::GetDC(m_hDeskWindow);

  0033e	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00341	8b 82 04 02 00
	00		 mov	 eax, DWORD PTR [edx+516]
  00347	50		 push	 eax
  00348	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4
  0034e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00351	89 81 08 02 00
	00		 mov	 DWORD PTR [ecx+520], eax

; 608  : 	m_hBmpFileDC = CreateCompatibleDC(m_hDesktopDC);

  00357	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0035a	8b 82 08 02 00
	00		 mov	 eax, DWORD PTR [edx+520]
  00360	50		 push	 eax
  00361	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleDC@4
  00367	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0036a	89 81 0c 02 00
	00		 mov	 DWORD PTR [ecx+524], eax

; 609  : 	//GetDlgItem(IDC_STILL, &m_hPicWindow);//获取显示窗口句柄
; 610  : 	//m_hPicWindow = GetDlgItem(IDC_STILL)->GetSafeHwnd();//获取显示窗口句柄
; 611  : 	//GetDlgItem(IDC_STILL)->GetClientRect(m_rPicRect);
; 612  : 	m_hBitmap = CreateCompatibleBitmap(m_hDesktopDC, m_nScreenWidth, m_nScreenHeight);

  00370	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00373	8b 82 00 02 00
	00		 mov	 eax, DWORD PTR [edx+512]
  00379	50		 push	 eax
  0037a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0037d	8b 91 fc 01 00
	00		 mov	 edx, DWORD PTR [ecx+508]
  00383	52		 push	 edx
  00384	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00387	8b 88 08 02 00
	00		 mov	 ecx, DWORD PTR [eax+520]
  0038d	51		 push	 ecx
  0038e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleBitmap@12
  00394	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00397	89 82 10 02 00
	00		 mov	 DWORD PTR [edx+528], eax

; 613  : 	SelectObject(m_hBmpFileDC, m_hBitmap);

  0039d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  003a0	8b 88 10 02 00
	00		 mov	 ecx, DWORD PTR [eax+528]
  003a6	51		 push	 ecx
  003a7	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  003aa	8b 82 0c 02 00
	00		 mov	 eax, DWORD PTR [edx+524]
  003b0	50		 push	 eax
  003b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8

; 614  : 	//if(1 == g_nShowShape)
; 615  : 	//{
; 616  : 	//	m_nPicWindowShape = 0;//设置成圆角
; 617  : 
; 618  : 	//}
; 619  : 	//else if(0 == g_nShowShape)
; 620  : 	//{
; 621  : 	//	m_nPicWindowShape = 1;//设置成方角
; 622  : 	//}
; 623  : 
; 624  : 	SetEvent(g_videoevent);

  003b7	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_videoevent@@3VCEvent@@A ; g_videoevent
  003bc	e8 00 00 00 00	 call	 ??BCSyncObject@@QBEPAXXZ ; CSyncObject::operator void *
  003c1	50		 push	 eax
  003c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4

; 625  : 	SetEvent(g_resizeevent);

  003c8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_resizeevent@@3VCEvent@@A ; g_resizeevent
  003cd	e8 00 00 00 00	 call	 ??BCSyncObject@@QBEPAXXZ ; CSyncObject::operator void *
  003d2	50		 push	 eax
  003d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4

; 626  : 	SetEvent(g_capevent);

  003d9	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_capevent@@3VCEvent@@A ; g_capevent
  003de	e8 00 00 00 00	 call	 ??BCSyncObject@@QBEPAXXZ ; CSyncObject::operator void *
  003e3	50		 push	 eax
  003e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4

; 627  : }

  003ea	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003ed	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003f4	59		 pop	 ecx
  003f5	8b e5		 mov	 esp, ebp
  003f7	5d		 pop	 ebp
  003f8	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?InitParameter@CEndoScopeMFCDlg@@AAEXXZ$0:
  00000	8d 4d 80	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__unwindfunclet$?InitParameter@CEndoScopeMFCDlg@@AAEXXZ$1:
  00008	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__unwindfunclet$?InitParameter@CEndoScopeMFCDlg@@AAEXXZ$2:
  00013	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__ehhandler$?InitParameter@CEndoScopeMFCDlg@@AAEXXZ:
  0001e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00022	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00025	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?InitParameter@CEndoScopeMFCDlg@@AAEXXZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?InitParameter@CEndoScopeMFCDlg@@AAEXXZ ENDP		; CEndoScopeMFCDlg::InitParameter
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?OnBnClickedButPause@CEndoScopeMFCDlg@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnBnClickedButPause@CEndoScopeMFCDlg@@QAEXXZ PROC	; CEndoScopeMFCDlg::OnBnClickedButPause, COMDAT
; _this$ = ecx

; 630  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 631  : 	/*OAFilterState t_State;
; 632  : 	HRESULT hr = m_pCCGrapgBuilder->m_pMediaControl->GetState(10, &t_State);
; 633  : 	if (hr == S_OK || hr == VFW_S_CANT_CUE) {
; 634  : 		hr = E_FAIL;
; 635  : 		switch (t_State)
; 636  : 		{
; 637  : 		case State_Running:
; 638  : 			hr = m_pCCGrapgBuilder->m_pMediaControl->Pause();
; 639  : 			break;
; 640  : 		case State_Paused:
; 641  : 			hr = S_OK;
; 642  : 			break;
; 643  : 		case State_Stopped:
; 644  : 		default:
; 645  : 			break;
; 646  : 		}
; 647  : 	}*/
; 648  : 	/*回调方式*/
; 649  : 	if (m_eCurrent==EDS_Running)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 b8 80 04 00
	00 03		 cmp	 DWORD PTR [eax+1152], 3
  00011	75 1b		 jne	 SHORT $LN2@OnBnClicke

; 650  : 	{
; 651  : 		m_dwcap.Pause();

  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	81 c1 18 02 00
	00		 add	 ecx, 536		; 00000218H
  0001c	e8 00 00 00 00	 call	 ?Pause@CEDSCapture@@QAEXXZ ; CEDSCapture::Pause

; 652  : 		m_eCurrent = EDS_Paused;

  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	c7 81 80 04 00
	00 02 00 00 00	 mov	 DWORD PTR [ecx+1152], 2
$LN2@OnBnClicke:

; 653  : 	}
; 654  : }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?OnBnClickedButPause@CEndoScopeMFCDlg@@QAEXXZ ENDP	; CEndoScopeMFCDlg::OnBnClickedButPause
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?OnBnClickedButStop@CEndoScopeMFCDlg@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnBnClickedButStop@CEndoScopeMFCDlg@@QAEXXZ PROC	; CEndoScopeMFCDlg::OnBnClickedButStop, COMDAT
; _this$ = ecx

; 657  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 658  : 	if (m_eCurrent==EDS_Running||m_eCurrent==EDS_Paused)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 b8 80 04 00
	00 03		 cmp	 DWORD PTR [eax+1152], 3
  00011	74 0c		 je	 SHORT $LN1@OnBnClicke
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 b9 80 04 00
	00 02		 cmp	 DWORD PTR [ecx+1152], 2
  0001d	75 1b		 jne	 SHORT $LN3@OnBnClicke
$LN1@OnBnClicke:

; 659  : 	{
; 660  : 		m_dwcap.Stop();

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	81 c1 18 02 00
	00		 add	 ecx, 536		; 00000218H
  00028	e8 00 00 00 00	 call	 ?Stop@CEDSCapture@@QAEXXZ ; CEDSCapture::Stop

; 661  : 		m_eCurrent = EDS_Stopped;

  0002d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00030	c7 82 80 04 00
	00 01 00 00 00	 mov	 DWORD PTR [edx+1152], 1
$LN3@OnBnClicke:

; 662  : 	}
; 663  : }

  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?OnBnClickedButStop@CEndoScopeMFCDlg@@QAEXXZ ENDP	; CEndoScopeMFCDlg::OnBnClickedButStop
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z
_TEXT	SEGMENT
$T2 = -1844						; size = 224
$T3 = -1620						; size = 56
$T4 = -1564						; size = 56
$T5 = -1508						; size = 56
$T6 = -1452						; size = 56
$T7 = -1396						; size = 20
$T8 = -1376						; size = 20
$T9 = -1356						; size = 56
$T10 = -1300						; size = 56
$T11 = -1244						; size = 12
$T12 = -1232						; size = 16
$T13 = -1216						; size = 16
$T14 = -1200						; size = 16
$T15 = -1184						; size = 16
$T16 = -1168						; size = 16
$T17 = -1152						; size = 16
$T18 = -1136						; size = 16
$T19 = -1120						; size = 16
$T20 = -1104						; size = 16
$T21 = -1088						; size = 16
$T22 = -1072						; size = 16
$T23 = -1056						; size = 16
$T24 = -1040						; size = 16
$T25 = -1024						; size = 16
$T26 = -1008						; size = 16
$T27 = -992						; size = 16
$T28 = -976						; size = 16
$T29 = -960						; size = 16
$T30 = -944						; size = 16
$T31 = -928						; size = 16
$T32 = -912						; size = 16
$T33 = -896						; size = 16
$T34 = -880						; size = 4
$T35 = -876						; size = 4
$T36 = -872						; size = 4
tv839 = -868						; size = 8
$T37 = -860						; size = 8
$T38 = -852						; size = 8
$T39 = -844						; size = 8
$T40 = -836						; size = 8
$T41 = -828						; size = 8
$T42 = -820						; size = 8
$T43 = -812						; size = 8
$T44 = -804						; size = 8
$T45 = -796						; size = 8
$T46 = -788						; size = 8
$T47 = -780						; size = 8
tv95 = -772						; size = 4
_val5$ = -768						; size = 8
$T48 = -760						; size = 4
_val9$ = -756						; size = 8
tv764 = -748						; size = 4
tv733 = -744						; size = 4
tv424 = -740						; size = 4
tv90 = -736						; size = 4
tv756 = -732						; size = 4
_val3$ = -728						; size = 8
tv345 = -720						; size = 4
_val10$ = -716						; size = 8
tv741 = -708						; size = 4
_val8$ = -704						; size = 8
tv134 = -696						; size = 4
_val6$ = -692						; size = 8
tv739 = -684						; size = 4
_val4$ = -680						; size = 8
tv132 = -672						; size = 4
_val2$ = -668						; size = 8
tv735 = -660						; size = 4
_val1$ = -656						; size = 8
_val7$ = -648						; size = 8
_ret$ = -640						; size = 4
_max$ = -636						; size = 8
_val$ = -628						; size = 8
_num$ = -620						; size = 4
_pdlg$ = -616						; size = 4
_img$ = -612						; size = 56
_meanstdev$ = -556					; size = 56
_laplac$ = -500						; size = 56
_mean$ = -444						; size = 32
_kernel2$ = -412					; size = 56
_kernel1$ = -356					; size = 56
_filter$ = -300						; size = 56
_filter1$ = -244					; size = 56
_filter2$ = -188					; size = 56
_stddev$ = -132						; size = 32
_gray$ = -100						; size = 56
_t_imgpath$49 = -44					; size = 24
_len$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_lpParameter$ = 8					; size = 4
?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z PROC	; CEndoScopeMFCDlg::SavePicThreadProc, COMDAT

; 666  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 28 07 00
	00		 sub	 esp, 1832		; 00000728H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 667  : #if 1
; 668  : 	CEndoScopeMFCDlg* pdlg = (CEndoScopeMFCDlg*)lpParameter;

  0002b	8b 45 08	 mov	 eax, DWORD PTR _lpParameter$[ebp]
  0002e	89 85 98 fd ff
	ff		 mov	 DWORD PTR _pdlg$[ebp], eax

; 669  : 	Mat img = Mat(Size(IMGWIDTH, IMGHEIGHT), CV_8UC3);

  00034	6a 01		 push	 1
  00036	8d 8d 9c fd ff
	ff		 lea	 ecx, DWORD PTR _img$[ebp]
  0003c	e8 00 00 00 00	 call	 ?__autoclassinit@Mat@cv@@QAEXI@Z
  00041	6a 10		 push	 16			; 00000010H
  00043	83 ec 08	 sub	 esp, 8
  00046	8b cc		 mov	 ecx, esp
  00048	89 a5 90 fc ff
	ff		 mov	 DWORD PTR $T34[ebp], esp
  0004e	68 d0 02 00 00	 push	 720			; 000002d0H
  00053	68 00 05 00 00	 push	 1280			; 00000500H
  00058	e8 00 00 00 00	 call	 ??0?$Size_@H@cv@@QAE@HH@Z ; cv::Size_<int>::Size_<int>
  0005d	8d 8d 9c fd ff
	ff		 lea	 ecx, DWORD PTR _img$[ebp]
  00063	e8 00 00 00 00	 call	 ??0Mat@cv@@QAE@V?$Size_@H@1@H@Z ; cv::Mat::Mat
  00068	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 670  : 	Mat gray,laplac,meanstdev;

  0006f	6a 01		 push	 1
  00071	8d 4d 9c	 lea	 ecx, DWORD PTR _gray$[ebp]
  00074	e8 00 00 00 00	 call	 ?__autoclassinit@Mat@cv@@QAEXI@Z
  00079	8d 4d 9c	 lea	 ecx, DWORD PTR _gray$[ebp]
  0007c	e8 00 00 00 00	 call	 ??0Mat@cv@@QAE@XZ	; cv::Mat::Mat
  00081	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00085	6a 01		 push	 1
  00087	8d 8d 0c fe ff
	ff		 lea	 ecx, DWORD PTR _laplac$[ebp]
  0008d	e8 00 00 00 00	 call	 ?__autoclassinit@Mat@cv@@QAEXI@Z
  00092	8d 8d 0c fe ff
	ff		 lea	 ecx, DWORD PTR _laplac$[ebp]
  00098	e8 00 00 00 00	 call	 ??0Mat@cv@@QAE@XZ	; cv::Mat::Mat
  0009d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000a1	6a 01		 push	 1
  000a3	8d 8d d4 fd ff
	ff		 lea	 ecx, DWORD PTR _meanstdev$[ebp]
  000a9	e8 00 00 00 00	 call	 ?__autoclassinit@Mat@cv@@QAEXI@Z
  000ae	8d 8d d4 fd ff
	ff		 lea	 ecx, DWORD PTR _meanstdev$[ebp]
  000b4	e8 00 00 00 00	 call	 ??0Mat@cv@@QAE@XZ	; cv::Mat::Mat
  000b9	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 671  : 	Mat kernel1 = (Mat_<float>(2, 2) << 2,0,0,-2);

  000bd	6a 01		 push	 1
  000bf	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR _kernel1$[ebp]
  000c5	e8 00 00 00 00	 call	 ?__autoclassinit@Mat@cv@@QAEXI@Z
  000ca	6a 02		 push	 2
  000cc	6a 02		 push	 2
  000ce	8d 8d ac f9 ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  000d4	e8 00 00 00 00	 call	 ??0?$Mat_@M@cv@@QAE@HH@Z ; cv::Mat_<float>::Mat_<float>
  000d9	89 85 fc fc ff
	ff		 mov	 DWORD PTR tv95[ebp], eax
  000df	8b 8d fc fc ff
	ff		 mov	 ecx, DWORD PTR tv95[ebp]
  000e5	89 8d 18 fd ff
	ff		 mov	 DWORD PTR tv733[ebp], ecx
  000eb	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  000ef	8d 95 54 fa ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  000f5	52		 push	 edx
  000f6	6a fe		 push	 -2			; fffffffeH
  000f8	6a 00		 push	 0
  000fa	6a 00		 push	 0
  000fc	6a 02		 push	 2
  000fe	8b 85 18 fd ff
	ff		 mov	 eax, DWORD PTR tv733[ebp]
  00104	50		 push	 eax
  00105	8d 8d a0 fa ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  0010b	51		 push	 ecx
  0010c	e8 00 00 00 00	 call	 ??$?6MH@cv@@YA?AV?$MatCommaInitializer_@M@0@ABV?$Mat_@M@0@H@Z ; cv::operator<<<float,int>
  00111	83 c4 0c	 add	 esp, 12			; 0000000cH
  00114	8b c8		 mov	 ecx, eax
  00116	e8 00 00 00 00	 call	 ??$?QH@?$MatCommaInitializer_@M@cv@@QAEAAV01@H@Z ; cv::MatCommaInitializer_<float>::operator,<int>
  0011b	8b c8		 mov	 ecx, eax
  0011d	e8 00 00 00 00	 call	 ??$?QH@?$MatCommaInitializer_@M@cv@@QAEAAV01@H@Z ; cv::MatCommaInitializer_<float>::operator,<int>
  00122	8b c8		 mov	 ecx, eax
  00124	e8 00 00 00 00	 call	 ??$?QH@?$MatCommaInitializer_@M@cv@@QAEAAV01@H@Z ; cv::MatCommaInitializer_<float>::operator,<int>
  00129	8b c8		 mov	 ecx, eax
  0012b	e8 00 00 00 00	 call	 ??B?$MatCommaInitializer_@M@cv@@QBE?AV?$Mat_@M@1@XZ ; cv::MatCommaInitializer_<float>::operator cv::Mat_<float>
  00130	89 85 20 fd ff
	ff		 mov	 DWORD PTR tv90[ebp], eax
  00136	8b 95 20 fd ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  0013c	89 95 6c fd ff
	ff		 mov	 DWORD PTR tv735[ebp], edx
  00142	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00146	8b 85 6c fd ff
	ff		 mov	 eax, DWORD PTR tv735[ebp]
  0014c	50		 push	 eax
  0014d	8d 8d b4 fa ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00153	e8 00 00 00 00	 call	 ??0Mat@cv@@QAE@$$QAV01@@Z ; cv::Mat::Mat
  00158	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  0015c	8d 8d b4 fa ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00162	51		 push	 ecx
  00163	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR _kernel1$[ebp]
  00169	e8 00 00 00 00	 call	 ??0Mat@cv@@QAE@$$QAV01@@Z ; cv::Mat::Mat
  0016e	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00172	8d 8d b4 fa ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00178	e8 00 00 00 00	 call	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
  0017d	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  00181	8d 8d 54 fa ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00187	e8 00 00 00 00	 call	 ??1?$Mat_@M@cv@@QAE@XZ
  0018c	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  00190	8d 8d ac f9 ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00196	e8 00 00 00 00	 call	 ??1?$Mat_@M@cv@@QAE@XZ

; 672  : 	Mat kernel2 = (Mat_<float>(2, 2) << 0,-2,2,0);

  0019b	6a 01		 push	 1
  0019d	8d 8d 64 fe ff
	ff		 lea	 ecx, DWORD PTR _kernel2$[ebp]
  001a3	e8 00 00 00 00	 call	 ?__autoclassinit@Mat@cv@@QAEXI@Z
  001a8	6a 02		 push	 2
  001aa	6a 02		 push	 2
  001ac	8d 8d e4 f9 ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  001b2	e8 00 00 00 00	 call	 ??0?$Mat_@M@cv@@QAE@HH@Z ; cv::Mat_<float>::Mat_<float>
  001b7	89 85 60 fd ff
	ff		 mov	 DWORD PTR tv132[ebp], eax
  001bd	8b 95 60 fd ff
	ff		 mov	 edx, DWORD PTR tv132[ebp]
  001c3	89 95 54 fd ff
	ff		 mov	 DWORD PTR tv739[ebp], edx
  001c9	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  001cd	8d 85 1c fa ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  001d3	50		 push	 eax
  001d4	6a 00		 push	 0
  001d6	6a 02		 push	 2
  001d8	6a fe		 push	 -2			; fffffffeH
  001da	6a 00		 push	 0
  001dc	8b 8d 54 fd ff
	ff		 mov	 ecx, DWORD PTR tv739[ebp]
  001e2	51		 push	 ecx
  001e3	8d 95 8c fa ff
	ff		 lea	 edx, DWORD PTR $T7[ebp]
  001e9	52		 push	 edx
  001ea	e8 00 00 00 00	 call	 ??$?6MH@cv@@YA?AV?$MatCommaInitializer_@M@0@ABV?$Mat_@M@0@H@Z ; cv::operator<<<float,int>
  001ef	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f2	8b c8		 mov	 ecx, eax
  001f4	e8 00 00 00 00	 call	 ??$?QH@?$MatCommaInitializer_@M@cv@@QAEAAV01@H@Z ; cv::MatCommaInitializer_<float>::operator,<int>
  001f9	8b c8		 mov	 ecx, eax
  001fb	e8 00 00 00 00	 call	 ??$?QH@?$MatCommaInitializer_@M@cv@@QAEAAV01@H@Z ; cv::MatCommaInitializer_<float>::operator,<int>
  00200	8b c8		 mov	 ecx, eax
  00202	e8 00 00 00 00	 call	 ??$?QH@?$MatCommaInitializer_@M@cv@@QAEAAV01@H@Z ; cv::MatCommaInitializer_<float>::operator,<int>
  00207	8b c8		 mov	 ecx, eax
  00209	e8 00 00 00 00	 call	 ??B?$MatCommaInitializer_@M@cv@@QBE?AV?$Mat_@M@1@XZ ; cv::MatCommaInitializer_<float>::operator cv::Mat_<float>
  0020e	89 85 48 fd ff
	ff		 mov	 DWORD PTR tv134[ebp], eax
  00214	8b 85 48 fd ff
	ff		 mov	 eax, DWORD PTR tv134[ebp]
  0021a	89 85 3c fd ff
	ff		 mov	 DWORD PTR tv741[ebp], eax
  00220	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  00224	8b 8d 3c fd ff
	ff		 mov	 ecx, DWORD PTR tv741[ebp]
  0022a	51		 push	 ecx
  0022b	8d 8d ec fa ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00231	e8 00 00 00 00	 call	 ??0Mat@cv@@QAE@$$QAV01@@Z ; cv::Mat::Mat
  00236	c6 45 fc 0d	 mov	 BYTE PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  0023a	8d 95 ec fa ff
	ff		 lea	 edx, DWORD PTR $T10[ebp]
  00240	52		 push	 edx
  00241	8d 8d 64 fe ff
	ff		 lea	 ecx, DWORD PTR _kernel2$[ebp]
  00247	e8 00 00 00 00	 call	 ??0Mat@cv@@QAE@$$QAV01@@Z ; cv::Mat::Mat
  0024c	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  00250	8d 8d ec fa ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00256	e8 00 00 00 00	 call	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
  0025b	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+8], 16 ; 00000010H
  0025f	8d 8d 1c fa ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00265	e8 00 00 00 00	 call	 ??1?$Mat_@M@cv@@QAE@XZ
  0026a	c6 45 fc 11	 mov	 BYTE PTR __$EHRec$[ebp+8], 17 ; 00000011H
  0026e	8d 8d e4 f9 ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00274	e8 00 00 00 00	 call	 ??1?$Mat_@M@cv@@QAE@XZ

; 673  : 	Mat filter1,filter2,filter;

  00279	6a 01		 push	 1
  0027b	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _filter1$[ebp]
  00281	e8 00 00 00 00	 call	 ?__autoclassinit@Mat@cv@@QAEXI@Z
  00286	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _filter1$[ebp]
  0028c	e8 00 00 00 00	 call	 ??0Mat@cv@@QAE@XZ	; cv::Mat::Mat
  00291	c6 45 fc 12	 mov	 BYTE PTR __$EHRec$[ebp+8], 18 ; 00000012H
  00295	6a 01		 push	 1
  00297	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _filter2$[ebp]
  0029d	e8 00 00 00 00	 call	 ?__autoclassinit@Mat@cv@@QAEXI@Z
  002a2	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _filter2$[ebp]
  002a8	e8 00 00 00 00	 call	 ??0Mat@cv@@QAE@XZ	; cv::Mat::Mat
  002ad	c6 45 fc 13	 mov	 BYTE PTR __$EHRec$[ebp+8], 19 ; 00000013H
  002b1	6a 01		 push	 1
  002b3	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _filter$[ebp]
  002b9	e8 00 00 00 00	 call	 ?__autoclassinit@Mat@cv@@QAEXI@Z
  002be	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _filter$[ebp]
  002c4	e8 00 00 00 00	 call	 ??0Mat@cv@@QAE@XZ	; cv::Mat::Mat
  002c9	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H

; 674  : 	Scalar     mean;

  002cd	8d 8d 44 fe ff
	ff		 lea	 ecx, DWORD PTR _mean$[ebp]
  002d3	e8 00 00 00 00	 call	 ??0?$Scalar_@N@cv@@QAE@XZ ; cv::Scalar_<double>::Scalar_<double>

; 675  : 	Scalar     stddev;

  002d8	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _stddev$[ebp]
  002de	e8 00 00 00 00	 call	 ??0?$Scalar_@N@cv@@QAE@XZ ; cv::Scalar_<double>::Scalar_<double>

; 676  : 	int64 val1,val2,val3,val4,val5,val6,val7,val8,val9,val10;
; 677  : 	int64 max = 0;

  002e3	66 0f 57 c0	 xorpd	 xmm0, xmm0
  002e7	66 0f 13 85 84
	fd ff ff	 movlpd	 QWORD PTR _max$[ebp], xmm0

; 678  : 	int64 val = 0;

  002ef	66 0f 57 c0	 xorpd	 xmm0, xmm0
  002f3	66 0f 13 85 8c
	fd ff ff	 movlpd	 QWORD PTR _val$[ebp], xmm0

; 679  : 	int ret = 0;

  002fb	c7 85 80 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _ret$[ebp], 0

; 680  : 	int len = 0;

  00305	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _len$[ebp], 0

; 681  : 	int num = 0;

  0030c	c7 85 94 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _num$[ebp], 0
$LN100@SavePicThr:

; 682  : 
; 683  : 	while (pdlg->m_bstartpicture)

  00316	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _pdlg$[ebp]
  0031c	0f b6 88 b0 01
	00 00		 movzx	 ecx, BYTE PTR [eax+432]
  00323	85 c9		 test	 ecx, ecx
  00325	0f 84 cf 0e 00
	00		 je	 $LN45@SavePicThr

; 684  : 	{
; 685  : 		ret = ReadPicQueue(img.data, &len);

  0032b	8d 55 ec	 lea	 edx, DWORD PTR _len$[ebp]
  0032e	52		 push	 edx
  0032f	8b 85 ac fd ff
	ff		 mov	 eax, DWORD PTR _img$[ebp+16]
  00335	50		 push	 eax
  00336	e8 00 00 00 00	 call	 ?ReadPicQueue@@YAHPAEPAH@Z ; ReadPicQueue
  0033b	83 c4 08	 add	 esp, 8
  0033e	89 85 80 fd ff
	ff		 mov	 DWORD PTR _ret$[ebp], eax

; 686  : 		if (len <= 0 || ret < 0){

  00344	83 7d ec 00	 cmp	 DWORD PTR _len$[ebp], 0
  00348	7e 09		 jle	 SHORT $LN43@SavePicThr
  0034a	83 bd 80 fd ff
	ff 00		 cmp	 DWORD PTR _ret$[ebp], 0
  00351	7d 0a		 jge	 SHORT $LN44@SavePicThr
$LN43@SavePicThr:

; 687  : 			Sleep(1);

  00353	6a 01		 push	 1
  00355	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 688  : 			//pdlg->SetDlgItemInt(IDC_AGE_EDIT,1);
; 689  : 			continue;

  0035b	eb b9		 jmp	 SHORT $LN100@SavePicThr
$LN44@SavePicThr:

; 690  : 		}
; 691  : 		if (!img.empty())

  0035d	8d 8d 9c fd ff
	ff		 lea	 ecx, DWORD PTR _img$[ebp]
  00363	e8 00 00 00 00	 call	 ?empty@Mat@cv@@QBE_NXZ	; cv::Mat::empty
  00368	0f b6 c8	 movzx	 ecx, al
  0036b	85 c9		 test	 ecx, ecx
  0036d	0f 85 7a 0e 00
	00		 jne	 $LN42@SavePicThr

; 692  : 		{
; 693  : 		//	pdlg->SetDlgItemInt(IDC_AGE_EDIT,1);
; 694  : 			memset(picBuf[num],0,IMGSIZE);

  00373	68 00 30 2a 00	 push	 2764800			; 002a3000H
  00378	6a 00		 push	 0
  0037a	8b 95 94 fd ff
	ff		 mov	 edx, DWORD PTR _num$[ebp]
  00380	69 d2 00 30 2a
	00		 imul	 edx, 2764800		; 002a3000H
  00386	81 c2 00 00 00
	00		 add	 edx, OFFSET _picBuf
  0038c	52		 push	 edx
  0038d	e8 00 00 00 00	 call	 _memset
  00392	83 c4 0c	 add	 esp, 12			; 0000000cH

; 695  : 			memcpy(picBuf[num],img.data,IMGSIZE);

  00395	68 00 30 2a 00	 push	 2764800			; 002a3000H
  0039a	8b 85 ac fd ff
	ff		 mov	 eax, DWORD PTR _img$[ebp+16]
  003a0	50		 push	 eax
  003a1	8b 8d 94 fd ff
	ff		 mov	 ecx, DWORD PTR _num$[ebp]
  003a7	69 c9 00 30 2a
	00		 imul	 ecx, 2764800		; 002a3000H
  003ad	81 c1 00 00 00
	00		 add	 ecx, OFFSET _picBuf
  003b3	51		 push	 ecx
  003b4	e8 00 00 00 00	 call	 _memcpy
  003b9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 696  : 	//		WriteYUVQueue(img.data,IMGSIZE);
; 697  : 	//		pdlg->SetDlgItemInt(IDC_AGE_EDIT,2);
; 698  : #if 1
; 699  : 			//计算方差
; 700  : 			cvtColor(img, gray, COLOR_BGR2GRAY);

  003bc	8d 55 9c	 lea	 edx, DWORD PTR _gray$[ebp]
  003bf	52		 push	 edx
  003c0	8d 8d d0 fb ff
	ff		 lea	 ecx, DWORD PTR $T22[ebp]
  003c6	e8 00 00 00 00	 call	 ??0_OutputArray@cv@@QAE@AAVMat@1@@Z ; cv::_OutputArray::_OutputArray
  003cb	c6 45 fc 15	 mov	 BYTE PTR __$EHRec$[ebp+8], 21 ; 00000015H
  003cf	8d 85 9c fd ff
	ff		 lea	 eax, DWORD PTR _img$[ebp]
  003d5	50		 push	 eax
  003d6	8d 8d f0 fb ff
	ff		 lea	 ecx, DWORD PTR $T24[ebp]
  003dc	e8 00 00 00 00	 call	 ??0_InputArray@cv@@QAE@ABVMat@1@@Z ; cv::_InputArray::_InputArray
  003e1	c6 45 fc 16	 mov	 BYTE PTR __$EHRec$[ebp+8], 22 ; 00000016H
  003e5	6a 00		 push	 0
  003e7	6a 06		 push	 6
  003e9	8d 8d d0 fb ff
	ff		 lea	 ecx, DWORD PTR $T22[ebp]
  003ef	51		 push	 ecx
  003f0	8d 95 f0 fb ff
	ff		 lea	 edx, DWORD PTR $T24[ebp]
  003f6	52		 push	 edx
  003f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?cvtColor@cv@@YAXABV_InputArray@1@ABV_OutputArray@1@HH@Z
  003fd	83 c4 10	 add	 esp, 16			; 00000010H
  00400	c6 45 fc 15	 mov	 BYTE PTR __$EHRec$[ebp+8], 21 ; 00000015H
  00404	8d 8d f0 fb ff
	ff		 lea	 ecx, DWORD PTR $T24[ebp]
  0040a	e8 00 00 00 00	 call	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
  0040f	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
  00413	8d 8d d0 fb ff
	ff		 lea	 ecx, DWORD PTR $T22[ebp]
  00419	e8 00 00 00 00	 call	 ??1_OutputArray@cv@@QAE@XZ

; 701  : 			//Laplacian(gray, laplac, CV_16U,3);
; 702  : 			//convertScaleAbs(laplac, meanstdev);
; 703  : 
; 704  : 			//cvtColor(src11, gray, COLOR_BGR2GRAY);
; 705  : 			filter2D(gray, filter1, CV_8UC3, kernel1);

  0041e	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _kernel1$[ebp]
  00424	50		 push	 eax
  00425	8d 8d 70 fb ff
	ff		 lea	 ecx, DWORD PTR $T16[ebp]
  0042b	e8 00 00 00 00	 call	 ??0_InputArray@cv@@QAE@ABVMat@1@@Z ; cv::_InputArray::_InputArray
  00430	c6 45 fc 17	 mov	 BYTE PTR __$EHRec$[ebp+8], 23 ; 00000017H
  00434	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _filter1$[ebp]
  0043a	51		 push	 ecx
  0043b	8d 8d 90 fb ff
	ff		 lea	 ecx, DWORD PTR $T18[ebp]
  00441	e8 00 00 00 00	 call	 ??0_OutputArray@cv@@QAE@AAVMat@1@@Z ; cv::_OutputArray::_OutputArray
  00446	c6 45 fc 18	 mov	 BYTE PTR __$EHRec$[ebp+8], 24 ; 00000018H
  0044a	8d 55 9c	 lea	 edx, DWORD PTR _gray$[ebp]
  0044d	52		 push	 edx
  0044e	8d 8d b0 fb ff
	ff		 lea	 ecx, DWORD PTR $T20[ebp]
  00454	e8 00 00 00 00	 call	 ??0_InputArray@cv@@QAE@ABVMat@1@@Z ; cv::_InputArray::_InputArray
  00459	c6 45 fc 19	 mov	 BYTE PTR __$EHRec$[ebp+8], 25 ; 00000019H
  0045d	6a 04		 push	 4
  0045f	83 ec 08	 sub	 esp, 8
  00462	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@0000000000000000
  0046a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0046f	83 ec 08	 sub	 esp, 8
  00472	8b cc		 mov	 ecx, esp
  00474	89 a5 98 fc ff
	ff		 mov	 DWORD PTR $T36[ebp], esp
  0047a	6a ff		 push	 -1
  0047c	6a ff		 push	 -1
  0047e	e8 00 00 00 00	 call	 ??0?$Point_@H@cv@@QAE@HH@Z ; cv::Point_<int>::Point_<int>
  00483	8d 85 70 fb ff
	ff		 lea	 eax, DWORD PTR $T16[ebp]
  00489	50		 push	 eax
  0048a	6a 10		 push	 16			; 00000010H
  0048c	8d 8d 90 fb ff
	ff		 lea	 ecx, DWORD PTR $T18[ebp]
  00492	51		 push	 ecx
  00493	8d 95 b0 fb ff
	ff		 lea	 edx, DWORD PTR $T20[ebp]
  00499	52		 push	 edx
  0049a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?filter2D@cv@@YAXABV_InputArray@1@ABV_OutputArray@1@H0V?$Point_@H@1@NH@Z
  004a0	83 c4 24	 add	 esp, 36			; 00000024H
  004a3	c6 45 fc 18	 mov	 BYTE PTR __$EHRec$[ebp+8], 24 ; 00000018H
  004a7	8d 8d b0 fb ff
	ff		 lea	 ecx, DWORD PTR $T20[ebp]
  004ad	e8 00 00 00 00	 call	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
  004b2	c6 45 fc 17	 mov	 BYTE PTR __$EHRec$[ebp+8], 23 ; 00000017H
  004b6	8d 8d 90 fb ff
	ff		 lea	 ecx, DWORD PTR $T18[ebp]
  004bc	e8 00 00 00 00	 call	 ??1_OutputArray@cv@@QAE@XZ
  004c1	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
  004c5	8d 8d 70 fb ff
	ff		 lea	 ecx, DWORD PTR $T16[ebp]
  004cb	e8 00 00 00 00	 call	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray

; 706  : 			filter2D(gray, filter2, CV_8UC3, kernel2);

  004d0	8d 85 64 fe ff
	ff		 lea	 eax, DWORD PTR _kernel2$[ebp]
  004d6	50		 push	 eax
  004d7	8d 8d 60 fc ff
	ff		 lea	 ecx, DWORD PTR $T31[ebp]
  004dd	e8 00 00 00 00	 call	 ??0_InputArray@cv@@QAE@ABVMat@1@@Z ; cv::_InputArray::_InputArray
  004e2	c6 45 fc 1a	 mov	 BYTE PTR __$EHRec$[ebp+8], 26 ; 0000001aH
  004e6	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _filter2$[ebp]
  004ec	51		 push	 ecx
  004ed	8d 8d 30 fb ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  004f3	e8 00 00 00 00	 call	 ??0_OutputArray@cv@@QAE@AAVMat@1@@Z ; cv::_OutputArray::_OutputArray
  004f8	c6 45 fc 1b	 mov	 BYTE PTR __$EHRec$[ebp+8], 27 ; 0000001bH
  004fc	8d 55 9c	 lea	 edx, DWORD PTR _gray$[ebp]
  004ff	52		 push	 edx
  00500	8d 8d 50 fb ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  00506	e8 00 00 00 00	 call	 ??0_InputArray@cv@@QAE@ABVMat@1@@Z ; cv::_InputArray::_InputArray
  0050b	c6 45 fc 1c	 mov	 BYTE PTR __$EHRec$[ebp+8], 28 ; 0000001cH
  0050f	6a 04		 push	 4
  00511	83 ec 08	 sub	 esp, 8
  00514	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@0000000000000000
  0051c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00521	83 ec 08	 sub	 esp, 8
  00524	8b cc		 mov	 ecx, esp
  00526	89 a5 94 fc ff
	ff		 mov	 DWORD PTR $T35[ebp], esp
  0052c	6a ff		 push	 -1
  0052e	6a ff		 push	 -1
  00530	e8 00 00 00 00	 call	 ??0?$Point_@H@cv@@QAE@HH@Z ; cv::Point_<int>::Point_<int>
  00535	8d 85 60 fc ff
	ff		 lea	 eax, DWORD PTR $T31[ebp]
  0053b	50		 push	 eax
  0053c	6a 10		 push	 16			; 00000010H
  0053e	8d 8d 30 fb ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  00544	51		 push	 ecx
  00545	8d 95 50 fb ff
	ff		 lea	 edx, DWORD PTR $T14[ebp]
  0054b	52		 push	 edx
  0054c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?filter2D@cv@@YAXABV_InputArray@1@ABV_OutputArray@1@H0V?$Point_@H@1@NH@Z
  00552	83 c4 24	 add	 esp, 36			; 00000024H
  00555	c6 45 fc 1b	 mov	 BYTE PTR __$EHRec$[ebp+8], 27 ; 0000001bH
  00559	8d 8d 50 fb ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  0055f	e8 00 00 00 00	 call	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
  00564	c6 45 fc 1a	 mov	 BYTE PTR __$EHRec$[ebp+8], 26 ; 0000001aH
  00568	8d 8d 30 fb ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  0056e	e8 00 00 00 00	 call	 ??1_OutputArray@cv@@QAE@XZ
  00573	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
  00577	8d 8d 60 fc ff
	ff		 lea	 ecx, DWORD PTR $T31[ebp]
  0057d	e8 00 00 00 00	 call	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray

; 707  : 			filter = filter1+filter2;

  00582	8d 85 44 ff ff
	ff		 lea	 eax, DWORD PTR _filter2$[ebp]
  00588	50		 push	 eax
  00589	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _filter1$[ebp]
  0058f	51		 push	 ecx
  00590	8d 95 cc f8 ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  00596	52		 push	 edx
  00597	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Hcv@@YA?AVMatExpr@0@ABVMat@0@0@Z
  0059d	83 c4 0c	 add	 esp, 12			; 0000000cH
  005a0	89 85 30 fd ff
	ff		 mov	 DWORD PTR tv345[ebp], eax
  005a6	8b 85 30 fd ff
	ff		 mov	 eax, DWORD PTR tv345[ebp]
  005ac	89 85 24 fd ff
	ff		 mov	 DWORD PTR tv756[ebp], eax
  005b2	c6 45 fc 1d	 mov	 BYTE PTR __$EHRec$[ebp+8], 29 ; 0000001dH
  005b6	8b 8d 24 fd ff
	ff		 mov	 ecx, DWORD PTR tv756[ebp]
  005bc	51		 push	 ecx
  005bd	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _filter$[ebp]
  005c3	e8 00 00 00 00	 call	 ??4Mat@cv@@QAEAAV01@ABVMatExpr@1@@Z ; cv::Mat::operator=
  005c8	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
  005cc	8d 8d cc f8 ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  005d2	e8 00 00 00 00	 call	 ??1MatExpr@cv@@QAE@XZ

; 708  : 			meanStdDev(filter,mean,stddev);

  005d7	8d 95 7c ff ff
	ff		 lea	 edx, DWORD PTR _stddev$[ebp]
  005dd	52		 push	 edx
  005de	8d 8d 70 fc ff
	ff		 lea	 ecx, DWORD PTR $T32[ebp]
  005e4	e8 00 00 00 00	 call	 ??$?0N$03$00@_OutputArray@cv@@QAE@AAV?$Matx@N$03$00@1@@Z ; cv::_OutputArray::_OutputArray<double,4,1>
  005e9	c6 45 fc 1e	 mov	 BYTE PTR __$EHRec$[ebp+8], 30 ; 0000001eH
  005ed	8d 85 44 fe ff
	ff		 lea	 eax, DWORD PTR _mean$[ebp]
  005f3	50		 push	 eax
  005f4	8d 8d 50 fc ff
	ff		 lea	 ecx, DWORD PTR $T30[ebp]
  005fa	e8 00 00 00 00	 call	 ??$?0N$03$00@_OutputArray@cv@@QAE@AAV?$Matx@N$03$00@1@@Z ; cv::_OutputArray::_OutputArray<double,4,1>
  005ff	c6 45 fc 1f	 mov	 BYTE PTR __$EHRec$[ebp+8], 31 ; 0000001fH
  00603	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _filter$[ebp]
  00609	51		 push	 ecx
  0060a	8d 8d 80 fc ff
	ff		 lea	 ecx, DWORD PTR $T33[ebp]
  00610	e8 00 00 00 00	 call	 ??0_InputArray@cv@@QAE@ABVMat@1@@Z ; cv::_InputArray::_InputArray
  00615	c6 45 fc 20	 mov	 BYTE PTR __$EHRec$[ebp+8], 32 ; 00000020H
  00619	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?noArray@cv@@YAABV_InputOutputArray@1@XZ
  0061f	50		 push	 eax
  00620	8d 95 70 fc ff
	ff		 lea	 edx, DWORD PTR $T32[ebp]
  00626	52		 push	 edx
  00627	8d 85 50 fc ff
	ff		 lea	 eax, DWORD PTR $T30[ebp]
  0062d	50		 push	 eax
  0062e	8d 8d 80 fc ff
	ff		 lea	 ecx, DWORD PTR $T33[ebp]
  00634	51		 push	 ecx
  00635	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?meanStdDev@cv@@YAXABV_InputArray@1@ABV_OutputArray@1@10@Z
  0063b	83 c4 10	 add	 esp, 16			; 00000010H
  0063e	c6 45 fc 1f	 mov	 BYTE PTR __$EHRec$[ebp+8], 31 ; 0000001fH
  00642	8d 8d 80 fc ff
	ff		 lea	 ecx, DWORD PTR $T33[ebp]
  00648	e8 00 00 00 00	 call	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
  0064d	c6 45 fc 1e	 mov	 BYTE PTR __$EHRec$[ebp+8], 30 ; 0000001eH
  00651	8d 8d 50 fc ff
	ff		 lea	 ecx, DWORD PTR $T30[ebp]
  00657	e8 00 00 00 00	 call	 ??1_OutputArray@cv@@QAE@XZ
  0065c	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
  00660	8d 8d 70 fc ff
	ff		 lea	 ecx, DWORD PTR $T32[ebp]
  00666	e8 00 00 00 00	 call	 ??1_OutputArray@cv@@QAE@XZ

; 709  : 			val = stddev.val[0]*1000000;

  0066b	ba 08 00 00 00	 mov	 edx, 8
  00670	6b d2 00	 imul	 edx, 0
  00673	f2 0f 10 84 15
	7c ff ff ff	 movsd	 xmm0, QWORD PTR _stddev$[ebp+edx]
  0067c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@412e848000000000
  00684	f2 0f 11 85 9c
	fc ff ff	 movsd	 QWORD PTR tv839[ebp], xmm0
  0068c	dd 85 9c fc ff
	ff		 fld	 QWORD PTR tv839[ebp]
  00692	e8 00 00 00 00	 call	 __ftol2
  00697	89 85 8c fd ff
	ff		 mov	 DWORD PTR _val$[ebp], eax
  0069d	89 95 90 fd ff
	ff		 mov	 DWORD PTR _val$[ebp+4], edx

; 710  : 			//meanStdDev(meanstdev,mean,stddev);
; 711  : 
; 712  : 			//val = cv::mean(meanstdev)[0]*10000000;
; 713  : 
; 714  : 			if(0 == num)

  006a3	83 bd 94 fd ff
	ff 00		 cmp	 DWORD PTR _num$[ebp], 0
  006aa	75 1d		 jne	 SHORT $LN41@SavePicThr

; 715  : 			{
; 716  : 				val1 = val;

  006ac	8b 85 8c fd ff
	ff		 mov	 eax, DWORD PTR _val$[ebp]
  006b2	89 85 70 fd ff
	ff		 mov	 DWORD PTR _val1$[ebp], eax
  006b8	8b 8d 90 fd ff
	ff		 mov	 ecx, DWORD PTR _val$[ebp+4]
  006be	89 8d 74 fd ff
	ff		 mov	 DWORD PTR _val1$[ebp+4], ecx
  006c4	e9 48 01 00 00	 jmp	 $LN23@SavePicThr
$LN41@SavePicThr:

; 717  : 			}
; 718  : 			else if(1 == num)

  006c9	83 bd 94 fd ff
	ff 01		 cmp	 DWORD PTR _num$[ebp], 1
  006d0	75 1d		 jne	 SHORT $LN39@SavePicThr

; 719  : 			{
; 720  : 				val2 = val;

  006d2	8b 95 8c fd ff
	ff		 mov	 edx, DWORD PTR _val$[ebp]
  006d8	89 95 64 fd ff
	ff		 mov	 DWORD PTR _val2$[ebp], edx
  006de	8b 85 90 fd ff
	ff		 mov	 eax, DWORD PTR _val$[ebp+4]
  006e4	89 85 68 fd ff
	ff		 mov	 DWORD PTR _val2$[ebp+4], eax
  006ea	e9 22 01 00 00	 jmp	 $LN23@SavePicThr
$LN39@SavePicThr:

; 721  : 			}
; 722  : 			else if(2 == num)

  006ef	83 bd 94 fd ff
	ff 02		 cmp	 DWORD PTR _num$[ebp], 2
  006f6	75 1d		 jne	 SHORT $LN37@SavePicThr

; 723  : 			{
; 724  : 				val3 = val;

  006f8	8b 8d 8c fd ff
	ff		 mov	 ecx, DWORD PTR _val$[ebp]
  006fe	89 8d 28 fd ff
	ff		 mov	 DWORD PTR _val3$[ebp], ecx
  00704	8b 95 90 fd ff
	ff		 mov	 edx, DWORD PTR _val$[ebp+4]
  0070a	89 95 2c fd ff
	ff		 mov	 DWORD PTR _val3$[ebp+4], edx
  00710	e9 fc 00 00 00	 jmp	 $LN23@SavePicThr
$LN37@SavePicThr:

; 725  : 			}
; 726  : 			else if(3 == num)

  00715	83 bd 94 fd ff
	ff 03		 cmp	 DWORD PTR _num$[ebp], 3
  0071c	75 1d		 jne	 SHORT $LN35@SavePicThr

; 727  : 			{
; 728  : 				val4 = val;

  0071e	8b 85 8c fd ff
	ff		 mov	 eax, DWORD PTR _val$[ebp]
  00724	89 85 58 fd ff
	ff		 mov	 DWORD PTR _val4$[ebp], eax
  0072a	8b 8d 90 fd ff
	ff		 mov	 ecx, DWORD PTR _val$[ebp+4]
  00730	89 8d 5c fd ff
	ff		 mov	 DWORD PTR _val4$[ebp+4], ecx
  00736	e9 d6 00 00 00	 jmp	 $LN23@SavePicThr
$LN35@SavePicThr:

; 729  : 			}
; 730  : 			else if(4 == num)

  0073b	83 bd 94 fd ff
	ff 04		 cmp	 DWORD PTR _num$[ebp], 4
  00742	75 1d		 jne	 SHORT $LN33@SavePicThr

; 731  : 			{
; 732  : 				val5 = val;

  00744	8b 95 8c fd ff
	ff		 mov	 edx, DWORD PTR _val$[ebp]
  0074a	89 95 00 fd ff
	ff		 mov	 DWORD PTR _val5$[ebp], edx
  00750	8b 85 90 fd ff
	ff		 mov	 eax, DWORD PTR _val$[ebp+4]
  00756	89 85 04 fd ff
	ff		 mov	 DWORD PTR _val5$[ebp+4], eax
  0075c	e9 b0 00 00 00	 jmp	 $LN23@SavePicThr
$LN33@SavePicThr:

; 733  : 			}
; 734  : 			else if(5 == num)

  00761	83 bd 94 fd ff
	ff 05		 cmp	 DWORD PTR _num$[ebp], 5
  00768	75 1d		 jne	 SHORT $LN31@SavePicThr

; 735  : 			{
; 736  : 				val6 = val;

  0076a	8b 8d 8c fd ff
	ff		 mov	 ecx, DWORD PTR _val$[ebp]
  00770	89 8d 4c fd ff
	ff		 mov	 DWORD PTR _val6$[ebp], ecx
  00776	8b 95 90 fd ff
	ff		 mov	 edx, DWORD PTR _val$[ebp+4]
  0077c	89 95 50 fd ff
	ff		 mov	 DWORD PTR _val6$[ebp+4], edx
  00782	e9 8a 00 00 00	 jmp	 $LN23@SavePicThr
$LN31@SavePicThr:

; 737  : 			}
; 738  : 			else if(6 == num)

  00787	83 bd 94 fd ff
	ff 06		 cmp	 DWORD PTR _num$[ebp], 6
  0078e	75 1a		 jne	 SHORT $LN29@SavePicThr

; 739  : 			{
; 740  : 				val7 = val;

  00790	8b 85 8c fd ff
	ff		 mov	 eax, DWORD PTR _val$[ebp]
  00796	89 85 78 fd ff
	ff		 mov	 DWORD PTR _val7$[ebp], eax
  0079c	8b 8d 90 fd ff
	ff		 mov	 ecx, DWORD PTR _val$[ebp+4]
  007a2	89 8d 7c fd ff
	ff		 mov	 DWORD PTR _val7$[ebp+4], ecx
  007a8	eb 67		 jmp	 SHORT $LN23@SavePicThr
$LN29@SavePicThr:

; 741  : 			}
; 742  : 			else if(7 == num)

  007aa	83 bd 94 fd ff
	ff 07		 cmp	 DWORD PTR _num$[ebp], 7
  007b1	75 1a		 jne	 SHORT $LN27@SavePicThr

; 743  : 			{
; 744  : 				val8 = val;

  007b3	8b 95 8c fd ff
	ff		 mov	 edx, DWORD PTR _val$[ebp]
  007b9	89 95 40 fd ff
	ff		 mov	 DWORD PTR _val8$[ebp], edx
  007bf	8b 85 90 fd ff
	ff		 mov	 eax, DWORD PTR _val$[ebp+4]
  007c5	89 85 44 fd ff
	ff		 mov	 DWORD PTR _val8$[ebp+4], eax
  007cb	eb 44		 jmp	 SHORT $LN23@SavePicThr
$LN27@SavePicThr:

; 745  : 			}
; 746  : 			else if(8 == num)

  007cd	83 bd 94 fd ff
	ff 08		 cmp	 DWORD PTR _num$[ebp], 8
  007d4	75 1a		 jne	 SHORT $LN25@SavePicThr

; 747  : 			{
; 748  : 				val9 = val;

  007d6	8b 8d 8c fd ff
	ff		 mov	 ecx, DWORD PTR _val$[ebp]
  007dc	89 8d 0c fd ff
	ff		 mov	 DWORD PTR _val9$[ebp], ecx
  007e2	8b 95 90 fd ff
	ff		 mov	 edx, DWORD PTR _val$[ebp+4]
  007e8	89 95 10 fd ff
	ff		 mov	 DWORD PTR _val9$[ebp+4], edx
  007ee	eb 21		 jmp	 SHORT $LN23@SavePicThr
$LN25@SavePicThr:

; 749  : 			}
; 750  : 			else if(9 == num)

  007f0	83 bd 94 fd ff
	ff 09		 cmp	 DWORD PTR _num$[ebp], 9
  007f7	75 18		 jne	 SHORT $LN23@SavePicThr

; 751  : 			{
; 752  : 				val10 = val;

  007f9	8b 85 8c fd ff
	ff		 mov	 eax, DWORD PTR _val$[ebp]
  007ff	89 85 34 fd ff
	ff		 mov	 DWORD PTR _val10$[ebp], eax
  00805	8b 8d 90 fd ff
	ff		 mov	 ecx, DWORD PTR _val$[ebp+4]
  0080b	89 8d 38 fd ff
	ff		 mov	 DWORD PTR _val10$[ebp+4], ecx
$LN23@SavePicThr:

; 753  : 			}
; 754  : 			if(val>max)

  00811	8b 95 90 fd ff
	ff		 mov	 edx, DWORD PTR _val$[ebp+4]
  00817	3b 95 88 fd ff
	ff		 cmp	 edx, DWORD PTR _max$[ebp+4]
  0081d	7c 28		 jl	 SHORT $LN22@SavePicThr
  0081f	7f 0e		 jg	 SHORT $LN101@SavePicThr
  00821	8b 85 8c fd ff
	ff		 mov	 eax, DWORD PTR _val$[ebp]
  00827	3b 85 84 fd ff
	ff		 cmp	 eax, DWORD PTR _max$[ebp]
  0082d	76 18		 jbe	 SHORT $LN22@SavePicThr
$LN101@SavePicThr:

; 755  : 			{
; 756  : 				max = val;

  0082f	8b 8d 8c fd ff
	ff		 mov	 ecx, DWORD PTR _val$[ebp]
  00835	89 8d 84 fd ff
	ff		 mov	 DWORD PTR _max$[ebp], ecx
  0083b	8b 95 90 fd ff
	ff		 mov	 edx, DWORD PTR _val$[ebp+4]
  00841	89 95 88 fd ff
	ff		 mov	 DWORD PTR _max$[ebp+4], edx
$LN22@SavePicThr:

; 757  : 			}
; 758  : #endif
; 759  : 			num++;

  00847	8b 85 94 fd ff
	ff		 mov	 eax, DWORD PTR _num$[ebp]
  0084d	83 c0 01	 add	 eax, 1
  00850	89 85 94 fd ff
	ff		 mov	 DWORD PTR _num$[ebp], eax

; 760  : 			string t_imgpath = pdlg->GetSaveImgPath(num);

  00856	8b 8d 94 fd ff
	ff		 mov	 ecx, DWORD PTR _num$[ebp]
  0085c	51		 push	 ecx
  0085d	8d 55 d4	 lea	 edx, DWORD PTR _t_imgpath$49[ebp]
  00860	52		 push	 edx
  00861	8b 8d 98 fd ff
	ff		 mov	 ecx, DWORD PTR _pdlg$[ebp]
  00867	e8 00 00 00 00	 call	 ?GetSaveImgPath@CEndoScopeMFCDlg@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CEndoScopeMFCDlg::GetSaveImgPath
  0086c	c6 45 fc 21	 mov	 BYTE PTR __$EHRec$[ebp+8], 33 ; 00000021H

; 761  : 			imwrite(t_imgpath, img);

  00870	8d 85 9c fd ff
	ff		 lea	 eax, DWORD PTR _img$[ebp]
  00876	50		 push	 eax
  00877	8d 8d 30 fc ff
	ff		 lea	 ecx, DWORD PTR $T28[ebp]
  0087d	e8 00 00 00 00	 call	 ??0_InputArray@cv@@QAE@ABVMat@1@@Z ; cv::_InputArray::_InputArray
  00882	c6 45 fc 22	 mov	 BYTE PTR __$EHRec$[ebp+8], 34 ; 00000022H
  00886	8d 4d d4	 lea	 ecx, DWORD PTR _t_imgpath$49[ebp]
  00889	51		 push	 ecx
  0088a	8d 8d cc fc ff
	ff		 lea	 ecx, DWORD PTR $T42[ebp]
  00890	e8 00 00 00 00	 call	 ??0String@cv@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; cv::String::String
  00895	c6 45 fc 23	 mov	 BYTE PTR __$EHRec$[ebp+8], 35 ; 00000023H
  00899	8d 8d 24 fb ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  0089f	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
  008a4	89 85 1c fd ff
	ff		 mov	 DWORD PTR tv424[ebp], eax
  008aa	8b 95 1c fd ff
	ff		 mov	 edx, DWORD PTR tv424[ebp]
  008b0	89 95 14 fd ff
	ff		 mov	 DWORD PTR tv764[ebp], edx
  008b6	c6 45 fc 24	 mov	 BYTE PTR __$EHRec$[ebp+8], 36 ; 00000024H
  008ba	8b 85 14 fd ff
	ff		 mov	 eax, DWORD PTR tv764[ebp]
  008c0	50		 push	 eax
  008c1	8d 8d 30 fc ff
	ff		 lea	 ecx, DWORD PTR $T28[ebp]
  008c7	51		 push	 ecx
  008c8	8d 95 cc fc ff
	ff		 lea	 edx, DWORD PTR $T42[ebp]
  008ce	52		 push	 edx
  008cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?imwrite@cv@@YA_NABVString@1@ABV_InputArray@1@ABV?$vector@HV?$allocator@H@std@@@std@@@Z
  008d5	83 c4 0c	 add	 esp, 12			; 0000000cH
  008d8	c6 45 fc 23	 mov	 BYTE PTR __$EHRec$[ebp+8], 35 ; 00000023H
  008dc	8d 8d 24 fb ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  008e2	e8 00 00 00 00	 call	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
  008e7	c6 45 fc 22	 mov	 BYTE PTR __$EHRec$[ebp+8], 34 ; 00000022H
  008eb	8d 8d cc fc ff
	ff		 lea	 ecx, DWORD PTR $T42[ebp]
  008f1	e8 00 00 00 00	 call	 ??1String@cv@@QAE@XZ	; cv::String::~String
  008f6	c6 45 fc 21	 mov	 BYTE PTR __$EHRec$[ebp+8], 33 ; 00000021H
  008fa	8d 8d 30 fc ff
	ff		 lea	 ecx, DWORD PTR $T28[ebp]
  00900	e8 00 00 00 00	 call	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray

; 762  : 			//if(9 == num)
; 763  : 			//{
; 764  : 			//	pdlg->m_bshowpause = true;
; 765  : 			//}
; 766  : 			if(10==num)

  00905	83 bd 94 fd ff
	ff 0a		 cmp	 DWORD PTR _num$[ebp], 10 ; 0000000aH
  0090c	0f 85 cf 08 00
	00		 jne	 $LN21@SavePicThr

; 767  : 			{
; 768  : 			//	pdlg->SetDlgItemInt(IDC_AGE_EDIT,2);
; 769  : 			//	t_imgpath = pdlg->GetSaveImgPath(11);
; 770  : 				//暂停播放
; 771  : 				if (pdlg->m_eCurrent==EDS_Running)

  00912	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _pdlg$[ebp]
  00918	83 b8 80 04 00
	00 03		 cmp	 DWORD PTR [eax+1152], 3
  0091f	75 21		 jne	 SHORT $LN20@SavePicThr

; 772  : 				{
; 773  : 					pdlg->m_dwcap.Pause();

  00921	8b 8d 98 fd ff
	ff		 mov	 ecx, DWORD PTR _pdlg$[ebp]
  00927	81 c1 18 02 00
	00		 add	 ecx, 536		; 00000218H
  0092d	e8 00 00 00 00	 call	 ?Pause@CEDSCapture@@QAEXXZ ; CEDSCapture::Pause

; 774  : 					pdlg->m_eCurrent = EDS_Paused;

  00932	8b 8d 98 fd ff
	ff		 mov	 ecx, DWORD PTR _pdlg$[ebp]
  00938	c7 81 80 04 00
	00 02 00 00 00	 mov	 DWORD PTR [ecx+1152], 2
$LN20@SavePicThr:

; 775  : 				}
; 776  : 				if(max == val1)

  00942	8b 95 84 fd ff
	ff		 mov	 edx, DWORD PTR _max$[ebp]
  00948	3b 95 70 fd ff
	ff		 cmp	 edx, DWORD PTR _val1$[ebp]
  0094e	0f 85 ca 00 00
	00		 jne	 $LN19@SavePicThr
  00954	8b 85 88 fd ff
	ff		 mov	 eax, DWORD PTR _max$[ebp+4]
  0095a	3b 85 74 fd ff
	ff		 cmp	 eax, DWORD PTR _val1$[ebp+4]
  00960	0f 85 b8 00 00
	00		 jne	 $LN19@SavePicThr

; 777  : 				{
; 778  : 					memset(pdlg->Picimg.data,0,IMGSIZE);

  00966	68 00 30 2a 00	 push	 2764800			; 002a3000H
  0096b	6a 00		 push	 0
  0096d	8b 8d 98 fd ff
	ff		 mov	 ecx, DWORD PTR _pdlg$[ebp]
  00973	8b 91 3c 04 00
	00		 mov	 edx, DWORD PTR [ecx+1084]
  00979	52		 push	 edx
  0097a	e8 00 00 00 00	 call	 _memset
  0097f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 779  : 					memcpy(pdlg->Picimg.data,&picBuf[0][0],IMGSIZE);

  00982	68 00 30 2a 00	 push	 2764800			; 002a3000H
  00987	b8 00 30 2a 00	 mov	 eax, 2764800		; 002a3000H
  0098c	6b c0 00	 imul	 eax, 0
  0098f	b9 01 00 00 00	 mov	 ecx, 1
  00994	6b c9 00	 imul	 ecx, 0
  00997	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _picBuf[eax+ecx]
  0099e	52		 push	 edx
  0099f	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _pdlg$[ebp]
  009a5	8b 88 3c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1084]
  009ab	51		 push	 ecx
  009ac	e8 00 00 00 00	 call	 _memcpy
  009b1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 780  : 					imshow("view",pdlg-> Picimg);

  009b4	8b 95 98 fd ff
	ff		 mov	 edx, DWORD PTR _pdlg$[ebp]
  009ba	81 c2 2c 04 00
	00		 add	 edx, 1068		; 0000042cH
  009c0	52		 push	 edx
  009c1	8d 8d 10 fc ff
	ff		 lea	 ecx, DWORD PTR $T26[ebp]
  009c7	e8 00 00 00 00	 call	 ??0_InputArray@cv@@QAE@ABVMat@1@@Z ; cv::_InputArray::_InputArray
  009cc	c6 45 fc 25	 mov	 BYTE PTR __$EHRec$[ebp+8], 37 ; 00000025H
  009d0	68 00 00 00 00	 push	 OFFSET $SG4294957262
  009d5	8d 8d b4 fc ff
	ff		 lea	 ecx, DWORD PTR $T39[ebp]
  009db	e8 00 00 00 00	 call	 ??0String@cv@@QAE@PBD@Z	; cv::String::String
  009e0	c6 45 fc 26	 mov	 BYTE PTR __$EHRec$[ebp+8], 38 ; 00000026H
  009e4	8d 85 10 fc ff
	ff		 lea	 eax, DWORD PTR $T26[ebp]
  009ea	50		 push	 eax
  009eb	8d 8d b4 fc ff
	ff		 lea	 ecx, DWORD PTR $T39[ebp]
  009f1	51		 push	 ecx
  009f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?imshow@cv@@YAXABVString@1@ABV_InputArray@1@@Z
  009f8	83 c4 08	 add	 esp, 8
  009fb	c6 45 fc 25	 mov	 BYTE PTR __$EHRec$[ebp+8], 37 ; 00000025H
  009ff	8d 8d b4 fc ff
	ff		 lea	 ecx, DWORD PTR $T39[ebp]
  00a05	e8 00 00 00 00	 call	 ??1String@cv@@QAE@XZ	; cv::String::~String
  00a0a	c6 45 fc 21	 mov	 BYTE PTR __$EHRec$[ebp+8], 33 ; 00000021H
  00a0e	8d 8d 10 fc ff
	ff		 lea	 ecx, DWORD PTR $T26[ebp]
  00a14	e8 00 00 00 00	 call	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
  00a19	e9 b6 07 00 00	 jmp	 $LN1@SavePicThr
$LN19@SavePicThr:

; 781  : 					//pdlg->SetDlgItemInt(IDC_DOCTOR_EDIT,1);
; 782  : 				//	imwrite(t_imgpath, pdlg->Picimg);
; 783  : 				}
; 784  : 				else if(max == val2)

  00a1e	8b 95 84 fd ff
	ff		 mov	 edx, DWORD PTR _max$[ebp]
  00a24	3b 95 64 fd ff
	ff		 cmp	 edx, DWORD PTR _val2$[ebp]
  00a2a	0f 85 ca 00 00
	00		 jne	 $LN17@SavePicThr
  00a30	8b 85 88 fd ff
	ff		 mov	 eax, DWORD PTR _max$[ebp+4]
  00a36	3b 85 68 fd ff
	ff		 cmp	 eax, DWORD PTR _val2$[ebp+4]
  00a3c	0f 85 b8 00 00
	00		 jne	 $LN17@SavePicThr

; 785  : 				{
; 786  : 					memset(pdlg->Picimg.data,0,IMGSIZE);

  00a42	68 00 30 2a 00	 push	 2764800			; 002a3000H
  00a47	6a 00		 push	 0
  00a49	8b 8d 98 fd ff
	ff		 mov	 ecx, DWORD PTR _pdlg$[ebp]
  00a4f	8b 91 3c 04 00
	00		 mov	 edx, DWORD PTR [ecx+1084]
  00a55	52		 push	 edx
  00a56	e8 00 00 00 00	 call	 _memset
  00a5b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 787  : 					memcpy(pdlg->Picimg.data,&picBuf[1][0],IMGSIZE);

  00a5e	68 00 30 2a 00	 push	 2764800			; 002a3000H
  00a63	b8 00 30 2a 00	 mov	 eax, 2764800		; 002a3000H
  00a68	c1 e0 00	 shl	 eax, 0
  00a6b	b9 01 00 00 00	 mov	 ecx, 1
  00a70	6b c9 00	 imul	 ecx, 0
  00a73	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _picBuf[eax+ecx]
  00a7a	52		 push	 edx
  00a7b	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _pdlg$[ebp]
  00a81	8b 88 3c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1084]
  00a87	51		 push	 ecx
  00a88	e8 00 00 00 00	 call	 _memcpy
  00a8d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 788  : 					imshow("view", pdlg->Picimg);

  00a90	8b 95 98 fd ff
	ff		 mov	 edx, DWORD PTR _pdlg$[ebp]
  00a96	81 c2 2c 04 00
	00		 add	 edx, 1068		; 0000042cH
  00a9c	52		 push	 edx
  00a9d	8d 8d c0 fb ff
	ff		 lea	 ecx, DWORD PTR $T21[ebp]
  00aa3	e8 00 00 00 00	 call	 ??0_InputArray@cv@@QAE@ABVMat@1@@Z ; cv::_InputArray::_InputArray
  00aa8	c6 45 fc 27	 mov	 BYTE PTR __$EHRec$[ebp+8], 39 ; 00000027H
  00aac	68 00 00 00 00	 push	 OFFSET $SG4294957261
  00ab1	8d 8d a4 fc ff
	ff		 lea	 ecx, DWORD PTR $T37[ebp]
  00ab7	e8 00 00 00 00	 call	 ??0String@cv@@QAE@PBD@Z	; cv::String::String
  00abc	c6 45 fc 28	 mov	 BYTE PTR __$EHRec$[ebp+8], 40 ; 00000028H
  00ac0	8d 85 c0 fb ff
	ff		 lea	 eax, DWORD PTR $T21[ebp]
  00ac6	50		 push	 eax
  00ac7	8d 8d a4 fc ff
	ff		 lea	 ecx, DWORD PTR $T37[ebp]
  00acd	51		 push	 ecx
  00ace	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?imshow@cv@@YAXABVString@1@ABV_InputArray@1@@Z
  00ad4	83 c4 08	 add	 esp, 8
  00ad7	c6 45 fc 27	 mov	 BYTE PTR __$EHRec$[ebp+8], 39 ; 00000027H
  00adb	8d 8d a4 fc ff
	ff		 lea	 ecx, DWORD PTR $T37[ebp]
  00ae1	e8 00 00 00 00	 call	 ??1String@cv@@QAE@XZ	; cv::String::~String
  00ae6	c6 45 fc 21	 mov	 BYTE PTR __$EHRec$[ebp+8], 33 ; 00000021H
  00aea	8d 8d c0 fb ff
	ff		 lea	 ecx, DWORD PTR $T21[ebp]
  00af0	e8 00 00 00 00	 call	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
  00af5	e9 da 06 00 00	 jmp	 $LN1@SavePicThr
$LN17@SavePicThr:

; 789  : 					//pdlg->SetDlgItemInt(IDC_DOCTOR_EDIT,2);
; 790  : 				//	imwrite(t_imgpath, pdlg->Picimg);
; 791  : 				}
; 792  : 				else if(max == val3)

  00afa	8b 95 84 fd ff
	ff		 mov	 edx, DWORD PTR _max$[ebp]
  00b00	3b 95 28 fd ff
	ff		 cmp	 edx, DWORD PTR _val3$[ebp]
  00b06	0f 85 c9 00 00
	00		 jne	 $LN15@SavePicThr
  00b0c	8b 85 88 fd ff
	ff		 mov	 eax, DWORD PTR _max$[ebp+4]
  00b12	3b 85 2c fd ff
	ff		 cmp	 eax, DWORD PTR _val3$[ebp+4]
  00b18	0f 85 b7 00 00
	00		 jne	 $LN15@SavePicThr

; 793  : 				{
; 794  : 					memset(pdlg->Picimg.data,0,IMGSIZE);

  00b1e	68 00 30 2a 00	 push	 2764800			; 002a3000H
  00b23	6a 00		 push	 0
  00b25	8b 8d 98 fd ff
	ff		 mov	 ecx, DWORD PTR _pdlg$[ebp]
  00b2b	8b 91 3c 04 00
	00		 mov	 edx, DWORD PTR [ecx+1084]
  00b31	52		 push	 edx
  00b32	e8 00 00 00 00	 call	 _memset
  00b37	83 c4 0c	 add	 esp, 12			; 0000000cH

; 795  : 					memcpy(pdlg->Picimg.data,&picBuf[2][0],IMGSIZE);

  00b3a	68 00 30 2a 00	 push	 2764800			; 002a3000H
  00b3f	b8 00 30 2a 00	 mov	 eax, 2764800		; 002a3000H
  00b44	d1 e0		 shl	 eax, 1
  00b46	b9 01 00 00 00	 mov	 ecx, 1
  00b4b	6b c9 00	 imul	 ecx, 0
  00b4e	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _picBuf[eax+ecx]
  00b55	52		 push	 edx
  00b56	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _pdlg$[ebp]
  00b5c	8b 88 3c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1084]
  00b62	51		 push	 ecx
  00b63	e8 00 00 00 00	 call	 _memcpy
  00b68	83 c4 0c	 add	 esp, 12			; 0000000cH

; 796  : 					imshow("view", pdlg->Picimg);

  00b6b	8b 95 98 fd ff
	ff		 mov	 edx, DWORD PTR _pdlg$[ebp]
  00b71	81 c2 2c 04 00
	00		 add	 edx, 1068		; 0000042cH
  00b77	52		 push	 edx
  00b78	8d 8d 40 fc ff
	ff		 lea	 ecx, DWORD PTR $T29[ebp]
  00b7e	e8 00 00 00 00	 call	 ??0_InputArray@cv@@QAE@ABVMat@1@@Z ; cv::_InputArray::_InputArray
  00b83	c6 45 fc 29	 mov	 BYTE PTR __$EHRec$[ebp+8], 41 ; 00000029H
  00b87	68 00 00 00 00	 push	 OFFSET $SG4294957260
  00b8c	8d 8d ac fc ff
	ff		 lea	 ecx, DWORD PTR $T38[ebp]
  00b92	e8 00 00 00 00	 call	 ??0String@cv@@QAE@PBD@Z	; cv::String::String
  00b97	c6 45 fc 2a	 mov	 BYTE PTR __$EHRec$[ebp+8], 42 ; 0000002aH
  00b9b	8d 85 40 fc ff
	ff		 lea	 eax, DWORD PTR $T29[ebp]
  00ba1	50		 push	 eax
  00ba2	8d 8d ac fc ff
	ff		 lea	 ecx, DWORD PTR $T38[ebp]
  00ba8	51		 push	 ecx
  00ba9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?imshow@cv@@YAXABVString@1@ABV_InputArray@1@@Z
  00baf	83 c4 08	 add	 esp, 8
  00bb2	c6 45 fc 29	 mov	 BYTE PTR __$EHRec$[ebp+8], 41 ; 00000029H
  00bb6	8d 8d ac fc ff
	ff		 lea	 ecx, DWORD PTR $T38[ebp]
  00bbc	e8 00 00 00 00	 call	 ??1String@cv@@QAE@XZ	; cv::String::~String
  00bc1	c6 45 fc 21	 mov	 BYTE PTR __$EHRec$[ebp+8], 33 ; 00000021H
  00bc5	8d 8d 40 fc ff
	ff		 lea	 ecx, DWORD PTR $T29[ebp]
  00bcb	e8 00 00 00 00	 call	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
  00bd0	e9 ff 05 00 00	 jmp	 $LN1@SavePicThr
$LN15@SavePicThr:

; 797  : 					//pdlg->SetDlgItemInt(IDC_DOCTOR_EDIT,3);
; 798  : 				//	imwrite(t_imgpath, pdlg->Picimg);
; 799  : 				}
; 800  : 				else if(max == val4)

  00bd5	8b 95 84 fd ff
	ff		 mov	 edx, DWORD PTR _max$[ebp]
  00bdb	3b 95 58 fd ff
	ff		 cmp	 edx, DWORD PTR _val4$[ebp]
  00be1	0f 85 ca 00 00
	00		 jne	 $LN13@SavePicThr
  00be7	8b 85 88 fd ff
	ff		 mov	 eax, DWORD PTR _max$[ebp+4]
  00bed	3b 85 5c fd ff
	ff		 cmp	 eax, DWORD PTR _val4$[ebp+4]
  00bf3	0f 85 b8 00 00
	00		 jne	 $LN13@SavePicThr

; 801  : 				{
; 802  : 					memset(pdlg->Picimg.data,0,IMGSIZE);

  00bf9	68 00 30 2a 00	 push	 2764800			; 002a3000H
  00bfe	6a 00		 push	 0
  00c00	8b 8d 98 fd ff
	ff		 mov	 ecx, DWORD PTR _pdlg$[ebp]
  00c06	8b 91 3c 04 00
	00		 mov	 edx, DWORD PTR [ecx+1084]
  00c0c	52		 push	 edx
  00c0d	e8 00 00 00 00	 call	 _memset
  00c12	83 c4 0c	 add	 esp, 12			; 0000000cH

; 803  : 					memcpy(pdlg->Picimg.data,&picBuf[3][0],IMGSIZE);

  00c15	68 00 30 2a 00	 push	 2764800			; 002a3000H
  00c1a	b8 00 30 2a 00	 mov	 eax, 2764800		; 002a3000H
  00c1f	6b c0 03	 imul	 eax, 3
  00c22	b9 01 00 00 00	 mov	 ecx, 1
  00c27	6b c9 00	 imul	 ecx, 0
  00c2a	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _picBuf[eax+ecx]
  00c31	52		 push	 edx
  00c32	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _pdlg$[ebp]
  00c38	8b 88 3c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1084]
  00c3e	51		 push	 ecx
  00c3f	e8 00 00 00 00	 call	 _memcpy
  00c44	83 c4 0c	 add	 esp, 12			; 0000000cH

; 804  : 					imshow("view", pdlg->Picimg);

  00c47	8b 95 98 fd ff
	ff		 mov	 edx, DWORD PTR _pdlg$[ebp]
  00c4d	81 c2 2c 04 00
	00		 add	 edx, 1068		; 0000042cH
  00c53	52		 push	 edx
  00c54	8d 8d 40 fb ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  00c5a	e8 00 00 00 00	 call	 ??0_InputArray@cv@@QAE@ABVMat@1@@Z ; cv::_InputArray::_InputArray
  00c5f	c6 45 fc 2b	 mov	 BYTE PTR __$EHRec$[ebp+8], 43 ; 0000002bH
  00c63	68 00 00 00 00	 push	 OFFSET $SG4294957259
  00c68	8d 8d dc fc ff
	ff		 lea	 ecx, DWORD PTR $T44[ebp]
  00c6e	e8 00 00 00 00	 call	 ??0String@cv@@QAE@PBD@Z	; cv::String::String
  00c73	c6 45 fc 2c	 mov	 BYTE PTR __$EHRec$[ebp+8], 44 ; 0000002cH
  00c77	8d 85 40 fb ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  00c7d	50		 push	 eax
  00c7e	8d 8d dc fc ff
	ff		 lea	 ecx, DWORD PTR $T44[ebp]
  00c84	51		 push	 ecx
  00c85	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?imshow@cv@@YAXABVString@1@ABV_InputArray@1@@Z
  00c8b	83 c4 08	 add	 esp, 8
  00c8e	c6 45 fc 2b	 mov	 BYTE PTR __$EHRec$[ebp+8], 43 ; 0000002bH
  00c92	8d 8d dc fc ff
	ff		 lea	 ecx, DWORD PTR $T44[ebp]
  00c98	e8 00 00 00 00	 call	 ??1String@cv@@QAE@XZ	; cv::String::~String
  00c9d	c6 45 fc 21	 mov	 BYTE PTR __$EHRec$[ebp+8], 33 ; 00000021H
  00ca1	8d 8d 40 fb ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  00ca7	e8 00 00 00 00	 call	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
  00cac	e9 23 05 00 00	 jmp	 $LN1@SavePicThr
$LN13@SavePicThr:

; 805  : 					//pdlg->SetDlgItemInt(IDC_DOCTOR_EDIT,4);
; 806  : 				//	imwrite(t_imgpath, pdlg->Picimg);
; 807  : 				}
; 808  : 				else if(max == val5)

  00cb1	8b 95 84 fd ff
	ff		 mov	 edx, DWORD PTR _max$[ebp]
  00cb7	3b 95 00 fd ff
	ff		 cmp	 edx, DWORD PTR _val5$[ebp]
  00cbd	0f 85 ca 00 00
	00		 jne	 $LN11@SavePicThr
  00cc3	8b 85 88 fd ff
	ff		 mov	 eax, DWORD PTR _max$[ebp+4]
  00cc9	3b 85 04 fd ff
	ff		 cmp	 eax, DWORD PTR _val5$[ebp+4]
  00ccf	0f 85 b8 00 00
	00		 jne	 $LN11@SavePicThr

; 809  : 				{
; 810  : 					memset(pdlg->Picimg.data,0,IMGSIZE);

  00cd5	68 00 30 2a 00	 push	 2764800			; 002a3000H
  00cda	6a 00		 push	 0
  00cdc	8b 8d 98 fd ff
	ff		 mov	 ecx, DWORD PTR _pdlg$[ebp]
  00ce2	8b 91 3c 04 00
	00		 mov	 edx, DWORD PTR [ecx+1084]
  00ce8	52		 push	 edx
  00ce9	e8 00 00 00 00	 call	 _memset
  00cee	83 c4 0c	 add	 esp, 12			; 0000000cH

; 811  : 					memcpy(pdlg->Picimg.data,&picBuf[4][0],IMGSIZE);

  00cf1	68 00 30 2a 00	 push	 2764800			; 002a3000H
  00cf6	b8 00 30 2a 00	 mov	 eax, 2764800		; 002a3000H
  00cfb	c1 e0 02	 shl	 eax, 2
  00cfe	b9 01 00 00 00	 mov	 ecx, 1
  00d03	6b c9 00	 imul	 ecx, 0
  00d06	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _picBuf[eax+ecx]
  00d0d	52		 push	 edx
  00d0e	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _pdlg$[ebp]
  00d14	8b 88 3c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1084]
  00d1a	51		 push	 ecx
  00d1b	e8 00 00 00 00	 call	 _memcpy
  00d20	83 c4 0c	 add	 esp, 12			; 0000000cH

; 812  : 					imshow("view", pdlg->Picimg);

  00d23	8b 95 98 fd ff
	ff		 mov	 edx, DWORD PTR _pdlg$[ebp]
  00d29	81 c2 2c 04 00
	00		 add	 edx, 1068		; 0000042cH
  00d2f	52		 push	 edx
  00d30	8d 8d 20 fc ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp]
  00d36	e8 00 00 00 00	 call	 ??0_InputArray@cv@@QAE@ABVMat@1@@Z ; cv::_InputArray::_InputArray
  00d3b	c6 45 fc 2d	 mov	 BYTE PTR __$EHRec$[ebp+8], 45 ; 0000002dH
  00d3f	68 00 00 00 00	 push	 OFFSET $SG4294957258
  00d44	8d 8d bc fc ff
	ff		 lea	 ecx, DWORD PTR $T40[ebp]
  00d4a	e8 00 00 00 00	 call	 ??0String@cv@@QAE@PBD@Z	; cv::String::String
  00d4f	c6 45 fc 2e	 mov	 BYTE PTR __$EHRec$[ebp+8], 46 ; 0000002eH
  00d53	8d 85 20 fc ff
	ff		 lea	 eax, DWORD PTR $T27[ebp]
  00d59	50		 push	 eax
  00d5a	8d 8d bc fc ff
	ff		 lea	 ecx, DWORD PTR $T40[ebp]
  00d60	51		 push	 ecx
  00d61	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?imshow@cv@@YAXABVString@1@ABV_InputArray@1@@Z
  00d67	83 c4 08	 add	 esp, 8
  00d6a	c6 45 fc 2d	 mov	 BYTE PTR __$EHRec$[ebp+8], 45 ; 0000002dH
  00d6e	8d 8d bc fc ff
	ff		 lea	 ecx, DWORD PTR $T40[ebp]
  00d74	e8 00 00 00 00	 call	 ??1String@cv@@QAE@XZ	; cv::String::~String
  00d79	c6 45 fc 21	 mov	 BYTE PTR __$EHRec$[ebp+8], 33 ; 00000021H
  00d7d	8d 8d 20 fc ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp]
  00d83	e8 00 00 00 00	 call	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
  00d88	e9 47 04 00 00	 jmp	 $LN1@SavePicThr
$LN11@SavePicThr:

; 813  : 					//pdlg->SetDlgItemInt(IDC_DOCTOR_EDIT,5);
; 814  : 				//	imwrite(t_imgpath, pdlg->Picimg);
; 815  : 				}
; 816  : 				else if(max == val6)

  00d8d	8b 95 84 fd ff
	ff		 mov	 edx, DWORD PTR _max$[ebp]
  00d93	3b 95 4c fd ff
	ff		 cmp	 edx, DWORD PTR _val6$[ebp]
  00d99	0f 85 ca 00 00
	00		 jne	 $LN9@SavePicThr
  00d9f	8b 85 88 fd ff
	ff		 mov	 eax, DWORD PTR _max$[ebp+4]
  00da5	3b 85 50 fd ff
	ff		 cmp	 eax, DWORD PTR _val6$[ebp+4]
  00dab	0f 85 b8 00 00
	00		 jne	 $LN9@SavePicThr

; 817  : 				{
; 818  : 					memset(pdlg->Picimg.data,0,IMGSIZE);

  00db1	68 00 30 2a 00	 push	 2764800			; 002a3000H
  00db6	6a 00		 push	 0
  00db8	8b 8d 98 fd ff
	ff		 mov	 ecx, DWORD PTR _pdlg$[ebp]
  00dbe	8b 91 3c 04 00
	00		 mov	 edx, DWORD PTR [ecx+1084]
  00dc4	52		 push	 edx
  00dc5	e8 00 00 00 00	 call	 _memset
  00dca	83 c4 0c	 add	 esp, 12			; 0000000cH

; 819  : 					memcpy(pdlg->Picimg.data,&picBuf[5][0],IMGSIZE);

  00dcd	68 00 30 2a 00	 push	 2764800			; 002a3000H
  00dd2	b8 00 30 2a 00	 mov	 eax, 2764800		; 002a3000H
  00dd7	6b c0 05	 imul	 eax, 5
  00dda	b9 01 00 00 00	 mov	 ecx, 1
  00ddf	6b c9 00	 imul	 ecx, 0
  00de2	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _picBuf[eax+ecx]
  00de9	52		 push	 edx
  00dea	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _pdlg$[ebp]
  00df0	8b 88 3c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1084]
  00df6	51		 push	 ecx
  00df7	e8 00 00 00 00	 call	 _memcpy
  00dfc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 820  : 					imshow("view", pdlg->Picimg);

  00dff	8b 95 98 fd ff
	ff		 mov	 edx, DWORD PTR _pdlg$[ebp]
  00e05	81 c2 2c 04 00
	00		 add	 edx, 1068		; 0000042cH
  00e0b	52		 push	 edx
  00e0c	8d 8d a0 fb ff
	ff		 lea	 ecx, DWORD PTR $T19[ebp]
  00e12	e8 00 00 00 00	 call	 ??0_InputArray@cv@@QAE@ABVMat@1@@Z ; cv::_InputArray::_InputArray
  00e17	c6 45 fc 2f	 mov	 BYTE PTR __$EHRec$[ebp+8], 47 ; 0000002fH
  00e1b	68 00 00 00 00	 push	 OFFSET $SG4294957257
  00e20	8d 8d f4 fc ff
	ff		 lea	 ecx, DWORD PTR $T47[ebp]
  00e26	e8 00 00 00 00	 call	 ??0String@cv@@QAE@PBD@Z	; cv::String::String
  00e2b	c6 45 fc 30	 mov	 BYTE PTR __$EHRec$[ebp+8], 48 ; 00000030H
  00e2f	8d 85 a0 fb ff
	ff		 lea	 eax, DWORD PTR $T19[ebp]
  00e35	50		 push	 eax
  00e36	8d 8d f4 fc ff
	ff		 lea	 ecx, DWORD PTR $T47[ebp]
  00e3c	51		 push	 ecx
  00e3d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?imshow@cv@@YAXABVString@1@ABV_InputArray@1@@Z
  00e43	83 c4 08	 add	 esp, 8
  00e46	c6 45 fc 2f	 mov	 BYTE PTR __$EHRec$[ebp+8], 47 ; 0000002fH
  00e4a	8d 8d f4 fc ff
	ff		 lea	 ecx, DWORD PTR $T47[ebp]
  00e50	e8 00 00 00 00	 call	 ??1String@cv@@QAE@XZ	; cv::String::~String
  00e55	c6 45 fc 21	 mov	 BYTE PTR __$EHRec$[ebp+8], 33 ; 00000021H
  00e59	8d 8d a0 fb ff
	ff		 lea	 ecx, DWORD PTR $T19[ebp]
  00e5f	e8 00 00 00 00	 call	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
  00e64	e9 6b 03 00 00	 jmp	 $LN1@SavePicThr
$LN9@SavePicThr:

; 821  : 				//	pdlg->SetDlgItemInt(IDC_DOCTOR_EDIT,6);
; 822  : 				//	imwrite(t_imgpath, pdlg->Picimg);
; 823  : 				}
; 824  : 				else if(max == val7)

  00e69	8b 95 84 fd ff
	ff		 mov	 edx, DWORD PTR _max$[ebp]
  00e6f	3b 95 78 fd ff
	ff		 cmp	 edx, DWORD PTR _val7$[ebp]
  00e75	0f 85 ca 00 00
	00		 jne	 $LN7@SavePicThr
  00e7b	8b 85 88 fd ff
	ff		 mov	 eax, DWORD PTR _max$[ebp+4]
  00e81	3b 85 7c fd ff
	ff		 cmp	 eax, DWORD PTR _val7$[ebp+4]
  00e87	0f 85 b8 00 00
	00		 jne	 $LN7@SavePicThr

; 825  : 				{
; 826  : 					memset(pdlg->Picimg.data,0,IMGSIZE);

  00e8d	68 00 30 2a 00	 push	 2764800			; 002a3000H
  00e92	6a 00		 push	 0
  00e94	8b 8d 98 fd ff
	ff		 mov	 ecx, DWORD PTR _pdlg$[ebp]
  00e9a	8b 91 3c 04 00
	00		 mov	 edx, DWORD PTR [ecx+1084]
  00ea0	52		 push	 edx
  00ea1	e8 00 00 00 00	 call	 _memset
  00ea6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 827  : 					memcpy(pdlg->Picimg.data,&picBuf[6][0],IMGSIZE);

  00ea9	68 00 30 2a 00	 push	 2764800			; 002a3000H
  00eae	b8 00 30 2a 00	 mov	 eax, 2764800		; 002a3000H
  00eb3	6b c0 06	 imul	 eax, 6
  00eb6	b9 01 00 00 00	 mov	 ecx, 1
  00ebb	6b c9 00	 imul	 ecx, 0
  00ebe	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _picBuf[eax+ecx]
  00ec5	52		 push	 edx
  00ec6	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _pdlg$[ebp]
  00ecc	8b 88 3c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1084]
  00ed2	51		 push	 ecx
  00ed3	e8 00 00 00 00	 call	 _memcpy
  00ed8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 828  : 					imshow("view", pdlg->Picimg);

  00edb	8b 95 98 fd ff
	ff		 mov	 edx, DWORD PTR _pdlg$[ebp]
  00ee1	81 c2 2c 04 00
	00		 add	 edx, 1068		; 0000042cH
  00ee7	52		 push	 edx
  00ee8	8d 8d 00 fc ff
	ff		 lea	 ecx, DWORD PTR $T25[ebp]
  00eee	e8 00 00 00 00	 call	 ??0_InputArray@cv@@QAE@ABVMat@1@@Z ; cv::_InputArray::_InputArray
  00ef3	c6 45 fc 31	 mov	 BYTE PTR __$EHRec$[ebp+8], 49 ; 00000031H
  00ef7	68 00 00 00 00	 push	 OFFSET $SG4294957256
  00efc	8d 8d ec fc ff
	ff		 lea	 ecx, DWORD PTR $T46[ebp]
  00f02	e8 00 00 00 00	 call	 ??0String@cv@@QAE@PBD@Z	; cv::String::String
  00f07	c6 45 fc 32	 mov	 BYTE PTR __$EHRec$[ebp+8], 50 ; 00000032H
  00f0b	8d 85 00 fc ff
	ff		 lea	 eax, DWORD PTR $T25[ebp]
  00f11	50		 push	 eax
  00f12	8d 8d ec fc ff
	ff		 lea	 ecx, DWORD PTR $T46[ebp]
  00f18	51		 push	 ecx
  00f19	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?imshow@cv@@YAXABVString@1@ABV_InputArray@1@@Z
  00f1f	83 c4 08	 add	 esp, 8
  00f22	c6 45 fc 31	 mov	 BYTE PTR __$EHRec$[ebp+8], 49 ; 00000031H
  00f26	8d 8d ec fc ff
	ff		 lea	 ecx, DWORD PTR $T46[ebp]
  00f2c	e8 00 00 00 00	 call	 ??1String@cv@@QAE@XZ	; cv::String::~String
  00f31	c6 45 fc 21	 mov	 BYTE PTR __$EHRec$[ebp+8], 33 ; 00000021H
  00f35	8d 8d 00 fc ff
	ff		 lea	 ecx, DWORD PTR $T25[ebp]
  00f3b	e8 00 00 00 00	 call	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
  00f40	e9 8f 02 00 00	 jmp	 $LN1@SavePicThr
$LN7@SavePicThr:

; 829  : 					//pdlg->SetDlgItemInt(IDC_DOCTOR_EDIT,7);
; 830  : 				//	imwrite(t_imgpath, pdlg->Picimg);
; 831  : 				}
; 832  : 				else if(max == val8)

  00f45	8b 95 84 fd ff
	ff		 mov	 edx, DWORD PTR _max$[ebp]
  00f4b	3b 95 40 fd ff
	ff		 cmp	 edx, DWORD PTR _val8$[ebp]
  00f51	0f 85 ca 00 00
	00		 jne	 $LN5@SavePicThr
  00f57	8b 85 88 fd ff
	ff		 mov	 eax, DWORD PTR _max$[ebp+4]
  00f5d	3b 85 44 fd ff
	ff		 cmp	 eax, DWORD PTR _val8$[ebp+4]
  00f63	0f 85 b8 00 00
	00		 jne	 $LN5@SavePicThr

; 833  : 				{
; 834  : 					memset(pdlg->Picimg.data,0,IMGSIZE);

  00f69	68 00 30 2a 00	 push	 2764800			; 002a3000H
  00f6e	6a 00		 push	 0
  00f70	8b 8d 98 fd ff
	ff		 mov	 ecx, DWORD PTR _pdlg$[ebp]
  00f76	8b 91 3c 04 00
	00		 mov	 edx, DWORD PTR [ecx+1084]
  00f7c	52		 push	 edx
  00f7d	e8 00 00 00 00	 call	 _memset
  00f82	83 c4 0c	 add	 esp, 12			; 0000000cH

; 835  : 					memcpy(pdlg->Picimg.data,&picBuf[7][0],IMGSIZE);

  00f85	68 00 30 2a 00	 push	 2764800			; 002a3000H
  00f8a	b8 00 30 2a 00	 mov	 eax, 2764800		; 002a3000H
  00f8f	6b c0 07	 imul	 eax, 7
  00f92	b9 01 00 00 00	 mov	 ecx, 1
  00f97	6b c9 00	 imul	 ecx, 0
  00f9a	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _picBuf[eax+ecx]
  00fa1	52		 push	 edx
  00fa2	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _pdlg$[ebp]
  00fa8	8b 88 3c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1084]
  00fae	51		 push	 ecx
  00faf	e8 00 00 00 00	 call	 _memcpy
  00fb4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 836  : 					imshow("view", pdlg->Picimg);

  00fb7	8b 95 98 fd ff
	ff		 mov	 edx, DWORD PTR _pdlg$[ebp]
  00fbd	81 c2 2c 04 00
	00		 add	 edx, 1068		; 0000042cH
  00fc3	52		 push	 edx
  00fc4	8d 8d 60 fb ff
	ff		 lea	 ecx, DWORD PTR $T15[ebp]
  00fca	e8 00 00 00 00	 call	 ??0_InputArray@cv@@QAE@ABVMat@1@@Z ; cv::_InputArray::_InputArray
  00fcf	c6 45 fc 33	 mov	 BYTE PTR __$EHRec$[ebp+8], 51 ; 00000033H
  00fd3	68 00 00 00 00	 push	 OFFSET $SG4294957255
  00fd8	8d 8d e4 fc ff
	ff		 lea	 ecx, DWORD PTR $T45[ebp]
  00fde	e8 00 00 00 00	 call	 ??0String@cv@@QAE@PBD@Z	; cv::String::String
  00fe3	c6 45 fc 34	 mov	 BYTE PTR __$EHRec$[ebp+8], 52 ; 00000034H
  00fe7	8d 85 60 fb ff
	ff		 lea	 eax, DWORD PTR $T15[ebp]
  00fed	50		 push	 eax
  00fee	8d 8d e4 fc ff
	ff		 lea	 ecx, DWORD PTR $T45[ebp]
  00ff4	51		 push	 ecx
  00ff5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?imshow@cv@@YAXABVString@1@ABV_InputArray@1@@Z
  00ffb	83 c4 08	 add	 esp, 8
  00ffe	c6 45 fc 33	 mov	 BYTE PTR __$EHRec$[ebp+8], 51 ; 00000033H
  01002	8d 8d e4 fc ff
	ff		 lea	 ecx, DWORD PTR $T45[ebp]
  01008	e8 00 00 00 00	 call	 ??1String@cv@@QAE@XZ	; cv::String::~String
  0100d	c6 45 fc 21	 mov	 BYTE PTR __$EHRec$[ebp+8], 33 ; 00000021H
  01011	8d 8d 60 fb ff
	ff		 lea	 ecx, DWORD PTR $T15[ebp]
  01017	e8 00 00 00 00	 call	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
  0101c	e9 b3 01 00 00	 jmp	 $LN1@SavePicThr
$LN5@SavePicThr:

; 837  : 					//pdlg->SetDlgItemInt(IDC_DOCTOR_EDIT,8);
; 838  : 				//	imwrite(t_imgpath, pdlg->Picimg);
; 839  : 				}
; 840  : 				else if(max == val9)

  01021	8b 95 84 fd ff
	ff		 mov	 edx, DWORD PTR _max$[ebp]
  01027	3b 95 0c fd ff
	ff		 cmp	 edx, DWORD PTR _val9$[ebp]
  0102d	0f 85 ca 00 00
	00		 jne	 $LN3@SavePicThr
  01033	8b 85 88 fd ff
	ff		 mov	 eax, DWORD PTR _max$[ebp+4]
  01039	3b 85 10 fd ff
	ff		 cmp	 eax, DWORD PTR _val9$[ebp+4]
  0103f	0f 85 b8 00 00
	00		 jne	 $LN3@SavePicThr

; 841  : 				{
; 842  : 					memset(pdlg->Picimg.data,0,IMGSIZE);

  01045	68 00 30 2a 00	 push	 2764800			; 002a3000H
  0104a	6a 00		 push	 0
  0104c	8b 8d 98 fd ff
	ff		 mov	 ecx, DWORD PTR _pdlg$[ebp]
  01052	8b 91 3c 04 00
	00		 mov	 edx, DWORD PTR [ecx+1084]
  01058	52		 push	 edx
  01059	e8 00 00 00 00	 call	 _memset
  0105e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 843  : 					memcpy(pdlg->Picimg.data,&picBuf[8][0],IMGSIZE);

  01061	68 00 30 2a 00	 push	 2764800			; 002a3000H
  01066	b8 00 30 2a 00	 mov	 eax, 2764800		; 002a3000H
  0106b	c1 e0 03	 shl	 eax, 3
  0106e	b9 01 00 00 00	 mov	 ecx, 1
  01073	6b c9 00	 imul	 ecx, 0
  01076	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _picBuf[eax+ecx]
  0107d	52		 push	 edx
  0107e	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _pdlg$[ebp]
  01084	8b 88 3c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1084]
  0108a	51		 push	 ecx
  0108b	e8 00 00 00 00	 call	 _memcpy
  01090	83 c4 0c	 add	 esp, 12			; 0000000cH

; 844  : 					imshow("view", pdlg->Picimg);

  01093	8b 95 98 fd ff
	ff		 mov	 edx, DWORD PTR _pdlg$[ebp]
  01099	81 c2 2c 04 00
	00		 add	 edx, 1068		; 0000042cH
  0109f	52		 push	 edx
  010a0	8d 8d e0 fb ff
	ff		 lea	 ecx, DWORD PTR $T23[ebp]
  010a6	e8 00 00 00 00	 call	 ??0_InputArray@cv@@QAE@ABVMat@1@@Z ; cv::_InputArray::_InputArray
  010ab	c6 45 fc 35	 mov	 BYTE PTR __$EHRec$[ebp+8], 53 ; 00000035H
  010af	68 00 00 00 00	 push	 OFFSET $SG4294957254
  010b4	8d 8d d4 fc ff
	ff		 lea	 ecx, DWORD PTR $T43[ebp]
  010ba	e8 00 00 00 00	 call	 ??0String@cv@@QAE@PBD@Z	; cv::String::String
  010bf	c6 45 fc 36	 mov	 BYTE PTR __$EHRec$[ebp+8], 54 ; 00000036H
  010c3	8d 85 e0 fb ff
	ff		 lea	 eax, DWORD PTR $T23[ebp]
  010c9	50		 push	 eax
  010ca	8d 8d d4 fc ff
	ff		 lea	 ecx, DWORD PTR $T43[ebp]
  010d0	51		 push	 ecx
  010d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?imshow@cv@@YAXABVString@1@ABV_InputArray@1@@Z
  010d7	83 c4 08	 add	 esp, 8
  010da	c6 45 fc 35	 mov	 BYTE PTR __$EHRec$[ebp+8], 53 ; 00000035H
  010de	8d 8d d4 fc ff
	ff		 lea	 ecx, DWORD PTR $T43[ebp]
  010e4	e8 00 00 00 00	 call	 ??1String@cv@@QAE@XZ	; cv::String::~String
  010e9	c6 45 fc 21	 mov	 BYTE PTR __$EHRec$[ebp+8], 33 ; 00000021H
  010ed	8d 8d e0 fb ff
	ff		 lea	 ecx, DWORD PTR $T23[ebp]
  010f3	e8 00 00 00 00	 call	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
  010f8	e9 d7 00 00 00	 jmp	 $LN1@SavePicThr
$LN3@SavePicThr:

; 845  : 					//pdlg->SetDlgItemInt(IDC_DOCTOR_EDIT,9);
; 846  : 				//	imwrite(t_imgpath, pdlg->Picimg);
; 847  : 				}
; 848  : 				else if(max == val10)

  010fd	8b 95 84 fd ff
	ff		 mov	 edx, DWORD PTR _max$[ebp]
  01103	3b 95 34 fd ff
	ff		 cmp	 edx, DWORD PTR _val10$[ebp]
  01109	0f 85 c5 00 00
	00		 jne	 $LN1@SavePicThr
  0110f	8b 85 88 fd ff
	ff		 mov	 eax, DWORD PTR _max$[ebp+4]
  01115	3b 85 38 fd ff
	ff		 cmp	 eax, DWORD PTR _val10$[ebp+4]
  0111b	0f 85 b3 00 00
	00		 jne	 $LN1@SavePicThr

; 849  : 				{
; 850  : 					memset(pdlg->Picimg.data,0,IMGSIZE);

  01121	68 00 30 2a 00	 push	 2764800			; 002a3000H
  01126	6a 00		 push	 0
  01128	8b 8d 98 fd ff
	ff		 mov	 ecx, DWORD PTR _pdlg$[ebp]
  0112e	8b 91 3c 04 00
	00		 mov	 edx, DWORD PTR [ecx+1084]
  01134	52		 push	 edx
  01135	e8 00 00 00 00	 call	 _memset
  0113a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 851  : 					memcpy(pdlg->Picimg.data,&picBuf[9][0],IMGSIZE);

  0113d	68 00 30 2a 00	 push	 2764800			; 002a3000H
  01142	b8 00 30 2a 00	 mov	 eax, 2764800		; 002a3000H
  01147	6b c0 09	 imul	 eax, 9
  0114a	b9 01 00 00 00	 mov	 ecx, 1
  0114f	6b c9 00	 imul	 ecx, 0
  01152	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR _picBuf[eax+ecx]
  01159	52		 push	 edx
  0115a	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _pdlg$[ebp]
  01160	8b 88 3c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1084]
  01166	51		 push	 ecx
  01167	e8 00 00 00 00	 call	 _memcpy
  0116c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 852  : 					imshow("view", pdlg->Picimg);

  0116f	8b 95 98 fd ff
	ff		 mov	 edx, DWORD PTR _pdlg$[ebp]
  01175	81 c2 2c 04 00
	00		 add	 edx, 1068		; 0000042cH
  0117b	52		 push	 edx
  0117c	8d 8d 80 fb ff
	ff		 lea	 ecx, DWORD PTR $T17[ebp]
  01182	e8 00 00 00 00	 call	 ??0_InputArray@cv@@QAE@ABVMat@1@@Z ; cv::_InputArray::_InputArray
  01187	c6 45 fc 37	 mov	 BYTE PTR __$EHRec$[ebp+8], 55 ; 00000037H
  0118b	68 00 00 00 00	 push	 OFFSET $SG4294957253
  01190	8d 8d c4 fc ff
	ff		 lea	 ecx, DWORD PTR $T41[ebp]
  01196	e8 00 00 00 00	 call	 ??0String@cv@@QAE@PBD@Z	; cv::String::String
  0119b	c6 45 fc 38	 mov	 BYTE PTR __$EHRec$[ebp+8], 56 ; 00000038H
  0119f	8d 85 80 fb ff
	ff		 lea	 eax, DWORD PTR $T17[ebp]
  011a5	50		 push	 eax
  011a6	8d 8d c4 fc ff
	ff		 lea	 ecx, DWORD PTR $T41[ebp]
  011ac	51		 push	 ecx
  011ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?imshow@cv@@YAXABVString@1@ABV_InputArray@1@@Z
  011b3	83 c4 08	 add	 esp, 8
  011b6	c6 45 fc 37	 mov	 BYTE PTR __$EHRec$[ebp+8], 55 ; 00000037H
  011ba	8d 8d c4 fc ff
	ff		 lea	 ecx, DWORD PTR $T41[ebp]
  011c0	e8 00 00 00 00	 call	 ??1String@cv@@QAE@XZ	; cv::String::~String
  011c5	c6 45 fc 21	 mov	 BYTE PTR __$EHRec$[ebp+8], 33 ; 00000021H
  011c9	8d 8d 80 fb ff
	ff		 lea	 ecx, DWORD PTR $T17[ebp]
  011cf	e8 00 00 00 00	 call	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
$LN1@SavePicThr:

; 853  : 					//pdlg->SetDlgItemInt(IDC_DOCTOR_EDIT,10);
; 854  : 				//	imwrite(t_imgpath, pdlg->Picimg);
; 855  : 				}
; 856  : 			//	memset(picBuf[11],0,IMGSIZE+1);
; 857  : 				pdlg->m_bstartpicture = false;

  011d4	8b 95 98 fd ff
	ff		 mov	 edx, DWORD PTR _pdlg$[ebp]
  011da	c6 82 b0 01 00
	00 00		 mov	 BYTE PTR [edx+432], 0
$LN21@SavePicThr:

; 858  : 				//pdlg->m_bshowpause = false;
; 859  : 				//bshot = true;
; 860  : 			//	pdlg->SetDlgItemInt(IDC_AGE_EDIT,3);
; 861  : 			}
; 862  : 		}

  011e1	c6 45 fc 14	 mov	 BYTE PTR __$EHRec$[ebp+8], 20 ; 00000014H
  011e5	8d 4d d4	 lea	 ecx, DWORD PTR _t_imgpath$49[ebp]
  011e8	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN42@SavePicThr:

; 863  : 		Sleep(1);	

  011ed	6a 01		 push	 1
  011ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 864  : 	}

  011f5	e9 1c f1 ff ff	 jmp	 $LN100@SavePicThr
$LN45@SavePicThr:

; 865  : #endif
; 866  : 	//pdlg->SetDlgItemInt(IDC_AGE_EDIT,4);
; 867  : 	/*pdlg->m_bstartpicture = false;*/
; 868  : 	img.release();

  011fa	8d 8d 9c fd ff
	ff		 lea	 ecx, DWORD PTR _img$[ebp]
  01200	e8 00 00 00 00	 call	 ?release@Mat@cv@@QAEXXZ	; cv::Mat::release

; 869  : 	bshot = true;

  01205	c6 05 00 00 00
	00 01		 mov	 BYTE PTR _bshot, 1

; 870  : 	return 0;

  0120c	c7 85 08 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T48[ebp], 0
  01216	c6 45 fc 13	 mov	 BYTE PTR __$EHRec$[ebp+8], 19 ; 00000013H
  0121a	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _filter$[ebp]
  01220	e8 00 00 00 00	 call	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
  01225	c6 45 fc 12	 mov	 BYTE PTR __$EHRec$[ebp+8], 18 ; 00000012H
  01229	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _filter2$[ebp]
  0122f	e8 00 00 00 00	 call	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
  01234	c6 45 fc 11	 mov	 BYTE PTR __$EHRec$[ebp+8], 17 ; 00000011H
  01238	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _filter1$[ebp]
  0123e	e8 00 00 00 00	 call	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
  01243	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  01247	8d 8d 64 fe ff
	ff		 lea	 ecx, DWORD PTR _kernel2$[ebp]
  0124d	e8 00 00 00 00	 call	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
  01252	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  01256	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR _kernel1$[ebp]
  0125c	e8 00 00 00 00	 call	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
  01261	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  01265	8d 8d d4 fd ff
	ff		 lea	 ecx, DWORD PTR _meanstdev$[ebp]
  0126b	e8 00 00 00 00	 call	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
  01270	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  01274	8d 8d 0c fe ff
	ff		 lea	 ecx, DWORD PTR _laplac$[ebp]
  0127a	e8 00 00 00 00	 call	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
  0127f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  01283	8d 4d 9c	 lea	 ecx, DWORD PTR _gray$[ebp]
  01286	e8 00 00 00 00	 call	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
  0128b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  01292	8d 8d 9c fd ff
	ff		 lea	 ecx, DWORD PTR _img$[ebp]
  01298	e8 00 00 00 00	 call	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
  0129d	8b 85 08 fd ff
	ff		 mov	 eax, DWORD PTR $T48[ebp]

; 871  : }

  012a3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  012a6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  012ad	59		 pop	 ecx
  012ae	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  012b1	33 cd		 xor	 ecx, ebp
  012b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  012b8	8b e5		 mov	 esp, ebp
  012ba	5d		 pop	 ebp
  012bb	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$0:
  00000	8d 8d 9c fd ff
	ff		 lea	 ecx, DWORD PTR _img$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$1:
  0000b	8d 4d 9c	 lea	 ecx, DWORD PTR _gray$[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$2:
  00013	8d 8d 0c fe ff
	ff		 lea	 ecx, DWORD PTR _laplac$[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$3:
  0001e	8d 8d d4 fd ff
	ff		 lea	 ecx, DWORD PTR _meanstdev$[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$4:
  00029	8d 8d ac f9 ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0002f	e9 00 00 00 00	 jmp	 ??1?$Mat_@M@cv@@QAE@XZ
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$5:
  00034	8d 8d 54 fa ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  0003a	e9 00 00 00 00	 jmp	 ??1?$Mat_@M@cv@@QAE@XZ
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$6:
  0003f	8d 8d b4 fa ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00045	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$7:
  0004a	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR _kernel1$[ebp]
  00050	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$8:
  00055	8d 8d e4 f9 ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  0005b	e9 00 00 00 00	 jmp	 ??1?$Mat_@M@cv@@QAE@XZ
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$9:
  00060	8d 8d 1c fa ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00066	e9 00 00 00 00	 jmp	 ??1?$Mat_@M@cv@@QAE@XZ
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$10:
  0006b	8d 8d ec fa ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00071	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$11:
  00076	8d 8d 64 fe ff
	ff		 lea	 ecx, DWORD PTR _kernel2$[ebp]
  0007c	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$12:
  00081	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _filter1$[ebp]
  00087	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$13:
  0008c	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _filter2$[ebp]
  00092	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$14:
  00097	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _filter$[ebp]
  0009d	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$15:
  000a2	8d 8d d0 fb ff
	ff		 lea	 ecx, DWORD PTR $T22[ebp]
  000a8	e9 00 00 00 00	 jmp	 ??1_OutputArray@cv@@QAE@XZ
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$16:
  000ad	8d 8d f0 fb ff
	ff		 lea	 ecx, DWORD PTR $T24[ebp]
  000b3	e9 00 00 00 00	 jmp	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$17:
  000b8	8d 8d 70 fb ff
	ff		 lea	 ecx, DWORD PTR $T16[ebp]
  000be	e9 00 00 00 00	 jmp	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$18:
  000c3	8d 8d 90 fb ff
	ff		 lea	 ecx, DWORD PTR $T18[ebp]
  000c9	e9 00 00 00 00	 jmp	 ??1_OutputArray@cv@@QAE@XZ
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$19:
  000ce	8d 8d b0 fb ff
	ff		 lea	 ecx, DWORD PTR $T20[ebp]
  000d4	e9 00 00 00 00	 jmp	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$20:
  000d9	8d 8d 60 fc ff
	ff		 lea	 ecx, DWORD PTR $T31[ebp]
  000df	e9 00 00 00 00	 jmp	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$21:
  000e4	8d 8d 30 fb ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  000ea	e9 00 00 00 00	 jmp	 ??1_OutputArray@cv@@QAE@XZ
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$22:
  000ef	8d 8d 50 fb ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  000f5	e9 00 00 00 00	 jmp	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$23:
  000fa	8d 8d cc f8 ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00100	e9 00 00 00 00	 jmp	 ??1MatExpr@cv@@QAE@XZ
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$24:
  00105	8d 8d 70 fc ff
	ff		 lea	 ecx, DWORD PTR $T32[ebp]
  0010b	e9 00 00 00 00	 jmp	 ??1_OutputArray@cv@@QAE@XZ
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$25:
  00110	8d 8d 50 fc ff
	ff		 lea	 ecx, DWORD PTR $T30[ebp]
  00116	e9 00 00 00 00	 jmp	 ??1_OutputArray@cv@@QAE@XZ
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$26:
  0011b	8d 8d 80 fc ff
	ff		 lea	 ecx, DWORD PTR $T33[ebp]
  00121	e9 00 00 00 00	 jmp	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$27:
  00126	8d 4d d4	 lea	 ecx, DWORD PTR _t_imgpath$49[ebp]
  00129	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$28:
  0012e	8d 8d 30 fc ff
	ff		 lea	 ecx, DWORD PTR $T28[ebp]
  00134	e9 00 00 00 00	 jmp	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$29:
  00139	8d 8d cc fc ff
	ff		 lea	 ecx, DWORD PTR $T42[ebp]
  0013f	e9 00 00 00 00	 jmp	 ??1String@cv@@QAE@XZ	; cv::String::~String
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$30:
  00144	8d 8d 24 fb ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  0014a	e9 00 00 00 00	 jmp	 ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$31:
  0014f	8d 8d 10 fc ff
	ff		 lea	 ecx, DWORD PTR $T26[ebp]
  00155	e9 00 00 00 00	 jmp	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$32:
  0015a	8d 8d b4 fc ff
	ff		 lea	 ecx, DWORD PTR $T39[ebp]
  00160	e9 00 00 00 00	 jmp	 ??1String@cv@@QAE@XZ	; cv::String::~String
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$33:
  00165	8d 8d c0 fb ff
	ff		 lea	 ecx, DWORD PTR $T21[ebp]
  0016b	e9 00 00 00 00	 jmp	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$34:
  00170	8d 8d a4 fc ff
	ff		 lea	 ecx, DWORD PTR $T37[ebp]
  00176	e9 00 00 00 00	 jmp	 ??1String@cv@@QAE@XZ	; cv::String::~String
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$35:
  0017b	8d 8d 40 fc ff
	ff		 lea	 ecx, DWORD PTR $T29[ebp]
  00181	e9 00 00 00 00	 jmp	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$36:
  00186	8d 8d ac fc ff
	ff		 lea	 ecx, DWORD PTR $T38[ebp]
  0018c	e9 00 00 00 00	 jmp	 ??1String@cv@@QAE@XZ	; cv::String::~String
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$37:
  00191	8d 8d 40 fb ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  00197	e9 00 00 00 00	 jmp	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$38:
  0019c	8d 8d dc fc ff
	ff		 lea	 ecx, DWORD PTR $T44[ebp]
  001a2	e9 00 00 00 00	 jmp	 ??1String@cv@@QAE@XZ	; cv::String::~String
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$39:
  001a7	8d 8d 20 fc ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp]
  001ad	e9 00 00 00 00	 jmp	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$40:
  001b2	8d 8d bc fc ff
	ff		 lea	 ecx, DWORD PTR $T40[ebp]
  001b8	e9 00 00 00 00	 jmp	 ??1String@cv@@QAE@XZ	; cv::String::~String
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$41:
  001bd	8d 8d a0 fb ff
	ff		 lea	 ecx, DWORD PTR $T19[ebp]
  001c3	e9 00 00 00 00	 jmp	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$42:
  001c8	8d 8d f4 fc ff
	ff		 lea	 ecx, DWORD PTR $T47[ebp]
  001ce	e9 00 00 00 00	 jmp	 ??1String@cv@@QAE@XZ	; cv::String::~String
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$43:
  001d3	8d 8d 00 fc ff
	ff		 lea	 ecx, DWORD PTR $T25[ebp]
  001d9	e9 00 00 00 00	 jmp	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$44:
  001de	8d 8d ec fc ff
	ff		 lea	 ecx, DWORD PTR $T46[ebp]
  001e4	e9 00 00 00 00	 jmp	 ??1String@cv@@QAE@XZ	; cv::String::~String
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$45:
  001e9	8d 8d 60 fb ff
	ff		 lea	 ecx, DWORD PTR $T15[ebp]
  001ef	e9 00 00 00 00	 jmp	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$46:
  001f4	8d 8d e4 fc ff
	ff		 lea	 ecx, DWORD PTR $T45[ebp]
  001fa	e9 00 00 00 00	 jmp	 ??1String@cv@@QAE@XZ	; cv::String::~String
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$47:
  001ff	8d 8d e0 fb ff
	ff		 lea	 ecx, DWORD PTR $T23[ebp]
  00205	e9 00 00 00 00	 jmp	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$48:
  0020a	8d 8d d4 fc ff
	ff		 lea	 ecx, DWORD PTR $T43[ebp]
  00210	e9 00 00 00 00	 jmp	 ??1String@cv@@QAE@XZ	; cv::String::~String
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$49:
  00215	8d 8d 80 fb ff
	ff		 lea	 ecx, DWORD PTR $T17[ebp]
  0021b	e9 00 00 00 00	 jmp	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
__unwindfunclet$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$50:
  00220	8d 8d c4 fc ff
	ff		 lea	 ecx, DWORD PTR $T41[ebp]
  00226	e9 00 00 00 00	 jmp	 ??1String@cv@@QAE@XZ	; cv::String::~String
__ehhandler$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z:
  0022b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0022f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00232	8b 8a d4 f8 ff
	ff		 mov	 ecx, DWORD PTR [edx-1836]
  00238	33 c8		 xor	 ecx, eax
  0023a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0023f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00242	33 c8		 xor	 ecx, eax
  00244	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00249	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z
  0024e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z ENDP	; CEndoScopeMFCDlg::SavePicThreadProc
; Function compile flags: /Odtp
;	COMDAT ??1?$Mat_@M@cv@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$Mat_@M@cv@@QAE@XZ PROC				; cv::Mat_<float>::~Mat_<float>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$Mat_@M@cv@@QAE@XZ ENDP				; cv::Mat_<float>::~Mat_<float>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1MatExpr@cv@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1MatExpr@cv@@QAE@XZ PROC				; cv::MatExpr::~MatExpr, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1MatExpr@cv@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	83 c1 78	 add	 ecx, 120		; 00000078H
  00033	e8 00 00 00 00	 call	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
  00038	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0003c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	83 c1 40	 add	 ecx, 64			; 00000040H
  00042	e8 00 00 00 00	 call	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	83 c1 08	 add	 ecx, 8
  00054	e8 00 00 00 00	 call	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
  00059	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1MatExpr@cv@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__unwindfunclet$??1MatExpr@cv@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 40	 add	 ecx, 64			; 00000040H
  00011	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__ehhandler$??1MatExpr@cv@@QAE@XZ:
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1MatExpr@cv@@QAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1MatExpr@cv@@QAE@XZ ENDP				; cv::MatExpr::~MatExpr
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?ShotPicWindow@CEndoScopeMFCDlg@@QAEXXZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
_strPicNum$2 = -20					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?ShotPicWindow@CEndoScopeMFCDlg@@QAEXXZ PROC		; CEndoScopeMFCDlg::ShotPicWindow, COMDAT
; _this$ = ecx

; 874  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ShotPicWindow@CEndoScopeMFCDlg@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 875  : 	if (!bshot)

  0002b	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _bshot
  00032	85 c0		 test	 eax, eax
  00034	0f 85 d0 00 00
	00		 jne	 $LN5@ShotPicWin

; 876  : 	{
; 877  : 		if(!m_bstartpicture)

  0003a	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	0f b6 91 b0 01
	00 00		 movzx	 edx, BYTE PTR [ecx+432]
  00044	85 d2		 test	 edx, edx
  00046	75 0c		 jne	 SHORT $LN4@ShotPicWin

; 878  : 		{
; 879  : 			m_bstartpicture = true;

  00048	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	c6 80 b0 01 00
	00 01		 mov	 BYTE PTR [eax+432], 1

; 880  : 		}
; 881  : 		else

  00052	eb 05		 jmp	 SHORT $LN3@ShotPicWin
$LN4@ShotPicWin:

; 882  : 		{
; 883  : 			return;

  00054	e9 f2 00 00 00	 jmp	 $LN6@ShotPicWin
$LN3@ShotPicWin:

; 884  : 		}
; 885  : 		m_bwritepicture = true;

  00059	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	c6 81 ae 01 00
	00 01		 mov	 BYTE PTR [ecx+430], 1

; 886  : 		m_brealsavepic = false;

  00063	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00066	c6 82 af 01 00
	00 00		 mov	 BYTE PTR [edx+431], 0

; 887  : 		m_bshowpause = true;

  0006d	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00070	c6 80 b1 01 00
	00 01		 mov	 BYTE PTR [eax+433], 1

; 888  : 		pThreadPic = AfxBeginThread(SavePicThreadProc, this);		

  00077	6a 00		 push	 0
  00079	6a 00		 push	 0
  0007b	6a 00		 push	 0
  0007d	6a 00		 push	 0
  0007f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	51		 push	 ecx
  00083	68 00 00 00 00	 push	 OFFSET ?SavePicThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z ; CEndoScopeMFCDlg::SavePicThreadProc
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AfxBeginThread@@YGPAVCWinThread@@P6AIPAX@Z0HIKPAU_SECURITY_ATTRIBUTES@@@Z
  0008e	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00091	89 82 c0 01 00
	00		 mov	 DWORD PTR [edx+448], eax

; 889  : 		m_nPic++;

  00097	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0009a	8b 88 14 02 00
	00		 mov	 ecx, DWORD PTR [eax+532]
  000a0	83 c1 01	 add	 ecx, 1
  000a3	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  000a6	89 8a 14 02 00
	00		 mov	 DWORD PTR [edx+532], ecx

; 890  : 		CString strPicNum;

  000ac	8d 4d ec	 lea	 ecx, DWORD PTR _strPicNum$2[ebp]
  000af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000b5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 891  : 		strPicNum.Format(_T("%d"), m_nPic);

  000bc	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000bf	8b 88 14 02 00
	00		 mov	 ecx, DWORD PTR [eax+532]
  000c5	51		 push	 ecx
  000c6	68 00 00 00 00	 push	 OFFSET $SG4294957252
  000cb	8d 55 ec	 lea	 edx, DWORD PTR _strPicNum$2[ebp]
  000ce	52		 push	 edx
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 892  : 		GetDlgItem(IDC_IMAGENUM_INFO_STATIC)->SetWindowText(strPicNum);

  000d8	8d 4d ec	 lea	 ecx, DWORD PTR _strPicNum$2[ebp]
  000db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  000e1	50		 push	 eax
  000e2	68 0a 04 00 00	 push	 1034			; 0000040aH
  000e7	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  000f0	8b c8		 mov	 ecx, eax
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 893  : 	}

  000f8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ff	8d 4d ec	 lea	 ecx, DWORD PTR _strPicNum$2[ebp]
  00102	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 894  : 	else

  00108	eb 38		 jmp	 SHORT $LN2@ShotPicWin
$LN5@ShotPicWin:

; 895  : 	{
; 896  : 		m_bshowpause = false;

  0010a	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0010d	c6 80 b1 01 00
	00 00		 mov	 BYTE PTR [eax+433], 0

; 897  : 		//m_dwcap.StopWritePic();
; 898  : 		//m_bwritepicture = false;
; 899  : 		if (m_eCurrent == EDS_Paused)

  00114	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00117	83 b9 80 04 00
	00 02		 cmp	 DWORD PTR [ecx+1152], 2
  0011e	75 1b		 jne	 SHORT $LN1@ShotPicWin

; 900  : 		{
; 901  : 			m_dwcap.Run();

  00120	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00123	81 c1 18 02 00
	00		 add	 ecx, 536		; 00000218H
  00129	e8 00 00 00 00	 call	 ?Run@CEDSCapture@@QAEXXZ ; CEDSCapture::Run

; 902  : 			m_eCurrent = EDS_Running;

  0012e	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00131	c7 82 80 04 00
	00 03 00 00 00	 mov	 DWORD PTR [edx+1152], 3
$LN1@ShotPicWin:

; 903  : 		}
; 904  : 		bshot = false;

  0013b	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _bshot, 0
$LN2@ShotPicWin:

; 905  : 	}
; 906  : 	//GetDlgItem(IDC_STILL)->SetFocus();//这个很重要，要将当前 窗口激活状态
; 907  : 	this->SetFocus();

  00142	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00145	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetFocus@CWnd@@QAEPAV1@XZ
$LN6@ShotPicWin:

; 908  : 	//bshot=!bshot;
; 909  : }

  0014b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0014e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00155	59		 pop	 ecx
  00156	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00159	33 cd		 xor	 ecx, ebp
  0015b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00160	8b e5		 mov	 esp, ebp
  00162	5d		 pop	 ebp
  00163	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ShotPicWindow@CEndoScopeMFCDlg@@QAEXXZ$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _strPicNum$2[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?ShotPicWindow@CEndoScopeMFCDlg@@QAEXXZ:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ShotPicWindow@CEndoScopeMFCDlg@@QAEXXZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ShotPicWindow@CEndoScopeMFCDlg@@QAEXXZ ENDP		; CEndoScopeMFCDlg::ShotPicWindow
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?GetSaveImgPath@CEndoScopeMFCDlg@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
_TEXT	SEGMENT
$T2 = -216						; size = 132
tv297 = -84						; size = 4
tv241 = -80						; size = 4
$T3 = -76						; size = 4
tv299 = -72						; size = 4
tv232 = -68						; size = 4
tv93 = -64						; size = 4
$T4 = -60						; size = 4
tv295 = -56						; size = 4
$T5 = -52						; size = 4
_this$ = -48						; size = 4
_tm$ = -44						; size = 12
_strFileName$ = -32					; size = 4
_fileend$ = -28						; size = 4
_t_sid$ = -24						; size = 4
_t_path$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_flag$ = 12						; size = 4
?GetSaveImgPath@CEndoScopeMFCDlg@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z PROC ; CEndoScopeMFCDlg::GetSaveImgPath, COMDAT
; _this$ = ecx

; 911  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetSaveImgPath@CEndoScopeMFCDlg@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx
  0002e	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T5[ebp], 0

; 912  : 	if(!g_bIsUpan)

  00035	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_bIsUpan@@3HA, 0 ; g_bIsUpan
  0003c	75 46		 jne	 SHORT $LN6@GetSaveImg

; 913  : 	{
; 914  : 		m_sdatapath = "DATA\\";

  0003e	68 00 00 00 00	 push	 OFFSET $SG4294957251
  00043	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	81 c1 a8 01 00
	00		 add	 ecx, 424		; 000001a8H
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 915  : 		if (!PathIsDirectory(m_sdatapath))

  00052	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	81 c1 a8 01 00
	00		 add	 ecx, 424		; 000001a8H
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00061	50		 push	 eax
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PathIsDirectoryA@4
  00068	85 c0		 test	 eax, eax
  0006a	75 18		 jne	 SHORT $LN6@GetSaveImg

; 916  : 		{
; 917  : 			::CreateDirectory(m_sdatapath, NULL);//创建目录,已有的话不影响  

  0006c	6a 00		 push	 0
  0006e	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	81 c1 a8 01 00
	00		 add	 ecx, 424		; 000001a8H
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0007d	50		 push	 eax
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDirectoryA@8
$LN6@GetSaveImg:

; 918  : 		}
; 919  : 	}
; 920  : 	CString t_path = m_sdatapath;

  00084	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  00087	05 a8 01 00 00	 add	 eax, 424		; 000001a8H
  0008c	50		 push	 eax
  0008d	8d 4d ec	 lea	 ecx, DWORD PTR _t_path$[ebp]
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00096	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 921  : 	CString t_sid;

  0009d	8d 4d e8	 lea	 ecx, DWORD PTR _t_sid$[ebp]
  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000a6	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 922  : 	GetDlgItem(IDC_NAME_EDIT)->EnableWindow(FALSE);

  000aa	6a 00		 push	 0
  000ac	68 ed 03 00 00	 push	 1005			; 000003edH
  000b1	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  000ba	8b c8		 mov	 ecx, eax
  000bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?EnableWindow@CWnd@@QAEHH@Z

; 923  : 	GetDlgItem(IDC_ID_EDIT)->EnableWindow(FALSE);

  000c2	6a 00		 push	 0
  000c4	68 ec 03 00 00	 push	 1004			; 000003ecH
  000c9	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  000cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  000d2	8b c8		 mov	 ecx, eax
  000d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?EnableWindow@CWnd@@QAEHH@Z

; 924  : 	GetDlgItem(IDC_SEX_EDIT)->EnableWindow(FALSE);

  000da	6a 00		 push	 0
  000dc	68 ee 03 00 00	 push	 1006			; 000003eeH
  000e1	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  000e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  000ea	8b c8		 mov	 ecx, eax
  000ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?EnableWindow@CWnd@@QAEHH@Z

; 925  : 	GetDlgItem(IDC_AGE_EDIT)->EnableWindow(FALSE);

  000f2	6a 00		 push	 0
  000f4	68 ef 03 00 00	 push	 1007			; 000003efH
  000f9	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  000fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00102	8b c8		 mov	 ecx, eax
  00104	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?EnableWindow@CWnd@@QAEHH@Z

; 926  : 	GetDlgItem(IDC_DOCTOR_EDIT)->EnableWindow(FALSE);

  0010a	6a 00		 push	 0
  0010c	68 f0 03 00 00	 push	 1008			; 000003f0H
  00111	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00114	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0011a	8b c8		 mov	 ecx, eax
  0011c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?EnableWindow@CWnd@@QAEHH@Z

; 927  : 	GetDlgItem(IDC_ID_EDIT)->GetWindowText(t_sid);

  00122	8d 4d e8	 lea	 ecx, DWORD PTR _t_sid$[ebp]
  00125	51		 push	 ecx
  00126	68 ec 03 00 00	 push	 1004			; 000003ecH
  0012b	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0012e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00134	8b c8		 mov	 ecx, eax
  00136	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetWindowTextA@CWnd@@QBEXAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z

; 928  : 	m_bInputInfo=true;

  0013c	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  0013f	c6 82 b3 01 00
	00 01		 mov	 BYTE PTR [edx+435], 1

; 929  : 	g_pPLC->OverEnter();

  00146	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0014c	e8 00 00 00 00	 call	 ?OverEnter@CPLC@@QAEHXZ	; CPLC::OverEnter

; 930  : 	t_sid.TrimLeft(_T(" "));//删除前面的空格

  00151	68 00 00 00 00	 push	 OFFSET $SG4294957250
  00156	8d 4d e8	 lea	 ecx, DWORD PTR _t_sid$[ebp]
  00159	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimLeft@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@PBD@Z

; 931  : 	t_sid.TrimRight(_T(" "));//删除后面的空格

  0015f	68 00 00 00 00	 push	 OFFSET $SG4294957249
  00164	8d 4d e8	 lea	 ecx, DWORD PTR _t_sid$[ebp]
  00167	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?TrimRight@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV12@PBD@Z

; 932  : 	if (t_sid.IsEmpty())

  0016d	8d 4d e8	 lea	 ecx, DWORD PTR _t_sid$[ebp]
  00170	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?IsEmpty@?$CSimpleStringT@D$00@ATL@@QBE_NXZ
  00176	0f b6 c0	 movzx	 eax, al
  00179	85 c0		 test	 eax, eax
  0017b	74 0e		 je	 SHORT $LN4@GetSaveImg

; 933  : 	{
; 934  : 		t_sid = _T("temp");

  0017d	68 00 00 00 00	 push	 OFFSET $SG4294957248
  00182	8d 4d e8	 lea	 ecx, DWORD PTR _t_sid$[ebp]
  00185	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
$LN4@GetSaveImg:

; 935  : 	}
; 936  : 	t_path.Append(t_sid);

  0018b	8d 4d e8	 lea	 ecx, DWORD PTR _t_sid$[ebp]
  0018e	51		 push	 ecx
  0018f	8d 4d ec	 lea	 ecx, DWORD PTR _t_path$[ebp]
  00192	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Append@?$CSimpleStringT@D$00@ATL@@QAEXABV12@@Z

; 937  : 	if (!PathIsDirectory(t_path))

  00198	8d 4d ec	 lea	 ecx, DWORD PTR _t_path$[ebp]
  0019b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  001a1	50		 push	 eax
  001a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PathIsDirectoryA@4
  001a8	85 c0		 test	 eax, eax
  001aa	75 12		 jne	 SHORT $LN3@GetSaveImg

; 938  : 	{
; 939  : 		::CreateDirectory(t_path, NULL);//创建目录,已有的话不影响  

  001ac	6a 00		 push	 0
  001ae	8d 4d ec	 lea	 ecx, DWORD PTR _t_path$[ebp]
  001b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  001b7	50		 push	 eax
  001b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDirectoryA@8
$LN3@GetSaveImg:

; 940  : 	}
; 941  : 	t_path.Append(_T("\\"));

  001be	68 00 00 00 00	 push	 OFFSET $SG4294957247
  001c3	8d 4d ec	 lea	 ecx, DWORD PTR _t_path$[ebp]
  001c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Append@?$CSimpleStringT@D$00@ATL@@QAEXPBD@Z

; 942  : 	COleDateTime tm = COleDateTime::GetCurrentTime();

  001cc	8d 55 d4	 lea	 edx, DWORD PTR _tm$[ebp]
  001cf	52		 push	 edx
  001d0	e8 00 00 00 00	 call	 ?GetTickCount@COleDateTime@ATL@@SG?AV12@XZ ; ATL::COleDateTime::GetTickCount

; 943  : 	CString strFileName;

  001d5	8d 4d e0	 lea	 ecx, DWORD PTR _strFileName$[ebp]
  001d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  001de	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 944  : 	t_path.Append(_T("\\"));

  001e2	68 00 00 00 00	 push	 OFFSET $SG4294957246
  001e7	8d 4d ec	 lea	 ecx, DWORD PTR _t_path$[ebp]
  001ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Append@?$CSimpleStringT@D$00@ATL@@QAEXPBD@Z

; 945  : 	CString fileend="";

  001f0	68 00 00 00 00	 push	 OFFSET $SG4294957245
  001f5	8d 4d e4	 lea	 ecx, DWORD PTR _fileend$[ebp]
  001f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  001fe	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 946  : 	//if (flag==1)
; 947  : 	//{
; 948  : 	//	fileend=L".tiff";
; 949  : 	//}
; 950  : 	//else if (flag==2)
; 951  : 	//{
; 952  : 	//	fileend=L".mp4";
; 953  : 	//}
; 954  : 	//strFileName.Format(_T("%s%s%02d%s"), t_path, tm.Format(_T("%Y_%m_%d_%H_%M_%S")), 1, fileend);
; 955  : 	if(flag==0)

  00202	83 7d 0c 00	 cmp	 DWORD PTR _flag$[ebp], 0
  00206	75 5d		 jne	 SHORT $LN2@GetSaveImg

; 956  : 	{
; 957  : 		fileend=L".mp4";

  00208	68 00 00 00 00	 push	 OFFSET $SG4294957244
  0020d	8d 4d e4	 lea	 ecx, DWORD PTR _fileend$[ebp]
  00210	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PB_W@Z

; 958  : 		strFileName.Format(_T("%s%s%02d%s"), t_path, tm.Format(_T("%Y_%m_%d_%H_%M_%S")), 1, fileend);

  00216	68 00 00 00 00	 push	 OFFSET $SG4294957243
  0021b	8d 45 b4	 lea	 eax, DWORD PTR $T3[ebp]
  0021e	50		 push	 eax
  0021f	8d 4d d4	 lea	 ecx, DWORD PTR _tm$[ebp]
  00222	e8 00 00 00 00	 call	 ?Format@COleDateTime@ATL@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@2@PBD@Z ; ATL::COleDateTime::Format
  00227	89 45 b0	 mov	 DWORD PTR tv241[ebp], eax
  0022a	8b 4d b0	 mov	 ecx, DWORD PTR tv241[ebp]
  0022d	89 4d c8	 mov	 DWORD PTR tv295[ebp], ecx
  00230	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00234	8b 55 e4	 mov	 edx, DWORD PTR _fileend$[ebp]
  00237	52		 push	 edx
  00238	6a 01		 push	 1
  0023a	8b 45 c8	 mov	 eax, DWORD PTR tv295[ebp]
  0023d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0023f	51		 push	 ecx
  00240	8b 55 ec	 mov	 edx, DWORD PTR _t_path$[ebp]
  00243	52		 push	 edx
  00244	68 00 00 00 00	 push	 OFFSET $SG4294957242
  00249	8d 45 e0	 lea	 eax, DWORD PTR _strFileName$[ebp]
  0024c	50		 push	 eax
  0024d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  00253	83 c4 18	 add	 esp, 24			; 00000018H
  00256	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0025a	8d 4d b4	 lea	 ecx, DWORD PTR $T3[ebp]
  0025d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 959  : 	}
; 960  : 	else /*if(flag==1)*/

  00263	eb 5d		 jmp	 SHORT $LN1@GetSaveImg
$LN2@GetSaveImg:

; 961  : 	{
; 962  : 		fileend=L".tiff";

  00265	68 00 00 00 00	 push	 OFFSET $SG4294957241
  0026a	8d 4d e4	 lea	 ecx, DWORD PTR _fileend$[ebp]
  0026d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PB_W@Z

; 963  : 		strFileName.Format(_T("%s%s_%d%s"), t_path, tm.Format(_T("%Y_%m_%d_%H_%M_%S")), flag, fileend);

  00273	68 00 00 00 00	 push	 OFFSET $SG4294957240
  00278	8d 4d c4	 lea	 ecx, DWORD PTR $T4[ebp]
  0027b	51		 push	 ecx
  0027c	8d 4d d4	 lea	 ecx, DWORD PTR _tm$[ebp]
  0027f	e8 00 00 00 00	 call	 ?Format@COleDateTime@ATL@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@2@PBD@Z ; ATL::COleDateTime::Format
  00284	89 45 bc	 mov	 DWORD PTR tv232[ebp], eax
  00287	8b 55 bc	 mov	 edx, DWORD PTR tv232[ebp]
  0028a	89 55 ac	 mov	 DWORD PTR tv297[ebp], edx
  0028d	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00291	8b 45 e4	 mov	 eax, DWORD PTR _fileend$[ebp]
  00294	50		 push	 eax
  00295	8b 4d 0c	 mov	 ecx, DWORD PTR _flag$[ebp]
  00298	51		 push	 ecx
  00299	8b 55 ac	 mov	 edx, DWORD PTR tv297[ebp]
  0029c	8b 02		 mov	 eax, DWORD PTR [edx]
  0029e	50		 push	 eax
  0029f	8b 4d ec	 mov	 ecx, DWORD PTR _t_path$[ebp]
  002a2	51		 push	 ecx
  002a3	68 00 00 00 00	 push	 OFFSET $SG4294957239
  002a8	8d 55 e0	 lea	 edx, DWORD PTR _strFileName$[ebp]
  002ab	52		 push	 edx
  002ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  002b2	83 c4 18	 add	 esp, 24			; 00000018H
  002b5	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  002b9	8d 4d c4	 lea	 ecx, DWORD PTR $T4[ebp]
  002bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$LN1@GetSaveImg:

; 964  : 	}
; 965  : 	return CT2A(strFileName);

  002c2	8d 4d e0	 lea	 ecx, DWORD PTR _strFileName$[ebp]
  002c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  002cb	50		 push	 eax
  002cc	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  002d2	e8 00 00 00 00	 call	 ??0?$CA2AEX@$0IA@@ATL@@QAE@PBD@Z ; ATL::CA2AEX<128>::CA2AEX<128>
  002d7	89 45 c0	 mov	 DWORD PTR tv93[ebp], eax
  002da	8b 45 c0	 mov	 eax, DWORD PTR tv93[ebp]
  002dd	89 45 b8	 mov	 DWORD PTR tv299[ebp], eax
  002e0	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  002e4	8b 4d b8	 mov	 ecx, DWORD PTR tv299[ebp]
  002e7	e8 00 00 00 00	 call	 ??B?$CA2AEX@$0IA@@ATL@@QBEPADXZ ; ATL::CA2AEX<128>::operator char *
  002ec	50		 push	 eax
  002ed	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  002f0	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  002f5	8b 4d cc	 mov	 ecx, DWORD PTR $T5[ebp]
  002f8	83 c9 01	 or	 ecx, 1
  002fb	89 4d cc	 mov	 DWORD PTR $T5[ebp], ecx
  002fe	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00302	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00308	e8 00 00 00 00	 call	 ??1?$CA2AEX@$0IA@@ATL@@QAE@XZ ; ATL::CA2AEX<128>::~CA2AEX<128>
  0030d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00311	8d 4d e4	 lea	 ecx, DWORD PTR _fileend$[ebp]
  00314	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0031a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0031e	8d 4d e0	 lea	 ecx, DWORD PTR _strFileName$[ebp]
  00321	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00327	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0032b	8d 4d e8	 lea	 ecx, DWORD PTR _t_sid$[ebp]
  0032e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00334	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0033b	8d 4d ec	 lea	 ecx, DWORD PTR _t_path$[ebp]
  0033e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00344	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 966  : }

  00347	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0034a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00351	59		 pop	 ecx
  00352	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00355	33 cd		 xor	 ecx, ebp
  00357	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0035c	8b e5		 mov	 esp, ebp
  0035e	5d		 pop	 ebp
  0035f	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetSaveImgPath@CEndoScopeMFCDlg@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _t_path$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?GetSaveImgPath@CEndoScopeMFCDlg@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$1:
  00009	8d 4d e8	 lea	 ecx, DWORD PTR _t_sid$[ebp]
  0000c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?GetSaveImgPath@CEndoScopeMFCDlg@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$2:
  00012	8d 4d e0	 lea	 ecx, DWORD PTR _strFileName$[ebp]
  00015	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?GetSaveImgPath@CEndoScopeMFCDlg@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$3:
  0001b	8d 4d e4	 lea	 ecx, DWORD PTR _fileend$[ebp]
  0001e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?GetSaveImgPath@CEndoScopeMFCDlg@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$4:
  00024	8d 4d b4	 lea	 ecx, DWORD PTR $T3[ebp]
  00027	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?GetSaveImgPath@CEndoScopeMFCDlg@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$5:
  0002d	8d 4d c4	 lea	 ecx, DWORD PTR $T4[ebp]
  00030	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?GetSaveImgPath@CEndoScopeMFCDlg@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z$6:
  00036	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0003c	e9 00 00 00 00	 jmp	 ??1?$CA2AEX@$0IA@@ATL@@QAE@XZ ; ATL::CA2AEX<128>::~CA2AEX<128>
__ehhandler$?GetSaveImgPath@CEndoScopeMFCDlg@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z:
  00041	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00045	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00048	8b 8a 30 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-208]
  0004e	33 c8		 xor	 ecx, eax
  00050	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00055	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00058	33 c8		 xor	 ecx, eax
  0005a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetSaveImgPath@CEndoScopeMFCDlg@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z
  00064	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetSaveImgPath@CEndoScopeMFCDlg@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ENDP ; CEndoScopeMFCDlg::GetSaveImgPath
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?InitializeFormBoxLayout@CEndoScopeMFCDlg@@QAEXXZ
_TEXT	SEGMENT
_rect$ = -48						; size = 16
_style$ = -32						; size = 4
_this$ = -28						; size = 4
_myFont20$ = -24					; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?InitializeFormBoxLayout@CEndoScopeMFCDlg@@QAEXXZ PROC	; CEndoScopeMFCDlg::InitializeFormBoxLayout, COMDAT
; _this$ = ecx

; 982  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?InitializeFormBoxLayout@CEndoScopeMFCDlg@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 983  : 	//ModifyStyle(WS_CAPTION,0,0);  // 如果只是要普通的全屏，不想去掉标题栏，就不用第一个语句
; 984  : 	//SendMessage(WM_SYSCOMMAND,SC_MAXIMIZE,0);
; 985  : 	RECT rect;
; 986  : 	CFont myFont20;

  0002b	6a 01		 push	 1
  0002d	8d 4d e8	 lea	 ecx, DWORD PTR _myFont20$[ebp]
  00030	e8 00 00 00 00	 call	 ?__autoclassinit@CFont@@QAEXI@Z
  00035	8d 4d e8	 lea	 ecx, DWORD PTR _myFont20$[ebp]
  00038	e8 00 00 00 00	 call	 ??0CFont@@QAE@XZ	; CFont::CFont
  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 987  : 	rect.top = 0;

  00044	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _rect$[ebp+4], 0

; 988  : 	rect.bottom = 1080;

  0004b	c7 45 dc 38 04
	00 00		 mov	 DWORD PTR _rect$[ebp+12], 1080 ; 00000438H

; 989  : 	rect.left = 0;

  00052	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _rect$[ebp], 0

; 990  : 	rect.right = 1920;

  00059	c7 45 d8 80 07
	00 00		 mov	 DWORD PTR _rect$[ebp+8], 1920 ; 00000780H

; 991  : 	SetWindowPos(this, rect.left, rect.top, rect.right, rect.bottom, SWP_NOZORDER);//设置主对话框大小和位置

  00060	6a 04		 push	 4
  00062	8b 45 dc	 mov	 eax, DWORD PTR _rect$[ebp+12]
  00065	50		 push	 eax
  00066	8b 4d d8	 mov	 ecx, DWORD PTR _rect$[ebp+8]
  00069	51		 push	 ecx
  0006a	8b 55 d4	 mov	 edx, DWORD PTR _rect$[ebp+4]
  0006d	52		 push	 edx
  0006e	8b 45 d0	 mov	 eax, DWORD PTR _rect$[ebp]
  00071	50		 push	 eax
  00072	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	51		 push	 ecx
  00076	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00079	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 992  : 	m_hPicWindow = GetDlgItem(IDC_STILL)->GetSafeHwnd();//获取显示窗口句柄

  0007f	68 0d 04 00 00	 push	 1037			; 0000040dH
  00084	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0008d	8b c8		 mov	 ecx, eax
  0008f	e8 00 00 00 00	 call	 ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ ; CWnd::GetSafeHwnd
  00094	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00097	89 82 54 01 00
	00		 mov	 DWORD PTR [edx+340], eax

; 993  : 	//SetWindowPos(&CWnd::wndTopMost,0,0,0,0,SWP_NOMOVE|SWP_NOSIZE);
; 994  : 	GetDlgItem(IDC_STILL)->SetWindowPos(NULL, m_nPicWindow_left, m_nPicWindow_top, m_nPicWindow_width, m_nPicWindow_height, SWP_NOZORDER);

  0009d	6a 04		 push	 4
  0009f	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  000a2	8b 88 48 01 00
	00		 mov	 ecx, DWORD PTR [eax+328]
  000a8	51		 push	 ecx
  000a9	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  000ac	8b 82 44 01 00
	00		 mov	 eax, DWORD PTR [edx+324]
  000b2	50		 push	 eax
  000b3	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000b6	8b 91 50 01 00
	00		 mov	 edx, DWORD PTR [ecx+336]
  000bc	52		 push	 edx
  000bd	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  000c0	8b 88 4c 01 00
	00		 mov	 ecx, DWORD PTR [eax+332]
  000c6	51		 push	 ecx
  000c7	6a 00		 push	 0
  000c9	68 0d 04 00 00	 push	 1037			; 0000040dH
  000ce	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  000d7	8b c8		 mov	 ecx, eax
  000d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 995  : 	DWORD style = GetClassLong(m_hPicWindow, GCL_STYLE);

  000df	6a e6		 push	 -26			; ffffffe6H
  000e1	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  000e4	8b 82 54 01 00
	00		 mov	 eax, DWORD PTR [edx+340]
  000ea	50		 push	 eax
  000eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClassLongA@8
  000f1	89 45 e0	 mov	 DWORD PTR _style$[ebp], eax

; 996  : 	SetClassLong(m_hPicWindow, GCL_STYLE, style & ~CS_PARENTDC);

  000f4	8b 4d e0	 mov	 ecx, DWORD PTR _style$[ebp]
  000f7	81 e1 7f ff ff
	ff		 and	 ecx, -129		; ffffff7fH
  000fd	51		 push	 ecx
  000fe	6a e6		 push	 -26			; ffffffe6H
  00100	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00103	8b 82 54 01 00
	00		 mov	 eax, DWORD PTR [edx+340]
  00109	50		 push	 eax
  0010a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetClassLongA@12

; 997  : 	GetDlgItem(IDC_STILL)->GetClientRect(m_rPicRect);

  00110	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00113	81 c1 58 01 00
	00		 add	 ecx, 344		; 00000158H
  00119	e8 00 00 00 00	 call	 ??BCRect@@QAEPAUtagRECT@@XZ ; CRect::operator tagRECT *
  0011e	50		 push	 eax
  0011f	68 0d 04 00 00	 push	 1037			; 0000040dH
  00124	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00127	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0012d	8b c8		 mov	 ecx, eax
  0012f	e8 00 00 00 00	 call	 ?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z ; CWnd::GetClientRect

; 998  : 
; 999  : 	myFont20.CreateFont(20, 0, 0, 0, FW_NORMAL, FALSE, FALSE, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, DEFAULT_PITCH | FF_SWISS, _T("宋体"));

  00134	68 00 00 00 00	 push	 OFFSET $SG4294957238
  00139	6a 20		 push	 32			; 00000020H
  0013b	6a 00		 push	 0
  0013d	6a 00		 push	 0
  0013f	6a 00		 push	 0
  00141	6a 00		 push	 0
  00143	6a 00		 push	 0
  00145	6a 00		 push	 0
  00147	6a 00		 push	 0
  00149	68 90 01 00 00	 push	 400			; 00000190H
  0014e	6a 00		 push	 0
  00150	6a 00		 push	 0
  00152	6a 00		 push	 0
  00154	6a 14		 push	 20			; 00000014H
  00156	8d 4d e8	 lea	 ecx, DWORD PTR _myFont20$[ebp]
  00159	e8 00 00 00 00	 call	 ?CreateFontA@CFont@@QAEHHHHHHEEEEEEEEPBD@Z ; CFont::CreateFontA

; 1000 : 	GetDlgItem(IDC_PEOPLEMSG_STATIC)->SetWindowPos(NULL, 50, 120, 100, 20, SWP_NOZORDER);

  0015e	6a 04		 push	 4
  00160	6a 14		 push	 20			; 00000014H
  00162	6a 64		 push	 100			; 00000064H
  00164	6a 78		 push	 120			; 00000078H
  00166	6a 32		 push	 50			; 00000032H
  00168	6a 00		 push	 0
  0016a	68 f1 03 00 00	 push	 1009			; 000003f1H
  0016f	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00172	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00178	8b c8		 mov	 ecx, eax
  0017a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1001 : 	GetDlgItem(IDC_ID_STATIC)->SetWindowPos(NULL, 50, 50 + 100, 100, 20, SWP_NOZORDER);

  00180	6a 04		 push	 4
  00182	6a 14		 push	 20			; 00000014H
  00184	6a 64		 push	 100			; 00000064H
  00186	68 96 00 00 00	 push	 150			; 00000096H
  0018b	6a 32		 push	 50			; 00000032H
  0018d	6a 00		 push	 0
  0018f	68 f2 03 00 00	 push	 1010			; 000003f2H
  00194	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00197	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0019d	8b c8		 mov	 ecx, eax
  0019f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1002 : 	GetDlgItem(IDC_NAME_STATIC)->SetWindowPos(NULL, 50, 80 + 100 + 5, 100, 20, SWP_NOZORDER);

  001a5	6a 04		 push	 4
  001a7	6a 14		 push	 20			; 00000014H
  001a9	6a 64		 push	 100			; 00000064H
  001ab	68 b9 00 00 00	 push	 185			; 000000b9H
  001b0	6a 32		 push	 50			; 00000032H
  001b2	6a 00		 push	 0
  001b4	68 f3 03 00 00	 push	 1011			; 000003f3H
  001b9	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  001bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  001c2	8b c8		 mov	 ecx, eax
  001c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1003 : 	GetDlgItem(IDC_SEX_STATIC)->SetWindowPos(NULL, 50, 110 + 100 + 5, 100, 20, SWP_NOZORDER);

  001ca	6a 04		 push	 4
  001cc	6a 14		 push	 20			; 00000014H
  001ce	6a 64		 push	 100			; 00000064H
  001d0	68 d7 00 00 00	 push	 215			; 000000d7H
  001d5	6a 32		 push	 50			; 00000032H
  001d7	6a 00		 push	 0
  001d9	68 f4 03 00 00	 push	 1012			; 000003f4H
  001de	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  001e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  001e7	8b c8		 mov	 ecx, eax
  001e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1004 : 	GetDlgItem(IDC_AGE_STATIC)->SetWindowPos(NULL, 50, 140 + 100 + 5, 100, 20, SWP_NOZORDER);

  001ef	6a 04		 push	 4
  001f1	6a 14		 push	 20			; 00000014H
  001f3	6a 64		 push	 100			; 00000064H
  001f5	68 f5 00 00 00	 push	 245			; 000000f5H
  001fa	6a 32		 push	 50			; 00000032H
  001fc	6a 00		 push	 0
  001fe	68 f5 03 00 00	 push	 1013			; 000003f5H
  00203	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00206	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0020c	8b c8		 mov	 ecx, eax
  0020e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1005 : 	GetDlgItem(IDC_DOCTOR_STATIC)->SetWindowPos(NULL, 50, 170 + 100 + 5, 100, 20, SWP_NOZORDER);

  00214	6a 04		 push	 4
  00216	6a 14		 push	 20			; 00000014H
  00218	6a 64		 push	 100			; 00000064H
  0021a	68 13 01 00 00	 push	 275			; 00000113H
  0021f	6a 32		 push	 50			; 00000032H
  00221	6a 00		 push	 0
  00223	68 f6 03 00 00	 push	 1014			; 000003f6H
  00228	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0022b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00231	8b c8		 mov	 ecx, eax
  00233	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1006 : 	GetDlgItem(IDC_IMGMSG_STATIC)->SetWindowPos(NULL, 50, 220 + 100 + 5, 100, 20, SWP_NOZORDER);

  00239	6a 04		 push	 4
  0023b	6a 14		 push	 20			; 00000014H
  0023d	6a 64		 push	 100			; 00000064H
  0023f	68 45 01 00 00	 push	 325			; 00000145H
  00244	6a 32		 push	 50			; 00000032H
  00246	6a 00		 push	 0
  00248	68 f7 03 00 00	 push	 1015			; 000003f7H
  0024d	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00250	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00256	8b c8		 mov	 ecx, eax
  00258	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1007 : 	GetDlgItem(IDC_TESTLIGHT_STATIC)->SetWindowPos(NULL, 50, 250 + 100 + 5, 100, 20, SWP_NOZORDER);

  0025e	6a 04		 push	 4
  00260	6a 14		 push	 20			; 00000014H
  00262	6a 64		 push	 100			; 00000064H
  00264	68 63 01 00 00	 push	 355			; 00000163H
  00269	6a 32		 push	 50			; 00000032H
  0026b	6a 00		 push	 0
  0026d	68 f8 03 00 00	 push	 1016			; 000003f8H
  00272	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00275	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0027b	8b c8		 mov	 ecx, eax
  0027d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1008 : 	GetDlgItem(IDC_IMGCLR_STATIC)->SetWindowPos(NULL, 50, 280 + 100 + 5, 100, 20, SWP_NOZORDER);

  00283	6a 04		 push	 4
  00285	6a 14		 push	 20			; 00000014H
  00287	6a 64		 push	 100			; 00000064H
  00289	68 81 01 00 00	 push	 385			; 00000181H
  0028e	6a 32		 push	 50			; 00000032H
  00290	6a 00		 push	 0
  00292	68 f9 03 00 00	 push	 1017			; 000003f9H
  00297	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0029a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  002a0	8b c8		 mov	 ecx, eax
  002a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1009 : 	GetDlgItem(IDC_ENLARGE_STATIC)->SetWindowPos(NULL, 50, 310 + 100 + 5, 100, 20, SWP_NOZORDER);

  002a8	6a 04		 push	 4
  002aa	6a 14		 push	 20			; 00000014H
  002ac	6a 64		 push	 100			; 00000064H
  002ae	68 9f 01 00 00	 push	 415			; 0000019fH
  002b3	6a 32		 push	 50			; 00000032H
  002b5	6a 00		 push	 0
  002b7	68 fa 03 00 00	 push	 1018			; 000003faH
  002bc	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  002bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  002c5	8b c8		 mov	 ecx, eax
  002c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1010 : 	GetDlgItem(IDC_FORM_STATIC)->SetWindowPos(NULL, 50, 340 + 100 + 5, 100, 20, SWP_NOZORDER);

  002cd	6a 04		 push	 4
  002cf	6a 14		 push	 20			; 00000014H
  002d1	6a 64		 push	 100			; 00000064H
  002d3	68 bd 01 00 00	 push	 445			; 000001bdH
  002d8	6a 32		 push	 50			; 00000032H
  002da	6a 00		 push	 0
  002dc	68 fb 03 00 00	 push	 1019			; 000003fbH
  002e1	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  002e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  002ea	8b c8		 mov	 ecx, eax
  002ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1011 : 	GetDlgItem(IDC_ENDOSCOPEMSG_STATIC)->SetWindowPos(NULL, 50, 390 + 100 + 5, 100, 20, SWP_NOZORDER);

  002f2	6a 04		 push	 4
  002f4	6a 14		 push	 20			; 00000014H
  002f6	6a 64		 push	 100			; 00000064H
  002f8	68 ef 01 00 00	 push	 495			; 000001efH
  002fd	6a 32		 push	 50			; 00000032H
  002ff	6a 00		 push	 0
  00301	68 fc 03 00 00	 push	 1020			; 000003fcH
  00306	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00309	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0030f	8b c8		 mov	 ecx, eax
  00311	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1012 : 	GetDlgItem(IDC_ENDOSCOPEID_STATIC)->SetWindowPos(NULL, 50, 420 + 100 + 5, 100, 20, SWP_NOZORDER);

  00317	6a 04		 push	 4
  00319	6a 14		 push	 20			; 00000014H
  0031b	6a 64		 push	 100			; 00000064H
  0031d	68 0d 02 00 00	 push	 525			; 0000020dH
  00322	6a 32		 push	 50			; 00000032H
  00324	6a 00		 push	 0
  00326	68 fd 03 00 00	 push	 1021			; 000003fdH
  0032b	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0032e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00334	8b c8		 mov	 ecx, eax
  00336	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1013 : 	GetDlgItem(IDC_DISPOSABLE_STATIC)->SetWindowPos(NULL, 50, 450 + 100 + 5, 150, 20, SWP_NOZORDER);

  0033c	6a 04		 push	 4
  0033e	6a 14		 push	 20			; 00000014H
  00340	68 96 00 00 00	 push	 150			; 00000096H
  00345	68 2b 02 00 00	 push	 555			; 0000022bH
  0034a	6a 32		 push	 50			; 00000032H
  0034c	6a 00		 push	 0
  0034e	68 fe 03 00 00	 push	 1022			; 000003feH
  00353	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00356	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0035c	8b c8		 mov	 ecx, eax
  0035e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1014 : 	GetDlgItem(IDC_STOREMSG_STATIC)->SetWindowPos(NULL, 50, 500 + 100 + 5, 200, 20, SWP_NOZORDER);

  00364	6a 04		 push	 4
  00366	6a 14		 push	 20			; 00000014H
  00368	68 c8 00 00 00	 push	 200			; 000000c8H
  0036d	68 5d 02 00 00	 push	 605			; 0000025dH
  00372	6a 32		 push	 50			; 00000032H
  00374	6a 00		 push	 0
  00376	68 ff 03 00 00	 push	 1023			; 000003ffH
  0037b	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0037e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00384	8b c8		 mov	 ecx, eax
  00386	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1015 : 	GetDlgItem(IDC_STORAGE_STATIC)->SetWindowPos(NULL, 50, 530 + 100 + 5, 150, 20, SWP_NOZORDER);

  0038c	6a 04		 push	 4
  0038e	6a 14		 push	 20			; 00000014H
  00390	68 96 00 00 00	 push	 150			; 00000096H
  00395	68 7b 02 00 00	 push	 635			; 0000027bH
  0039a	6a 32		 push	 50			; 00000032H
  0039c	6a 00		 push	 0
  0039e	68 00 04 00 00	 push	 1024			; 00000400H
  003a3	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  003a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  003ac	8b c8		 mov	 ecx, eax
  003ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1016 : 	GetDlgItem(IDC_IMAGENUM_STATIC)->SetWindowPos(NULL, 50, 560 + 100 + 5, 150, 20, SWP_NOZORDER);

  003b4	6a 04		 push	 4
  003b6	6a 14		 push	 20			; 00000014H
  003b8	68 96 00 00 00	 push	 150			; 00000096H
  003bd	68 99 02 00 00	 push	 665			; 00000299H
  003c2	6a 32		 push	 50			; 00000032H
  003c4	6a 00		 push	 0
  003c6	68 01 04 00 00	 push	 1025			; 00000401H
  003cb	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  003ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  003d4	8b c8		 mov	 ecx, eax
  003d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1017 : 	GetDlgItem(IDC_RECORD_STATIC)->SetWindowPos(NULL, 50, 590 + 100 + 5, 150, 20, SWP_NOZORDER);

  003dc	6a 04		 push	 4
  003de	6a 14		 push	 20			; 00000014H
  003e0	68 96 00 00 00	 push	 150			; 00000096H
  003e5	68 b7 02 00 00	 push	 695			; 000002b7H
  003ea	6a 32		 push	 50			; 00000032H
  003ec	6a 00		 push	 0
  003ee	68 02 04 00 00	 push	 1026			; 00000402H
  003f3	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  003f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  003fc	8b c8		 mov	 ecx, eax
  003fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1018 : 	GetDlgItem(IDC_TIME_STATIC)->SetWindowPos(NULL, 50, 1000, 220, 20, SWP_NOZORDER);

  00404	6a 04		 push	 4
  00406	6a 14		 push	 20			; 00000014H
  00408	68 dc 00 00 00	 push	 220			; 000000dcH
  0040d	68 e8 03 00 00	 push	 1000			; 000003e8H
  00412	6a 32		 push	 50			; 00000032H
  00414	6a 00		 push	 0
  00416	68 0c 04 00 00	 push	 1036			; 0000040cH
  0041b	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0041e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00424	8b c8		 mov	 ecx, eax
  00426	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1019 : 
; 1020 : 	GetDlgItem(IDC_BUT_OK)->SetWindowPos(NULL, 50, 760, 220, 20, SWP_NOZORDER);

  0042c	6a 04		 push	 4
  0042e	6a 14		 push	 20			; 00000014H
  00430	68 dc 00 00 00	 push	 220			; 000000dcH
  00435	68 f8 02 00 00	 push	 760			; 000002f8H
  0043a	6a 32		 push	 50			; 00000032H
  0043c	6a 00		 push	 0
  0043e	68 e8 03 00 00	 push	 1000			; 000003e8H
  00443	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00446	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0044c	8b c8		 mov	 ecx, eax
  0044e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1021 : 	GetDlgItem(IDC_BUT_RUN)->SetWindowPos(NULL, 50, 840, 220, 20, SWP_NOZORDER);

  00454	6a 04		 push	 4
  00456	6a 14		 push	 20			; 00000014H
  00458	68 dc 00 00 00	 push	 220			; 000000dcH
  0045d	68 48 03 00 00	 push	 840			; 00000348H
  00462	6a 32		 push	 50			; 00000032H
  00464	6a 00		 push	 0
  00466	68 e9 03 00 00	 push	 1001			; 000003e9H
  0046b	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0046e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00474	8b c8		 mov	 ecx, eax
  00476	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1022 : 	GetDlgItem(IDC_BUT_PAUSE)->SetWindowPos(NULL, 50, 880, 220, 20, SWP_NOZORDER);

  0047c	6a 04		 push	 4
  0047e	6a 14		 push	 20			; 00000014H
  00480	68 dc 00 00 00	 push	 220			; 000000dcH
  00485	68 70 03 00 00	 push	 880			; 00000370H
  0048a	6a 32		 push	 50			; 00000032H
  0048c	6a 00		 push	 0
  0048e	68 ea 03 00 00	 push	 1002			; 000003eaH
  00493	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00496	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0049c	8b c8		 mov	 ecx, eax
  0049e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1023 : 	GetDlgItem(IDC_BUT_STOP)->SetWindowPos(NULL, 50, 950, 220, 20, SWP_NOZORDER);

  004a4	6a 04		 push	 4
  004a6	6a 14		 push	 20			; 00000014H
  004a8	68 dc 00 00 00	 push	 220			; 000000dcH
  004ad	68 b6 03 00 00	 push	 950			; 000003b6H
  004b2	6a 32		 push	 50			; 00000032H
  004b4	6a 00		 push	 0
  004b6	68 eb 03 00 00	 push	 1003			; 000003ebH
  004bb	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  004be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  004c4	8b c8		 mov	 ecx, eax
  004c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1024 : 
; 1025 : 	GetDlgItem(IDC_ID_EDIT)->SetWindowPos(NULL, 160, 50 + 100, 125, 30, SWP_NOZORDER);

  004cc	6a 04		 push	 4
  004ce	6a 1e		 push	 30			; 0000001eH
  004d0	6a 7d		 push	 125			; 0000007dH
  004d2	68 96 00 00 00	 push	 150			; 00000096H
  004d7	68 a0 00 00 00	 push	 160			; 000000a0H
  004dc	6a 00		 push	 0
  004de	68 ec 03 00 00	 push	 1004			; 000003ecH
  004e3	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  004e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  004ec	8b c8		 mov	 ecx, eax
  004ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1026 : 
; 1027 : 	GetDlgItem(IDC_NAME_EDIT)->SetWindowPos(NULL, 160, 80 + 100 + 5, 125, 30, SWP_NOZORDER);

  004f4	6a 04		 push	 4
  004f6	6a 1e		 push	 30			; 0000001eH
  004f8	6a 7d		 push	 125			; 0000007dH
  004fa	68 b9 00 00 00	 push	 185			; 000000b9H
  004ff	68 a0 00 00 00	 push	 160			; 000000a0H
  00504	6a 00		 push	 0
  00506	68 ed 03 00 00	 push	 1005			; 000003edH
  0050b	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0050e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00514	8b c8		 mov	 ecx, eax
  00516	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1028 : 	GetDlgItem(IDC_SEX_EDIT)->SetWindowPos(NULL, 160, 110 + 100 + 5, 125, 30, SWP_NOZORDER);

  0051c	6a 04		 push	 4
  0051e	6a 1e		 push	 30			; 0000001eH
  00520	6a 7d		 push	 125			; 0000007dH
  00522	68 d7 00 00 00	 push	 215			; 000000d7H
  00527	68 a0 00 00 00	 push	 160			; 000000a0H
  0052c	6a 00		 push	 0
  0052e	68 ee 03 00 00	 push	 1006			; 000003eeH
  00533	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00536	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0053c	8b c8		 mov	 ecx, eax
  0053e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1029 : 	GetDlgItem(IDC_AGE_EDIT)->SetWindowPos(NULL, 160, 140 + 100 + 5, 125, 30, SWP_NOZORDER);

  00544	6a 04		 push	 4
  00546	6a 1e		 push	 30			; 0000001eH
  00548	6a 7d		 push	 125			; 0000007dH
  0054a	68 f5 00 00 00	 push	 245			; 000000f5H
  0054f	68 a0 00 00 00	 push	 160			; 000000a0H
  00554	6a 00		 push	 0
  00556	68 ef 03 00 00	 push	 1007			; 000003efH
  0055b	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0055e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00564	8b c8		 mov	 ecx, eax
  00566	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1030 : 	GetDlgItem(IDC_DOCTOR_EDIT)->SetWindowPos(NULL, 160, 170 + 100 + 5, 125, 30, SWP_NOZORDER);

  0056c	6a 04		 push	 4
  0056e	6a 1e		 push	 30			; 0000001eH
  00570	6a 7d		 push	 125			; 0000007dH
  00572	68 13 01 00 00	 push	 275			; 00000113H
  00577	68 a0 00 00 00	 push	 160			; 000000a0H
  0057c	6a 00		 push	 0
  0057e	68 f0 03 00 00	 push	 1008			; 000003f0H
  00583	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00586	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0058c	8b c8		 mov	 ecx, eax
  0058e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1031 : 	GetDlgItem(IDC_TESTLIGHT_INFO_STATIC)->SetWindowPos(NULL, 160, 250 + 100 + 5, 125, 20, SWP_NOZORDER);

  00594	6a 04		 push	 4
  00596	6a 14		 push	 20			; 00000014H
  00598	6a 7d		 push	 125			; 0000007dH
  0059a	68 63 01 00 00	 push	 355			; 00000163H
  0059f	68 a0 00 00 00	 push	 160			; 000000a0H
  005a4	6a 00		 push	 0
  005a6	68 03 04 00 00	 push	 1027			; 00000403H
  005ab	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  005ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  005b4	8b c8		 mov	 ecx, eax
  005b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1032 : 	GetDlgItem(IDC_IMGCLR_INFO_STATIC)->SetWindowPos(NULL, 160, 280 + 100 + 5, 125, 20, SWP_NOZORDER);

  005bc	6a 04		 push	 4
  005be	6a 14		 push	 20			; 00000014H
  005c0	6a 7d		 push	 125			; 0000007dH
  005c2	68 81 01 00 00	 push	 385			; 00000181H
  005c7	68 a0 00 00 00	 push	 160			; 000000a0H
  005cc	6a 00		 push	 0
  005ce	68 04 04 00 00	 push	 1028			; 00000404H
  005d3	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  005d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  005dc	8b c8		 mov	 ecx, eax
  005de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1033 : 	GetDlgItem(IDC_ENLARGE_INFO_STATIC)->SetWindowPos(NULL, 160, 310 + 100 + 5, 125, 20, SWP_NOZORDER);

  005e4	6a 04		 push	 4
  005e6	6a 14		 push	 20			; 00000014H
  005e8	6a 7d		 push	 125			; 0000007dH
  005ea	68 9f 01 00 00	 push	 415			; 0000019fH
  005ef	68 a0 00 00 00	 push	 160			; 000000a0H
  005f4	6a 00		 push	 0
  005f6	68 05 04 00 00	 push	 1029			; 00000405H
  005fb	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  005fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00604	8b c8		 mov	 ecx, eax
  00606	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1034 : 	GetDlgItem(IDC_FORM_INFO_STATIC)->SetWindowPos(NULL, 160, 340 + 100 + 5, 125, 20, SWP_NOZORDER);

  0060c	6a 04		 push	 4
  0060e	6a 14		 push	 20			; 00000014H
  00610	6a 7d		 push	 125			; 0000007dH
  00612	68 bd 01 00 00	 push	 445			; 000001bdH
  00617	68 a0 00 00 00	 push	 160			; 000000a0H
  0061c	6a 00		 push	 0
  0061e	68 06 04 00 00	 push	 1030			; 00000406H
  00623	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00626	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0062c	8b c8		 mov	 ecx, eax
  0062e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1035 : 	GetDlgItem(IDC_ENDOSCOPEID_INFO_STATIC)->SetWindowPos(NULL, 200, 420 + 100 + 5, 85, 20, SWP_NOZORDER);

  00634	6a 04		 push	 4
  00636	6a 14		 push	 20			; 00000014H
  00638	6a 55		 push	 85			; 00000055H
  0063a	68 0d 02 00 00	 push	 525			; 0000020dH
  0063f	68 c8 00 00 00	 push	 200			; 000000c8H
  00644	6a 00		 push	 0
  00646	68 07 04 00 00	 push	 1031			; 00000407H
  0064b	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0064e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00654	8b c8		 mov	 ecx, eax
  00656	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1036 : 	GetDlgItem(IDC_DISPOSABLE_INFO_STATIC)->SetWindowPos(NULL, 200, 450 + 100 + 5, 85, 20, SWP_NOZORDER);

  0065c	6a 04		 push	 4
  0065e	6a 14		 push	 20			; 00000014H
  00660	6a 55		 push	 85			; 00000055H
  00662	68 2b 02 00 00	 push	 555			; 0000022bH
  00667	68 c8 00 00 00	 push	 200			; 000000c8H
  0066c	6a 00		 push	 0
  0066e	68 08 04 00 00	 push	 1032			; 00000408H
  00673	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00676	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0067c	8b c8		 mov	 ecx, eax
  0067e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1037 : 	GetDlgItem(IDC_STORAGE_INFO_STATIC)->SetWindowPos(NULL, 200, 530 + 100 + 5, 85, 20, SWP_NOZORDER);

  00684	6a 04		 push	 4
  00686	6a 14		 push	 20			; 00000014H
  00688	6a 55		 push	 85			; 00000055H
  0068a	68 7b 02 00 00	 push	 635			; 0000027bH
  0068f	68 c8 00 00 00	 push	 200			; 000000c8H
  00694	6a 00		 push	 0
  00696	68 09 04 00 00	 push	 1033			; 00000409H
  0069b	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0069e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  006a4	8b c8		 mov	 ecx, eax
  006a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1038 : 	GetDlgItem(IDC_IMAGENUM_INFO_STATIC)->SetWindowPos(NULL, 200, 560 + 100 + 5, 85, 20, SWP_NOZORDER);

  006ac	6a 04		 push	 4
  006ae	6a 14		 push	 20			; 00000014H
  006b0	6a 55		 push	 85			; 00000055H
  006b2	68 99 02 00 00	 push	 665			; 00000299H
  006b7	68 c8 00 00 00	 push	 200			; 000000c8H
  006bc	6a 00		 push	 0
  006be	68 0a 04 00 00	 push	 1034			; 0000040aH
  006c3	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  006c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  006cc	8b c8		 mov	 ecx, eax
  006ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1039 : 	GetDlgItem(IDC_RECORD_INFO_STATIC)->SetWindowPos(NULL, 200, 590 + 100 + 5, 85, 20, SWP_NOZORDER);

  006d4	6a 04		 push	 4
  006d6	6a 14		 push	 20			; 00000014H
  006d8	6a 55		 push	 85			; 00000055H
  006da	68 b7 02 00 00	 push	 695			; 000002b7H
  006df	68 c8 00 00 00	 push	 200			; 000000c8H
  006e4	6a 00		 push	 0
  006e6	68 0b 04 00 00	 push	 1035			; 0000040bH
  006eb	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  006ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  006f4	8b c8		 mov	 ecx, eax
  006f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1040 : 	GetDlgItem(IDC_PEOPLEMSG_STATIC)->SetFont(&myFont20);

  006fc	6a 01		 push	 1
  006fe	8d 4d e8	 lea	 ecx, DWORD PTR _myFont20$[ebp]
  00701	51		 push	 ecx
  00702	68 f1 03 00 00	 push	 1009			; 000003f1H
  00707	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0070a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00710	8b c8		 mov	 ecx, eax
  00712	e8 00 00 00 00	 call	 ?SetFont@CWnd@@QAEXPAVCFont@@H@Z ; CWnd::SetFont

; 1041 : 	GetDlgItem(IDC_NAME_STATIC)->SetFont(&myFont20);

  00717	6a 01		 push	 1
  00719	8d 55 e8	 lea	 edx, DWORD PTR _myFont20$[ebp]
  0071c	52		 push	 edx
  0071d	68 f3 03 00 00	 push	 1011			; 000003f3H
  00722	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00725	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0072b	8b c8		 mov	 ecx, eax
  0072d	e8 00 00 00 00	 call	 ?SetFont@CWnd@@QAEXPAVCFont@@H@Z ; CWnd::SetFont

; 1042 : 	GetDlgItem(IDC_ID_STATIC)->SetFont(&myFont20);

  00732	6a 01		 push	 1
  00734	8d 45 e8	 lea	 eax, DWORD PTR _myFont20$[ebp]
  00737	50		 push	 eax
  00738	68 f2 03 00 00	 push	 1010			; 000003f2H
  0073d	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00740	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00746	8b c8		 mov	 ecx, eax
  00748	e8 00 00 00 00	 call	 ?SetFont@CWnd@@QAEXPAVCFont@@H@Z ; CWnd::SetFont

; 1043 : 	GetDlgItem(IDC_SEX_STATIC)->SetFont(&myFont20);

  0074d	6a 01		 push	 1
  0074f	8d 4d e8	 lea	 ecx, DWORD PTR _myFont20$[ebp]
  00752	51		 push	 ecx
  00753	68 f4 03 00 00	 push	 1012			; 000003f4H
  00758	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0075b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00761	8b c8		 mov	 ecx, eax
  00763	e8 00 00 00 00	 call	 ?SetFont@CWnd@@QAEXPAVCFont@@H@Z ; CWnd::SetFont

; 1044 : 	GetDlgItem(IDC_AGE_STATIC)->SetFont(&myFont20);

  00768	6a 01		 push	 1
  0076a	8d 55 e8	 lea	 edx, DWORD PTR _myFont20$[ebp]
  0076d	52		 push	 edx
  0076e	68 f5 03 00 00	 push	 1013			; 000003f5H
  00773	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00776	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0077c	8b c8		 mov	 ecx, eax
  0077e	e8 00 00 00 00	 call	 ?SetFont@CWnd@@QAEXPAVCFont@@H@Z ; CWnd::SetFont

; 1045 : 	GetDlgItem(IDC_DOCTOR_STATIC)->SetFont(&myFont20);

  00783	6a 01		 push	 1
  00785	8d 45 e8	 lea	 eax, DWORD PTR _myFont20$[ebp]
  00788	50		 push	 eax
  00789	68 f6 03 00 00	 push	 1014			; 000003f6H
  0078e	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00791	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00797	8b c8		 mov	 ecx, eax
  00799	e8 00 00 00 00	 call	 ?SetFont@CWnd@@QAEXPAVCFont@@H@Z ; CWnd::SetFont

; 1046 : 	GetDlgItem(IDC_IMGMSG_STATIC)->SetFont(&myFont20);

  0079e	6a 01		 push	 1
  007a0	8d 4d e8	 lea	 ecx, DWORD PTR _myFont20$[ebp]
  007a3	51		 push	 ecx
  007a4	68 f7 03 00 00	 push	 1015			; 000003f7H
  007a9	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  007ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  007b2	8b c8		 mov	 ecx, eax
  007b4	e8 00 00 00 00	 call	 ?SetFont@CWnd@@QAEXPAVCFont@@H@Z ; CWnd::SetFont

; 1047 : 	GetDlgItem(IDC_TESTLIGHT_STATIC)->SetFont(&myFont20);

  007b9	6a 01		 push	 1
  007bb	8d 55 e8	 lea	 edx, DWORD PTR _myFont20$[ebp]
  007be	52		 push	 edx
  007bf	68 f8 03 00 00	 push	 1016			; 000003f8H
  007c4	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  007c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  007cd	8b c8		 mov	 ecx, eax
  007cf	e8 00 00 00 00	 call	 ?SetFont@CWnd@@QAEXPAVCFont@@H@Z ; CWnd::SetFont

; 1048 : 	GetDlgItem(IDC_IMGCLR_STATIC)->SetFont(&myFont20);

  007d4	6a 01		 push	 1
  007d6	8d 45 e8	 lea	 eax, DWORD PTR _myFont20$[ebp]
  007d9	50		 push	 eax
  007da	68 f9 03 00 00	 push	 1017			; 000003f9H
  007df	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  007e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  007e8	8b c8		 mov	 ecx, eax
  007ea	e8 00 00 00 00	 call	 ?SetFont@CWnd@@QAEXPAVCFont@@H@Z ; CWnd::SetFont

; 1049 : 	GetDlgItem(IDC_ENLARGE_STATIC)->SetFont(&myFont20);

  007ef	6a 01		 push	 1
  007f1	8d 4d e8	 lea	 ecx, DWORD PTR _myFont20$[ebp]
  007f4	51		 push	 ecx
  007f5	68 fa 03 00 00	 push	 1018			; 000003faH
  007fa	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  007fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00803	8b c8		 mov	 ecx, eax
  00805	e8 00 00 00 00	 call	 ?SetFont@CWnd@@QAEXPAVCFont@@H@Z ; CWnd::SetFont

; 1050 : 	GetDlgItem(IDC_FORM_STATIC)->SetFont(&myFont20);

  0080a	6a 01		 push	 1
  0080c	8d 55 e8	 lea	 edx, DWORD PTR _myFont20$[ebp]
  0080f	52		 push	 edx
  00810	68 fb 03 00 00	 push	 1019			; 000003fbH
  00815	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00818	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0081e	8b c8		 mov	 ecx, eax
  00820	e8 00 00 00 00	 call	 ?SetFont@CWnd@@QAEXPAVCFont@@H@Z ; CWnd::SetFont

; 1051 : 	GetDlgItem(IDC_ENDOSCOPEMSG_STATIC)->SetFont(&myFont20);

  00825	6a 01		 push	 1
  00827	8d 45 e8	 lea	 eax, DWORD PTR _myFont20$[ebp]
  0082a	50		 push	 eax
  0082b	68 fc 03 00 00	 push	 1020			; 000003fcH
  00830	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00833	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00839	8b c8		 mov	 ecx, eax
  0083b	e8 00 00 00 00	 call	 ?SetFont@CWnd@@QAEXPAVCFont@@H@Z ; CWnd::SetFont

; 1052 : 	GetDlgItem(IDC_ENDOSCOPEID_STATIC)->SetFont(&myFont20);

  00840	6a 01		 push	 1
  00842	8d 4d e8	 lea	 ecx, DWORD PTR _myFont20$[ebp]
  00845	51		 push	 ecx
  00846	68 fd 03 00 00	 push	 1021			; 000003fdH
  0084b	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0084e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00854	8b c8		 mov	 ecx, eax
  00856	e8 00 00 00 00	 call	 ?SetFont@CWnd@@QAEXPAVCFont@@H@Z ; CWnd::SetFont

; 1053 : 	GetDlgItem(IDC_DISPOSABLE_STATIC)->SetFont(&myFont20);

  0085b	6a 01		 push	 1
  0085d	8d 55 e8	 lea	 edx, DWORD PTR _myFont20$[ebp]
  00860	52		 push	 edx
  00861	68 fe 03 00 00	 push	 1022			; 000003feH
  00866	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00869	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0086f	8b c8		 mov	 ecx, eax
  00871	e8 00 00 00 00	 call	 ?SetFont@CWnd@@QAEXPAVCFont@@H@Z ; CWnd::SetFont

; 1054 : 	GetDlgItem(IDC_STOREMSG_STATIC)->SetFont(&myFont20);

  00876	6a 01		 push	 1
  00878	8d 45 e8	 lea	 eax, DWORD PTR _myFont20$[ebp]
  0087b	50		 push	 eax
  0087c	68 ff 03 00 00	 push	 1023			; 000003ffH
  00881	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00884	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0088a	8b c8		 mov	 ecx, eax
  0088c	e8 00 00 00 00	 call	 ?SetFont@CWnd@@QAEXPAVCFont@@H@Z ; CWnd::SetFont

; 1055 : 	GetDlgItem(IDC_STORAGE_STATIC)->SetFont(&myFont20);

  00891	6a 01		 push	 1
  00893	8d 4d e8	 lea	 ecx, DWORD PTR _myFont20$[ebp]
  00896	51		 push	 ecx
  00897	68 00 04 00 00	 push	 1024			; 00000400H
  0089c	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0089f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  008a5	8b c8		 mov	 ecx, eax
  008a7	e8 00 00 00 00	 call	 ?SetFont@CWnd@@QAEXPAVCFont@@H@Z ; CWnd::SetFont

; 1056 : 	GetDlgItem(IDC_IMAGENUM_STATIC)->SetFont(&myFont20);

  008ac	6a 01		 push	 1
  008ae	8d 55 e8	 lea	 edx, DWORD PTR _myFont20$[ebp]
  008b1	52		 push	 edx
  008b2	68 01 04 00 00	 push	 1025			; 00000401H
  008b7	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  008ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  008c0	8b c8		 mov	 ecx, eax
  008c2	e8 00 00 00 00	 call	 ?SetFont@CWnd@@QAEXPAVCFont@@H@Z ; CWnd::SetFont

; 1057 : 	GetDlgItem(IDC_RECORD_STATIC)->SetFont(&myFont20);

  008c7	6a 01		 push	 1
  008c9	8d 45 e8	 lea	 eax, DWORD PTR _myFont20$[ebp]
  008cc	50		 push	 eax
  008cd	68 02 04 00 00	 push	 1026			; 00000402H
  008d2	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  008d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  008db	8b c8		 mov	 ecx, eax
  008dd	e8 00 00 00 00	 call	 ?SetFont@CWnd@@QAEXPAVCFont@@H@Z ; CWnd::SetFont

; 1058 : 	GetDlgItem(IDC_TIME_STATIC)->SetFont(&myFont20);

  008e2	6a 01		 push	 1
  008e4	8d 4d e8	 lea	 ecx, DWORD PTR _myFont20$[ebp]
  008e7	51		 push	 ecx
  008e8	68 0c 04 00 00	 push	 1036			; 0000040cH
  008ed	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  008f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  008f6	8b c8		 mov	 ecx, eax
  008f8	e8 00 00 00 00	 call	 ?SetFont@CWnd@@QAEXPAVCFont@@H@Z ; CWnd::SetFont

; 1059 : 	GetDlgItem(IDC_NAME_EDIT)->SetFont(&myFont20);

  008fd	6a 01		 push	 1
  008ff	8d 55 e8	 lea	 edx, DWORD PTR _myFont20$[ebp]
  00902	52		 push	 edx
  00903	68 ed 03 00 00	 push	 1005			; 000003edH
  00908	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0090b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00911	8b c8		 mov	 ecx, eax
  00913	e8 00 00 00 00	 call	 ?SetFont@CWnd@@QAEXPAVCFont@@H@Z ; CWnd::SetFont

; 1060 : 	GetDlgItem(IDC_ID_EDIT)->SetFont(&myFont20);

  00918	6a 01		 push	 1
  0091a	8d 45 e8	 lea	 eax, DWORD PTR _myFont20$[ebp]
  0091d	50		 push	 eax
  0091e	68 ec 03 00 00	 push	 1004			; 000003ecH
  00923	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00926	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0092c	8b c8		 mov	 ecx, eax
  0092e	e8 00 00 00 00	 call	 ?SetFont@CWnd@@QAEXPAVCFont@@H@Z ; CWnd::SetFont

; 1061 : 	GetDlgItem(IDC_SEX_EDIT)->SetFont(&myFont20);

  00933	6a 01		 push	 1
  00935	8d 4d e8	 lea	 ecx, DWORD PTR _myFont20$[ebp]
  00938	51		 push	 ecx
  00939	68 ee 03 00 00	 push	 1006			; 000003eeH
  0093e	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00941	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00947	8b c8		 mov	 ecx, eax
  00949	e8 00 00 00 00	 call	 ?SetFont@CWnd@@QAEXPAVCFont@@H@Z ; CWnd::SetFont

; 1062 : 	GetDlgItem(IDC_AGE_EDIT)->SetFont(&myFont20);

  0094e	6a 01		 push	 1
  00950	8d 55 e8	 lea	 edx, DWORD PTR _myFont20$[ebp]
  00953	52		 push	 edx
  00954	68 ef 03 00 00	 push	 1007			; 000003efH
  00959	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0095c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00962	8b c8		 mov	 ecx, eax
  00964	e8 00 00 00 00	 call	 ?SetFont@CWnd@@QAEXPAVCFont@@H@Z ; CWnd::SetFont

; 1063 : 	GetDlgItem(IDC_DOCTOR_EDIT)->SetFont(&myFont20);

  00969	6a 01		 push	 1
  0096b	8d 45 e8	 lea	 eax, DWORD PTR _myFont20$[ebp]
  0096e	50		 push	 eax
  0096f	68 f0 03 00 00	 push	 1008			; 000003f0H
  00974	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00977	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0097d	8b c8		 mov	 ecx, eax
  0097f	e8 00 00 00 00	 call	 ?SetFont@CWnd@@QAEXPAVCFont@@H@Z ; CWnd::SetFont

; 1064 : 	GetDlgItem(IDC_NAME_EDIT)->EnableWindow(FALSE);

  00984	6a 00		 push	 0
  00986	68 ed 03 00 00	 push	 1005			; 000003edH
  0098b	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0098e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00994	8b c8		 mov	 ecx, eax
  00996	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?EnableWindow@CWnd@@QAEHH@Z

; 1065 : 	GetDlgItem(IDC_ID_EDIT)->EnableWindow(FALSE);

  0099c	6a 00		 push	 0
  0099e	68 ec 03 00 00	 push	 1004			; 000003ecH
  009a3	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  009a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  009ac	8b c8		 mov	 ecx, eax
  009ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?EnableWindow@CWnd@@QAEHH@Z

; 1066 : 	GetDlgItem(IDC_SEX_EDIT)->EnableWindow(FALSE);

  009b4	6a 00		 push	 0
  009b6	68 ee 03 00 00	 push	 1006			; 000003eeH
  009bb	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  009be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  009c4	8b c8		 mov	 ecx, eax
  009c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?EnableWindow@CWnd@@QAEHH@Z

; 1067 : 	GetDlgItem(IDC_AGE_EDIT)->EnableWindow(FALSE);

  009cc	6a 00		 push	 0
  009ce	68 ef 03 00 00	 push	 1007			; 000003efH
  009d3	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  009d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  009dc	8b c8		 mov	 ecx, eax
  009de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?EnableWindow@CWnd@@QAEHH@Z

; 1068 : 	GetDlgItem(IDC_DOCTOR_EDIT)->EnableWindow(FALSE);

  009e4	6a 00		 push	 0
  009e6	68 f0 03 00 00	 push	 1008			; 000003f0H
  009eb	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  009ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  009f4	8b c8		 mov	 ecx, eax
  009f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?EnableWindow@CWnd@@QAEHH@Z

; 1069 : 	GetDlgItem(IDC_RECORD_INFO_STATIC)->SetWindowText(_T("准备就绪"));

  009fc	68 00 00 00 00	 push	 OFFSET $SG4294957237
  00a01	68 0b 04 00 00	 push	 1035			; 0000040bH
  00a06	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00a09	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00a0f	8b c8		 mov	 ecx, eax
  00a11	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 1070 : 	GetDlgItem(IDC_STORAGE_INFO_STATIC)->SetWindowText(_T("未插入"));

  00a17	68 00 00 00 00	 push	 OFFSET $SG4294957236
  00a1c	68 09 04 00 00	 push	 1033			; 00000409H
  00a21	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00a24	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00a2a	8b c8		 mov	 ecx, eax
  00a2c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 1071 : 	//设置内镜信息
; 1072 : 	GetDlgItem(IDC_DISPOSABLE_INFO_STATIC)->SetWindowText(_T("一次性"));

  00a32	68 00 00 00 00	 push	 OFFSET $SG4294957235
  00a37	68 08 04 00 00	 push	 1032			; 00000408H
  00a3c	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00a3f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00a45	8b c8		 mov	 ecx, eax
  00a47	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 1073 : 	GetDlgItem(IDC_ENDOSCOPEID_INFO_STATIC)->SetWindowText(_T("310D"));

  00a4d	68 00 00 00 00	 push	 OFFSET $SG4294957234
  00a52	68 07 04 00 00	 push	 1031			; 00000407H
  00a57	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00a5a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00a60	8b c8		 mov	 ecx, eax
  00a62	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 1074 : 	myFont20.CreateFont(40, 0, 0, 0, FW_NORMAL, FALSE, FALSE, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, DEFAULT_PITCH | FF_SWISS, _T("宋体"));

  00a68	68 00 00 00 00	 push	 OFFSET $SG4294957233
  00a6d	6a 20		 push	 32			; 00000020H
  00a6f	6a 00		 push	 0
  00a71	6a 00		 push	 0
  00a73	6a 00		 push	 0
  00a75	6a 00		 push	 0
  00a77	6a 00		 push	 0
  00a79	6a 00		 push	 0
  00a7b	6a 00		 push	 0
  00a7d	68 90 01 00 00	 push	 400			; 00000190H
  00a82	6a 00		 push	 0
  00a84	6a 00		 push	 0
  00a86	6a 00		 push	 0
  00a88	6a 28		 push	 40			; 00000028H
  00a8a	8d 4d e8	 lea	 ecx, DWORD PTR _myFont20$[ebp]
  00a8d	e8 00 00 00 00	 call	 ?CreateFontA@CFont@@QAEHHHHHHEEEEEEEEPBD@Z ; CFont::CreateFontA

; 1075 : 	
; 1076 : 	GetDlgItem(IDC_STATIC_INFOBOX)->SetWindowPos(NULL, 1000, 50, 200, 30, SWP_NOZORDER);

  00a92	6a 04		 push	 4
  00a94	6a 1e		 push	 30			; 0000001eH
  00a96	68 c8 00 00 00	 push	 200			; 000000c8H
  00a9b	6a 32		 push	 50			; 00000032H
  00a9d	68 e8 03 00 00	 push	 1000			; 000003e8H
  00aa2	6a 00		 push	 0
  00aa4	68 0e 04 00 00	 push	 1038			; 0000040eH
  00aa9	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00aac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00ab2	8b c8		 mov	 ecx, eax
  00ab4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowPos@CWnd@@QAEHPBV1@HHHHI@Z

; 1077 : 	GetDlgItem(IDC_STATIC_INFOBOX)->SetFont(&myFont20);

  00aba	6a 01		 push	 1
  00abc	8d 4d e8	 lea	 ecx, DWORD PTR _myFont20$[ebp]
  00abf	51		 push	 ecx
  00ac0	68 0e 04 00 00	 push	 1038			; 0000040eH
  00ac5	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00ac8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00ace	8b c8		 mov	 ecx, eax
  00ad0	e8 00 00 00 00	 call	 ?SetFont@CWnd@@QAEXPAVCFont@@H@Z ; CWnd::SetFont

; 1078 : 	//GetDlgItem(IDC_STATIC_INFOBOX)->ShowWindow(SW_HIDE);
; 1079 : 	
; 1080 : 
; 1081 : }

  00ad5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00adc	8d 4d e8	 lea	 ecx, DWORD PTR _myFont20$[ebp]
  00adf	e8 00 00 00 00	 call	 ??1CFont@@UAE@XZ	; CFont::~CFont
  00ae4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00ae7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00aee	59		 pop	 ecx
  00aef	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00af2	33 cd		 xor	 ecx, ebp
  00af4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00af9	8b e5		 mov	 esp, ebp
  00afb	5d		 pop	 ebp
  00afc	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?InitializeFormBoxLayout@CEndoScopeMFCDlg@@QAEXXZ$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR _myFont20$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CFont@@UAE@XZ	; CFont::~CFont
__ehhandler$?InitializeFormBoxLayout@CEndoScopeMFCDlg@@QAEXXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?InitializeFormBoxLayout@CEndoScopeMFCDlg@@QAEXXZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?InitializeFormBoxLayout@CEndoScopeMFCDlg@@QAEXXZ ENDP	; CEndoScopeMFCDlg::InitializeFormBoxLayout
; Function compile flags: /Odtp
;	COMDAT ?__autoclassinit@CFont@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_$initVBases$ = 8					; size = 4
?__autoclassinit@CFont@@QAEXI@Z PROC			; CFont::__autoclassinit, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?__autoclassinit@CGdiObject@@QAEXI@Z
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?__autoclassinit@CFont@@QAEXI@Z ENDP			; CFont::__autoclassinit
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ??__Eb@@YAXXZ
text$yc	SEGMENT
??__Eb@@YAXXZ PROC					; `dynamic initializer for 'b'', COMDAT

; 1086 : HBRUSH b = CreateSolidBrush(RGB(0, 0, 0));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a 00		 push	 0
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateSolidBrush@4
  0000b	a3 00 00 00 00	 mov	 DWORD PTR ?b@@3PAUHBRUSH__@@A, eax ; b
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??__Eb@@YAXXZ ENDP					; `dynamic initializer for 'b''
text$yc	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?OnCtlColor@CEndoScopeMFCDlg@@QAEPAUHBRUSH__@@PAVCDC@@PAVCWnd@@I@Z
_TEXT	SEGMENT
_hbr$ = -8						; size = 4
_this$ = -4						; size = 4
_pDC$ = 8						; size = 4
_pWnd$ = 12						; size = 4
_nCtlColor$ = 16					; size = 4
?OnCtlColor@CEndoScopeMFCDlg@@QAEPAUHBRUSH__@@PAVCDC@@PAVCWnd@@I@Z PROC ; CEndoScopeMFCDlg::OnCtlColor, COMDAT
; _this$ = ecx

; 1088 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1089 : 	HBRUSH hbr = CDialogEx::OnCtlColor(pDC, pWnd, nCtlColor);

  00009	8b 45 10	 mov	 eax, DWORD PTR _nCtlColor$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR _pWnd$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 08	 mov	 edx, DWORD PTR _pDC$[ebp]
  00014	52		 push	 edx
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?OnCtlColor@CDialogEx@@IAEPAUHBRUSH__@@PAVCDC@@PAVCWnd@@I@Z
  0001e	89 45 f8	 mov	 DWORD PTR _hbr$[ebp], eax

; 1090 : 
; 1091 : 
; 1092 : 	if (nCtlColor == CTLCOLOR_EDIT)   //更改编辑框

  00021	83 7d 10 01	 cmp	 DWORD PTR _nCtlColor$[ebp], 1
  00025	75 2a		 jne	 SHORT $LN5@OnCtlColor

; 1093 : 	{
; 1094 : 		pDC->SetTextColor(RGB(255, 255, 255));

  00027	68 ff ff ff 00	 push	 16777215		; 00ffffffH
  0002c	8b 45 08	 mov	 eax, DWORD PTR _pDC$[ebp]
  0002f	8b 10		 mov	 edx, DWORD PTR [eax]
  00031	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00034	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00037	ff d0		 call	 eax

; 1095 : 		pDC->SetBkColor(RGB(0, 0, 0));

  00039	6a 00		 push	 0
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00043	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  00046	ff d0		 call	 eax

; 1096 : 		return b;

  00048	a1 00 00 00 00	 mov	 eax, DWORD PTR ?b@@3PAUHBRUSH__@@A ; b
  0004d	eb 63		 jmp	 SHORT $LN6@OnCtlColor
  0004f	eb 5e		 jmp	 SHORT $LN4@OnCtlColor
$LN5@OnCtlColor:

; 1097 : 	}
; 1098 : 	else if (nCtlColor == CTLCOLOR_STATIC)  //更改静态文本

  00051	83 7d 10 06	 cmp	 DWORD PTR _nCtlColor$[ebp], 6
  00055	75 2a		 jne	 SHORT $LN3@OnCtlColor

; 1099 : 	{
; 1100 : 
; 1101 : 		pDC->SetTextColor(RGB(255, 255, 255));

  00057	68 ff ff ff 00	 push	 16777215		; 00ffffffH
  0005c	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0005f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00061	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00064	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00067	ff d0		 call	 eax

; 1102 : 		pDC->SetBkColor(RGB(0, 0, 0));

  00069	6a 00		 push	 0
  0006b	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0006e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00070	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00073	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  00076	ff d0		 call	 eax

; 1103 : 		return b;

  00078	a1 00 00 00 00	 mov	 eax, DWORD PTR ?b@@3PAUHBRUSH__@@A ; b
  0007d	eb 33		 jmp	 SHORT $LN6@OnCtlColor
  0007f	eb 2e		 jmp	 SHORT $LN4@OnCtlColor
$LN3@OnCtlColor:

; 1104 : 	}
; 1105 : 	else if (nCtlColor == CTLCOLOR_DLG)   //更改对话框背景色

  00081	83 7d 10 04	 cmp	 DWORD PTR _nCtlColor$[ebp], 4
  00085	75 28		 jne	 SHORT $LN4@OnCtlColor

; 1106 : 	{
; 1107 : 		pDC->SetTextColor(RGB(255, 255, 255));

  00087	68 ff ff ff 00	 push	 16777215		; 00ffffffH
  0008c	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0008f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00091	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  00094	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00097	ff d0		 call	 eax

; 1108 : 		pDC->SetBkColor(RGB(0, 0, 0));

  00099	6a 00		 push	 0
  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  0009e	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a0	8b 4d 08	 mov	 ecx, DWORD PTR _pDC$[ebp]
  000a3	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  000a6	ff d0		 call	 eax

; 1109 : 		return b;

  000a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?b@@3PAUHBRUSH__@@A ; b
  000ad	eb 03		 jmp	 SHORT $LN6@OnCtlColor
$LN4@OnCtlColor:

; 1110 : 	}
; 1111 : 
; 1112 : 	// TODO:  如果默认的不是所需画笔，则返回另一个画笔
; 1113 : 	return hbr;

  000af	8b 45 f8	 mov	 eax, DWORD PTR _hbr$[ebp]
$LN6@OnCtlColor:

; 1114 : }

  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c2 0c 00	 ret	 12			; 0000000cH
?OnCtlColor@CEndoScopeMFCDlg@@QAEPAUHBRUSH__@@PAVCDC@@PAVCWnd@@I@Z ENDP ; CEndoScopeMFCDlg::OnCtlColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?SetPicWidowShape@CEndoScopeMFCDlg@@QAEXXZ
_TEXT	SEGMENT
_diffrect$2 = -104					; size = 4
_this$ = -100						; size = 4
_m_rectrgn$3 = -96					; size = 8
_roundrgn$4 = -88					; size = 8
_ptVertex$5 = -80					; size = 64
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?SetPicWidowShape@CEndoScopeMFCDlg@@QAEXXZ PROC		; CEndoScopeMFCDlg::SetPicWidowShape, COMDAT
; _this$ = ecx

; 1119 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetPicWidowShape@CEndoScopeMFCDlg@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d 9c	 mov	 DWORD PTR _this$[ebp], ecx

; 1120 : 	//CRect rc;
; 1121 : 	//GetDlgItem(IDC_STILL)->GetClientRect(rc);
; 1122 : 	if (0 == m_nPicWindowShape)

  0002b	8b 45 9c	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	83 b8 68 01 00
	00 00		 cmp	 DWORD PTR [eax+360], 0
  00035	0f 85 be 00 00
	00		 jne	 $LN2@SetPicWido

; 1123 : 	{
; 1124 : 		m_nPicWindowShape = 1;

  0003b	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	c7 81 68 01 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+360], 1

; 1125 : 		GetDlgItem(IDC_FORM_INFO_STATIC)->SetWindowText(_T("圆角"));

  00048	68 00 00 00 00	 push	 OFFSET $SG4294957232
  0004d	68 06 04 00 00	 push	 1030			; 00000406H
  00052	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0005b	8b c8		 mov	 ecx, eax
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 1126 : 		g_pPLC->SetCircular();

  00063	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00069	e8 00 00 00 00	 call	 ?SetCircular@CPLC@@QAEHXZ ; CPLC::SetCircular

; 1127 : 		CRgn roundrgn;

  0006e	6a 01		 push	 1
  00070	8d 4d a8	 lea	 ecx, DWORD PTR _roundrgn$4[ebp]
  00073	e8 00 00 00 00	 call	 ?__autoclassinit@CRgn@@QAEXI@Z
  00078	8d 4d a8	 lea	 ecx, DWORD PTR _roundrgn$4[ebp]
  0007b	e8 00 00 00 00	 call	 ??0CRgn@@QAE@XZ		; CRgn::CRgn
  00080	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1128 : 		//创建一个带圆角的矩形，左上角x,y，右下角x,y，圆角高宽
; 1129 : 		roundrgn.CreateRoundRectRgn(2, 2, m_rPicRect.Width()-1, m_rPicRect.Height()-1, 150, 150);

  00087	68 96 00 00 00	 push	 150			; 00000096H
  0008c	68 96 00 00 00	 push	 150			; 00000096H
  00091	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  00094	81 c1 58 01 00
	00		 add	 ecx, 344		; 00000158H
  0009a	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  0009f	83 e8 01	 sub	 eax, 1
  000a2	50		 push	 eax
  000a3	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	81 c1 58 01 00
	00		 add	 ecx, 344		; 00000158H
  000ac	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  000b1	83 e8 01	 sub	 eax, 1
  000b4	50		 push	 eax
  000b5	6a 02		 push	 2
  000b7	6a 02		 push	 2
  000b9	8d 4d a8	 lea	 ecx, DWORD PTR _roundrgn$4[ebp]
  000bc	e8 00 00 00 00	 call	 ?CreateRoundRectRgn@CRgn@@QAEHHHHHHH@Z ; CRgn::CreateRoundRectRgn

; 1130 : 		//InvalidateRgn(&roundrgn,TRUE);
; 1131 : 		//::InvalidateRgn(m_hPicWindow,roundrgn,TRUE);
; 1132 : 		::SetWindowRgn(m_hPicWindow,roundrgn, TRUE);

  000c1	6a 01		 push	 1
  000c3	8d 4d a8	 lea	 ecx, DWORD PTR _roundrgn$4[ebp]
  000c6	e8 00 00 00 00	 call	 ??BCRgn@@QBEPAUHRGN__@@XZ ; CRgn::operator HRGN__ *
  000cb	50		 push	 eax
  000cc	8b 55 9c	 mov	 edx, DWORD PTR _this$[ebp]
  000cf	8b 82 54 01 00
	00		 mov	 eax, DWORD PTR [edx+340]
  000d5	50		 push	 eax
  000d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowRgn@12

; 1133 : 		//::InvalidateRgn(m_hPicWindow,roundrgn,TRUE);
; 1134 : 		roundrgn.DeleteObject();

  000dc	8d 4d a8	 lea	 ecx, DWORD PTR _roundrgn$4[ebp]
  000df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?DeleteObject@CGdiObject@@QAEHXZ

; 1135 : 		//LONG_PTR Style = ::GetWindowLongPtr(m_hPicWindow,GWL_STYLE);   //获取xx2属性
; 1136 : 		//Style = Style|WS_CLIPCHILDREN;         //xx2属性+WS_CLIPCHILDREN      即父窗口不再重绘子窗口覆盖部分
; 1137 : 		//::SetWindowLongPtr(m_hPicWindow, GWL_STYLE, Style);
; 1138 : 	}

  000e5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ec	8d 4d a8	 lea	 ecx, DWORD PTR _roundrgn$4[ebp]
  000ef	e8 00 00 00 00	 call	 ??1CRgn@@UAE@XZ		; CRgn::~CRgn

; 1139 : 	else

  000f4	e9 0a 02 00 00	 jmp	 $LN3@SetPicWido
$LN2@SetPicWido:

; 1140 : 	{
; 1141 : 		//m_nPicWindowShape = 0;
; 1142 : 		//CRgn rox;
; 1143 : 		//rox.CreateEllipticRgn(2,2,800,800); //画出圆形
; 1144 : 		//::SetWindowRgn(m_hPicWindow,rox, TRUE);
; 1145 : 		//DeleteObject(rox);
; 1146 : 		//::ShowWindow(m_hPicWindow, SW_HIDE);
; 1147 : 		m_nPicWindowShape = 0;

  000f9	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  000fc	c7 81 68 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+360], 0

; 1148 : 		GetDlgItem(IDC_FORM_INFO_STATIC)->SetWindowText(_T("方角"));

  00106	68 00 00 00 00	 push	 OFFSET $SG4294957231
  0010b	68 06 04 00 00	 push	 1030			; 00000406H
  00110	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  00113	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00119	8b c8		 mov	 ecx, eax
  0011b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 1149 : 		g_pPLC->SetSquare();

  00121	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00127	e8 00 00 00 00	 call	 ?SetSquare@CPLC@@QAEHXZ	; CPLC::SetSquare

; 1150 : 
; 1151 : 		CRgn m_rectrgn;

  0012c	6a 01		 push	 1
  0012e	8d 4d a0	 lea	 ecx, DWORD PTR _m_rectrgn$3[ebp]
  00131	e8 00 00 00 00	 call	 ?__autoclassinit@CRgn@@QAEXI@Z
  00136	8d 4d a0	 lea	 ecx, DWORD PTR _m_rectrgn$3[ebp]
  00139	e8 00 00 00 00	 call	 ??0CRgn@@QAE@XZ		; CRgn::CRgn
  0013e	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 1152 : 		CPoint ptVertex[8];

  00145	68 00 00 00 00	 push	 OFFSET ??0CPoint@@QAE@XZ ; CPoint::CPoint
  0014a	6a 08		 push	 8
  0014c	6a 08		 push	 8
  0014e	8d 55 b0	 lea	 edx, DWORD PTR _ptVertex$5[ebp]
  00151	52		 push	 edx
  00152	e8 00 00 00 00	 call	 ??_H@YGXPAXIHP6EPAX0@Z@Z

; 1153 : 		int diffrect = 50;

  00157	c7 45 98 32 00
	00 00		 mov	 DWORD PTR _diffrect$2[ebp], 50 ; 00000032H

; 1154 : 		ptVertex[0].x = 2;

  0015e	b8 08 00 00 00	 mov	 eax, 8
  00163	6b c0 00	 imul	 eax, 0
  00166	c7 44 05 b0 02
	00 00 00	 mov	 DWORD PTR _ptVertex$5[ebp+eax], 2

; 1155 : 		ptVertex[0].y = diffrect;

  0016e	b9 08 00 00 00	 mov	 ecx, 8
  00173	6b c9 00	 imul	 ecx, 0
  00176	8b 55 98	 mov	 edx, DWORD PTR _diffrect$2[ebp]
  00179	89 54 0d b4	 mov	 DWORD PTR _ptVertex$5[ebp+ecx+4], edx

; 1156 : 		ptVertex[1].x = diffrect;

  0017d	b8 08 00 00 00	 mov	 eax, 8
  00182	c1 e0 00	 shl	 eax, 0
  00185	8b 4d 98	 mov	 ecx, DWORD PTR _diffrect$2[ebp]
  00188	89 4c 05 b0	 mov	 DWORD PTR _ptVertex$5[ebp+eax], ecx

; 1157 : 		ptVertex[1].y = 2;

  0018c	ba 08 00 00 00	 mov	 edx, 8
  00191	c1 e2 00	 shl	 edx, 0
  00194	c7 44 15 b4 02
	00 00 00	 mov	 DWORD PTR _ptVertex$5[ebp+edx+4], 2

; 1158 : 		ptVertex[2].x = m_rPicRect.Width() - diffrect;

  0019c	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  0019f	81 c1 58 01 00
	00		 add	 ecx, 344		; 00000158H
  001a5	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  001aa	2b 45 98	 sub	 eax, DWORD PTR _diffrect$2[ebp]
  001ad	b9 08 00 00 00	 mov	 ecx, 8
  001b2	d1 e1		 shl	 ecx, 1
  001b4	89 44 0d b0	 mov	 DWORD PTR _ptVertex$5[ebp+ecx], eax

; 1159 : 		ptVertex[2].y = 2;

  001b8	ba 08 00 00 00	 mov	 edx, 8
  001bd	d1 e2		 shl	 edx, 1
  001bf	c7 44 15 b4 02
	00 00 00	 mov	 DWORD PTR _ptVertex$5[ebp+edx+4], 2

; 1160 : 		ptVertex[3].x = m_rPicRect.Width() - 2;

  001c7	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  001ca	81 c1 58 01 00
	00		 add	 ecx, 344		; 00000158H
  001d0	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  001d5	83 e8 02	 sub	 eax, 2
  001d8	b9 08 00 00 00	 mov	 ecx, 8
  001dd	6b c9 03	 imul	 ecx, 3
  001e0	89 44 0d b0	 mov	 DWORD PTR _ptVertex$5[ebp+ecx], eax

; 1161 : 		ptVertex[3].y = diffrect;

  001e4	ba 08 00 00 00	 mov	 edx, 8
  001e9	6b d2 03	 imul	 edx, 3
  001ec	8b 45 98	 mov	 eax, DWORD PTR _diffrect$2[ebp]
  001ef	89 44 15 b4	 mov	 DWORD PTR _ptVertex$5[ebp+edx+4], eax

; 1162 : 		ptVertex[4].x = m_rPicRect.Width() - 2;

  001f3	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  001f6	81 c1 58 01 00
	00		 add	 ecx, 344		; 00000158H
  001fc	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  00201	83 e8 02	 sub	 eax, 2
  00204	b9 08 00 00 00	 mov	 ecx, 8
  00209	c1 e1 02	 shl	 ecx, 2
  0020c	89 44 0d b0	 mov	 DWORD PTR _ptVertex$5[ebp+ecx], eax

; 1163 : 		ptVertex[4].y = m_rPicRect.Height() - diffrect;

  00210	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  00213	81 c1 58 01 00
	00		 add	 ecx, 344		; 00000158H
  00219	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  0021e	2b 45 98	 sub	 eax, DWORD PTR _diffrect$2[ebp]
  00221	ba 08 00 00 00	 mov	 edx, 8
  00226	c1 e2 02	 shl	 edx, 2
  00229	89 44 15 b4	 mov	 DWORD PTR _ptVertex$5[ebp+edx+4], eax

; 1164 : 		ptVertex[5].x = m_rPicRect.Width() - diffrect;

  0022d	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  00230	81 c1 58 01 00
	00		 add	 ecx, 344		; 00000158H
  00236	e8 00 00 00 00	 call	 ?Width@CRect@@QBEHXZ	; CRect::Width
  0023b	2b 45 98	 sub	 eax, DWORD PTR _diffrect$2[ebp]
  0023e	b9 08 00 00 00	 mov	 ecx, 8
  00243	6b c9 05	 imul	 ecx, 5
  00246	89 44 0d b0	 mov	 DWORD PTR _ptVertex$5[ebp+ecx], eax

; 1165 : 		ptVertex[5].y = m_rPicRect.Height() - 2;

  0024a	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  0024d	81 c1 58 01 00
	00		 add	 ecx, 344		; 00000158H
  00253	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  00258	83 e8 02	 sub	 eax, 2
  0025b	ba 08 00 00 00	 mov	 edx, 8
  00260	6b d2 05	 imul	 edx, 5
  00263	89 44 15 b4	 mov	 DWORD PTR _ptVertex$5[ebp+edx+4], eax

; 1166 : 		ptVertex[6].x = diffrect;

  00267	b8 08 00 00 00	 mov	 eax, 8
  0026c	6b c0 06	 imul	 eax, 6
  0026f	8b 4d 98	 mov	 ecx, DWORD PTR _diffrect$2[ebp]
  00272	89 4c 05 b0	 mov	 DWORD PTR _ptVertex$5[ebp+eax], ecx

; 1167 : 		ptVertex[6].y = m_rPicRect.Height() - 2;

  00276	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  00279	81 c1 58 01 00
	00		 add	 ecx, 344		; 00000158H
  0027f	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  00284	83 e8 02	 sub	 eax, 2
  00287	ba 08 00 00 00	 mov	 edx, 8
  0028c	6b d2 06	 imul	 edx, 6
  0028f	89 44 15 b4	 mov	 DWORD PTR _ptVertex$5[ebp+edx+4], eax

; 1168 : 		ptVertex[7].x = 2;

  00293	b8 08 00 00 00	 mov	 eax, 8
  00298	6b c0 07	 imul	 eax, 7
  0029b	c7 44 05 b0 02
	00 00 00	 mov	 DWORD PTR _ptVertex$5[ebp+eax], 2

; 1169 : 		ptVertex[7].y = m_rPicRect.Height() - diffrect;

  002a3	8b 4d 9c	 mov	 ecx, DWORD PTR _this$[ebp]
  002a6	81 c1 58 01 00
	00		 add	 ecx, 344		; 00000158H
  002ac	e8 00 00 00 00	 call	 ?Height@CRect@@QBEHXZ	; CRect::Height
  002b1	2b 45 98	 sub	 eax, DWORD PTR _diffrect$2[ebp]
  002b4	b9 08 00 00 00	 mov	 ecx, 8
  002b9	6b c9 07	 imul	 ecx, 7
  002bc	89 44 0d b4	 mov	 DWORD PTR _ptVertex$5[ebp+ecx+4], eax

; 1170 : 
; 1171 : 		//wm_1021
; 1172 : 		m_rectrgn.CreatePolygonRgn(ptVertex, 8, WINDING);//WINDING ALTERNATE

  002c0	6a 02		 push	 2
  002c2	6a 08		 push	 8
  002c4	8d 55 b0	 lea	 edx, DWORD PTR _ptVertex$5[ebp]
  002c7	52		 push	 edx
  002c8	8d 4d a0	 lea	 ecx, DWORD PTR _m_rectrgn$3[ebp]
  002cb	e8 00 00 00 00	 call	 ?CreatePolygonRgn@CRgn@@QAEHPAUtagPOINT@@HH@Z ; CRgn::CreatePolygonRgn

; 1173 : 		//InvalidateRgn(&m_rectrgn,TRUE);
; 1174 : 		//::InvalidateRgn(m_hPicWindow,m_rectrgn,TRUE);
; 1175 : 		::SetWindowRgn(m_hPicWindow,m_rectrgn, TRUE);

  002d0	6a 01		 push	 1
  002d2	8d 4d a0	 lea	 ecx, DWORD PTR _m_rectrgn$3[ebp]
  002d5	e8 00 00 00 00	 call	 ??BCRgn@@QBEPAUHRGN__@@XZ ; CRgn::operator HRGN__ *
  002da	50		 push	 eax
  002db	8b 45 9c	 mov	 eax, DWORD PTR _this$[ebp]
  002de	8b 88 54 01 00
	00		 mov	 ecx, DWORD PTR [eax+340]
  002e4	51		 push	 ecx
  002e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetWindowRgn@12

; 1176 : 		//::InvalidateRgn(m_hPicWindow,m_rectrgn,TRUE);
; 1177 : 		m_rectrgn.DeleteObject();

  002eb	8d 4d a0	 lea	 ecx, DWORD PTR _m_rectrgn$3[ebp]
  002ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?DeleteObject@CGdiObject@@QAEHXZ

; 1178 : 		//LONG_PTR Style = ::GetWindowLongPtr(m_hPicWindow,GWL_STYLE);   //获取xx2属性
; 1179 : 		//Style = Style|WS_CLIPCHILDREN;         //xx2属性+WS_CLIPCHILDREN      即父窗口不再重绘子窗口覆盖部分
; 1180 : 		//::SetWindowLongPtr(m_hPicWindow, GWL_STYLE, Style);
; 1181 : 	}

  002f4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002fb	8d 4d a0	 lea	 ecx, DWORD PTR _m_rectrgn$3[ebp]
  002fe	e8 00 00 00 00	 call	 ??1CRgn@@UAE@XZ		; CRgn::~CRgn
$LN3@SetPicWido:

; 1182 : }

  00303	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00306	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0030d	59		 pop	 ecx
  0030e	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00311	33 cd		 xor	 ecx, ebp
  00313	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00318	8b e5		 mov	 esp, ebp
  0031a	5d		 pop	 ebp
  0031b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetPicWidowShape@CEndoScopeMFCDlg@@QAEXXZ$0:
  00000	8d 4d a8	 lea	 ecx, DWORD PTR _roundrgn$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CRgn@@UAE@XZ		; CRgn::~CRgn
__unwindfunclet$?SetPicWidowShape@CEndoScopeMFCDlg@@QAEXXZ$1:
  00008	8d 4d a0	 lea	 ecx, DWORD PTR _m_rectrgn$3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1CRgn@@UAE@XZ		; CRgn::~CRgn
__ehhandler$?SetPicWidowShape@CEndoScopeMFCDlg@@QAEXXZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetPicWidowShape@CEndoScopeMFCDlg@@QAEXXZ
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetPicWidowShape@CEndoScopeMFCDlg@@QAEXXZ ENDP		; CEndoScopeMFCDlg::SetPicWidowShape
; Function compile flags: /Odtp
;	COMDAT ?__autoclassinit@CRgn@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_$initVBases$ = 8					; size = 4
?__autoclassinit@CRgn@@QAEXI@Z PROC			; CRgn::__autoclassinit, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?__autoclassinit@CGdiObject@@QAEXI@Z
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?__autoclassinit@CRgn@@QAEXI@Z ENDP			; CRgn::__autoclassinit
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?VideoZoom@CEndoScopeMFCDlg@@AAEXXZ
_TEXT	SEGMENT
tv65 = -8						; size = 4
_this$ = -4						; size = 4
?VideoZoom@CEndoScopeMFCDlg@@AAEXXZ PROC		; CEndoScopeMFCDlg::VideoZoom, COMDAT
; _this$ = ecx

; 1226 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1227 : 
; 1228 : 	switch (m_nZoomIn)

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 88 6c 01 00
	00		 mov	 ecx, DWORD PTR [eax+364]
  00012	89 4d f8	 mov	 DWORD PTR tv65[ebp], ecx
  00015	83 7d f8 03	 cmp	 DWORD PTR tv65[ebp], 3
  00019	0f 87 5a 01 00
	00		 ja	 $LN1@VideoZoom
  0001f	8b 55 f8	 mov	 edx, DWORD PTR tv65[ebp]
  00022	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN10@VideoZoom[edx*4]
$LN5@VideoZoom:

; 1229 : 	{
; 1230 : 	case 0:
; 1231 : 		//原始1倍
; 1232 : 		g_pPLC->Zoom1();

  00029	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0002f	e8 00 00 00 00	 call	 ?Zoom1@CPLC@@QAEHXZ	; CPLC::Zoom1

; 1233 : 		GetDlgItem(IDC_ENLARGE_INFO_STATIC)->SetWindowText(_T("1.0倍"));

  00034	68 00 00 00 00	 push	 OFFSET $SG4294957230
  00039	68 05 04 00 00	 push	 1029			; 00000405H
  0003e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00047	8b c8		 mov	 ecx, eax
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 1234 : 		SetZoom(1);

  0004f	83 ec 08	 sub	 esp, 8
  00052	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0005a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0005f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	e8 00 00 00 00	 call	 ?SetZoom@CEndoScopeMFCDlg@@QAEXN@Z ; CEndoScopeMFCDlg::SetZoom

; 1235 : 		m_nZoomIn++;

  00067	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	8b 88 6c 01 00
	00		 mov	 ecx, DWORD PTR [eax+364]
  00070	83 c1 01	 add	 ecx, 1
  00073	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00076	89 8a 6c 01 00
	00		 mov	 DWORD PTR [edx+364], ecx

; 1236 : 		break;

  0007c	e9 f8 00 00 00	 jmp	 $LN6@VideoZoom
$LN4@VideoZoom:

; 1237 : 	case 1:
; 1238 : 		//放大1.2倍
; 1239 : 		g_pPLC->Zoom2();

  00081	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00087	e8 00 00 00 00	 call	 ?Zoom2@CPLC@@QAEHXZ	; CPLC::Zoom2

; 1240 : 		GetDlgItem(IDC_ENLARGE_INFO_STATIC)->SetWindowText(_T("1.2倍"));

  0008c	68 00 00 00 00	 push	 OFFSET $SG4294957229
  00091	68 05 04 00 00	 push	 1029			; 00000405H
  00096	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0009f	8b c8		 mov	 ecx, eax
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 1241 : 		SetZoom(1.2);

  000a7	83 ec 08	 sub	 esp, 8
  000aa	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff3333333333333
  000b2	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000b7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ba	e8 00 00 00 00	 call	 ?SetZoom@CEndoScopeMFCDlg@@QAEXN@Z ; CEndoScopeMFCDlg::SetZoom

; 1242 : 		m_nZoomIn++;

  000bf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c2	8b 88 6c 01 00
	00		 mov	 ecx, DWORD PTR [eax+364]
  000c8	83 c1 01	 add	 ecx, 1
  000cb	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000ce	89 8a 6c 01 00
	00		 mov	 DWORD PTR [edx+364], ecx

; 1243 : 		break;

  000d4	e9 a0 00 00 00	 jmp	 $LN6@VideoZoom
$LN3@VideoZoom:

; 1244 : 	case 2:
; 1245 : 		//放大1.5倍
; 1246 : 		g_pPLC->Zoom3();

  000d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  000df	e8 00 00 00 00	 call	 ?Zoom3@CPLC@@QAEHXZ	; CPLC::Zoom3

; 1247 : 		GetDlgItem(IDC_ENLARGE_INFO_STATIC)->SetWindowText(_T("1.5倍"));

  000e4	68 00 00 00 00	 push	 OFFSET $SG4294957228
  000e9	68 05 04 00 00	 push	 1029			; 00000405H
  000ee	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  000f7	8b c8		 mov	 ecx, eax
  000f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 1248 : 		SetZoom(1.5);

  000ff	83 ec 08	 sub	 esp, 8
  00102	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff8000000000000
  0010a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0010f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00112	e8 00 00 00 00	 call	 ?SetZoom@CEndoScopeMFCDlg@@QAEXN@Z ; CEndoScopeMFCDlg::SetZoom

; 1249 : 		m_nZoomIn++;

  00117	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011a	8b 88 6c 01 00
	00		 mov	 ecx, DWORD PTR [eax+364]
  00120	83 c1 01	 add	 ecx, 1
  00123	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00126	89 8a 6c 01 00
	00		 mov	 DWORD PTR [edx+364], ecx

; 1250 : 		break;

  0012c	eb 4b		 jmp	 SHORT $LN6@VideoZoom
$LN2@VideoZoom:

; 1251 : 	case 3:
; 1252 : 		//放大2倍    
; 1253 : 		g_pPLC->Zoom4();

  0012e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00134	e8 00 00 00 00	 call	 ?Zoom4@CPLC@@QAEHXZ	; CPLC::Zoom4

; 1254 : 		GetDlgItem(IDC_ENLARGE_INFO_STATIC)->SetWindowText(_T("2.0倍"));

  00139	68 00 00 00 00	 push	 OFFSET $SG4294957227
  0013e	68 05 04 00 00	 push	 1029			; 00000405H
  00143	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00146	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0014c	8b c8		 mov	 ecx, eax
  0014e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 1255 : 		SetZoom(2);

  00154	83 ec 08	 sub	 esp, 8
  00157	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4000000000000000
  0015f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00164	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00167	e8 00 00 00 00	 call	 ?SetZoom@CEndoScopeMFCDlg@@QAEXN@Z ; CEndoScopeMFCDlg::SetZoom

; 1256 : 		m_nZoomIn=0;

  0016c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0016f	c7 80 6c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+364], 0
$LN1@VideoZoom:
$LN6@VideoZoom:

; 1257 : 		break;
; 1258 : 	default:
; 1259 : 		break;
; 1260 : 	}
; 1261 : }

  00179	8b e5		 mov	 esp, ebp
  0017b	5d		 pop	 ebp
  0017c	c3		 ret	 0
  0017d	8d 49 00	 npad	 3
$LN10@VideoZoom:
  00180	00 00 00 00	 DD	 $LN5@VideoZoom
  00184	00 00 00 00	 DD	 $LN4@VideoZoom
  00188	00 00 00 00	 DD	 $LN3@VideoZoom
  0018c	00 00 00 00	 DD	 $LN2@VideoZoom
?VideoZoom@CEndoScopeMFCDlg@@AAEXXZ ENDP		; CEndoScopeMFCDlg::VideoZoom
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?PreTranslateMessage@CEndoScopeMFCDlg@@UAEHPAUtagMSG@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pMsg$ = 8						; size = 4
?PreTranslateMessage@CEndoScopeMFCDlg@@UAEHPAUtagMSG@@@Z PROC ; CEndoScopeMFCDlg::PreTranslateMessage, COMDAT
; _this$ = ecx

; 1264 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1265 : 	// TODO: 在此添加专用代码和/或调用基类
; 1266 : 	if (pMsg->message == WM_KEYDOWN && pMsg->wParam == VK_ESCAPE)

  00007	8b 45 08	 mov	 eax, DWORD PTR _pMsg$[ebp]
  0000a	81 78 04 00 01
	00 00		 cmp	 DWORD PTR [eax+4], 256	; 00000100H
  00011	75 1c		 jne	 SHORT $LN66@PreTransla
  00013	8b 4d 08	 mov	 ecx, DWORD PTR _pMsg$[ebp]
  00016	83 79 08 1b	 cmp	 DWORD PTR [ecx+8], 27	; 0000001bH
  0001a	75 13		 jne	 SHORT $LN66@PreTransla

; 1267 : 	{
; 1268 : 		m_dwcap.Stop();

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	81 c1 18 02 00
	00		 add	 ecx, 536		; 00000218H
  00025	e8 00 00 00 00	 call	 ?Stop@CEDSCapture@@QAEXXZ ; CEDSCapture::Stop
  0002a	e9 8b 04 00 00	 jmp	 $LN65@PreTransla
$LN66@PreTransla:

; 1269 : 	}
; 1270 : 	else if (pMsg->message == WM_KEYDOWN && pMsg->wParam == VK_F3)

  0002f	8b 55 08	 mov	 edx, DWORD PTR _pMsg$[ebp]
  00032	81 7a 04 00 01
	00 00		 cmp	 DWORD PTR [edx+4], 256	; 00000100H
  00039	75 2f		 jne	 SHORT $LN64@PreTransla
  0003b	8b 45 08	 mov	 eax, DWORD PTR _pMsg$[ebp]
  0003e	83 78 08 72	 cmp	 DWORD PTR [eax+8], 114	; 00000072H
  00042	75 26		 jne	 SHORT $LN64@PreTransla

; 1271 : 	{
; 1272 : 		if (m_f3key==0)

  00044	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	83 b9 cc 01 00
	00 00		 cmp	 DWORD PTR [ecx+460], 0
  0004e	75 15		 jne	 SHORT $LN63@PreTransla

; 1273 : 		{
; 1274 : 			VideoZoom();

  00050	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	e8 00 00 00 00	 call	 ?VideoZoom@CEndoScopeMFCDlg@@AAEXXZ ; CEndoScopeMFCDlg::VideoZoom

; 1275 : 			m_f3key=1;

  00058	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005b	c7 82 cc 01 00
	00 01 00 00 00	 mov	 DWORD PTR [edx+460], 1
$LN63@PreTransla:

; 1276 : 		}
; 1277 : 	}

  00065	e9 50 04 00 00	 jmp	 $LN65@PreTransla
$LN64@PreTransla:

; 1278 : 	else if(pMsg->message == WM_KEYUP && pMsg->wParam == VK_F3)

  0006a	8b 45 08	 mov	 eax, DWORD PTR _pMsg$[ebp]
  0006d	81 78 04 01 01
	00 00		 cmp	 DWORD PTR [eax+4], 257	; 00000101H
  00074	75 27		 jne	 SHORT $LN61@PreTransla
  00076	8b 4d 08	 mov	 ecx, DWORD PTR _pMsg$[ebp]
  00079	83 79 08 72	 cmp	 DWORD PTR [ecx+8], 114	; 00000072H
  0007d	75 1e		 jne	 SHORT $LN61@PreTransla

; 1279 : 	{
; 1280 : 		if (m_f3key==1)

  0007f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00082	83 ba cc 01 00
	00 01		 cmp	 DWORD PTR [edx+460], 1
  00089	75 0d		 jne	 SHORT $LN60@PreTransla

; 1281 : 		{
; 1282 : 			m_f3key = 0;

  0008b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008e	c7 80 cc 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+460], 0
$LN60@PreTransla:

; 1283 : 		}
; 1284 : 	}

  00098	e9 1d 04 00 00	 jmp	 $LN65@PreTransla
$LN61@PreTransla:

; 1285 : 	else if (pMsg->message == WM_KEYDOWN && pMsg->wParam == VK_F4)

  0009d	8b 4d 08	 mov	 ecx, DWORD PTR _pMsg$[ebp]
  000a0	81 79 04 00 01
	00 00		 cmp	 DWORD PTR [ecx+4], 256	; 00000100H
  000a7	75 2f		 jne	 SHORT $LN58@PreTransla
  000a9	8b 55 08	 mov	 edx, DWORD PTR _pMsg$[ebp]
  000ac	83 7a 08 73	 cmp	 DWORD PTR [edx+8], 115	; 00000073H
  000b0	75 26		 jne	 SHORT $LN58@PreTransla

; 1286 : 	{
; 1287 : 		//录入信息
; 1288 : 		if (m_f4key==0)

  000b2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b5	83 b8 d0 01 00
	00 00		 cmp	 DWORD PTR [eax+464], 0
  000bc	75 15		 jne	 SHORT $LN57@PreTransla

; 1289 : 		{
; 1290 : 			EnterPatientInfo();

  000be	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	e8 00 00 00 00	 call	 ?EnterPatientInfo@CEndoScopeMFCDlg@@QAEXXZ ; CEndoScopeMFCDlg::EnterPatientInfo

; 1291 : 			m_f4key = 1;

  000c6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c9	c7 81 d0 01 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+464], 1
$LN57@PreTransla:

; 1292 : 		}
; 1293 : 		
; 1294 : 	}

  000d3	e9 e2 03 00 00	 jmp	 $LN65@PreTransla
$LN58@PreTransla:

; 1295 : 	else if (pMsg->message == WM_KEYUP && pMsg->wParam == VK_F4)

  000d8	8b 55 08	 mov	 edx, DWORD PTR _pMsg$[ebp]
  000db	81 7a 04 01 01
	00 00		 cmp	 DWORD PTR [edx+4], 257	; 00000101H
  000e2	75 27		 jne	 SHORT $LN55@PreTransla
  000e4	8b 45 08	 mov	 eax, DWORD PTR _pMsg$[ebp]
  000e7	83 78 08 73	 cmp	 DWORD PTR [eax+8], 115	; 00000073H
  000eb	75 1e		 jne	 SHORT $LN55@PreTransla

; 1296 : 	{
; 1297 : 		if (m_f4key==1)

  000ed	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f0	83 b9 d0 01 00
	00 01		 cmp	 DWORD PTR [ecx+464], 1
  000f7	75 0d		 jne	 SHORT $LN54@PreTransla

; 1298 : 		{
; 1299 : 			m_f4key = 0;

  000f9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000fc	c7 82 d0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+464], 0
$LN54@PreTransla:

; 1300 : 		}
; 1301 : 	}

  00106	e9 af 03 00 00	 jmp	 $LN65@PreTransla
$LN55@PreTransla:

; 1302 : 	else if (pMsg->message == WM_KEYDOWN && pMsg->wParam == VK_F5)

  0010b	8b 45 08	 mov	 eax, DWORD PTR _pMsg$[ebp]
  0010e	81 78 04 00 01
	00 00		 cmp	 DWORD PTR [eax+4], 256	; 00000100H
  00115	75 2f		 jne	 SHORT $LN52@PreTransla
  00117	8b 4d 08	 mov	 ecx, DWORD PTR _pMsg$[ebp]
  0011a	83 79 08 74	 cmp	 DWORD PTR [ecx+8], 116	; 00000074H
  0011e	75 26		 jne	 SHORT $LN52@PreTransla

; 1303 : 	{
; 1304 : 		//冻结图像
; 1305 : 		if (m_f5key==0)

  00120	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00123	83 ba d4 01 00
	00 00		 cmp	 DWORD PTR [edx+468], 0
  0012a	75 15		 jne	 SHORT $LN51@PreTransla

; 1306 : 		{
; 1307 : 			ShotPicWindow();

  0012c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0012f	e8 00 00 00 00	 call	 ?ShotPicWindow@CEndoScopeMFCDlg@@QAEXXZ ; CEndoScopeMFCDlg::ShotPicWindow

; 1308 : 			m_f5key = 1;

  00134	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00137	c7 80 d4 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+468], 1
$LN51@PreTransla:

; 1309 : 		}
; 1310 : 		
; 1311 : 	}

  00141	e9 74 03 00 00	 jmp	 $LN65@PreTransla
$LN52@PreTransla:

; 1312 : 	else if (pMsg->message == WM_KEYUP && pMsg->wParam == VK_F5)

  00146	8b 4d 08	 mov	 ecx, DWORD PTR _pMsg$[ebp]
  00149	81 79 04 01 01
	00 00		 cmp	 DWORD PTR [ecx+4], 257	; 00000101H
  00150	75 27		 jne	 SHORT $LN49@PreTransla
  00152	8b 55 08	 mov	 edx, DWORD PTR _pMsg$[ebp]
  00155	83 7a 08 74	 cmp	 DWORD PTR [edx+8], 116	; 00000074H
  00159	75 1e		 jne	 SHORT $LN49@PreTransla

; 1313 : 	{
; 1314 : 		if (m_f5key==1)

  0015b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0015e	83 b8 d4 01 00
	00 01		 cmp	 DWORD PTR [eax+468], 1
  00165	75 0d		 jne	 SHORT $LN48@PreTransla

; 1315 : 		{
; 1316 : 			m_f5key = 0;

  00167	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0016a	c7 81 d4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+468], 0
$LN48@PreTransla:

; 1317 : 		}
; 1318 : 	}

  00174	e9 41 03 00 00	 jmp	 $LN65@PreTransla
$LN49@PreTransla:

; 1319 : 	else if (pMsg->message == WM_KEYDOWN && pMsg->wParam == VK_F6)

  00179	8b 55 08	 mov	 edx, DWORD PTR _pMsg$[ebp]
  0017c	81 7a 04 00 01
	00 00		 cmp	 DWORD PTR [edx+4], 256	; 00000100H
  00183	75 2f		 jne	 SHORT $LN46@PreTransla
  00185	8b 45 08	 mov	 eax, DWORD PTR _pMsg$[ebp]
  00188	83 78 08 75	 cmp	 DWORD PTR [eax+8], 117	; 00000075H
  0018c	75 26		 jne	 SHORT $LN46@PreTransla

; 1320 : 	{
; 1321 : 		if (m_f6key==0)

  0018e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00191	83 b9 d8 01 00
	00 00		 cmp	 DWORD PTR [ecx+472], 0
  00198	75 15		 jne	 SHORT $LN45@PreTransla

; 1322 : 		{
; 1323 : 			SetPicWidowShape();

  0019a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0019d	e8 00 00 00 00	 call	 ?SetPicWidowShape@CEndoScopeMFCDlg@@QAEXXZ ; CEndoScopeMFCDlg::SetPicWidowShape

; 1324 : 			m_f6key = 1;

  001a2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001a5	c7 82 d8 01 00
	00 01 00 00 00	 mov	 DWORD PTR [edx+472], 1
$LN45@PreTransla:

; 1325 : 		}
; 1326 : 		
; 1327 : 	}

  001af	e9 06 03 00 00	 jmp	 $LN65@PreTransla
$LN46@PreTransla:

; 1328 : 	else if (pMsg->message == WM_KEYUP && pMsg->wParam == VK_F6)

  001b4	8b 45 08	 mov	 eax, DWORD PTR _pMsg$[ebp]
  001b7	81 78 04 01 01
	00 00		 cmp	 DWORD PTR [eax+4], 257	; 00000101H
  001be	75 27		 jne	 SHORT $LN43@PreTransla
  001c0	8b 4d 08	 mov	 ecx, DWORD PTR _pMsg$[ebp]
  001c3	83 79 08 75	 cmp	 DWORD PTR [ecx+8], 117	; 00000075H
  001c7	75 1e		 jne	 SHORT $LN43@PreTransla

; 1329 : 	{
; 1330 : 		if (m_f6key==1)

  001c9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001cc	83 ba d8 01 00
	00 01		 cmp	 DWORD PTR [edx+472], 1
  001d3	75 0d		 jne	 SHORT $LN42@PreTransla

; 1331 : 		{
; 1332 : 			m_f6key = 0;

  001d5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001d8	c7 80 d8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+472], 0
$LN42@PreTransla:

; 1333 : 		}
; 1334 : 	}

  001e2	e9 d3 02 00 00	 jmp	 $LN65@PreTransla
$LN43@PreTransla:

; 1335 : 	else if (pMsg->message == WM_KEYDOWN && pMsg->wParam == VK_F7)

  001e7	8b 4d 08	 mov	 ecx, DWORD PTR _pMsg$[ebp]
  001ea	81 79 04 00 01
	00 00		 cmp	 DWORD PTR [ecx+4], 256	; 00000100H
  001f1	0f 85 a6 00 00
	00		 jne	 $LN40@PreTransla
  001f7	8b 55 08	 mov	 edx, DWORD PTR _pMsg$[ebp]
  001fa	83 7a 08 76	 cmp	 DWORD PTR [edx+8], 118	; 00000076H
  001fe	0f 85 99 00 00
	00		 jne	 $LN40@PreTransla

; 1336 : 	{
; 1337 : 		
; 1338 : 		//UpdateWhiteBalance();
; 1339 : 		if(0 == m_f7key)

  00204	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00207	83 b8 e4 01 00
	00 00		 cmp	 DWORD PTR [eax+484], 0
  0020e	75 3f		 jne	 SHORT $LN39@PreTransla

; 1340 : 		{
; 1341 : 			//平均测光
; 1342 : 			g_nMetering = 0;

  00210	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_nMetering@@3HA, 0 ; g_nMetering

; 1343 : 			g_pPLC->AverageMetering();

  0021a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00220	e8 00 00 00 00	 call	 ?AverageMetering@CPLC@@QAEHXZ ; CPLC::AverageMetering

; 1344 : 			GetDlgItem(IDC_TESTLIGHT_INFO_STATIC)->SetWindowText(_T("平均测光"));

  00225	68 00 00 00 00	 push	 OFFSET $SG4294957226
  0022a	68 03 04 00 00	 push	 1027			; 00000403H
  0022f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00232	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00238	8b c8		 mov	 ecx, eax
  0023a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 1345 : 			m_f7key = 1;

  00240	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00243	c7 81 e4 01 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+484], 1
  0024d	eb 49		 jmp	 SHORT $LN38@PreTransla
$LN39@PreTransla:

; 1346 : 		}
; 1347 : 		else if(1 == m_f7key)

  0024f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00252	83 ba e4 01 00
	00 01		 cmp	 DWORD PTR [edx+484], 1
  00259	75 3d		 jne	 SHORT $LN38@PreTransla

; 1348 : 		{
; 1349 : 			//峰值测光
; 1350 : 			g_nMetering = 1;

  0025b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?g_nMetering@@3HA, 1 ; g_nMetering

; 1351 : 			g_pPLC->PeakMetering();

  00265	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0026b	e8 00 00 00 00	 call	 ?PeakMetering@CPLC@@QAEHXZ ; CPLC::PeakMetering

; 1352 : 			GetDlgItem(IDC_TESTLIGHT_INFO_STATIC)->SetWindowText(_T("峰值测光"));

  00270	68 00 00 00 00	 push	 OFFSET $SG4294957225
  00275	68 03 04 00 00	 push	 1027			; 00000403H
  0027a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0027d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00283	8b c8		 mov	 ecx, eax
  00285	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 1353 : 			m_f7key = 0;

  0028b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0028e	c7 80 e4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+484], 0
$LN38@PreTransla:

; 1354 : 		}
; 1355 : 
; 1356 : 	}

  00298	e9 1d 02 00 00	 jmp	 $LN65@PreTransla
$LN40@PreTransla:

; 1357 : 	else if(pMsg->message == WM_KEYDOWN && pMsg->wParam == VK_F8)

  0029d	8b 4d 08	 mov	 ecx, DWORD PTR _pMsg$[ebp]
  002a0	81 79 04 00 01
	00 00		 cmp	 DWORD PTR [ecx+4], 256	; 00000100H
  002a7	75 16		 jne	 SHORT $LN35@PreTransla
  002a9	8b 55 08	 mov	 edx, DWORD PTR _pMsg$[ebp]
  002ac	83 7a 08 77	 cmp	 DWORD PTR [edx+8], 119	; 00000077H
  002b0	75 0d		 jne	 SHORT $LN35@PreTransla

; 1358 : 	{
; 1359 : 		MoveDatatoUSBDevice();

  002b2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002b5	e8 00 00 00 00	 call	 ?MoveDatatoUSBDevice@CEndoScopeMFCDlg@@QAEXXZ ; CEndoScopeMFCDlg::MoveDatatoUSBDevice
  002ba	e9 fb 01 00 00	 jmp	 $LN65@PreTransla
$LN35@PreTransla:

; 1360 : 	}
; 1361 : 	else if (pMsg->message == WM_KEYDOWN && pMsg->wParam == VK_F11)

  002bf	8b 45 08	 mov	 eax, DWORD PTR _pMsg$[ebp]
  002c2	81 78 04 00 01
	00 00		 cmp	 DWORD PTR [eax+4], 256	; 00000100H
  002c9	75 2f		 jne	 SHORT $LN33@PreTransla
  002cb	8b 4d 08	 mov	 ecx, DWORD PTR _pMsg$[ebp]
  002ce	83 79 08 7a	 cmp	 DWORD PTR [ecx+8], 122	; 0000007aH
  002d2	75 26		 jne	 SHORT $LN33@PreTransla

; 1362 : 	{
; 1363 : 		//录屏
; 1364 : 		if (m_f11key==0)

  002d4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002d7	83 ba dc 01 00
	00 00		 cmp	 DWORD PTR [edx+476], 0
  002de	75 15		 jne	 SHORT $LN32@PreTransla

; 1365 : 		{
; 1366 : 			SaveVideo();

  002e0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002e3	e8 00 00 00 00	 call	 ?SaveVideo@CEndoScopeMFCDlg@@QAEXXZ ; CEndoScopeMFCDlg::SaveVideo

; 1367 : 			
; 1368 : 			m_f11key = 1;

  002e8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002eb	c7 80 dc 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+476], 1
$LN32@PreTransla:

; 1369 : 		}
; 1370 : 	}

  002f5	e9 c0 01 00 00	 jmp	 $LN65@PreTransla
$LN33@PreTransla:

; 1371 : 	else if (pMsg->message == WM_KEYUP && pMsg->wParam == VK_F11)

  002fa	8b 4d 08	 mov	 ecx, DWORD PTR _pMsg$[ebp]
  002fd	81 79 04 01 01
	00 00		 cmp	 DWORD PTR [ecx+4], 257	; 00000101H
  00304	75 27		 jne	 SHORT $LN30@PreTransla
  00306	8b 55 08	 mov	 edx, DWORD PTR _pMsg$[ebp]
  00309	83 7a 08 7a	 cmp	 DWORD PTR [edx+8], 122	; 0000007aH
  0030d	75 1e		 jne	 SHORT $LN30@PreTransla

; 1372 : 	{
; 1373 : 		if (m_f11key==1)

  0030f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00312	83 b8 dc 01 00
	00 01		 cmp	 DWORD PTR [eax+476], 1
  00319	75 0d		 jne	 SHORT $LN29@PreTransla

; 1374 : 		{
; 1375 : 			m_f11key = 0;

  0031b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0031e	c7 81 dc 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+476], 0
$LN29@PreTransla:

; 1376 : 		}
; 1377 : 	}

  00328	e9 8d 01 00 00	 jmp	 $LN65@PreTransla
$LN30@PreTransla:

; 1378 : 	else if(pMsg->message == WM_KEYDOWN && pMsg->wParam == VK_F2)

  0032d	8b 55 08	 mov	 edx, DWORD PTR _pMsg$[ebp]
  00330	81 7a 04 00 01
	00 00		 cmp	 DWORD PTR [edx+4], 256	; 00000100H
  00337	75 52		 jne	 SHORT $LN27@PreTransla
  00339	8b 45 08	 mov	 eax, DWORD PTR _pMsg$[ebp]
  0033c	83 78 08 71	 cmp	 DWORD PTR [eax+8], 113	; 00000071H
  00340	75 49		 jne	 SHORT $LN27@PreTransla

; 1379 : 	{
; 1380 : 		if(m_f2key==0)

  00342	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00345	83 b9 e0 01 00
	00 00		 cmp	 DWORD PTR [ecx+480], 0
  0034c	75 17		 jne	 SHORT $LN26@PreTransla

; 1381 : 		{
; 1382 : 			MenuStart();

  0034e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00351	e8 00 00 00 00	 call	 ?MenuStart@CEndoScopeMFCDlg@@AAE_NXZ ; CEndoScopeMFCDlg::MenuStart

; 1383 : 			m_f2key = 1;

  00356	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00359	c7 82 e0 01 00
	00 01 00 00 00	 mov	 DWORD PTR [edx+480], 1
  00363	eb 21		 jmp	 SHORT $LN25@PreTransla
$LN26@PreTransla:

; 1384 : 		}
; 1385 : 		else if(m_f2key==1)

  00365	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00368	83 b8 e0 01 00
	00 01		 cmp	 DWORD PTR [eax+480], 1
  0036f	75 15		 jne	 SHORT $LN25@PreTransla

; 1386 : 		{
; 1387 : 			MenuStop();

  00371	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00374	e8 00 00 00 00	 call	 ?MenuStop@CEndoScopeMFCDlg@@AAE_NXZ ; CEndoScopeMFCDlg::MenuStop

; 1388 : 			m_f2key = 0;

  00379	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0037c	c7 81 e0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+480], 0
$LN25@PreTransla:

; 1389 : 
; 1390 : 		}
; 1391 : 
; 1392 : 	}

  00386	e9 2f 01 00 00	 jmp	 $LN65@PreTransla
$LN27@PreTransla:

; 1393 : 	else if(pMsg->message == WM_KEYDOWN && pMsg->wParam == VK_UP)

  0038b	8b 55 08	 mov	 edx, DWORD PTR _pMsg$[ebp]
  0038e	81 7a 04 00 01
	00 00		 cmp	 DWORD PTR [edx+4], 256	; 00000100H
  00395	75 41		 jne	 SHORT $LN22@PreTransla
  00397	8b 45 08	 mov	 eax, DWORD PTR _pMsg$[ebp]
  0039a	83 78 08 26	 cmp	 DWORD PTR [eax+8], 38	; 00000026H
  0039e	75 38		 jne	 SHORT $LN22@PreTransla

; 1394 : 	{
; 1395 : 		if(1 == m_f2key)

  003a0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003a3	83 b9 e0 01 00
	00 01		 cmp	 DWORD PTR [ecx+480], 1
  003aa	75 0a		 jne	 SHORT $LN21@PreTransla

; 1396 : 		{
; 1397 : 			MenuUp();

  003ac	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003af	e8 00 00 00 00	 call	 ?MenuUp@CEndoScopeMFCDlg@@AAE_NXZ ; CEndoScopeMFCDlg::MenuUp
  003b4	eb 1d		 jmp	 SHORT $LN20@PreTransla
$LN21@PreTransla:

; 1398 : 		}
; 1399 : 		else if(3 == m_f2key)

  003b6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003b9	83 ba e0 01 00
	00 03		 cmp	 DWORD PTR [edx+480], 3
  003c0	75 11		 jne	 SHORT $LN20@PreTransla

; 1400 : 		{
; 1401 : 			if (g_nBrightness < 10)

  003c2	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR ?g_nBrightness@@3HA, 10 ; g_nBrightness, 0000000aH
  003c9	7d 08		 jge	 SHORT $LN20@PreTransla

; 1402 : 			{
; 1403 : 				BrightnessAdd();

  003cb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003ce	e8 00 00 00 00	 call	 ?BrightnessAdd@CEndoScopeMFCDlg@@AAEXXZ ; CEndoScopeMFCDlg::BrightnessAdd
$LN20@PreTransla:

; 1404 : 			}
; 1405 : 		}
; 1406 : 		
; 1407 : 
; 1408 : 	}

  003d3	e9 e2 00 00 00	 jmp	 $LN65@PreTransla
$LN22@PreTransla:

; 1409 : 	else if(pMsg->message == WM_KEYDOWN && pMsg->wParam == VK_DOWN)

  003d8	8b 45 08	 mov	 eax, DWORD PTR _pMsg$[ebp]
  003db	81 78 04 00 01
	00 00		 cmp	 DWORD PTR [eax+4], 256	; 00000100H
  003e2	75 41		 jne	 SHORT $LN16@PreTransla
  003e4	8b 4d 08	 mov	 ecx, DWORD PTR _pMsg$[ebp]
  003e7	83 79 08 28	 cmp	 DWORD PTR [ecx+8], 40	; 00000028H
  003eb	75 38		 jne	 SHORT $LN16@PreTransla

; 1410 : 	{
; 1411 : 		if(1 == m_f2key)

  003ed	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003f0	83 ba e0 01 00
	00 01		 cmp	 DWORD PTR [edx+480], 1
  003f7	75 0a		 jne	 SHORT $LN15@PreTransla

; 1412 : 		{
; 1413 : 			MenuDown();

  003f9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003fc	e8 00 00 00 00	 call	 ?MenuDown@CEndoScopeMFCDlg@@AAE_NXZ ; CEndoScopeMFCDlg::MenuDown
  00401	eb 1d		 jmp	 SHORT $LN14@PreTransla
$LN15@PreTransla:

; 1414 : 		}
; 1415 : 		else if(3 == m_f2key)

  00403	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00406	83 b8 e0 01 00
	00 03		 cmp	 DWORD PTR [eax+480], 3
  0040d	75 11		 jne	 SHORT $LN14@PreTransla

; 1416 : 		{
; 1417 : 			if (g_nBrightness > -10)

  0040f	83 3d 00 00 00
	00 f6		 cmp	 DWORD PTR ?g_nBrightness@@3HA, -10 ; g_nBrightness, fffffff6H
  00416	7e 08		 jle	 SHORT $LN14@PreTransla

; 1418 : 			{
; 1419 : 				BrightnessSub();

  00418	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0041b	e8 00 00 00 00	 call	 ?BrightnessSub@CEndoScopeMFCDlg@@AAEXXZ ; CEndoScopeMFCDlg::BrightnessSub
$LN14@PreTransla:

; 1420 : 			}
; 1421 : 		}
; 1422 : 	}

  00420	e9 95 00 00 00	 jmp	 $LN65@PreTransla
$LN16@PreTransla:

; 1423 : 	else if(pMsg->message == WM_KEYDOWN && pMsg->wParam == VK_LEFT)

  00425	8b 4d 08	 mov	 ecx, DWORD PTR _pMsg$[ebp]
  00428	81 79 04 00 01
	00 00		 cmp	 DWORD PTR [ecx+4], 256	; 00000100H
  0042f	75 1f		 jne	 SHORT $LN10@PreTransla
  00431	8b 55 08	 mov	 edx, DWORD PTR _pMsg$[ebp]
  00434	83 7a 08 25	 cmp	 DWORD PTR [edx+8], 37	; 00000025H
  00438	75 16		 jne	 SHORT $LN10@PreTransla

; 1424 : 	{
; 1425 : 		if(1 == m_f2key)

  0043a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0043d	83 b8 e0 01 00
	00 01		 cmp	 DWORD PTR [eax+480], 1
  00444	75 08		 jne	 SHORT $LN9@PreTransla

; 1426 : 		{
; 1427 : 			MenuLeft();

  00446	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00449	e8 00 00 00 00	 call	 ?MenuLeft@CEndoScopeMFCDlg@@AAE_NXZ ; CEndoScopeMFCDlg::MenuLeft
$LN9@PreTransla:

; 1428 : 		}
; 1429 : 	}

  0044e	eb 6a		 jmp	 SHORT $LN65@PreTransla
$LN10@PreTransla:

; 1430 : 	else if(pMsg->message == WM_KEYDOWN && pMsg->wParam == VK_RIGHT)

  00450	8b 4d 08	 mov	 ecx, DWORD PTR _pMsg$[ebp]
  00453	81 79 04 00 01
	00 00		 cmp	 DWORD PTR [ecx+4], 256	; 00000100H
  0045a	75 1f		 jne	 SHORT $LN7@PreTransla
  0045c	8b 55 08	 mov	 edx, DWORD PTR _pMsg$[ebp]
  0045f	83 7a 08 27	 cmp	 DWORD PTR [edx+8], 39	; 00000027H
  00463	75 16		 jne	 SHORT $LN7@PreTransla

; 1431 : 	{
; 1432 : 		if(1 == m_f2key)

  00465	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00468	83 b8 e0 01 00
	00 01		 cmp	 DWORD PTR [eax+480], 1
  0046f	75 08		 jne	 SHORT $LN6@PreTransla

; 1433 : 		{
; 1434 : 			MenuRight();

  00471	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00474	e8 00 00 00 00	 call	 ?MenuRight@CEndoScopeMFCDlg@@AAE_NXZ ; CEndoScopeMFCDlg::MenuRight
$LN6@PreTransla:

; 1435 : 		}
; 1436 : 
; 1437 : 	}

  00479	eb 3f		 jmp	 SHORT $LN65@PreTransla
$LN7@PreTransla:

; 1438 : 	else if(pMsg->message == WM_KEYDOWN && pMsg->wParam == VK_F12)

  0047b	8b 4d 08	 mov	 ecx, DWORD PTR _pMsg$[ebp]
  0047e	81 79 04 00 01
	00 00		 cmp	 DWORD PTR [ecx+4], 256	; 00000100H
  00485	75 33		 jne	 SHORT $LN65@PreTransla
  00487	8b 55 08	 mov	 edx, DWORD PTR _pMsg$[ebp]
  0048a	83 7a 08 7b	 cmp	 DWORD PTR [edx+8], 123	; 0000007bH
  0048e	75 2a		 jne	 SHORT $LN65@PreTransla

; 1439 : 	{
; 1440 : 		if(1 == m_f2key)

  00490	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00493	83 b8 e0 01 00
	00 01		 cmp	 DWORD PTR [eax+480], 1
  0049a	75 0a		 jne	 SHORT $LN3@PreTransla

; 1441 : 		{
; 1442 : 			MenuEnter();

  0049c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0049f	e8 00 00 00 00	 call	 ?MenuEnter@CEndoScopeMFCDlg@@AAE_NXZ ; CEndoScopeMFCDlg::MenuEnter
  004a4	eb 14		 jmp	 SHORT $LN65@PreTransla
$LN3@PreTransla:

; 1443 : 		}
; 1444 : 		else if(3 == m_f2key)

  004a6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004a9	83 b9 e0 01 00
	00 03		 cmp	 DWORD PTR [ecx+480], 3
  004b0	75 08		 jne	 SHORT $LN65@PreTransla

; 1445 : 		{
; 1446 : 			RestoreFactorySetting();

  004b2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004b5	e8 00 00 00 00	 call	 ?RestoreFactorySetting@CEndoScopeMFCDlg@@QAEXXZ ; CEndoScopeMFCDlg::RestoreFactorySetting
$LN65@PreTransla:

; 1447 : 		}
; 1448 : 	}
; 1449 : 	return CDialogEx::PreTranslateMessage(pMsg);

  004ba	8b 55 08	 mov	 edx, DWORD PTR _pMsg$[ebp]
  004bd	52		 push	 edx
  004be	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?PreTranslateMessage@CDialogEx@@UAEHPAUtagMSG@@@Z

; 1450 : }

  004c7	8b e5		 mov	 esp, ebp
  004c9	5d		 pop	 ebp
  004ca	c2 04 00	 ret	 4
?PreTranslateMessage@CEndoScopeMFCDlg@@UAEHPAUtagMSG@@@Z ENDP ; CEndoScopeMFCDlg::PreTranslateMessage
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?ShowCurrentDateTime@CEndoScopeMFCDlg@@AAEXXZ
_TEXT	SEGMENT
$T2 = -40						; size = 8
_this$ = -32						; size = 4
_t_sdt$ = -28						; size = 4
_t_tdt$ = -24						; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?ShowCurrentDateTime@CEndoScopeMFCDlg@@AAEXXZ PROC	; CEndoScopeMFCDlg::ShowCurrentDateTime, COMDAT
; _this$ = ecx

; 1454 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ShowCurrentDateTime@CEndoScopeMFCDlg@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 1455 : 	CString t_sdt;

  0002b	8d 4d e4	 lea	 ecx, DWORD PTR _t_sdt$[ebp]
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1456 : 	CTime t_tdt;

  0003b	8d 4d e8	 lea	 ecx, DWORD PTR _t_tdt$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@XZ	; ATL::CTime::CTime

; 1457 : 	t_tdt = CTime::GetCurrentTime();

  00043	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ?GetTickCount@CTime@ATL@@SG?AV12@XZ ; ATL::CTime::GetTickCount
  0004c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00051	89 4d e8	 mov	 DWORD PTR _t_tdt$[ebp], ecx
  00054	89 55 ec	 mov	 DWORD PTR _t_tdt$[ebp+4], edx

; 1458 : 	t_sdt.Format(_T("%.4d年%.2d月%.2d日%.2d时%.2d分"), t_tdt.GetYear(), t_tdt.GetMonth(), t_tdt.GetDay(), t_tdt.GetHour(), t_tdt.GetMinute()); //获取年份

  00057	8d 4d e8	 lea	 ecx, DWORD PTR _t_tdt$[ebp]
  0005a	e8 00 00 00 00	 call	 ?GetMinute@CTime@ATL@@QBEHXZ ; ATL::CTime::GetMinute
  0005f	50		 push	 eax
  00060	8d 4d e8	 lea	 ecx, DWORD PTR _t_tdt$[ebp]
  00063	e8 00 00 00 00	 call	 ?GetHour@CTime@ATL@@QBEHXZ ; ATL::CTime::GetHour
  00068	50		 push	 eax
  00069	8d 4d e8	 lea	 ecx, DWORD PTR _t_tdt$[ebp]
  0006c	e8 00 00 00 00	 call	 ?GetDay@CTime@ATL@@QBEHXZ ; ATL::CTime::GetDay
  00071	50		 push	 eax
  00072	8d 4d e8	 lea	 ecx, DWORD PTR _t_tdt$[ebp]
  00075	e8 00 00 00 00	 call	 ?GetMonth@CTime@ATL@@QBEHXZ ; ATL::CTime::GetMonth
  0007a	50		 push	 eax
  0007b	8d 4d e8	 lea	 ecx, DWORD PTR _t_tdt$[ebp]
  0007e	e8 00 00 00 00	 call	 ?GetYear@CTime@ATL@@QBEHXZ ; ATL::CTime::GetYear
  00083	50		 push	 eax
  00084	68 00 00 00 00	 push	 OFFSET $SG4294957224
  00089	8d 45 e4	 lea	 eax, DWORD PTR _t_sdt$[ebp]
  0008c	50		 push	 eax
  0008d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  00093	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1459 : 	GetDlgItem(IDC_TIME_STATIC)->SetWindowText(t_sdt);

  00096	8d 4d e4	 lea	 ecx, DWORD PTR _t_sdt$[ebp]
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0009f	50		 push	 eax
  000a0	68 0c 04 00 00	 push	 1036			; 0000040cH
  000a5	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  000ae	8b c8		 mov	 ecx, eax
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 1460 : }

  000b6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000bd	8d 4d e4	 lea	 ecx, DWORD PTR _t_sdt$[ebp]
  000c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000c6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d0	59		 pop	 ecx
  000d1	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d4	33 cd		 xor	 ecx, ebp
  000d6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ShowCurrentDateTime@CEndoScopeMFCDlg@@AAEXXZ$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _t_sdt$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?ShowCurrentDateTime@CEndoScopeMFCDlg@@AAEXXZ:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ShowCurrentDateTime@CEndoScopeMFCDlg@@AAEXXZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ShowCurrentDateTime@CEndoScopeMFCDlg@@AAEXXZ ENDP	; CEndoScopeMFCDlg::ShowCurrentDateTime
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?OnTimer@CEndoScopeMFCDlg@@QAEXI@Z
_TEXT	SEGMENT
tv64 = -8						; size = 4
_this$ = -4						; size = 4
_nIDEvent$ = 8						; size = 4
?OnTimer@CEndoScopeMFCDlg@@QAEXI@Z PROC			; CEndoScopeMFCDlg::OnTimer, COMDAT
; _this$ = ecx

; 1462 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1463 : 	// TODO: 在此添加消息处理程序代码和/或调用默认值
; 1464 : 	switch (nIDEvent)

  00009	8b 45 08	 mov	 eax, DWORD PTR _nIDEvent$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR tv64[ebp], eax
  0000f	83 7d f8 01	 cmp	 DWORD PTR tv64[ebp], 1
  00013	74 11		 je	 SHORT $LN5@OnTimer
  00015	83 7d f8 02	 cmp	 DWORD PTR tv64[ebp], 2
  00019	74 15		 je	 SHORT $LN4@OnTimer
  0001b	83 7d f8 03	 cmp	 DWORD PTR tv64[ebp], 3
  0001f	74 1b		 je	 SHORT $LN3@OnTimer
  00021	e9 84 00 00 00	 jmp	 $LN6@OnTimer
$LN5@OnTimer:

; 1465 : 	{
; 1466 : 	case SHOWTIME:
; 1467 : 		ShowCurrentDateTime();

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?ShowCurrentDateTime@CEndoScopeMFCDlg@@AAEXXZ ; CEndoScopeMFCDlg::ShowCurrentDateTime

; 1468 : 		break;

  0002e	eb 7a		 jmp	 SHORT $LN6@OnTimer
$LN4@OnTimer:

; 1469 : 	case SHOWFPS:
; 1470 : 		//cout << "FPS: " << g_FPS << endl;
; 1471 : 		g_FPS = 0;

  00030	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_FPS@@3HA, 0 ; g_FPS

; 1472 : 		break;

  0003a	eb 6e		 jmp	 SHORT $LN6@OnTimer
$LN3@OnTimer:

; 1473 : 	case WHITEBALANCE:
; 1474 : 		if (m_badjwhite)

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	0f b6 91 b8 03
	00 00		 movzx	 edx, BYTE PTR [ecx+952]
  00046	85 d2		 test	 edx, edx
  00048	74 60		 je	 SHORT $LN6@OnTimer

; 1475 : 		{
; 1476 : 			GetDlgItem(IDC_STATIC_INFOBOX)->SetWindowText(_T("白平衡已完成！"));

  0004a	68 00 00 00 00	 push	 OFFSET $SG4294957223
  0004f	68 0e 04 00 00	 push	 1038			; 0000040eH
  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0005d	8b c8		 mov	 ecx, eax
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 1477 : 			GetDlgItem(IDC_STATIC_INFOBOX)->ShowWindow(SW_SHOW);

  00065	6a 05		 push	 5
  00067	68 0e 04 00 00	 push	 1038			; 0000040eH
  0006c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00075	8b c8		 mov	 ecx, eax
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowWindow@CWnd@@QAEHH@Z

; 1478 : 			Sleep(2000);

  0007d	68 d0 07 00 00	 push	 2000			; 000007d0H
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 1479 : 			GetDlgItem(IDC_STATIC_INFOBOX)->ShowWindow(SW_HIDE);

  00088	6a 00		 push	 0
  0008a	68 0e 04 00 00	 push	 1038			; 0000040eH
  0008f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00098	8b c8		 mov	 ecx, eax
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowWindow@CWnd@@QAEHH@Z

; 1480 : 			KillTimer(WHITEBALANCE);

  000a0	6a 03		 push	 3
  000a2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a5	e8 00 00 00 00	 call	 ?KillTimer@CWnd@@QAEHI@Z ; CWnd::KillTimer
$LN6@OnTimer:

; 1481 : 		}
; 1482 : 
; 1483 : 		
; 1484 : 		break;
; 1485 : 	default:
; 1486 : 		break;
; 1487 : 	}
; 1488 : 	CDialogEx::OnTimer(nIDEvent);

  000aa	8b 45 08	 mov	 eax, DWORD PTR _nIDEvent$[ebp]
  000ad	50		 push	 eax
  000ae	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b1	e8 00 00 00 00	 call	 ?OnTimer@CWnd@@IAEXI@Z	; CWnd::OnTimer

; 1489 : }

  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c2 04 00	 ret	 4
?OnTimer@CEndoScopeMFCDlg@@QAEXI@Z ENDP			; CEndoScopeMFCDlg::OnTimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?InitializeThread@CEndoScopeMFCDlg@@AAEXXZ
_TEXT	SEGMENT
_pShowThread$ = -12					; size = 4
_pRecvThread$ = -8					; size = 4
_this$ = -4						; size = 4
?InitializeThread@CEndoScopeMFCDlg@@AAEXXZ PROC		; CEndoScopeMFCDlg::InitializeThread, COMDAT
; _this$ = ecx

; 1495 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1496 : 	//录屏线程，创建挂起
; 1497 : 	//unsigned threadID;//录像线程
; 1498 : 	//m_hthread = (HANDLE)_beginthreadex(NULL,0,ScreenCAPThreadProc,this,CREATE_SUSPENDED,&threadID);
; 1499 : 	//启动显示线程
; 1500 : 	//m_hthreadprocess = AfxBeginThread(ProcessImage, &m_dwcap, CREATE_SUSPENDED);
; 1501 : 	//创建接收线程
; 1502 : 	m_brecvvideo = true;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c6 80 b5 01 00
	00 01		 mov	 BYTE PTR [eax+437], 1

; 1503 : 	CWinThread *pRecvThread = AfxBeginThread(RecvVideoThreadFunc,this);

  00013	6a 00		 push	 0
  00015	6a 00		 push	 0
  00017	6a 00		 push	 0
  00019	6a 00		 push	 0
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	51		 push	 ecx
  0001f	68 00 00 00 00	 push	 OFFSET ?RecvVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z ; CEndoScopeMFCDlg::RecvVideoThreadFunc
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AfxBeginThread@@YGPAVCWinThread@@P6AIPAX@Z0HIKPAU_SECURITY_ATTRIBUTES@@@Z
  0002a	89 45 f8	 mov	 DWORD PTR _pRecvThread$[ebp], eax

; 1504 : 	if(NULL == pRecvThread)
; 1505 : 	{
; 1506 : 		TRACE(_T("创建接收线程出错\n"));
; 1507 : 	}
; 1508 : 	//创建显示线程
; 1509 : 	m_bshowvideo = true;

  0002d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00030	c6 82 b4 01 00
	00 01		 mov	 BYTE PTR [edx+436], 1

; 1510 : 	CWinThread *pShowThread = AfxBeginThread(ShowVideoThreadFunc,this);

  00037	6a 00		 push	 0
  00039	6a 00		 push	 0
  0003b	6a 00		 push	 0
  0003d	6a 00		 push	 0
  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	50		 push	 eax
  00043	68 00 00 00 00	 push	 OFFSET ?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z ; CEndoScopeMFCDlg::ShowVideoThreadFunc
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AfxBeginThread@@YGPAVCWinThread@@P6AIPAX@Z0HIKPAU_SECURITY_ATTRIBUTES@@@Z
  0004e	89 45 f4	 mov	 DWORD PTR _pShowThread$[ebp], eax

; 1511 : 	if(NULL == pShowThread)
; 1512 : 	{
; 1513 : 		TRACE(_T("创建显示线程出错\n"));
; 1514 : 	}
; 1515 : }

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
?InitializeThread@CEndoScopeMFCDlg@@AAEXXZ ENDP		; CEndoScopeMFCDlg::InitializeThread
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?RecvVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z
_TEXT	SEGMENT
tv132 = -32						; size = 4
$T1 = -28						; size = 4
_readlen$ = -24						; size = 4
$T2 = -20						; size = 4
_RecvBuffer$ = -16					; size = 4
_pObj$ = -12						; size = 4
_datalen$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lpParameter$ = 8					; size = 4
?RecvVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z PROC	; CEndoScopeMFCDlg::RecvVideoThreadFunc, COMDAT

; 1518 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1519 : 	CEndoScopeMFCDlg *pObj = (CEndoScopeMFCDlg*)lpParameter;

  00010	8b 45 08	 mov	 eax, DWORD PTR _lpParameter$[ebp]
  00013	89 45 f4	 mov	 DWORD PTR _pObj$[ebp], eax

; 1520 : 	BYTE *RecvBuffer = new BYTE[IMGWIDTH*IMGHEIGHT*3];

  00016	68 00 30 2a 00	 push	 2764800			; 002a3000H
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??_U@YAPAXI@Z
  00021	83 c4 04	 add	 esp, 4
  00024	89 45 e4	 mov	 DWORD PTR $T1[ebp], eax
  00027	8b 4d e4	 mov	 ecx, DWORD PTR $T1[ebp]
  0002a	89 4d f0	 mov	 DWORD PTR _RecvBuffer$[ebp], ecx

; 1521 : 	int datalen = 0;

  0002d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _datalen$[ebp], 0

; 1522 : 	int readlen = 0;

  00034	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _readlen$[ebp], 0
$LN7@RecvVideoT:

; 1523 : 	while(pObj->m_brecvvideo)

  0003b	8b 55 f4	 mov	 edx, DWORD PTR _pObj$[ebp]
  0003e	0f b6 82 b5 01
	00 00		 movzx	 eax, BYTE PTR [edx+437]
  00045	85 c0		 test	 eax, eax
  00047	0f 84 af 00 00
	00		 je	 $LN6@RecvVideoT

; 1524 : 	{
; 1525 : 		readlen = ReadPackQueue(RecvBuffer,&datalen);

  0004d	8d 4d f8	 lea	 ecx, DWORD PTR _datalen$[ebp]
  00050	51		 push	 ecx
  00051	8b 55 f0	 mov	 edx, DWORD PTR _RecvBuffer$[ebp]
  00054	52		 push	 edx
  00055	e8 00 00 00 00	 call	 ?ReadPackQueue@@YAHPAEPAH@Z ; ReadPackQueue
  0005a	83 c4 08	 add	 esp, 8
  0005d	89 45 e8	 mov	 DWORD PTR _readlen$[ebp], eax

; 1526 : 		if(readlen < 0 || datalen  <= 0)

  00060	83 7d e8 00	 cmp	 DWORD PTR _readlen$[ebp], 0
  00064	7c 06		 jl	 SHORT $LN4@RecvVideoT
  00066	83 7d f8 00	 cmp	 DWORD PTR _datalen$[ebp], 0
  0006a	7f 0a		 jg	 SHORT $LN5@RecvVideoT
$LN4@RecvVideoT:

; 1527 : 		{
; 1528 : 			Sleep(1);

  0006c	6a 01		 push	 1
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 1529 : 			continue;

  00074	eb c5		 jmp	 SHORT $LN7@RecvVideoT
$LN5@RecvVideoT:

; 1530 : 		}
; 1531 : 		if (pObj->m_badjwhite)

  00076	8b 45 f4	 mov	 eax, DWORD PTR _pObj$[ebp]
  00079	0f b6 88 b8 03
	00 00		 movzx	 ecx, BYTE PTR [eax+952]
  00080	85 c9		 test	 ecx, ecx
  00082	74 18		 je	 SHORT $LN3@RecvVideoT

; 1532 : 		{
; 1533 : 			pObj->m_bwhiteok = false;

  00084	8b 55 f4	 mov	 edx, DWORD PTR _pObj$[ebp]
  00087	c6 82 b9 03 00
	00 00		 mov	 BYTE PTR [edx+953], 0

; 1534 : 			pObj->CalWhilteLamda(RecvBuffer);

  0008e	8b 45 f0	 mov	 eax, DWORD PTR _RecvBuffer$[ebp]
  00091	50		 push	 eax
  00092	8b 4d f4	 mov	 ecx, DWORD PTR _pObj$[ebp]
  00095	e8 00 00 00 00	 call	 ?CalWhilteLamda@CEndoScopeMFCDlg@@QAEXPAE@Z ; CEndoScopeMFCDlg::CalWhilteLamda

; 1535 : 			continue;

  0009a	eb 9f		 jmp	 SHORT $LN7@RecvVideoT
$LN3@RecvVideoT:

; 1536 : 		}
; 1537 : 		//白平衡调整
; 1538 : 		pObj->AdjWhiteBalance(RecvBuffer, IMGWIDTH, IMGHEIGHT, &(pObj->m_src.data));

  0009c	8b 4d f4	 mov	 ecx, DWORD PTR _pObj$[ebp]
  0009f	81 c1 04 04 00
	00		 add	 ecx, 1028		; 00000404H
  000a5	51		 push	 ecx
  000a6	68 d0 02 00 00	 push	 720			; 000002d0H
  000ab	68 00 05 00 00	 push	 1280			; 00000500H
  000b0	8b 55 f0	 mov	 edx, DWORD PTR _RecvBuffer$[ebp]
  000b3	52		 push	 edx
  000b4	8b 4d f4	 mov	 ecx, DWORD PTR _pObj$[ebp]
  000b7	e8 00 00 00 00	 call	 ?AdjWhiteBalance@CEndoScopeMFCDlg@@QAEXPAEHHPAPAE@Z ; CEndoScopeMFCDlg::AdjWhiteBalance

; 1539 : 
; 1540 : 		//memcpy(pObj->m_src.data,RecvBuffer,IMGSIZE);
; 1541 : 		//grayWB->balanceWhite(m_src,m_src);
; 1542 : 		if (pObj->m_src.empty())

  000bc	8b 4d f4	 mov	 ecx, DWORD PTR _pObj$[ebp]
  000bf	81 c1 f4 03 00
	00		 add	 ecx, 1012		; 000003f4H
  000c5	e8 00 00 00 00	 call	 ?empty@Mat@cv@@QBE_NXZ	; cv::Mat::empty
  000ca	0f b6 c0	 movzx	 eax, al
  000cd	85 c0		 test	 eax, eax
  000cf	74 07		 je	 SHORT $LN2@RecvVideoT

; 1543 : 		{
; 1544 : 			continue;

  000d1	e9 65 ff ff ff	 jmp	 $LN7@RecvVideoT

; 1545 : 			//delete pbuftest;
; 1546 : 			//delete buf;
; 1547 : 		}
; 1548 : 		else

  000d6	eb 17		 jmp	 SHORT $LN1@RecvVideoT
$LN2@RecvVideoT:

; 1549 : 		{
; 1550 : 			WriteQueue(pObj->m_src.data,IMGSIZE);

  000d8	68 00 30 2a 00	 push	 2764800			; 002a3000H
  000dd	8b 4d f4	 mov	 ecx, DWORD PTR _pObj$[ebp]
  000e0	8b 91 04 04 00
	00		 mov	 edx, DWORD PTR [ecx+1028]
  000e6	52		 push	 edx
  000e7	e8 00 00 00 00	 call	 ?WriteQueue@@YAXPAEH@Z	; WriteQueue
  000ec	83 c4 08	 add	 esp, 8
$LN1@RecvVideoT:

; 1551 : 		}
; 1552 : 
; 1553 : 		
; 1554 : 		////镜像处理
; 1555 : 		//flip(pObj->m_src, pObj->m_src, 0);
; 1556 : 		////插值放大
; 1557 : 		//if (pObj->m_dZoom>1.0)
; 1558 : 		//{
; 1559 : 		//	Mat t_img ;
; 1560 : 		//	WaitForSingleObject(g_resizeevent, INFINITE);
; 1561 : 		//	resize(pObj->m_src, t_img, cvSize(pObj->roi_w, pObj->roi_h), INTER_NEAREST);
; 1562 : 		//	t_img(Rect(pObj->roi_c, pObj->roi_r, IMGWIDTH, IMGHEIGHT)).copyTo(pObj->m_src);
; 1563 : 		//	SetEvent(g_resizeevent);
; 1564 : 		//}
; 1565 : 
; 1566 : 		//resize(pObj->m_src,pObj->m_dst,cvSize(1536,864),INTER_NEAREST);
; 1567 : 		//imshow("view", pObj->m_dst);
; 1568 : 		//////imwrite("test.jpg",m_dst);
; 1569 : 		//if (pObj->m_bwritevideo)
; 1570 : 		//{
; 1571 : 		//	WriteQueue(pObj->m_src.data,IMGSIZE);
; 1572 : 		//}		
; 1573 : 		//if(pObj->m_bwritepicture)
; 1574 : 		//{
; 1575 : 		//	unsigned char* pbuf = new unsigned char[IMGSIZE];
; 1576 : 		//	memset(pbuf, 0, IMGSIZE);
; 1577 : 		//	memcpy(pbuf, pObj->m_src.data, IMGSIZE);
; 1578 : 		//	//	WaitForSingleObject(g_picevent, INFINITE);
; 1579 : 		//	pObj->m_pPicList.push_back(pbuf);//操作队列
; 1580 : 		//	SetEvent(g_picevent);
; 1581 : 		//	pObj->m_bwritepicture = false;
; 1582 : 		//}
; 1583 : 		//waitKey(16);
; 1584 : 		//g_FPS += 1;
; 1585 : 		Sleep(1);

  000ef	6a 01		 push	 1
  000f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 1586 : 	}

  000f7	e9 3f ff ff ff	 jmp	 $LN7@RecvVideoT
$LN6@RecvVideoT:

; 1587 : 
; 1588 : 	delete[] RecvBuffer;

  000fc	8b 45 f0	 mov	 eax, DWORD PTR _RecvBuffer$[ebp]
  000ff	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
  00102	8b 4d ec	 mov	 ecx, DWORD PTR $T2[ebp]
  00105	51		 push	 ecx
  00106	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??_V@YAXPAX@Z
  0010c	83 c4 04	 add	 esp, 4
  0010f	83 7d ec 00	 cmp	 DWORD PTR $T2[ebp], 0
  00113	75 09		 jne	 SHORT $LN10@RecvVideoT
  00115	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv132[ebp], 0
  0011c	eb 0d		 jmp	 SHORT $LN11@RecvVideoT
$LN10@RecvVideoT:
  0011e	c7 45 f0 23 81
	00 00		 mov	 DWORD PTR _RecvBuffer$[ebp], 33059 ; 00008123H
  00125	8b 55 f0	 mov	 edx, DWORD PTR _RecvBuffer$[ebp]
  00128	89 55 e0	 mov	 DWORD PTR tv132[ebp], edx
$LN11@RecvVideoT:

; 1589 : 	RecvBuffer = NULL;

  0012b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _RecvBuffer$[ebp], 0

; 1590 : 	return 0;

  00132	33 c0		 xor	 eax, eax

; 1591 : 
; 1592 : }

  00134	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00137	33 cd		 xor	 ecx, ebp
  00139	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013e	8b e5		 mov	 esp, ebp
  00140	5d		 pop	 ebp
  00141	c3		 ret	 0
?RecvVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z ENDP	; CEndoScopeMFCDlg::RecvVideoThreadFunc
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z
_TEXT	SEGMENT
$T2 = -392						; size = 56
$T3 = -336						; size = 16
$T4 = -320						; size = 8
$T5 = -312						; size = 8
$T6 = -304						; size = 16
$T7 = -288						; size = 16
$T8 = -272						; size = 16
$T9 = -256						; size = 16
$T10 = -240						; size = 16
$T11 = -224						; size = 16
$T12 = -208						; size = 16
$T13 = -192						; size = 16
$T14 = -176						; size = 4
$T15 = -172						; size = 4
$T16 = -168						; size = 4
$T17 = -164						; size = 8
$T18 = -156						; size = 4
tv279 = -152						; size = 4
tv214 = -148						; size = 4
_ret$ = -144						; size = 4
_savepicnum$ = -140					; size = 4
_pObj$ = -136						; size = 4
_m_showrc$ = -132					; size = 56
_t_img$19 = -76						; size = 56
_len$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_lpParameter$ = 8					; size = 4
?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z PROC	; CEndoScopeMFCDlg::ShowVideoThreadFunc, COMDAT

; 1595 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 7c 01 00
	00		 sub	 esp, 380		; 0000017cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1596 : 	CEndoScopeMFCDlg *pObj = (CEndoScopeMFCDlg*)lpParameter;

  0002b	8b 45 08	 mov	 eax, DWORD PTR _lpParameter$[ebp]
  0002e	89 85 78 ff ff
	ff		 mov	 DWORD PTR _pObj$[ebp], eax

; 1597 : 	int ret =0;

  00034	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ret$[ebp], 0

; 1598 : 	int len = 0;

  0003e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _len$[ebp], 0

; 1599 : 	int savepicnum = 0;

  00045	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _savepicnum$[ebp], 0

; 1600 : 	//InitYUVQueue();
; 1601 : 	Mat m_showrc = Mat(Size(IMGWIDTH, IMGHEIGHT), CV_8UC3);

  0004f	6a 01		 push	 1
  00051	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _m_showrc$[ebp]
  00057	e8 00 00 00 00	 call	 ?__autoclassinit@Mat@cv@@QAEXI@Z
  0005c	6a 10		 push	 16			; 00000010H
  0005e	83 ec 08	 sub	 esp, 8
  00061	8b cc		 mov	 ecx, esp
  00063	89 a5 50 ff ff
	ff		 mov	 DWORD PTR $T14[ebp], esp
  00069	68 d0 02 00 00	 push	 720			; 000002d0H
  0006e	68 00 05 00 00	 push	 1280			; 00000500H
  00073	e8 00 00 00 00	 call	 ??0?$Size_@H@cv@@QAE@HH@Z ; cv::Size_<int>::Size_<int>
  00078	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _m_showrc$[ebp]
  0007e	e8 00 00 00 00	 call	 ??0Mat@cv@@QAE@V?$Size_@H@1@H@Z ; cv::Mat::Mat
  00083	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
$LN26@ShowVideoT:

; 1602 : 	while(pObj->m_bshowvideo)

  0008a	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _pObj$[ebp]
  00090	0f b6 91 b4 01
	00 00		 movzx	 edx, BYTE PTR [ecx+436]
  00097	85 d2		 test	 edx, edx
  00099	0f 84 37 04 00
	00		 je	 $LN10@ShowVideoT

; 1603 : 	{
; 1604 : 		ret = ReadQueue(m_showrc.data, &len);

  0009f	8d 45 ec	 lea	 eax, DWORD PTR _len$[ebp]
  000a2	50		 push	 eax
  000a3	8b 4d 8c	 mov	 ecx, DWORD PTR _m_showrc$[ebp+16]
  000a6	51		 push	 ecx
  000a7	e8 00 00 00 00	 call	 ?ReadQueue@@YAHPAEPAH@Z	; ReadQueue
  000ac	83 c4 08	 add	 esp, 8
  000af	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ret$[ebp], eax

; 1605 : 		if (len <= 0 || ret < 0){

  000b5	83 7d ec 00	 cmp	 DWORD PTR _len$[ebp], 0
  000b9	7e 09		 jle	 SHORT $LN8@ShowVideoT
  000bb	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _ret$[ebp], 0
  000c2	7d 0a		 jge	 SHORT $LN9@ShowVideoT
$LN8@ShowVideoT:

; 1606 : 			Sleep(1);

  000c4	6a 01		 push	 1
  000c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 1607 : 			continue;

  000cc	eb bc		 jmp	 SHORT $LN26@ShowVideoT
$LN9@ShowVideoT:

; 1608 : 		}
; 1609 : 		flip(m_showrc, m_showrc, 0);

  000ce	8d 95 7c ff ff
	ff		 lea	 edx, DWORD PTR _m_showrc$[ebp]
  000d4	52		 push	 edx
  000d5	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  000db	e8 00 00 00 00	 call	 ??0_OutputArray@cv@@QAE@AAVMat@1@@Z ; cv::_OutputArray::_OutputArray
  000e0	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000e4	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _m_showrc$[ebp]
  000ea	50		 push	 eax
  000eb	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  000f1	e8 00 00 00 00	 call	 ??0_InputArray@cv@@QAE@ABVMat@1@@Z ; cv::_InputArray::_InputArray
  000f6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000fa	6a 00		 push	 0
  000fc	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00102	51		 push	 ecx
  00103	8d 95 e0 fe ff
	ff		 lea	 edx, DWORD PTR $T7[ebp]
  00109	52		 push	 edx
  0010a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flip@cv@@YAXABV_InputArray@1@ABV_OutputArray@1@H@Z
  00110	83 c4 0c	 add	 esp, 12			; 0000000cH
  00113	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00117	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  0011d	e8 00 00 00 00	 call	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
  00122	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00126	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  0012c	e8 00 00 00 00	 call	 ??1_OutputArray@cv@@QAE@XZ

; 1610 : 
; 1611 : 		if (pObj->m_bwritevideo)

  00131	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _pObj$[ebp]
  00137	0f b6 88 ac 01
	00 00		 movzx	 ecx, BYTE PTR [eax+428]
  0013e	85 c9		 test	 ecx, ecx
  00140	74 11		 je	 SHORT $LN7@ShowVideoT

; 1612 : 		{
; 1613 : 			WriteYUVQueue(m_showrc.data,IMGSIZE);

  00142	68 00 30 2a 00	 push	 2764800			; 002a3000H
  00147	8b 55 8c	 mov	 edx, DWORD PTR _m_showrc$[ebp+16]
  0014a	52		 push	 edx
  0014b	e8 00 00 00 00	 call	 ?WriteYUVQueue@@YAXPAEH@Z ; WriteYUVQueue
  00150	83 c4 08	 add	 esp, 8
$LN7@ShowVideoT:

; 1614 : 		}
; 1615 : 
; 1616 : 		if(pObj->m_bwritepicture)

  00153	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _pObj$[ebp]
  00159	0f b6 88 ae 01
	00 00		 movzx	 ecx, BYTE PTR [eax+430]
  00160	85 c9		 test	 ecx, ecx
  00162	74 4f		 je	 SHORT $LN4@ShowVideoT

; 1617 : 		{
; 1618 : 			savepicnum++;

  00164	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _savepicnum$[ebp]
  0016a	83 c2 01	 add	 edx, 1
  0016d	89 95 74 ff ff
	ff		 mov	 DWORD PTR _savepicnum$[ebp], edx

; 1619 : 			if(savepicnum<6)

  00173	83 bd 74 ff ff
	ff 06		 cmp	 DWORD PTR _savepicnum$[ebp], 6
  0017a	7d 13		 jge	 SHORT $LN5@ShowVideoT

; 1620 : 			{
; 1621 : 				WritePicQueue(m_showrc.data,IMGSIZE);

  0017c	68 00 30 2a 00	 push	 2764800			; 002a3000H
  00181	8b 45 8c	 mov	 eax, DWORD PTR _m_showrc$[ebp+16]
  00184	50		 push	 eax
  00185	e8 00 00 00 00	 call	 ?WritePicQueue@@YAXPAEH@Z ; WritePicQueue
  0018a	83 c4 08	 add	 esp, 8

; 1622 : 			}
; 1623 : 			else

  0018d	eb 24		 jmp	 SHORT $LN4@ShowVideoT
$LN5@ShowVideoT:

; 1624 : 			{
; 1625 : 				savepicnum = 0;

  0018f	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _savepicnum$[ebp], 0

; 1626 : 				pObj->m_bwritepicture = false;

  00199	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _pObj$[ebp]
  0019f	c6 81 ae 01 00
	00 00		 mov	 BYTE PTR [ecx+430], 0

; 1627 : 				pObj->m_brealsavepic = true;

  001a6	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _pObj$[ebp]
  001ac	c6 82 af 01 00
	00 01		 mov	 BYTE PTR [edx+431], 1
$LN4@ShowVideoT:

; 1628 : 			}
; 1629 : 		}
; 1630 : 		if(pObj->m_brealsavepic)

  001b3	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _pObj$[ebp]
  001b9	0f b6 88 af 01
	00 00		 movzx	 ecx, BYTE PTR [eax+431]
  001c0	85 c9		 test	 ecx, ecx
  001c2	74 11		 je	 SHORT $LN3@ShowVideoT

; 1631 : 		{
; 1632 : 			WritePicQueue(m_showrc.data,IMGSIZE);

  001c4	68 00 30 2a 00	 push	 2764800			; 002a3000H
  001c9	8b 55 8c	 mov	 edx, DWORD PTR _m_showrc$[ebp+16]
  001cc	52		 push	 edx
  001cd	e8 00 00 00 00	 call	 ?WritePicQueue@@YAXPAEH@Z ; WritePicQueue
  001d2	83 c4 08	 add	 esp, 8
$LN3@ShowVideoT:

; 1633 : 		}
; 1634 : 		//插值放大
; 1635 : 		if (pObj->m_dZoom>1.0)

  001d5	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _pObj$[ebp]
  001db	f2 0f 10 80 78
	04 00 00	 movsd	 xmm0, QWORD PTR [eax+1144]
  001e3	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3ff0000000000000
  001eb	0f 86 9e 01 00
	00		 jbe	 $LN2@ShowVideoT

; 1636 : 		{
; 1637 : 			Mat t_img ;

  001f1	6a 01		 push	 1
  001f3	8d 4d b4	 lea	 ecx, DWORD PTR _t_img$19[ebp]
  001f6	e8 00 00 00 00	 call	 ?__autoclassinit@Mat@cv@@QAEXI@Z
  001fb	8d 4d b4	 lea	 ecx, DWORD PTR _t_img$19[ebp]
  001fe	e8 00 00 00 00	 call	 ??0Mat@cv@@QAE@XZ	; cv::Mat::Mat
  00203	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 1638 : 			WaitForSingleObject(g_resizeevent, INFINITE);

  00207	6a ff		 push	 -1
  00209	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_resizeevent@@3VCEvent@@A ; g_resizeevent
  0020e	e8 00 00 00 00	 call	 ??BCSyncObject@@QBEPAXXZ ; CSyncObject::operator void *
  00213	50		 push	 eax
  00214	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8

; 1639 : 			resize(m_showrc, t_img, cvSize(pObj->roi_w, pObj->roi_h), INTER_NEAREST);

  0021a	8d 4d b4	 lea	 ecx, DWORD PTR _t_img$19[ebp]
  0021d	51		 push	 ecx
  0021e	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  00224	e8 00 00 00 00	 call	 ??0_OutputArray@cv@@QAE@AAVMat@1@@Z ; cv::_OutputArray::_OutputArray
  00229	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0022d	8d 95 7c ff ff
	ff		 lea	 edx, DWORD PTR _m_showrc$[ebp]
  00233	52		 push	 edx
  00234	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  0023a	e8 00 00 00 00	 call	 ??0_InputArray@cv@@QAE@ABVMat@1@@Z ; cv::_InputArray::_InputArray
  0023f	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00243	6a 01		 push	 1
  00245	83 ec 08	 sub	 esp, 8
  00248	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@0000000000000000
  00250	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00255	83 ec 08	 sub	 esp, 8
  00258	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@0000000000000000
  00260	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00265	83 ec 08	 sub	 esp, 8
  00268	8b c4		 mov	 eax, esp
  0026a	89 a5 58 ff ff
	ff		 mov	 DWORD PTR $T16[ebp], esp
  00270	50		 push	 eax
  00271	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _pObj$[ebp]
  00277	8b 91 68 04 00
	00		 mov	 edx, DWORD PTR [ecx+1128]
  0027d	52		 push	 edx
  0027e	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _pObj$[ebp]
  00284	8b 88 64 04 00
	00		 mov	 ecx, DWORD PTR [eax+1124]
  0028a	51		 push	 ecx
  0028b	8d 95 c0 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  00291	52		 push	 edx
  00292	e8 00 00 00 00	 call	 ?cvSize@@YA?AUCvSize@@HH@Z ; cvSize
  00297	83 c4 0c	 add	 esp, 12			; 0000000cH
  0029a	8b c8		 mov	 ecx, eax
  0029c	e8 00 00 00 00	 call	 ??$?BH@CvSize@@QBE?AV?$Size_@H@cv@@XZ ; CvSize::operator<int> cv::Size_<int>
  002a1	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  002a7	50		 push	 eax
  002a8	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  002ae	51		 push	 ecx
  002af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?resize@cv@@YAXABV_InputArray@1@ABV_OutputArray@1@V?$Size_@H@1@NNH@Z
  002b5	83 c4 24	 add	 esp, 36			; 00000024H
  002b8	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  002bc	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  002c2	e8 00 00 00 00	 call	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
  002c7	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  002cb	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  002d1	e8 00 00 00 00	 call	 ??1_OutputArray@cv@@QAE@XZ

; 1640 : 			t_img(Rect(pObj->roi_c, pObj->roi_r, IMGWIDTH, IMGHEIGHT)).copyTo(m_showrc);

  002d6	8d 95 7c ff ff
	ff		 lea	 edx, DWORD PTR _m_showrc$[ebp]
  002dc	52		 push	 edx
  002dd	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  002e3	e8 00 00 00 00	 call	 ??0_OutputArray@cv@@QAE@AAVMat@1@@Z ; cv::_OutputArray::_OutputArray
  002e8	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  002ec	68 d0 02 00 00	 push	 720			; 000002d0H
  002f1	68 00 05 00 00	 push	 1280			; 00000500H
  002f6	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _pObj$[ebp]
  002fc	8b 88 70 04 00
	00		 mov	 ecx, DWORD PTR [eax+1136]
  00302	51		 push	 ecx
  00303	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _pObj$[ebp]
  00309	8b 82 6c 04 00
	00		 mov	 eax, DWORD PTR [edx+1132]
  0030f	50		 push	 eax
  00310	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00316	e8 00 00 00 00	 call	 ??0?$Rect_@H@cv@@QAE@HHHH@Z ; cv::Rect_<int>::Rect_<int>
  0031b	50		 push	 eax
  0031c	8d 8d 78 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00322	51		 push	 ecx
  00323	8d 4d b4	 lea	 ecx, DWORD PTR _t_img$19[ebp]
  00326	e8 00 00 00 00	 call	 ??RMat@cv@@QBE?AV01@ABV?$Rect_@H@1@@Z ; cv::Mat::operator()
  0032b	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv214[ebp], eax
  00331	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR tv214[ebp]
  00337	89 95 68 ff ff
	ff		 mov	 DWORD PTR tv279[ebp], edx
  0033d	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00341	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  00347	50		 push	 eax
  00348	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR tv279[ebp]
  0034e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?copyTo@Mat@cv@@QBEXABV_OutputArray@2@@Z
  00354	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00358	8d 8d 78 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0035e	e8 00 00 00 00	 call	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
  00363	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00367	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  0036d	e8 00 00 00 00	 call	 ??1_OutputArray@cv@@QAE@XZ

; 1641 : 			SetEvent(g_resizeevent);

  00372	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_resizeevent@@3VCEvent@@A ; g_resizeevent
  00377	e8 00 00 00 00	 call	 ??BCSyncObject@@QBEPAXXZ ; CSyncObject::operator void *
  0037c	50		 push	 eax
  0037d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4

; 1642 : 		}

  00383	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00387	8d 4d b4	 lea	 ecx, DWORD PTR _t_img$19[ebp]
  0038a	e8 00 00 00 00	 call	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
$LN2@ShowVideoT:

; 1643 : 
; 1644 : 		resize(m_showrc,pObj->m_dst,cvSize(1536,864),INTER_NEAREST);

  0038f	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _pObj$[ebp]
  00395	81 c1 bc 03 00
	00		 add	 ecx, 956		; 000003bcH
  0039b	51		 push	 ecx
  0039c	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  003a2	e8 00 00 00 00	 call	 ??0_OutputArray@cv@@QAE@AAVMat@1@@Z ; cv::_OutputArray::_OutputArray
  003a7	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  003ab	8d 95 7c ff ff
	ff		 lea	 edx, DWORD PTR _m_showrc$[ebp]
  003b1	52		 push	 edx
  003b2	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  003b8	e8 00 00 00 00	 call	 ??0_InputArray@cv@@QAE@ABVMat@1@@Z ; cv::_InputArray::_InputArray
  003bd	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  003c1	6a 01		 push	 1
  003c3	83 ec 08	 sub	 esp, 8
  003c6	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@0000000000000000
  003ce	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  003d3	83 ec 08	 sub	 esp, 8
  003d6	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@0000000000000000
  003de	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  003e3	83 ec 08	 sub	 esp, 8
  003e6	8b c4		 mov	 eax, esp
  003e8	89 a5 54 ff ff
	ff		 mov	 DWORD PTR $T15[ebp], esp
  003ee	50		 push	 eax
  003ef	68 60 03 00 00	 push	 864			; 00000360H
  003f4	68 00 06 00 00	 push	 1536			; 00000600H
  003f9	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  003ff	51		 push	 ecx
  00400	e8 00 00 00 00	 call	 ?cvSize@@YA?AUCvSize@@HH@Z ; cvSize
  00405	83 c4 0c	 add	 esp, 12			; 0000000cH
  00408	8b c8		 mov	 ecx, eax
  0040a	e8 00 00 00 00	 call	 ??$?BH@CvSize@@QBE?AV?$Size_@H@cv@@XZ ; CvSize::operator<int> cv::Size_<int>
  0040f	8d 95 10 ff ff
	ff		 lea	 edx, DWORD PTR $T10[ebp]
  00415	52		 push	 edx
  00416	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR $T12[ebp]
  0041c	50		 push	 eax
  0041d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?resize@cv@@YAXABV_InputArray@1@ABV_OutputArray@1@V?$Size_@H@1@NNH@Z
  00423	83 c4 24	 add	 esp, 36			; 00000024H
  00426	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  0042a	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  00430	e8 00 00 00 00	 call	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
  00435	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00439	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  0043f	e8 00 00 00 00	 call	 ??1_OutputArray@cv@@QAE@XZ

; 1645 : 
; 1646 : 		if(!pObj->m_bshowpause)

  00444	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _pObj$[ebp]
  0044a	0f b6 91 b1 01
	00 00		 movzx	 edx, BYTE PTR [ecx+433]
  00451	85 d2		 test	 edx, edx
  00453	75 64		 jne	 SHORT $LN1@ShowVideoT

; 1647 : 		{
; 1648 : 			cv::imshow("view", pObj->m_dst);

  00455	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _pObj$[ebp]
  0045b	05 bc 03 00 00	 add	 eax, 956		; 000003bcH
  00460	50		 push	 eax
  00461	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00467	e8 00 00 00 00	 call	 ??0_InputArray@cv@@QAE@ABVMat@1@@Z ; cv::_InputArray::_InputArray
  0046c	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  00470	68 00 00 00 00	 push	 OFFSET $SG4294957222
  00475	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR $T17[ebp]
  0047b	e8 00 00 00 00	 call	 ??0String@cv@@QAE@PBD@Z	; cv::String::String
  00480	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  00484	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  0048a	51		 push	 ecx
  0048b	8d 95 5c ff ff
	ff		 lea	 edx, DWORD PTR $T17[ebp]
  00491	52		 push	 edx
  00492	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?imshow@cv@@YAXABVString@1@ABV_InputArray@1@@Z
  00498	83 c4 08	 add	 esp, 8
  0049b	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  0049f	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR $T17[ebp]
  004a5	e8 00 00 00 00	 call	 ??1String@cv@@QAE@XZ	; cv::String::~String
  004aa	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  004ae	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  004b4	e8 00 00 00 00	 call	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
$LN1@ShowVideoT:

; 1649 : 		}
; 1650 : 		//imwrite("test.jpg",m_dst);
; 1651 : 
; 1652 : 		waitKey(1);

  004b9	6a 01		 push	 1
  004bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?waitKey@cv@@YAHH@Z
  004c1	83 c4 04	 add	 esp, 4

; 1653 : 		g_FPS += 1;

  004c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_FPS@@3HA ; g_FPS
  004c9	83 c0 01	 add	 eax, 1
  004cc	a3 00 00 00 00	 mov	 DWORD PTR ?g_FPS@@3HA, eax ; g_FPS

; 1654 : 		//Sleep(1);
; 1655 : 
; 1656 : 	}

  004d1	e9 b4 fb ff ff	 jmp	 $LN26@ShowVideoT
$LN10@ShowVideoT:

; 1657 : 	m_showrc.release();

  004d6	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _m_showrc$[ebp]
  004dc	e8 00 00 00 00	 call	 ?release@Mat@cv@@QAEXXZ	; cv::Mat::release

; 1658 : 	return 0;

  004e1	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T18[ebp], 0
  004eb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  004f2	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _m_showrc$[ebp]
  004f8	e8 00 00 00 00	 call	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
  004fd	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR $T18[ebp]

; 1659 : }

  00503	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00506	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0050d	59		 pop	 ecx
  0050e	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00511	33 cd		 xor	 ecx, ebp
  00513	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00518	8b e5		 mov	 esp, ebp
  0051a	5d		 pop	 ebp
  0051b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z$0:
  00000	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _m_showrc$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__unwindfunclet$?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z$1:
  0000b	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1_OutputArray@cv@@QAE@XZ
__unwindfunclet$?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z$2:
  00016	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
__unwindfunclet$?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z$3:
  00021	8d 4d b4	 lea	 ecx, DWORD PTR _t_img$19[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__unwindfunclet$?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z$4:
  00029	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  0002f	e9 00 00 00 00	 jmp	 ??1_OutputArray@cv@@QAE@XZ
__unwindfunclet$?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z$5:
  00034	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  0003a	e9 00 00 00 00	 jmp	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
__unwindfunclet$?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z$6:
  0003f	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00045	e9 00 00 00 00	 jmp	 ??1_OutputArray@cv@@QAE@XZ
__unwindfunclet$?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z$7:
  0004a	8d 8d 78 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00050	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__unwindfunclet$?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z$8:
  00055	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  0005b	e9 00 00 00 00	 jmp	 ??1_OutputArray@cv@@QAE@XZ
__unwindfunclet$?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z$9:
  00060	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  00066	e9 00 00 00 00	 jmp	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
__unwindfunclet$?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z$10:
  0006b	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00071	e9 00 00 00 00	 jmp	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
__unwindfunclet$?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z$11:
  00076	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR $T17[ebp]
  0007c	e9 00 00 00 00	 jmp	 ??1String@cv@@QAE@XZ	; cv::String::~String
__ehhandler$?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z:
  00081	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00085	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00088	8b 8a 80 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-384]
  0008e	33 c8		 xor	 ecx, eax
  00090	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00095	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00098	33 c8		 xor	 ecx, eax
  0009a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z
  000a4	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ShowVideoThreadFunc@CEndoScopeMFCDlg@@CAIPAX@Z ENDP	; CEndoScopeMFCDlg::ShowVideoThreadFunc
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?ScreenCAPThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z
_TEXT	SEGMENT
$T2 = -88						; size = 4
_ret$ = -84						; size = 4
_pdlg$ = -80						; size = 4
_img$ = -76						; size = 56
_len$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_lpParameter$ = 8					; size = 4
?ScreenCAPThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z PROC	; CEndoScopeMFCDlg::ScreenCAPThreadProc, COMDAT

; 1685 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ScreenCAPThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1686 : #if 1
; 1687 : 	CEndoScopeMFCDlg* pdlg = (CEndoScopeMFCDlg*)lpParameter;

  00028	8b 45 08	 mov	 eax, DWORD PTR _lpParameter$[ebp]
  0002b	89 45 b0	 mov	 DWORD PTR _pdlg$[ebp], eax

; 1688 : 	int ret =0;

  0002e	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0

; 1689 : 	int len = 0;

  00035	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _len$[ebp], 0

; 1690 : 	Mat img = Mat(IMGHEIGHT, IMGWIDTH, CV_8UC3);

  0003c	6a 01		 push	 1
  0003e	8d 4d b4	 lea	 ecx, DWORD PTR _img$[ebp]
  00041	e8 00 00 00 00	 call	 ?__autoclassinit@Mat@cv@@QAEXI@Z
  00046	6a 10		 push	 16			; 00000010H
  00048	68 00 05 00 00	 push	 1280			; 00000500H
  0004d	68 d0 02 00 00	 push	 720			; 000002d0H
  00052	8d 4d b4	 lea	 ecx, DWORD PTR _img$[ebp]
  00055	e8 00 00 00 00	 call	 ??0Mat@cv@@QAE@HHH@Z	; cv::Mat::Mat
  0005a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
$LN7@ScreenCAPT:

; 1691 : 	//cout << "worker thread:"<<std::this_thread::get_id() << endl;
; 1692 : 	while (pdlg->m_bstartsave)

  00061	8b 4d b0	 mov	 ecx, DWORD PTR _pdlg$[ebp]
  00064	0f b6 91 ad 01
	00 00		 movzx	 edx, BYTE PTR [ecx+429]
  0006b	85 d2		 test	 edx, edx
  0006d	74 78		 je	 SHORT $LN6@ScreenCAPT

; 1693 : 	{
; 1694 : 		//BYTE* t_pbuf=pdlg->GetFrame();
; 1695 : 		ret = ReadYUVQueue(img.data, &len);

  0006f	8d 45 ec	 lea	 eax, DWORD PTR _len$[ebp]
  00072	50		 push	 eax
  00073	8b 4d c4	 mov	 ecx, DWORD PTR _img$[ebp+16]
  00076	51		 push	 ecx
  00077	e8 00 00 00 00	 call	 ?ReadYUVQueue@@YAHPAEPAH@Z ; ReadYUVQueue
  0007c	83 c4 08	 add	 esp, 8
  0007f	89 45 ac	 mov	 DWORD PTR _ret$[ebp], eax

; 1696 : 		if (len <= 0 || ret < 0){

  00082	83 7d ec 00	 cmp	 DWORD PTR _len$[ebp], 0
  00086	7e 06		 jle	 SHORT $LN4@ScreenCAPT
  00088	83 7d ac 00	 cmp	 DWORD PTR _ret$[ebp], 0
  0008c	7d 0a		 jge	 SHORT $LN5@ScreenCAPT
$LN4@ScreenCAPT:

; 1697 : 			Sleep(1);

  0008e	6a 01		 push	 1
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 1698 : 			continue;

  00096	eb c9		 jmp	 SHORT $LN7@ScreenCAPT
$LN5@ScreenCAPT:

; 1699 : 		}
; 1700 : 		if (!pdlg->m_vwriter.isOpened())

  00098	8b 4d b0	 mov	 ecx, DWORD PTR _pdlg$[ebp]
  0009b	81 c1 e8 01 00
	00		 add	 ecx, 488		; 000001e8H
  000a1	8b 55 b0	 mov	 edx, DWORD PTR _pdlg$[ebp]
  000a4	8b 82 e8 01 00
	00		 mov	 eax, DWORD PTR [edx+488]
  000aa	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000ad	ff d2		 call	 edx
  000af	0f b6 c0	 movzx	 eax, al
  000b2	85 c0		 test	 eax, eax
  000b4	75 02		 jne	 SHORT $LN3@ScreenCAPT

; 1701 : 		{
; 1702 : 			continue;

  000b6	eb a9		 jmp	 SHORT $LN7@ScreenCAPT
$LN3@ScreenCAPT:

; 1703 : 		}
; 1704 : 		if (!img.empty())

  000b8	8d 4d b4	 lea	 ecx, DWORD PTR _img$[ebp]
  000bb	e8 00 00 00 00	 call	 ?empty@Mat@cv@@QBE_NXZ	; cv::Mat::empty
  000c0	0f b6 c8	 movzx	 ecx, al
  000c3	85 c9		 test	 ecx, ecx
  000c5	75 1b		 jne	 SHORT $LN2@ScreenCAPT

; 1705 : 		{
; 1706 : 			pdlg->m_vwriter.write(img);

  000c7	8d 55 b4	 lea	 edx, DWORD PTR _img$[ebp]
  000ca	52		 push	 edx
  000cb	8b 4d b0	 mov	 ecx, DWORD PTR _pdlg$[ebp]
  000ce	81 c1 e8 01 00
	00		 add	 ecx, 488		; 000001e8H
  000d4	8b 45 b0	 mov	 eax, DWORD PTR _pdlg$[ebp]
  000d7	8b 90 e8 01 00
	00		 mov	 edx, DWORD PTR [eax+488]
  000dd	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000e0	ff d0		 call	 eax
$LN2@ScreenCAPT:

; 1707 : 		}
; 1708 : 	}

  000e2	e9 7a ff ff ff	 jmp	 $LN7@ScreenCAPT
$LN6@ScreenCAPT:

; 1709 : 	if (pdlg->m_vwriter.isOpened())

  000e7	8b 4d b0	 mov	 ecx, DWORD PTR _pdlg$[ebp]
  000ea	81 c1 e8 01 00
	00		 add	 ecx, 488		; 000001e8H
  000f0	8b 55 b0	 mov	 edx, DWORD PTR _pdlg$[ebp]
  000f3	8b 82 e8 01 00
	00		 mov	 eax, DWORD PTR [edx+488]
  000f9	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000fc	ff d2		 call	 edx
  000fe	0f b6 c0	 movzx	 eax, al
  00101	85 c0		 test	 eax, eax
  00103	74 17		 je	 SHORT $LN1@ScreenCAPT

; 1710 : 	{
; 1711 : 		pdlg->m_vwriter.release();

  00105	8b 4d b0	 mov	 ecx, DWORD PTR _pdlg$[ebp]
  00108	81 c1 e8 01 00
	00		 add	 ecx, 488		; 000001e8H
  0010e	8b 55 b0	 mov	 edx, DWORD PTR _pdlg$[ebp]
  00111	8b 82 e8 01 00
	00		 mov	 eax, DWORD PTR [edx+488]
  00117	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0011a	ff d2		 call	 edx
$LN1@ScreenCAPT:

; 1712 : 	}
; 1713 : #endif
; 1714 : 	return 0;

  0011c	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00123	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0012a	8d 4d b4	 lea	 ecx, DWORD PTR _img$[ebp]
  0012d	e8 00 00 00 00	 call	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
  00132	8b 45 a8	 mov	 eax, DWORD PTR $T2[ebp]

; 1715 : }

  00135	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00138	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013f	59		 pop	 ecx
  00140	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00143	33 cd		 xor	 ecx, ebp
  00145	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014a	8b e5		 mov	 esp, ebp
  0014c	5d		 pop	 ebp
  0014d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ScreenCAPThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z$0:
  00000	8d 4d b4	 lea	 ecx, DWORD PTR _img$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__ehhandler$?ScreenCAPThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ScreenCAPThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ScreenCAPThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z ENDP	; CEndoScopeMFCDlg::ScreenCAPThreadProc
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?ShowEndoscopeInfo@CEndoScopeMFCDlg@@QAEXPAEH@Z
_TEXT	SEGMENT
$T2 = -52						; size = 4
tv218 = -48						; size = 4
$T3 = -44						; size = 4
_this$ = -40						; size = 4
_pTmp$4 = -36						; size = 4
_strLen$5 = -32						; size = 4
_strNum$6 = -28						; size = 4
_strDate$7 = -24					; size = 4
_strNum$8 = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pInfo$ = 8						; size = 4
_nSize$ = 12						; size = 4
?ShowEndoscopeInfo@CEndoScopeMFCDlg@@QAEXPAEH@Z PROC	; CEndoScopeMFCDlg::ShowEndoscopeInfo, COMDAT
; _this$ = ecx

; 1730 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ShowEndoscopeInfo@CEndoScopeMFCDlg@@QAEXPAEH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx

; 1731 : 	if (pInfo)

  0002b	83 7d 08 00	 cmp	 DWORD PTR _pInfo$[ebp], 0
  0002f	0f 84 47 02 00
	00		 je	 $LN5@ShowEndosc

; 1732 : 	{
; 1733 : 
; 1734 : 		BYTE* pTmp = new BYTE[nSize + 1];

  00035	8b 45 0c	 mov	 eax, DWORD PTR _nSize$[ebp]
  00038	83 c0 01	 add	 eax, 1
  0003b	50		 push	 eax
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??_U@YAPAXI@Z
  00042	83 c4 04	 add	 esp, 4
  00045	89 45 cc	 mov	 DWORD PTR $T2[ebp], eax
  00048	8b 4d cc	 mov	 ecx, DWORD PTR $T2[ebp]
  0004b	89 4d dc	 mov	 DWORD PTR _pTmp$4[ebp], ecx

; 1735 : 		memset(pTmp, 0, nSize + 1);

  0004e	8b 55 0c	 mov	 edx, DWORD PTR _nSize$[ebp]
  00051	83 c2 01	 add	 edx, 1
  00054	52		 push	 edx
  00055	6a 00		 push	 0
  00057	8b 45 dc	 mov	 eax, DWORD PTR _pTmp$4[ebp]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 _memset
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1736 : 		memcpy(pTmp, pInfo, nSize);

  00063	8b 4d 0c	 mov	 ecx, DWORD PTR _nSize$[ebp]
  00066	51		 push	 ecx
  00067	8b 55 08	 mov	 edx, DWORD PTR _pInfo$[ebp]
  0006a	52		 push	 edx
  0006b	8b 45 dc	 mov	 eax, DWORD PTR _pTmp$4[ebp]
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 _memcpy
  00074	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1737 : 		CString strNum, strDate, strLen;

  00077	8d 4d ec	 lea	 ecx, DWORD PTR _strNum$8[ebp]
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00080	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00087	8d 4d e8	 lea	 ecx, DWORD PTR _strDate$7[ebp]
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00090	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00094	8d 4d e0	 lea	 ecx, DWORD PTR _strLen$5[ebp]
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0009d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 1738 : 		strNum.Format(_T("%s""%c""%c""%c""%c"), "ENDE-", pTmp[9], pTmp[7], pTmp[8], pTmp[6]);

  000a1	b9 01 00 00 00	 mov	 ecx, 1
  000a6	6b c9 06	 imul	 ecx, 6
  000a9	8b 55 dc	 mov	 edx, DWORD PTR _pTmp$4[ebp]
  000ac	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  000b0	50		 push	 eax
  000b1	b9 01 00 00 00	 mov	 ecx, 1
  000b6	c1 e1 03	 shl	 ecx, 3
  000b9	8b 55 dc	 mov	 edx, DWORD PTR _pTmp$4[ebp]
  000bc	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  000c0	50		 push	 eax
  000c1	b9 01 00 00 00	 mov	 ecx, 1
  000c6	6b c9 07	 imul	 ecx, 7
  000c9	8b 55 dc	 mov	 edx, DWORD PTR _pTmp$4[ebp]
  000cc	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  000d0	50		 push	 eax
  000d1	b9 01 00 00 00	 mov	 ecx, 1
  000d6	6b c9 09	 imul	 ecx, 9
  000d9	8b 55 dc	 mov	 edx, DWORD PTR _pTmp$4[ebp]
  000dc	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  000e0	50		 push	 eax
  000e1	68 00 00 00 00	 push	 OFFSET $SG4294957221
  000e6	68 00 00 00 00	 push	 OFFSET $SG4294957220
  000eb	8d 4d ec	 lea	 ecx, DWORD PTR _strNum$8[ebp]
  000ee	51		 push	 ecx
  000ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  000f5	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1739 : 		//strNum = "ENDE-310D";
; 1740 : 		GetDlgItem(IDC_ENDOSCOPEID_INFO_STATIC)->SetWindowText(strNum);

  000f8	8d 4d ec	 lea	 ecx, DWORD PTR _strNum$8[ebp]
  000fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00101	50		 push	 eax
  00102	68 07 04 00 00	 push	 1031			; 00000407H
  00107	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  0010a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00110	8b c8		 mov	 ecx, eax
  00112	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 1741 : 		strDate.Format(_T("%c""%c""%c""%c""-""%c""%c""-""%c""%c"), pTmp[10], pTmp[11], pTmp[12], pTmp[13], pTmp[14], pTmp[15], pTmp[16], pTmp[17]);

  00118	ba 01 00 00 00	 mov	 edx, 1
  0011d	6b d2 11	 imul	 edx, 17			; 00000011H
  00120	8b 45 dc	 mov	 eax, DWORD PTR _pTmp$4[ebp]
  00123	0f b6 0c 10	 movzx	 ecx, BYTE PTR [eax+edx]
  00127	51		 push	 ecx
  00128	ba 01 00 00 00	 mov	 edx, 1
  0012d	c1 e2 04	 shl	 edx, 4
  00130	8b 45 dc	 mov	 eax, DWORD PTR _pTmp$4[ebp]
  00133	0f b6 0c 10	 movzx	 ecx, BYTE PTR [eax+edx]
  00137	51		 push	 ecx
  00138	ba 01 00 00 00	 mov	 edx, 1
  0013d	6b d2 0f	 imul	 edx, 15			; 0000000fH
  00140	8b 45 dc	 mov	 eax, DWORD PTR _pTmp$4[ebp]
  00143	0f b6 0c 10	 movzx	 ecx, BYTE PTR [eax+edx]
  00147	51		 push	 ecx
  00148	ba 01 00 00 00	 mov	 edx, 1
  0014d	6b d2 0e	 imul	 edx, 14			; 0000000eH
  00150	8b 45 dc	 mov	 eax, DWORD PTR _pTmp$4[ebp]
  00153	0f b6 0c 10	 movzx	 ecx, BYTE PTR [eax+edx]
  00157	51		 push	 ecx
  00158	ba 01 00 00 00	 mov	 edx, 1
  0015d	6b d2 0d	 imul	 edx, 13			; 0000000dH
  00160	8b 45 dc	 mov	 eax, DWORD PTR _pTmp$4[ebp]
  00163	0f b6 0c 10	 movzx	 ecx, BYTE PTR [eax+edx]
  00167	51		 push	 ecx
  00168	ba 01 00 00 00	 mov	 edx, 1
  0016d	6b d2 0c	 imul	 edx, 12			; 0000000cH
  00170	8b 45 dc	 mov	 eax, DWORD PTR _pTmp$4[ebp]
  00173	0f b6 0c 10	 movzx	 ecx, BYTE PTR [eax+edx]
  00177	51		 push	 ecx
  00178	ba 01 00 00 00	 mov	 edx, 1
  0017d	6b d2 0b	 imul	 edx, 11			; 0000000bH
  00180	8b 45 dc	 mov	 eax, DWORD PTR _pTmp$4[ebp]
  00183	0f b6 0c 10	 movzx	 ecx, BYTE PTR [eax+edx]
  00187	51		 push	 ecx
  00188	ba 01 00 00 00	 mov	 edx, 1
  0018d	6b d2 0a	 imul	 edx, 10			; 0000000aH
  00190	8b 45 dc	 mov	 eax, DWORD PTR _pTmp$4[ebp]
  00193	0f b6 0c 10	 movzx	 ecx, BYTE PTR [eax+edx]
  00197	51		 push	 ecx
  00198	68 00 00 00 00	 push	 OFFSET $SG4294957219
  0019d	8d 55 e8	 lea	 edx, DWORD PTR _strDate$7[ebp]
  001a0	52		 push	 edx
  001a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  001a7	83 c4 28	 add	 esp, 40			; 00000028H

; 1742 : 		//GetDlgItem(IDC_ENDOSCOPEDATA_INFO_STATIC)->SetWindowText(strDate);//出厂日期没有
; 1743 : 		//剩余使用次数
; 1744 : 		//strNum.Format(_T("%c"), pTmp[18] );
; 1745 : 		//GetDlgItem(IDC_DISPOSABLE_INFO_STATIC)->SetWindowText(_T("是"));
; 1746 : 		if (255 == pTmp[18])

  001aa	b8 01 00 00 00	 mov	 eax, 1
  001af	6b c0 12	 imul	 eax, 18			; 00000012H
  001b2	8b 4d dc	 mov	 ecx, DWORD PTR _pTmp$4[ebp]
  001b5	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  001b9	81 fa ff 00 00
	00		 cmp	 edx, 255		; 000000ffH
  001bf	75 38		 jne	 SHORT $LN4@ShowEndosc

; 1747 : 		{
; 1748 : 			GetDlgItem(IDC_ENDOSCOPEID_INFO_STATIC)->SetWindowText(_T("ENDE-240"));

  001c1	68 00 00 00 00	 push	 OFFSET $SG4294957218
  001c6	68 07 04 00 00	 push	 1031			; 00000407H
  001cb	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  001ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  001d4	8b c8		 mov	 ecx, eax
  001d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 1749 : 			GetDlgItem(IDC_DISPOSABLE_INFO_STATIC)->SetWindowText(_T("否"));

  001dc	68 00 00 00 00	 push	 OFFSET $SG4294957217
  001e1	68 08 04 00 00	 push	 1032			; 00000408H
  001e6	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  001e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  001ef	8b c8		 mov	 ecx, eax
  001f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 1750 : 		}
; 1751 : 		else

  001f7	eb 1b		 jmp	 SHORT $LN3@ShowEndosc
$LN4@ShowEndosc:

; 1752 : 		{
; 1753 : 			GetDlgItem(IDC_DISPOSABLE_INFO_STATIC)->SetWindowText(_T("是"));

  001f9	68 00 00 00 00	 push	 OFFSET $SG4294957216
  001fe	68 08 04 00 00	 push	 1032			; 00000408H
  00203	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00206	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0020c	8b c8		 mov	 ecx, eax
  0020e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z
$LN3@ShowEndosc:

; 1754 : 		}
; 1755 : 
; 1756 : 		SAFE_DELETE_ARRAY(pTmp);

  00214	83 7d dc 00	 cmp	 DWORD PTR _pTmp$4[ebp], 0
  00218	74 36		 je	 SHORT $LN2@ShowEndosc
  0021a	8b 45 dc	 mov	 eax, DWORD PTR _pTmp$4[ebp]
  0021d	89 45 d4	 mov	 DWORD PTR $T3[ebp], eax
  00220	8b 4d d4	 mov	 ecx, DWORD PTR $T3[ebp]
  00223	51		 push	 ecx
  00224	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??_V@YAXPAX@Z
  0022a	83 c4 04	 add	 esp, 4
  0022d	83 7d d4 00	 cmp	 DWORD PTR $T3[ebp], 0
  00231	75 09		 jne	 SHORT $LN8@ShowEndosc
  00233	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv218[ebp], 0
  0023a	eb 0d		 jmp	 SHORT $LN9@ShowEndosc
$LN8@ShowEndosc:
  0023c	c7 45 dc 23 81
	00 00		 mov	 DWORD PTR _pTmp$4[ebp], 33059 ; 00008123H
  00243	8b 55 dc	 mov	 edx, DWORD PTR _pTmp$4[ebp]
  00246	89 55 d0	 mov	 DWORD PTR tv218[ebp], edx
$LN9@ShowEndosc:
  00249	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _pTmp$4[ebp], 0
$LN2@ShowEndosc:

; 1757 : 	}

  00250	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00254	8d 4d e0	 lea	 ecx, DWORD PTR _strLen$5[ebp]
  00257	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0025d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00261	8d 4d e8	 lea	 ecx, DWORD PTR _strDate$7[ebp]
  00264	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0026a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00271	8d 4d ec	 lea	 ecx, DWORD PTR _strNum$8[ebp]
  00274	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 1758 : 	else

  0027a	eb 60		 jmp	 SHORT $LN6@ShowEndosc
$LN5@ShowEndosc:

; 1759 : 	{
; 1760 : 		CString strNum = _T("未插入");

  0027c	68 00 00 00 00	 push	 OFFSET $SG4294957215
  00281	8d 4d e4	 lea	 ecx, DWORD PTR _strNum$6[ebp]
  00284	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  0028a	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3

; 1761 : 		GetDlgItem(IDC_ENDOSCOPEID_INFO_STATIC)->SetWindowText(strNum);

  00291	8d 4d e4	 lea	 ecx, DWORD PTR _strNum$6[ebp]
  00294	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0029a	50		 push	 eax
  0029b	68 07 04 00 00	 push	 1031			; 00000407H
  002a0	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  002a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  002a9	8b c8		 mov	 ecx, eax
  002ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 1762 : 		GetDlgItem(IDC_DISPOSABLE_INFO_STATIC)->SetWindowText(_T(""));

  002b1	68 00 00 00 00	 push	 OFFSET $SG4294957214
  002b6	68 08 04 00 00	 push	 1032			; 00000408H
  002bb	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  002be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  002c4	8b c8		 mov	 ecx, eax
  002c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 1763 : 	}

  002cc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002d3	8d 4d e4	 lea	 ecx, DWORD PTR _strNum$6[ebp]
  002d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$LN6@ShowEndosc:

; 1764 : }

  002dc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002df	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002e6	59		 pop	 ecx
  002e7	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ea	33 cd		 xor	 ecx, ebp
  002ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002f1	8b e5		 mov	 esp, ebp
  002f3	5d		 pop	 ebp
  002f4	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ShowEndoscopeInfo@CEndoScopeMFCDlg@@QAEXPAEH@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _strNum$8[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?ShowEndoscopeInfo@CEndoScopeMFCDlg@@QAEXPAEH@Z$1:
  00009	8d 4d e8	 lea	 ecx, DWORD PTR _strDate$7[ebp]
  0000c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?ShowEndoscopeInfo@CEndoScopeMFCDlg@@QAEXPAEH@Z$2:
  00012	8d 4d e0	 lea	 ecx, DWORD PTR _strLen$5[ebp]
  00015	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?ShowEndoscopeInfo@CEndoScopeMFCDlg@@QAEXPAEH@Z$3:
  0001b	8d 4d e4	 lea	 ecx, DWORD PTR _strNum$6[ebp]
  0001e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?ShowEndoscopeInfo@CEndoScopeMFCDlg@@QAEXPAEH@Z:
  00024	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00028	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002b	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00038	33 c8		 xor	 ecx, eax
  0003a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ShowEndoscopeInfo@CEndoScopeMFCDlg@@QAEXPAEH@Z
  00044	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ShowEndoscopeInfo@CEndoScopeMFCDlg@@QAEXPAEH@Z ENDP	; CEndoScopeMFCDlg::ShowEndoscopeInfo
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?OnCtlData@CEndoScopeMFCDlg@@QAEJIJ@Z
_TEXT	SEGMENT
$T2 = -44						; size = 4
tv76 = -40						; size = 4
tv72 = -36						; size = 4
_pBuf$ = -32						; size = 4
_this$ = -28						; size = 4
_roundrgn$ = -24					; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_wParam$ = 8						; size = 4
_lParam$ = 12						; size = 4
?OnCtlData@CEndoScopeMFCDlg@@QAEJIJ@Z PROC		; CEndoScopeMFCDlg::OnCtlData, COMDAT
; _this$ = ecx

; 1767 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnCtlData@CEndoScopeMFCDlg@@QAEJIJ@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 1768 : 	
; 1769 : 	CRgn roundrgn;

  0002b	6a 01		 push	 1
  0002d	8d 4d e8	 lea	 ecx, DWORD PTR _roundrgn$[ebp]
  00030	e8 00 00 00 00	 call	 ?__autoclassinit@CRgn@@QAEXI@Z
  00035	8d 4d e8	 lea	 ecx, DWORD PTR _roundrgn$[ebp]
  00038	e8 00 00 00 00	 call	 ??0CRgn@@QAE@XZ		; CRgn::CRgn
  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1770 : 	unsigned char* pBuf = (unsigned char*)wParam;

  00044	8b 45 08	 mov	 eax, DWORD PTR _wParam$[ebp]
  00047	89 45 e0	 mov	 DWORD PTR _pBuf$[ebp], eax

; 1771 : 
; 1772 : 
; 1773 : 	//CString temp(pBuf);
; 1774 : 	//AfxMessageBox(temp);
; 1775 : 	//根据说明串口的字节数一般是13-15个字节，第5和6个两个字节表示存储地址，其中第5个字节是00
; 1776 : 	switch (pBuf[5])

  0004a	b9 01 00 00 00	 mov	 ecx, 1
  0004f	6b c9 05	 imul	 ecx, 5
  00052	8b 55 e0	 mov	 edx, DWORD PTR _pBuf$[ebp]
  00055	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00059	89 45 dc	 mov	 DWORD PTR tv72[ebp], eax
  0005c	8b 4d dc	 mov	 ecx, DWORD PTR tv72[ebp]
  0005f	83 e9 01	 sub	 ecx, 1
  00062	89 4d dc	 mov	 DWORD PTR tv72[ebp], ecx
  00065	81 7d dc af 00
	00 00		 cmp	 DWORD PTR tv72[ebp], 175 ; 000000afH
  0006c	0f 87 5a 01 00
	00		 ja	 $LN24@OnCtlData
  00072	8b 55 dc	 mov	 edx, DWORD PTR tv72[ebp]
  00075	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN29@OnCtlData[edx]
  0007c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN31@OnCtlData[eax*4]
$LN23@OnCtlData:

; 1777 : 	{
; 1778 : 	case 0x01:
; 1779 : 		switch (pBuf[8])

  00083	b9 01 00 00 00	 mov	 ecx, 1
  00088	c1 e1 03	 shl	 ecx, 3
  0008b	8b 55 e0	 mov	 edx, DWORD PTR _pBuf$[ebp]
  0008e	8a 04 0a	 mov	 al, BYTE PTR [edx+ecx]
  00091	88 45 d8	 mov	 BYTE PTR tv76[ebp], al
  00094	80 7d d8 0a	 cmp	 BYTE PTR tv76[ebp], 10	; 0000000aH
  00098	74 0e		 je	 SHORT $LN20@OnCtlData
  0009a	80 7d d8 0b	 cmp	 BYTE PTR tv76[ebp], 11	; 0000000bH
  0009e	74 12		 je	 SHORT $LN19@OnCtlData
  000a0	80 7d d8 0c	 cmp	 BYTE PTR tv76[ebp], 12	; 0000000cH
  000a4	74 16		 je	 SHORT $LN18@OnCtlData
  000a6	eb 1c		 jmp	 SHORT $LN21@OnCtlData
$LN20@OnCtlData:

; 1780 : 		{
; 1781 : 		case 0x0A://录入病人信息
; 1782 : 			EnterPatientInfo();

  000a8	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000ab	e8 00 00 00 00	 call	 ?EnterPatientInfo@CEndoScopeMFCDlg@@QAEXXZ ; CEndoScopeMFCDlg::EnterPatientInfo

; 1783 : 			break;

  000b0	eb 12		 jmp	 SHORT $LN21@OnCtlData
$LN19@OnCtlData:

; 1784 : 		case 0x0B://录像
; 1785 : 			SaveVideo();

  000b2	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000b5	e8 00 00 00 00	 call	 ?SaveVideo@CEndoScopeMFCDlg@@QAEXXZ ; CEndoScopeMFCDlg::SaveVideo

; 1786 : 			break;

  000ba	eb 08		 jmp	 SHORT $LN21@OnCtlData
$LN18@OnCtlData:

; 1787 : 		case 0x0C://存储到外部设备
; 1788 : 			MoveDatatoUSBDevice();

  000bc	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	e8 00 00 00 00	 call	 ?MoveDatatoUSBDevice@CEndoScopeMFCDlg@@QAEXXZ ; CEndoScopeMFCDlg::MoveDatatoUSBDevice
$LN21@OnCtlData:

; 1789 : 			break;
; 1790 : 		default:
; 1791 : 			break;
; 1792 : 		}
; 1793 : 		break;

  000c4	e9 03 01 00 00	 jmp	 $LN24@OnCtlData
$LN16@OnCtlData:

; 1794 : 	case 0x25://测光模式
; 1795 : 		SetModeofMeterLight(pBuf);//测光模式

  000c9	8b 4d e0	 mov	 ecx, DWORD PTR _pBuf$[ebp]
  000cc	51		 push	 ecx
  000cd	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	e8 00 00 00 00	 call	 ?SetModeofMeterLight@CEndoScopeMFCDlg@@QAEXPAE@Z ; CEndoScopeMFCDlg::SetModeofMeterLight

; 1796 : 		break;

  000d5	e9 f2 00 00 00	 jmp	 $LN24@OnCtlData
$LN15@OnCtlData:

; 1797 : 	case 0x26://B变换
; 1798 : 		//printf("*******************change B*****************");
; 1799 : 		ChangeImageRB(pBuf,1);

  000da	6a 01		 push	 1
  000dc	8b 55 e0	 mov	 edx, DWORD PTR _pBuf$[ebp]
  000df	52		 push	 edx
  000e0	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000e3	e8 00 00 00 00	 call	 ?ChangeImageRB@CEndoScopeMFCDlg@@QAEXPAEH@Z ; CEndoScopeMFCDlg::ChangeImageRB

; 1800 : 		break;

  000e8	e9 df 00 00 00	 jmp	 $LN24@OnCtlData
$LN14@OnCtlData:

; 1801 : 	case 0x27://R值变换
; 1802 : 		//printf("*******************change R*****************");
; 1803 : 		ChangeImageRB(pBuf, 2);

  000ed	6a 02		 push	 2
  000ef	8b 45 e0	 mov	 eax, DWORD PTR _pBuf$[ebp]
  000f2	50		 push	 eax
  000f3	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000f6	e8 00 00 00 00	 call	 ?ChangeImageRB@CEndoScopeMFCDlg@@QAEXPAEH@Z ; CEndoScopeMFCDlg::ChangeImageRB

; 1804 : 		break;

  000fb	e9 cc 00 00 00	 jmp	 $LN24@OnCtlData
$LN13@OnCtlData:

; 1805 : 	case 0x28://放大
; 1806 : 		if (0x83 == pBuf[3] && 0x00 == pBuf[4])

  00100	b9 01 00 00 00	 mov	 ecx, 1
  00105	6b c9 03	 imul	 ecx, 3
  00108	8b 55 e0	 mov	 edx, DWORD PTR _pBuf$[ebp]
  0010b	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  0010f	3d 83 00 00 00	 cmp	 eax, 131		; 00000083H
  00114	75 1b		 jne	 SHORT $LN12@OnCtlData
  00116	b9 01 00 00 00	 mov	 ecx, 1
  0011b	c1 e1 02	 shl	 ecx, 2
  0011e	8b 55 e0	 mov	 edx, DWORD PTR _pBuf$[ebp]
  00121	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00125	85 c0		 test	 eax, eax
  00127	75 08		 jne	 SHORT $LN12@OnCtlData

; 1807 : 		{
; 1808 : 			VideoZoom();

  00129	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0012c	e8 00 00 00 00	 call	 ?VideoZoom@CEndoScopeMFCDlg@@AAEXXZ ; CEndoScopeMFCDlg::VideoZoom
$LN12@OnCtlData:

; 1809 : 		}
; 1810 : 		break;

  00131	e9 96 00 00 00	 jmp	 $LN24@OnCtlData
$LN11@OnCtlData:

; 1811 : 	case 0x29://设置轮廓
; 1812 : 		if (pBuf[8] == 0x0A)//圆角

  00136	b9 01 00 00 00	 mov	 ecx, 1
  0013b	c1 e1 03	 shl	 ecx, 3
  0013e	8b 55 e0	 mov	 edx, DWORD PTR _pBuf$[ebp]
  00141	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00145	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00148	75 0f		 jne	 SHORT $LN10@OnCtlData

; 1813 : 		{
; 1814 : 			m_nPicWindowShape = 0;

  0014a	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0014d	c7 81 68 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+360], 0
  00157	eb 21		 jmp	 SHORT $LN9@OnCtlData
$LN10@OnCtlData:

; 1815 : 		}
; 1816 : 		else if (pBuf[8] == 0x0B)//方角

  00159	ba 01 00 00 00	 mov	 edx, 1
  0015e	c1 e2 03	 shl	 edx, 3
  00161	8b 45 e0	 mov	 eax, DWORD PTR _pBuf$[ebp]
  00164	0f b6 0c 10	 movzx	 ecx, BYTE PTR [eax+edx]
  00168	83 f9 0b	 cmp	 ecx, 11			; 0000000bH
  0016b	75 0d		 jne	 SHORT $LN9@OnCtlData

; 1817 : 		{
; 1818 : 			m_nPicWindowShape = 1;

  0016d	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00170	c7 82 68 01 00
	00 01 00 00 00	 mov	 DWORD PTR [edx+360], 1
$LN9@OnCtlData:

; 1819 : 		}
; 1820 : 		SetPicWidowShape();

  0017a	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0017d	e8 00 00 00 00	 call	 ?SetPicWidowShape@CEndoScopeMFCDlg@@QAEXXZ ; CEndoScopeMFCDlg::SetPicWidowShape

; 1821 : 		break;

  00182	eb 48		 jmp	 SHORT $LN24@OnCtlData
$LN7@OnCtlData:

; 1822 : 	case 0x07://恢复出厂设置
; 1823 : 		RestoreFactorySetting();

  00184	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00187	e8 00 00 00 00	 call	 ?RestoreFactorySetting@CEndoScopeMFCDlg@@QAEXXZ ; CEndoScopeMFCDlg::RestoreFactorySetting

; 1824 : 		break;

  0018c	eb 3e		 jmp	 SHORT $LN24@OnCtlData
$LN6@OnCtlData:

; 1825 : 	case 0x2A://光源开关
; 1826 : 		LightControler(pBuf);

  0018e	8b 45 e0	 mov	 eax, DWORD PTR _pBuf$[ebp]
  00191	50		 push	 eax
  00192	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00195	e8 00 00 00 00	 call	 ?LightControler@CEndoScopeMFCDlg@@QAEXPAE@Z ; CEndoScopeMFCDlg::LightControler

; 1827 : 		break;

  0019a	eb 30		 jmp	 SHORT $LN24@OnCtlData
$LN5@OnCtlData:

; 1828 : 	case 0x23://冻结
; 1829 : 		ShotPicWindow();

  0019c	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0019f	e8 00 00 00 00	 call	 ?ShotPicWindow@CEndoScopeMFCDlg@@QAEXXZ ; CEndoScopeMFCDlg::ShotPicWindow

; 1830 : 		break;

  001a4	eb 26		 jmp	 SHORT $LN24@OnCtlData
$LN4@OnCtlData:

; 1831 : 	case 0x24:
; 1832 : 		UpdateWhiteBalance();

  001a6	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  001a9	e8 00 00 00 00	 call	 ?UpdateWhiteBalance@CEndoScopeMFCDlg@@QAEXXZ ; CEndoScopeMFCDlg::UpdateWhiteBalance

; 1833 : 		//cout<<"updatebalance control";
; 1834 : 		break;

  001ae	eb 1c		 jmp	 SHORT $LN24@OnCtlData
$LN3@OnCtlData:

; 1835 : 	case 0xB0://设置图像
; 1836 : 		ImageSetting(pBuf);

  001b0	8b 4d e0	 mov	 ecx, DWORD PTR _pBuf$[ebp]
  001b3	51		 push	 ecx
  001b4	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  001b7	e8 00 00 00 00	 call	 ?ImageSetting@CEndoScopeMFCDlg@@QAEXPAE@Z ; CEndoScopeMFCDlg::ImageSetting

; 1837 : 		break;

  001bc	eb 0e		 jmp	 SHORT $LN24@OnCtlData
$LN2@OnCtlData:

; 1838 : 	case 0x55://内镜信息
; 1839 : 		ShowEndoscopeInfo(pBuf, 19);

  001be	6a 13		 push	 19			; 00000013H
  001c0	8b 55 e0	 mov	 edx, DWORD PTR _pBuf$[ebp]
  001c3	52		 push	 edx
  001c4	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  001c7	e8 00 00 00 00	 call	 ?ShowEndoscopeInfo@CEndoScopeMFCDlg@@QAEXPAEH@Z ; CEndoScopeMFCDlg::ShowEndoscopeInfo
$LN24@OnCtlData:

; 1840 : 		break;
; 1841 : 	default:
; 1842 : 		break;
; 1843 : 	}
; 1844 : 	return(Default());

  001cc	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  001cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Default@CWnd@@IAEJXZ
  001d5	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  001d8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001df	8d 4d e8	 lea	 ecx, DWORD PTR _roundrgn$[ebp]
  001e2	e8 00 00 00 00	 call	 ??1CRgn@@UAE@XZ		; CRgn::~CRgn
  001e7	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]

; 1845 : }

  001ea	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001ed	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001f4	59		 pop	 ecx
  001f5	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f8	33 cd		 xor	 ecx, ebp
  001fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c2 08 00	 ret	 8
  00205	8d 49 00	 npad	 3
$LN31@OnCtlData:
  00208	00 00 00 00	 DD	 $LN23@OnCtlData
  0020c	00 00 00 00	 DD	 $LN7@OnCtlData
  00210	00 00 00 00	 DD	 $LN5@OnCtlData
  00214	00 00 00 00	 DD	 $LN4@OnCtlData
  00218	00 00 00 00	 DD	 $LN16@OnCtlData
  0021c	00 00 00 00	 DD	 $LN15@OnCtlData
  00220	00 00 00 00	 DD	 $LN14@OnCtlData
  00224	00 00 00 00	 DD	 $LN13@OnCtlData
  00228	00 00 00 00	 DD	 $LN11@OnCtlData
  0022c	00 00 00 00	 DD	 $LN6@OnCtlData
  00230	00 00 00 00	 DD	 $LN2@OnCtlData
  00234	00 00 00 00	 DD	 $LN3@OnCtlData
  00238	00 00 00 00	 DD	 $LN24@OnCtlData
$LN29@OnCtlData:
  0023c	00		 DB	 0
  0023d	0c		 DB	 12			; 0000000cH
  0023e	0c		 DB	 12			; 0000000cH
  0023f	0c		 DB	 12			; 0000000cH
  00240	0c		 DB	 12			; 0000000cH
  00241	0c		 DB	 12			; 0000000cH
  00242	01		 DB	 1
  00243	0c		 DB	 12			; 0000000cH
  00244	0c		 DB	 12			; 0000000cH
  00245	0c		 DB	 12			; 0000000cH
  00246	0c		 DB	 12			; 0000000cH
  00247	0c		 DB	 12			; 0000000cH
  00248	0c		 DB	 12			; 0000000cH
  00249	0c		 DB	 12			; 0000000cH
  0024a	0c		 DB	 12			; 0000000cH
  0024b	0c		 DB	 12			; 0000000cH
  0024c	0c		 DB	 12			; 0000000cH
  0024d	0c		 DB	 12			; 0000000cH
  0024e	0c		 DB	 12			; 0000000cH
  0024f	0c		 DB	 12			; 0000000cH
  00250	0c		 DB	 12			; 0000000cH
  00251	0c		 DB	 12			; 0000000cH
  00252	0c		 DB	 12			; 0000000cH
  00253	0c		 DB	 12			; 0000000cH
  00254	0c		 DB	 12			; 0000000cH
  00255	0c		 DB	 12			; 0000000cH
  00256	0c		 DB	 12			; 0000000cH
  00257	0c		 DB	 12			; 0000000cH
  00258	0c		 DB	 12			; 0000000cH
  00259	0c		 DB	 12			; 0000000cH
  0025a	0c		 DB	 12			; 0000000cH
  0025b	0c		 DB	 12			; 0000000cH
  0025c	0c		 DB	 12			; 0000000cH
  0025d	0c		 DB	 12			; 0000000cH
  0025e	02		 DB	 2
  0025f	03		 DB	 3
  00260	04		 DB	 4
  00261	05		 DB	 5
  00262	06		 DB	 6
  00263	07		 DB	 7
  00264	08		 DB	 8
  00265	09		 DB	 9
  00266	0c		 DB	 12			; 0000000cH
  00267	0c		 DB	 12			; 0000000cH
  00268	0c		 DB	 12			; 0000000cH
  00269	0c		 DB	 12			; 0000000cH
  0026a	0c		 DB	 12			; 0000000cH
  0026b	0c		 DB	 12			; 0000000cH
  0026c	0c		 DB	 12			; 0000000cH
  0026d	0c		 DB	 12			; 0000000cH
  0026e	0c		 DB	 12			; 0000000cH
  0026f	0c		 DB	 12			; 0000000cH
  00270	0c		 DB	 12			; 0000000cH
  00271	0c		 DB	 12			; 0000000cH
  00272	0c		 DB	 12			; 0000000cH
  00273	0c		 DB	 12			; 0000000cH
  00274	0c		 DB	 12			; 0000000cH
  00275	0c		 DB	 12			; 0000000cH
  00276	0c		 DB	 12			; 0000000cH
  00277	0c		 DB	 12			; 0000000cH
  00278	0c		 DB	 12			; 0000000cH
  00279	0c		 DB	 12			; 0000000cH
  0027a	0c		 DB	 12			; 0000000cH
  0027b	0c		 DB	 12			; 0000000cH
  0027c	0c		 DB	 12			; 0000000cH
  0027d	0c		 DB	 12			; 0000000cH
  0027e	0c		 DB	 12			; 0000000cH
  0027f	0c		 DB	 12			; 0000000cH
  00280	0c		 DB	 12			; 0000000cH
  00281	0c		 DB	 12			; 0000000cH
  00282	0c		 DB	 12			; 0000000cH
  00283	0c		 DB	 12			; 0000000cH
  00284	0c		 DB	 12			; 0000000cH
  00285	0c		 DB	 12			; 0000000cH
  00286	0c		 DB	 12			; 0000000cH
  00287	0c		 DB	 12			; 0000000cH
  00288	0c		 DB	 12			; 0000000cH
  00289	0c		 DB	 12			; 0000000cH
  0028a	0c		 DB	 12			; 0000000cH
  0028b	0c		 DB	 12			; 0000000cH
  0028c	0c		 DB	 12			; 0000000cH
  0028d	0c		 DB	 12			; 0000000cH
  0028e	0c		 DB	 12			; 0000000cH
  0028f	0c		 DB	 12			; 0000000cH
  00290	0a		 DB	 10			; 0000000aH
  00291	0c		 DB	 12			; 0000000cH
  00292	0c		 DB	 12			; 0000000cH
  00293	0c		 DB	 12			; 0000000cH
  00294	0c		 DB	 12			; 0000000cH
  00295	0c		 DB	 12			; 0000000cH
  00296	0c		 DB	 12			; 0000000cH
  00297	0c		 DB	 12			; 0000000cH
  00298	0c		 DB	 12			; 0000000cH
  00299	0c		 DB	 12			; 0000000cH
  0029a	0c		 DB	 12			; 0000000cH
  0029b	0c		 DB	 12			; 0000000cH
  0029c	0c		 DB	 12			; 0000000cH
  0029d	0c		 DB	 12			; 0000000cH
  0029e	0c		 DB	 12			; 0000000cH
  0029f	0c		 DB	 12			; 0000000cH
  002a0	0c		 DB	 12			; 0000000cH
  002a1	0c		 DB	 12			; 0000000cH
  002a2	0c		 DB	 12			; 0000000cH
  002a3	0c		 DB	 12			; 0000000cH
  002a4	0c		 DB	 12			; 0000000cH
  002a5	0c		 DB	 12			; 0000000cH
  002a6	0c		 DB	 12			; 0000000cH
  002a7	0c		 DB	 12			; 0000000cH
  002a8	0c		 DB	 12			; 0000000cH
  002a9	0c		 DB	 12			; 0000000cH
  002aa	0c		 DB	 12			; 0000000cH
  002ab	0c		 DB	 12			; 0000000cH
  002ac	0c		 DB	 12			; 0000000cH
  002ad	0c		 DB	 12			; 0000000cH
  002ae	0c		 DB	 12			; 0000000cH
  002af	0c		 DB	 12			; 0000000cH
  002b0	0c		 DB	 12			; 0000000cH
  002b1	0c		 DB	 12			; 0000000cH
  002b2	0c		 DB	 12			; 0000000cH
  002b3	0c		 DB	 12			; 0000000cH
  002b4	0c		 DB	 12			; 0000000cH
  002b5	0c		 DB	 12			; 0000000cH
  002b6	0c		 DB	 12			; 0000000cH
  002b7	0c		 DB	 12			; 0000000cH
  002b8	0c		 DB	 12			; 0000000cH
  002b9	0c		 DB	 12			; 0000000cH
  002ba	0c		 DB	 12			; 0000000cH
  002bb	0c		 DB	 12			; 0000000cH
  002bc	0c		 DB	 12			; 0000000cH
  002bd	0c		 DB	 12			; 0000000cH
  002be	0c		 DB	 12			; 0000000cH
  002bf	0c		 DB	 12			; 0000000cH
  002c0	0c		 DB	 12			; 0000000cH
  002c1	0c		 DB	 12			; 0000000cH
  002c2	0c		 DB	 12			; 0000000cH
  002c3	0c		 DB	 12			; 0000000cH
  002c4	0c		 DB	 12			; 0000000cH
  002c5	0c		 DB	 12			; 0000000cH
  002c6	0c		 DB	 12			; 0000000cH
  002c7	0c		 DB	 12			; 0000000cH
  002c8	0c		 DB	 12			; 0000000cH
  002c9	0c		 DB	 12			; 0000000cH
  002ca	0c		 DB	 12			; 0000000cH
  002cb	0c		 DB	 12			; 0000000cH
  002cc	0c		 DB	 12			; 0000000cH
  002cd	0c		 DB	 12			; 0000000cH
  002ce	0c		 DB	 12			; 0000000cH
  002cf	0c		 DB	 12			; 0000000cH
  002d0	0c		 DB	 12			; 0000000cH
  002d1	0c		 DB	 12			; 0000000cH
  002d2	0c		 DB	 12			; 0000000cH
  002d3	0c		 DB	 12			; 0000000cH
  002d4	0c		 DB	 12			; 0000000cH
  002d5	0c		 DB	 12			; 0000000cH
  002d6	0c		 DB	 12			; 0000000cH
  002d7	0c		 DB	 12			; 0000000cH
  002d8	0c		 DB	 12			; 0000000cH
  002d9	0c		 DB	 12			; 0000000cH
  002da	0c		 DB	 12			; 0000000cH
  002db	0c		 DB	 12			; 0000000cH
  002dc	0c		 DB	 12			; 0000000cH
  002dd	0c		 DB	 12			; 0000000cH
  002de	0c		 DB	 12			; 0000000cH
  002df	0c		 DB	 12			; 0000000cH
  002e0	0c		 DB	 12			; 0000000cH
  002e1	0c		 DB	 12			; 0000000cH
  002e2	0c		 DB	 12			; 0000000cH
  002e3	0c		 DB	 12			; 0000000cH
  002e4	0c		 DB	 12			; 0000000cH
  002e5	0c		 DB	 12			; 0000000cH
  002e6	0c		 DB	 12			; 0000000cH
  002e7	0c		 DB	 12			; 0000000cH
  002e8	0c		 DB	 12			; 0000000cH
  002e9	0c		 DB	 12			; 0000000cH
  002ea	0c		 DB	 12			; 0000000cH
  002eb	0b		 DB	 11			; 0000000bH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnCtlData@CEndoScopeMFCDlg@@QAEJIJ@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR _roundrgn$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CRgn@@UAE@XZ		; CRgn::~CRgn
__ehhandler$?OnCtlData@CEndoScopeMFCDlg@@QAEJIJ@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnCtlData@CEndoScopeMFCDlg@@QAEJIJ@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnCtlData@CEndoScopeMFCDlg@@QAEJIJ@Z ENDP		; CEndoScopeMFCDlg::OnCtlData
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?ImageSetting@CEndoScopeMFCDlg@@QAEXPAE@Z
_TEXT	SEGMENT
tv163 = -24						; size = 4
$T1 = -20						; size = 4
tv160 = -16						; size = 4
$T2 = -12						; size = 4
tv67 = -8						; size = 4
_this$ = -4						; size = 4
_pbuf$ = 8						; size = 4
?ImageSetting@CEndoScopeMFCDlg@@QAEXPAE@Z PROC		; CEndoScopeMFCDlg::ImageSetting, COMDAT
; _this$ = ecx

; 1852 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1853 : 	switch (pbuf[8])

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	c1 e0 03	 shl	 eax, 3
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _pbuf$[ebp]
  00014	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  00018	89 55 f8	 mov	 DWORD PTR tv67[ebp], edx
  0001b	8b 45 f8	 mov	 eax, DWORD PTR tv67[ebp]
  0001e	83 e8 02	 sub	 eax, 2
  00021	89 45 f8	 mov	 DWORD PTR tv67[ebp], eax
  00024	83 7d f8 0b	 cmp	 DWORD PTR tv67[ebp], 11	; 0000000bH
  00028	0f 87 67 01 00
	00		 ja	 $LN1@ImageSetti
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR tv67[ebp]
  00031	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN32@ImageSetti[ecx*4]
$LN25@ImageSetti:

; 1854 : 	{
; 1855 : 		case 0x03:
; 1856 : 			//清晰度增加
; 1857 : 			if (g_nSharpness < 10)

  00038	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR ?g_nSharpness@@3HA, 10 ; g_nSharpness, 0000000aH
  0003f	7d 08		 jge	 SHORT $LN24@ImageSetti

; 1858 : 				SharpnessAdd();

  00041	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?SharpnessAdd@CEndoScopeMFCDlg@@AAEXXZ ; CEndoScopeMFCDlg::SharpnessAdd
$LN24@ImageSetti:

; 1859 : 			SetConfig(_T("SHARPNESS"), g_nSharpness);

  00049	f2 0f 2a 05 00
	00 00 00	 cvtsi2sd xmm0, DWORD PTR ?g_nSharpness@@3HA ; g_nSharpness
  00051	83 ec 08	 sub	 esp, 8
  00054	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00059	51		 push	 ecx
  0005a	8b cc		 mov	 ecx, esp
  0005c	89 65 f4	 mov	 DWORD PTR $T2[ebp], esp
  0005f	68 00 00 00 00	 push	 OFFSET $SG4294957213
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  0006a	89 45 f0	 mov	 DWORD PTR tv160[ebp], eax
  0006d	e8 00 00 00 00	 call	 ?SetConfig@@YAXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@N@Z ; SetConfig
  00072	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1860 : 			g_bOneSharpen = TRUE;

  00075	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?g_bOneSharpen@@3HA, 1 ; g_bOneSharpen

; 1861 : 			break;

  0007f	e9 11 01 00 00	 jmp	 $LN26@ImageSetti
$LN23@ImageSetti:

; 1862 : 		case 0x02:
; 1863 : 			//清晰度减小
; 1864 : 			if (g_nSharpness > 0)

  00084	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_nSharpness@@3HA, 0 ; g_nSharpness
  0008b	7e 08		 jle	 SHORT $LN22@ImageSetti

; 1865 : 				SharpnessSub();

  0008d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	e8 00 00 00 00	 call	 ?SharpnessSub@CEndoScopeMFCDlg@@AAEXXZ ; CEndoScopeMFCDlg::SharpnessSub
$LN22@ImageSetti:

; 1866 : 
; 1867 : 			SetConfig(_T("SHARPNESS"), g_nSharpness);

  00095	f2 0f 2a 05 00
	00 00 00	 cvtsi2sd xmm0, DWORD PTR ?g_nSharpness@@3HA ; g_nSharpness
  0009d	83 ec 08	 sub	 esp, 8
  000a0	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000a5	51		 push	 ecx
  000a6	8b cc		 mov	 ecx, esp
  000a8	89 65 ec	 mov	 DWORD PTR $T1[ebp], esp
  000ab	68 00 00 00 00	 push	 OFFSET $SG4294957212
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  000b6	89 45 e8	 mov	 DWORD PTR tv163[ebp], eax
  000b9	e8 00 00 00 00	 call	 ?SetConfig@@YAXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@N@Z ; SetConfig
  000be	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1868 : 			g_bOneSharpen = TRUE;

  000c1	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?g_bOneSharpen@@3HA, 1 ; g_bOneSharpen

; 1869 : 			break;

  000cb	e9 c5 00 00 00	 jmp	 $LN26@ImageSetti
$LN21@ImageSetti:

; 1870 : 		case 0x05:
; 1871 : 			//亮度增加
; 1872 : 			if (g_nBrightness < 10) BrightnessAdd();

  000d0	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR ?g_nBrightness@@3HA, 10 ; g_nBrightness, 0000000aH
  000d7	7d 08		 jge	 SHORT $LN20@ImageSetti
  000d9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000dc	e8 00 00 00 00	 call	 ?BrightnessAdd@CEndoScopeMFCDlg@@AAEXXZ ; CEndoScopeMFCDlg::BrightnessAdd
$LN20@ImageSetti:

; 1873 : 			break;

  000e1	e9 af 00 00 00	 jmp	 $LN26@ImageSetti
$LN19@ImageSetti:

; 1874 : 		case 0x04:
; 1875 : 			//亮度减小
; 1876 : 			if (g_nBrightness > -10) BrightnessSub();

  000e6	83 3d 00 00 00
	00 f6		 cmp	 DWORD PTR ?g_nBrightness@@3HA, -10 ; g_nBrightness, fffffff6H
  000ed	7e 08		 jle	 SHORT $LN18@ImageSetti
  000ef	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f2	e8 00 00 00 00	 call	 ?BrightnessSub@CEndoScopeMFCDlg@@AAEXXZ ; CEndoScopeMFCDlg::BrightnessSub
$LN18@ImageSetti:

; 1877 : 			break;

  000f7	e9 99 00 00 00	 jmp	 $LN26@ImageSetti
$LN17@ImageSetti:

; 1878 : 		case 0x07:
; 1879 : 			//对比度增加
; 1880 : 			if (g_nContrast < 10) ContrastAdd();

  000fc	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR ?g_nContrast@@3HA, 10 ; g_nContrast, 0000000aH
  00103	7d 08		 jge	 SHORT $LN16@ImageSetti
  00105	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00108	e8 00 00 00 00	 call	 ?ContrastAdd@CEndoScopeMFCDlg@@AAEXXZ ; CEndoScopeMFCDlg::ContrastAdd
$LN16@ImageSetti:

; 1881 : 			break;

  0010d	e9 83 00 00 00	 jmp	 $LN26@ImageSetti
$LN15@ImageSetti:

; 1882 : 		case 0x06:
; 1883 : 			//对比度减小
; 1884 : 			if (g_nContrast > 0) ContrastSub();

  00112	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_nContrast@@3HA, 0 ; g_nContrast
  00119	7e 08		 jle	 SHORT $LN14@ImageSetti
  0011b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0011e	e8 00 00 00 00	 call	 ?ContrastSub@CEndoScopeMFCDlg@@AAEXXZ ; CEndoScopeMFCDlg::ContrastSub
$LN14@ImageSetti:

; 1885 : 			break;

  00123	eb 70		 jmp	 SHORT $LN26@ImageSetti
$LN13@ImageSetti:

; 1886 : 		case 0x09:
; 1887 : 			//饱和度增加
; 1888 : 			if (g_nSaturation < 10) SaturationAdd();

  00125	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR ?g_nSaturation@@3HA, 10 ; g_nSaturation, 0000000aH
  0012c	7d 08		 jge	 SHORT $LN12@ImageSetti
  0012e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00131	e8 00 00 00 00	 call	 ?SaturationAdd@CEndoScopeMFCDlg@@AAEXXZ ; CEndoScopeMFCDlg::SaturationAdd
$LN12@ImageSetti:

; 1889 : 			break;

  00136	eb 5d		 jmp	 SHORT $LN26@ImageSetti
$LN11@ImageSetti:

; 1890 : 		case 0x08:
; 1891 : 			//饱和度减小
; 1892 : 			if (g_nSaturation > 0) SaturationSub();

  00138	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_nSaturation@@3HA, 0 ; g_nSaturation
  0013f	7e 08		 jle	 SHORT $LN10@ImageSetti
  00141	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00144	e8 00 00 00 00	 call	 ?SaturationSub@CEndoScopeMFCDlg@@AAEXXZ ; CEndoScopeMFCDlg::SaturationSub
$LN10@ImageSetti:

; 1893 : 			break;

  00149	eb 4a		 jmp	 SHORT $LN26@ImageSetti
$LN9@ImageSetti:

; 1894 : 		case 0x0D:
; 1895 : 			//增益增加
; 1896 : 			if (g_nGain < 10) GainAdd();

  0014b	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR ?g_nGain@@3HA, 10 ; g_nGain, 0000000aH
  00152	7d 08		 jge	 SHORT $LN8@ImageSetti
  00154	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00157	e8 00 00 00 00	 call	 ?GainAdd@CEndoScopeMFCDlg@@AAEXXZ ; CEndoScopeMFCDlg::GainAdd
$LN8@ImageSetti:

; 1897 : 			break;

  0015c	eb 37		 jmp	 SHORT $LN26@ImageSetti
$LN7@ImageSetti:

; 1898 : 		case 0x0C://调节控制板
; 1899 : 			if (g_nGain > 0) GainSub();

  0015e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_nGain@@3HA, 0 ; g_nGain
  00165	7e 08		 jle	 SHORT $LN6@ImageSetti
  00167	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0016a	e8 00 00 00 00	 call	 ?GainSub@CEndoScopeMFCDlg@@AAEXXZ ; CEndoScopeMFCDlg::GainSub
$LN6@ImageSetti:

; 1900 : 			break;

  0016f	eb 24		 jmp	 SHORT $LN26@ImageSetti
$LN5@ImageSetti:

; 1901 : 		case 0x0B://曝光增加
; 1902 : 			if(g_nExposure<0)ExposeAdd();

  00171	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_nExposure@@3HA, 0 ; g_nExposure
  00178	7d 08		 jge	 SHORT $LN4@ImageSetti
  0017a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0017d	e8 00 00 00 00	 call	 ?ExposeAdd@CEndoScopeMFCDlg@@AAE_NXZ ; CEndoScopeMFCDlg::ExposeAdd
$LN4@ImageSetti:

; 1903 : 			break;

  00182	eb 11		 jmp	 SHORT $LN26@ImageSetti
$LN3@ImageSetti:

; 1904 : 		case 0x0A://曝光减少
; 1905 : 			if(g_nExposure>-10)

  00184	83 3d 00 00 00
	00 f6		 cmp	 DWORD PTR ?g_nExposure@@3HA, -10 ; g_nExposure, fffffff6H
  0018b	7e 08		 jle	 SHORT $LN2@ImageSetti

; 1906 : 				ExposeSub();

  0018d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00190	e8 00 00 00 00	 call	 ?ExposeSub@CEndoScopeMFCDlg@@AAE_NXZ ; CEndoScopeMFCDlg::ExposeSub
$LN2@ImageSetti:
$LN1@ImageSetti:
$LN26@ImageSetti:

; 1907 : 			break;
; 1908 : 		default:
; 1909 : 			break;
; 1910 : 		}
; 1911 : }

  00195	8b e5		 mov	 esp, ebp
  00197	5d		 pop	 ebp
  00198	c2 04 00	 ret	 4
  0019b	90		 npad	 1
$LN32@ImageSetti:
  0019c	00 00 00 00	 DD	 $LN23@ImageSetti
  001a0	00 00 00 00	 DD	 $LN25@ImageSetti
  001a4	00 00 00 00	 DD	 $LN19@ImageSetti
  001a8	00 00 00 00	 DD	 $LN21@ImageSetti
  001ac	00 00 00 00	 DD	 $LN15@ImageSetti
  001b0	00 00 00 00	 DD	 $LN17@ImageSetti
  001b4	00 00 00 00	 DD	 $LN11@ImageSetti
  001b8	00 00 00 00	 DD	 $LN13@ImageSetti
  001bc	00 00 00 00	 DD	 $LN3@ImageSetti
  001c0	00 00 00 00	 DD	 $LN5@ImageSetti
  001c4	00 00 00 00	 DD	 $LN7@ImageSetti
  001c8	00 00 00 00	 DD	 $LN9@ImageSetti
?ImageSetting@CEndoScopeMFCDlg@@QAEXPAE@Z ENDP		; CEndoScopeMFCDlg::ImageSetting
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?UpdateWhiteBalance@CEndoScopeMFCDlg@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?UpdateWhiteBalance@CEndoScopeMFCDlg@@QAEXXZ PROC	; CEndoScopeMFCDlg::UpdateWhiteBalance, COMDAT
; _this$ = ecx

; 1913 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1914 : 	//if (m_bsetuplamda)
; 1915 : 	//{
; 1916 : 		//g_pPLC->Brightness10();
; 1917 : 		//Sleep(5);
; 1918 : 
; 1919 : 		GetDlgItem(IDC_STATIC_INFOBOX)->SetWindowText(_T("正在进行白平衡..."));

  00007	68 00 00 00 00	 push	 OFFSET $SG4294957211
  0000c	68 0e 04 00 00	 push	 1038			; 0000040eH
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0001a	8b c8		 mov	 ecx, eax
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 1920 : 		GetDlgItem(IDC_STATIC_INFOBOX)->ShowWindow(SW_SHOW);

  00022	6a 05		 push	 5
  00024	68 0e 04 00 00	 push	 1038			; 0000040eH
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00032	8b c8		 mov	 ecx, eax
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowWindow@CWnd@@QAEHH@Z

; 1921 : 		g_pPLC->WhiteBalance();

  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00040	e8 00 00 00 00	 call	 ?WhiteBalance@CPLC@@QAEHXZ ; CPLC::WhiteBalance

; 1922 : 		Sleep(2000);

  00045	68 d0 07 00 00	 push	 2000			; 000007d0H
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 1923 : 		//m_dwcap.SetupLamdaRGB();
; 1924 : 		m_badjwhite = true;

  00050	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00053	c6 80 b8 03 00
	00 01		 mov	 BYTE PTR [eax+952], 1

; 1925 : 		SetTimer(WHITEBALANCE, 800, NULL);

  0005a	6a 00		 push	 0
  0005c	68 20 03 00 00	 push	 800			; 00000320H
  00061	6a 03		 push	 3
  00063	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	e8 00 00 00 00	 call	 ?SetTimer@CWnd@@QAEIIIP6GXPAUHWND__@@IIK@Z@Z ; CWnd::SetTimer

; 1926 : 		//m_bsetuplamda = false;
; 1927 : 	//}
; 1928 : 	//else
; 1929 : 	//{
; 1930 : 	//	m_bsetuplamda = true;
; 1931 : 	//}
; 1932 : }

  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
?UpdateWhiteBalance@CEndoScopeMFCDlg@@QAEXXZ ENDP	; CEndoScopeMFCDlg::UpdateWhiteBalance
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?LightControler@CEndoScopeMFCDlg@@QAEXPAE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pInfo$ = 8						; size = 4
?LightControler@CEndoScopeMFCDlg@@QAEXPAE@Z PROC	; CEndoScopeMFCDlg::LightControler, COMDAT
; _this$ = ecx

; 1934 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1935 : 	if (pInfo[8]== 0x0C)

  00007	b8 01 00 00 00	 mov	 eax, 1
  0000c	c1 e0 03	 shl	 eax, 3
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _pInfo$[ebp]
  00012	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  00016	83 fa 0c	 cmp	 edx, 12			; 0000000cH
  00019	75 6c		 jne	 SHORT $LN4@LightContr

; 1936 : 	{
; 1937 : 		if (g_bIsLightOpen)//初始化启动是FALSE

  0001b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_bIsLightOpen@@3HA, 0 ; g_bIsLightOpen
  00022	74 32		 je	 SHORT $LN2@LightContr

; 1938 : 		{
; 1939 : 			//冷光源关
; 1940 : 			g_pPLC->CloseLight();

  00024	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0002a	e8 00 00 00 00	 call	 ?CloseLight@CPLC@@QAEHXZ ; CPLC::CloseLight

; 1941 : 			g_nLBrightness = 0;

  0002f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_nLBrightness@@3HA, 0 ; g_nLBrightness

; 1942 : 			g_pPLC->Light(g_nLBrightness);

  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_nLBrightness@@3HA ; g_nLBrightness
  0003e	50		 push	 eax
  0003f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00045	e8 00 00 00 00	 call	 ?Light@CPLC@@QAEHH@Z	; CPLC::Light

; 1943 : 			g_bIsLightOpen = FALSE;

  0004a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_bIsLightOpen@@3HA, 0 ; g_bIsLightOpen

; 1944 : 		}
; 1945 : 		else

  00054	eb 31		 jmp	 SHORT $LN4@LightContr
$LN2@LightContr:

; 1946 : 		{
; 1947 : 			//冷光源开
; 1948 : 			g_pPLC->OpenLight();

  00056	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0005c	e8 00 00 00 00	 call	 ?OpenLight@CPLC@@QAEHXZ	; CPLC::OpenLight

; 1949 : 			g_nLBrightness = 100;

  00061	c7 05 00 00 00
	00 64 00 00 00	 mov	 DWORD PTR ?g_nLBrightness@@3HA, 100 ; g_nLBrightness, 00000064H

; 1950 : 			g_pPLC->Light(g_nLBrightness);

  0006b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_nLBrightness@@3HA ; g_nLBrightness
  00071	51		 push	 ecx
  00072	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00078	e8 00 00 00 00	 call	 ?Light@CPLC@@QAEHH@Z	; CPLC::Light

; 1951 : 			g_bIsLightOpen = TRUE;

  0007d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?g_bIsLightOpen@@3HA, 1 ; g_bIsLightOpen
$LN4@LightContr:

; 1952 : 		}
; 1953 : 	}
; 1954 : }

  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 04 00	 ret	 4
?LightControler@CEndoScopeMFCDlg@@QAEXPAE@Z ENDP	; CEndoScopeMFCDlg::LightControler
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?RestoreFactorySetting@CEndoScopeMFCDlg@@QAEXXZ
_TEXT	SEGMENT
_nShowShape$ = -44					; size = 4
_nMetering$ = -40					; size = 4
_nBrightness$ = -36					; size = 4
_nExposure$ = -32					; size = 4
_nGain$ = -28						; size = 4
_nBlue$ = -24						; size = 4
_nRed$ = -20						; size = 4
_nSaturation$ = -16					; size = 4
_nContrast$ = -12					; size = 4
_pos$ = -8						; size = 4
_this$ = -4						; size = 4
?RestoreFactorySetting@CEndoScopeMFCDlg@@QAEXXZ PROC	; CEndoScopeMFCDlg::RestoreFactorySetting, COMDAT
; _this$ = ecx

; 1957 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1958 : 	GetDlgItem(IDC_STATIC_INFOBOX)->ShowWindow(SW_SHOW);

  00009	6a 05		 push	 5
  0000b	68 0e 04 00 00	 push	 1038			; 0000040eH
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00019	8b c8		 mov	 ecx, eax
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowWindow@CWnd@@QAEHH@Z

; 1959 : 	GetDlgItem(IDC_STATIC_INFOBOX)->SetWindowText(_T("正在恢复出厂设置..."));

  00021	68 00 00 00 00	 push	 OFFSET $SG4294957210
  00026	68 0e 04 00 00	 push	 1038			; 0000040eH
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00034	8b c8		 mov	 ecx, eax
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 1960 : 	GetDlgItem(IDC_STATIC_INFOBOX)->ShowWindow(SW_SHOW);

  0003c	6a 05		 push	 5
  0003e	68 0e 04 00 00	 push	 1038			; 0000040eH
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0004c	8b c8		 mov	 ecx, eax
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowWindow@CWnd@@QAEHH@Z

; 1961 : 	Sleep(3000);

  00054	68 b8 0b 00 00	 push	 3000			; 00000bb8H
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 1962 : 	GetDlgItem(IDC_STATIC_INFOBOX)->ShowWindow(SW_HIDE);

  0005f	6a 00		 push	 0
  00061	68 0e 04 00 00	 push	 1038			; 0000040eH
  00066	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0006f	8b c8		 mov	 ecx, eax
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowWindow@CWnd@@QAEHH@Z

; 1963 : 	//1.相机亮度恢复
; 1964 : 	int nBrightness = GetPrivateProfileInt(_T("FACTORY"), _T("BRIGHTNESS"), 1, g_ConfigPath);

  00077	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ConfigPath@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@A ; g_ConfigPath
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00082	50		 push	 eax
  00083	6a 01		 push	 1
  00085	68 00 00 00 00	 push	 OFFSET $SG4294957209
  0008a	68 00 00 00 00	 push	 OFFSET $SG4294957208
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00095	89 45 dc	 mov	 DWORD PTR _nBrightness$[ebp], eax

; 1965 : 	if((g_nBrightness<-10)||(g_nBrightness>10))

  00098	83 3d 00 00 00
	00 f6		 cmp	 DWORD PTR ?g_nBrightness@@3HA, -10 ; g_nBrightness, fffffff6H
  0009f	7c 09		 jl	 SHORT $LN19@RestoreFac
  000a1	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR ?g_nBrightness@@3HA, 10 ; g_nBrightness, 0000000aH
  000a8	7e 07		 jle	 SHORT $LN20@RestoreFac
$LN19@RestoreFac:

; 1966 : 	{
; 1967 : 		nBrightness=0;

  000aa	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _nBrightness$[ebp], 0
$LN20@RestoreFac:

; 1968 : 	}
; 1969 : 	g_pPLC->Brightness5();

  000b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  000b7	e8 00 00 00 00	 call	 ?Brightness5@CPLC@@QAEHXZ ; CPLC::Brightness5

; 1970 : 	g_nBrightness = nBrightness;

  000bc	8b 45 dc	 mov	 eax, DWORD PTR _nBrightness$[ebp]
  000bf	a3 00 00 00 00	 mov	 DWORD PTR ?g_nBrightness@@3HA, eax ; g_nBrightness

; 1971 : 	Sleep(20);

  000c4	6a 14		 push	 20			; 00000014H
  000c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 1972 : 	//2.相机对比度恢复
; 1973 : 	int nContrast = GetPrivateProfileInt(_T("FACTORY"), _T("CONTRAST"), 1, g_ConfigPath);

  000cc	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ConfigPath@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@A ; g_ConfigPath
  000d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  000d7	50		 push	 eax
  000d8	6a 01		 push	 1
  000da	68 00 00 00 00	 push	 OFFSET $SG4294957207
  000df	68 00 00 00 00	 push	 OFFSET $SG4294957206
  000e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  000ea	89 45 f4	 mov	 DWORD PTR _nContrast$[ebp], eax

; 1974 : 	if((nContrast<0)||(nContrast>10))

  000ed	83 7d f4 00	 cmp	 DWORD PTR _nContrast$[ebp], 0
  000f1	7c 06		 jl	 SHORT $LN17@RestoreFac
  000f3	83 7d f4 0a	 cmp	 DWORD PTR _nContrast$[ebp], 10 ; 0000000aH
  000f7	7e 07		 jle	 SHORT $LN18@RestoreFac
$LN17@RestoreFac:

; 1975 : 	{
; 1976 : 		nContrast=0;

  000f9	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _nContrast$[ebp], 0
$LN18@RestoreFac:

; 1977 : 	}
; 1978 : 	g_pPLC->Contrast(nContrast);

  00100	8b 4d f4	 mov	 ecx, DWORD PTR _nContrast$[ebp]
  00103	51		 push	 ecx
  00104	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0010a	e8 00 00 00 00	 call	 ?Contrast@CPLC@@QAEHH@Z	; CPLC::Contrast

; 1979 : 	g_nContrast = nContrast;

  0010f	8b 55 f4	 mov	 edx, DWORD PTR _nContrast$[ebp]
  00112	89 15 00 00 00
	00		 mov	 DWORD PTR ?g_nContrast@@3HA, edx ; g_nContrast

; 1980 : 	Sleep(20);

  00118	6a 14		 push	 20			; 00000014H
  0011a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 1981 : 	//3.相机饱和度恢复
; 1982 : 	int nSaturation = GetPrivateProfileInt(_T("FACTORY"), _T("SATURATION"), 1, g_ConfigPath);

  00120	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ConfigPath@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@A ; g_ConfigPath
  00125	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0012b	50		 push	 eax
  0012c	6a 01		 push	 1
  0012e	68 00 00 00 00	 push	 OFFSET $SG4294957205
  00133	68 00 00 00 00	 push	 OFFSET $SG4294957204
  00138	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0013e	89 45 f0	 mov	 DWORD PTR _nSaturation$[ebp], eax

; 1983 : 	if((nSaturation<0)||(nSaturation>10))

  00141	83 7d f0 00	 cmp	 DWORD PTR _nSaturation$[ebp], 0
  00145	7c 06		 jl	 SHORT $LN15@RestoreFac
  00147	83 7d f0 0a	 cmp	 DWORD PTR _nSaturation$[ebp], 10 ; 0000000aH
  0014b	7e 07		 jle	 SHORT $LN16@RestoreFac
$LN15@RestoreFac:

; 1984 : 	{
; 1985 : 		nSaturation=5;

  0014d	c7 45 f0 05 00
	00 00		 mov	 DWORD PTR _nSaturation$[ebp], 5
$LN16@RestoreFac:

; 1986 : 	}
; 1987 : 	g_pPLC->Saturation(nSaturation);

  00154	8b 45 f0	 mov	 eax, DWORD PTR _nSaturation$[ebp]
  00157	50		 push	 eax
  00158	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0015e	e8 00 00 00 00	 call	 ?Saturation@CPLC@@QAEHH@Z ; CPLC::Saturation

; 1988 : 	g_nSaturation = nSaturation;

  00163	8b 4d f0	 mov	 ecx, DWORD PTR _nSaturation$[ebp]
  00166	89 0d 00 00 00
	00		 mov	 DWORD PTR ?g_nSaturation@@3HA, ecx ; g_nSaturation

; 1989 : 	Sleep(20);

  0016c	6a 14		 push	 20			; 00000014H
  0016e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 1990 : 	//13.色调R B
; 1991 : 	int nRed = GetPrivateProfileInt(_T("FACTORY"), _T("HUE_R"), 1, g_ConfigPath);

  00174	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ConfigPath@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@A ; g_ConfigPath
  00179	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0017f	50		 push	 eax
  00180	6a 01		 push	 1
  00182	68 00 00 00 00	 push	 OFFSET $SG4294957203
  00187	68 00 00 00 00	 push	 OFFSET $SG4294957202
  0018c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00192	89 45 ec	 mov	 DWORD PTR _nRed$[ebp], eax

; 1992 : 	if((nRed<-9)||(nRed>9))

  00195	83 7d ec f7	 cmp	 DWORD PTR _nRed$[ebp], -9 ; fffffff7H
  00199	7c 06		 jl	 SHORT $LN13@RestoreFac
  0019b	83 7d ec 09	 cmp	 DWORD PTR _nRed$[ebp], 9
  0019f	7e 07		 jle	 SHORT $LN14@RestoreFac
$LN13@RestoreFac:

; 1993 : 	{
; 1994 : 		nRed = 0;

  001a1	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _nRed$[ebp], 0
$LN14@RestoreFac:

; 1995 : 	}
; 1996 : 	g_pPLC->R(nRed);

  001a8	8b 55 ec	 mov	 edx, DWORD PTR _nRed$[ebp]
  001ab	52		 push	 edx
  001ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  001b2	e8 00 00 00 00	 call	 ?R@CPLC@@QAEHH@Z	; CPLC::R

; 1997 : 	int pos = m_strRB.Find('R');

  001b7	6a 00		 push	 0
  001b9	6a 52		 push	 82			; 00000052H
  001bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001be	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  001c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHDH@Z
  001ca	89 45 f8	 mov	 DWORD PTR _pos$[ebp], eax

; 1998 : 	m_strRB.SetAt(++pos, '+');

  001cd	8b 45 f8	 mov	 eax, DWORD PTR _pos$[ebp]
  001d0	83 c0 01	 add	 eax, 1
  001d3	89 45 f8	 mov	 DWORD PTR _pos$[ebp], eax
  001d6	6a 2b		 push	 43			; 0000002bH
  001d8	8b 4d f8	 mov	 ecx, DWORD PTR _pos$[ebp]
  001db	51		 push	 ecx
  001dc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001df	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  001e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAt@?$CSimpleStringT@D$00@ATL@@QAEXHD@Z

; 1999 : 	m_strRB.SetAt(++pos, '0');

  001eb	8b 55 f8	 mov	 edx, DWORD PTR _pos$[ebp]
  001ee	83 c2 01	 add	 edx, 1
  001f1	89 55 f8	 mov	 DWORD PTR _pos$[ebp], edx
  001f4	6a 30		 push	 48			; 00000030H
  001f6	8b 45 f8	 mov	 eax, DWORD PTR _pos$[ebp]
  001f9	50		 push	 eax
  001fa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001fd	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  00203	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAt@?$CSimpleStringT@D$00@ATL@@QAEXHD@Z

; 2000 : 	GetDlgItem(IDC_IMGCLR_INFO_STATIC)->SetWindowText(m_strRB);

  00209	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0020c	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  00212	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00218	50		 push	 eax
  00219	68 04 04 00 00	 push	 1028			; 00000404H
  0021e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00221	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00227	8b c8		 mov	 ecx, eax
  00229	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 2001 : 	g_nRed = nRed;

  0022f	8b 4d ec	 mov	 ecx, DWORD PTR _nRed$[ebp]
  00232	89 0d 00 00 00
	00		 mov	 DWORD PTR ?g_nRed@@3HA, ecx ; g_nRed

; 2002 : 	Sleep(20);

  00238	6a 14		 push	 20			; 00000014H
  0023a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 2003 : 
; 2004 : 	int nBlue = GetPrivateProfileInt(_T("FACTORY"), _T("HUE_B"), 1, g_ConfigPath);

  00240	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ConfigPath@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@A ; g_ConfigPath
  00245	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0024b	50		 push	 eax
  0024c	6a 01		 push	 1
  0024e	68 00 00 00 00	 push	 OFFSET $SG4294957201
  00253	68 00 00 00 00	 push	 OFFSET $SG4294957200
  00258	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0025e	89 45 e8	 mov	 DWORD PTR _nBlue$[ebp], eax

; 2005 : 	if((nBlue<-9)||(nBlue>9))

  00261	83 7d e8 f7	 cmp	 DWORD PTR _nBlue$[ebp], -9 ; fffffff7H
  00265	7c 06		 jl	 SHORT $LN11@RestoreFac
  00267	83 7d e8 09	 cmp	 DWORD PTR _nBlue$[ebp], 9
  0026b	7e 07		 jle	 SHORT $LN12@RestoreFac
$LN11@RestoreFac:

; 2006 : 	{
; 2007 : 		nBlue = 0;

  0026d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _nBlue$[ebp], 0
$LN12@RestoreFac:

; 2008 : 	}
; 2009 : 	g_pPLC->B(nBlue);

  00274	8b 55 e8	 mov	 edx, DWORD PTR _nBlue$[ebp]
  00277	52		 push	 edx
  00278	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0027e	e8 00 00 00 00	 call	 ?B@CPLC@@QAEHH@Z	; CPLC::B

; 2010 : 	pos = m_strRB.Find('B');

  00283	6a 00		 push	 0
  00285	6a 42		 push	 66			; 00000042H
  00287	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0028a	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  00290	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHDH@Z
  00296	89 45 f8	 mov	 DWORD PTR _pos$[ebp], eax

; 2011 : 	m_strRB.SetAt(++pos, '+');

  00299	8b 45 f8	 mov	 eax, DWORD PTR _pos$[ebp]
  0029c	83 c0 01	 add	 eax, 1
  0029f	89 45 f8	 mov	 DWORD PTR _pos$[ebp], eax
  002a2	6a 2b		 push	 43			; 0000002bH
  002a4	8b 4d f8	 mov	 ecx, DWORD PTR _pos$[ebp]
  002a7	51		 push	 ecx
  002a8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002ab	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  002b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAt@?$CSimpleStringT@D$00@ATL@@QAEXHD@Z

; 2012 : 	m_strRB.SetAt(++pos, '0');

  002b7	8b 55 f8	 mov	 edx, DWORD PTR _pos$[ebp]
  002ba	83 c2 01	 add	 edx, 1
  002bd	89 55 f8	 mov	 DWORD PTR _pos$[ebp], edx
  002c0	6a 30		 push	 48			; 00000030H
  002c2	8b 45 f8	 mov	 eax, DWORD PTR _pos$[ebp]
  002c5	50		 push	 eax
  002c6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002c9	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  002cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAt@?$CSimpleStringT@D$00@ATL@@QAEXHD@Z

; 2013 : 	GetDlgItem(IDC_IMGCLR_INFO_STATIC)->SetWindowText(m_strRB);

  002d5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002d8	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  002de	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  002e4	50		 push	 eax
  002e5	68 04 04 00 00	 push	 1028			; 00000404H
  002ea	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  002f3	8b c8		 mov	 ecx, eax
  002f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 2014 : 	g_nBlue = nBlue;

  002fb	8b 4d e8	 mov	 ecx, DWORD PTR _nBlue$[ebp]
  002fe	89 0d 00 00 00
	00		 mov	 DWORD PTR ?g_nBlue@@3HA, ecx ; g_nBlue

; 2015 : 	Sleep(20);

  00304	6a 14		 push	 20			; 00000014H
  00306	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 2016 : 	//4.相机增益恢复
; 2017 : 	int nGain = GetPrivateProfileInt(_T("FACTORY"), _T("GAIN"), 1, g_ConfigPath);

  0030c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ConfigPath@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@A ; g_ConfigPath
  00311	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00317	50		 push	 eax
  00318	6a 01		 push	 1
  0031a	68 00 00 00 00	 push	 OFFSET $SG4294957199
  0031f	68 00 00 00 00	 push	 OFFSET $SG4294957198
  00324	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0032a	89 45 e4	 mov	 DWORD PTR _nGain$[ebp], eax

; 2018 : 	if((nGain<0)||(nGain>10))

  0032d	83 7d e4 00	 cmp	 DWORD PTR _nGain$[ebp], 0
  00331	7c 06		 jl	 SHORT $LN9@RestoreFac
  00333	83 7d e4 0a	 cmp	 DWORD PTR _nGain$[ebp], 10 ; 0000000aH
  00337	7e 07		 jle	 SHORT $LN10@RestoreFac
$LN9@RestoreFac:

; 2019 : 	{
; 2020 : 		nGain=0;

  00339	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _nGain$[ebp], 0
$LN10@RestoreFac:

; 2021 : 	}
; 2022 : 	g_pPLC->Gain(nGain);

  00340	8b 55 e4	 mov	 edx, DWORD PTR _nGain$[ebp]
  00343	52		 push	 edx
  00344	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0034a	e8 00 00 00 00	 call	 ?Gain@CPLC@@QAEHH@Z	; CPLC::Gain

; 2023 : 	g_nGain = nGain;

  0034f	8b 45 e4	 mov	 eax, DWORD PTR _nGain$[ebp]
  00352	a3 00 00 00 00	 mov	 DWORD PTR ?g_nGain@@3HA, eax ; g_nGain

; 2024 : 	Sleep(20);

  00357	6a 14		 push	 20			; 00000014H
  00359	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 2025 : 	//5.相机曝光恢复
; 2026 : 	int nExposure = GetPrivateProfileInt(_T("FACTORY"), _T("EXPOSURE"), 1, g_ConfigPath);

  0035f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ConfigPath@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@A ; g_ConfigPath
  00364	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0036a	50		 push	 eax
  0036b	6a 01		 push	 1
  0036d	68 00 00 00 00	 push	 OFFSET $SG4294957197
  00372	68 00 00 00 00	 push	 OFFSET $SG4294957196
  00377	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  0037d	89 45 e0	 mov	 DWORD PTR _nExposure$[ebp], eax

; 2027 : 	if((nExposure>0)||(nExposure<-10))

  00380	83 7d e0 00	 cmp	 DWORD PTR _nExposure$[ebp], 0
  00384	7f 06		 jg	 SHORT $LN7@RestoreFac
  00386	83 7d e0 f6	 cmp	 DWORD PTR _nExposure$[ebp], -10 ; fffffff6H
  0038a	7d 07		 jge	 SHORT $LN8@RestoreFac
$LN7@RestoreFac:

; 2028 : 	{
; 2029 : 		nExposure=0;

  0038c	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _nExposure$[ebp], 0
$LN8@RestoreFac:

; 2030 : 	}
; 2031 : 	g_pPLC->Exposure2();

  00393	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00399	e8 00 00 00 00	 call	 ?Exposure2@CPLC@@QAEHXZ	; CPLC::Exposure2

; 2032 : 	g_nExposure = nExposure;

  0039e	8b 4d e0	 mov	 ecx, DWORD PTR _nExposure$[ebp]
  003a1	89 0d 00 00 00
	00		 mov	 DWORD PTR ?g_nExposure@@3HA, ecx ; g_nExposure

; 2033 : 	//g_nSharpness = 6;
; 2034 : 	Sleep(20);

  003a7	6a 14		 push	 20			; 00000014H
  003a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 2035 : 	//6.白平衡设置
; 2036 : 	//7.色调设置
; 2037 : 	//8.清晰度设置
; 2038 : 	//int nSharpness=GetPrivateProfileInt(_T("FACTORY"),_T("SHARPNESS"),1,g_ConfigPath);
; 2039 : 	//if((nSharpness<0)||(nSharpness>15))
; 2040 : 	//{
; 2041 : 	//	nSharpness=4 ;
; 2042 : 	//}
; 2043 : 	//g_pPLC->Sharpness(nSharpness);
; 2044 : 	//Sleep(5);
; 2045 : 	//9.伽马设置
; 2046 : 	//10.测光模式
; 2047 : 	int nMetering = GetPrivateProfileInt(_T("FACTORY"), _T("ADJBRIGHT"), 1, g_ConfigPath);

  003af	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ConfigPath@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@A ; g_ConfigPath
  003b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  003ba	50		 push	 eax
  003bb	6a 01		 push	 1
  003bd	68 00 00 00 00	 push	 OFFSET $SG4294957195
  003c2	68 00 00 00 00	 push	 OFFSET $SG4294957194
  003c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  003cd	89 45 d8	 mov	 DWORD PTR _nMetering$[ebp], eax

; 2048 : 	if(0 == nMetering)

  003d0	83 7d d8 00	 cmp	 DWORD PTR _nMetering$[ebp], 0
  003d4	75 32		 jne	 SHORT $LN6@RestoreFac

; 2049 : 	{
; 2050 : 		g_nMetering = 0;

  003d6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_nMetering@@3HA, 0 ; g_nMetering

; 2051 : 		g_pPLC->AverageMetering();

  003e0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  003e6	e8 00 00 00 00	 call	 ?AverageMetering@CPLC@@QAEHXZ ; CPLC::AverageMetering

; 2052 : 		GetDlgItem(IDC_TESTLIGHT_INFO_STATIC)->SetWindowText(_T("平均测光"));

  003eb	68 00 00 00 00	 push	 OFFSET $SG4294957193
  003f0	68 03 04 00 00	 push	 1027			; 00000403H
  003f5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  003fe	8b c8		 mov	 ecx, eax
  00400	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z
  00406	eb 36		 jmp	 SHORT $LN4@RestoreFac
$LN6@RestoreFac:

; 2053 : 	}
; 2054 : 	else if(1 == nMetering)

  00408	83 7d d8 01	 cmp	 DWORD PTR _nMetering$[ebp], 1
  0040c	75 30		 jne	 SHORT $LN4@RestoreFac

; 2055 : 	{
; 2056 : 		g_nMetering = 1;

  0040e	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?g_nMetering@@3HA, 1 ; g_nMetering

; 2057 : 		g_pPLC->PeakMetering();

  00418	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0041e	e8 00 00 00 00	 call	 ?PeakMetering@CPLC@@QAEHXZ ; CPLC::PeakMetering

; 2058 : 		GetDlgItem(IDC_TESTLIGHT_INFO_STATIC)->SetWindowText(_T("峰值测光"));

  00423	68 00 00 00 00	 push	 OFFSET $SG4294957192
  00428	68 03 04 00 00	 push	 1027			; 00000403H
  0042d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00430	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00436	8b c8		 mov	 ecx, eax
  00438	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z
$LN4@RestoreFac:

; 2059 : 	}
; 2060 : 	Sleep(20);

  0043e	6a 14		 push	 20			; 00000014H
  00440	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 2061 : 	//11.轮廓
; 2062 : 	int nShowShape = GetPrivateProfileInt(_T("FACTORY"), _T("CONTUOR"), 0, g_ConfigPath);

  00446	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_ConfigPath@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@A ; g_ConfigPath
  0044b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00451	50		 push	 eax
  00452	6a 00		 push	 0
  00454	68 00 00 00 00	 push	 OFFSET $SG4294957191
  00459	68 00 00 00 00	 push	 OFFSET $SG4294957190
  0045e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetPrivateProfileIntA@16
  00464	89 45 d4	 mov	 DWORD PTR _nShowShape$[ebp], eax

; 2063 : 	if(0 == nShowShape)

  00467	83 7d d4 00	 cmp	 DWORD PTR _nShowShape$[ebp], 0
  0046b	75 0f		 jne	 SHORT $LN3@RestoreFac

; 2064 : 	{
; 2065 : 		m_nPicWindowShape = 0;//设置成圆角

  0046d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00470	c7 82 68 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+360], 0
  0047a	eb 13		 jmp	 SHORT $LN1@RestoreFac
$LN3@RestoreFac:

; 2066 : 
; 2067 : 	}
; 2068 : 	else if(1 == nShowShape)

  0047c	83 7d d4 01	 cmp	 DWORD PTR _nShowShape$[ebp], 1
  00480	75 0d		 jne	 SHORT $LN1@RestoreFac

; 2069 : 	{
; 2070 : 		m_nPicWindowShape = 1;//设置成方角

  00482	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00485	c7 80 68 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+360], 1
$LN1@RestoreFac:

; 2071 : 	}
; 2072 : 	SetPicWidowShape();

  0048f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00492	e8 00 00 00 00	 call	 ?SetPicWidowShape@CEndoScopeMFCDlg@@QAEXXZ ; CEndoScopeMFCDlg::SetPicWidowShape

; 2073 : 	Sleep(20);

  00497	6a 14		 push	 20			; 00000014H
  00499	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 2074 : 	//12.放大
; 2075 : 	g_pPLC->Zoom1();

  0049f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  004a5	e8 00 00 00 00	 call	 ?Zoom1@CPLC@@QAEHXZ	; CPLC::Zoom1

; 2076 : 	GetDlgItem(IDC_ENLARGE_INFO_STATIC)->SetWindowText(_T("1.0倍"));

  004aa	68 00 00 00 00	 push	 OFFSET $SG4294957189
  004af	68 05 04 00 00	 push	 1029			; 00000405H
  004b4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  004bd	8b c8		 mov	 ecx, eax
  004bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 2077 : 	SetZoom(1);

  004c5	83 ec 08	 sub	 esp, 8
  004c8	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  004d0	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  004d5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004d8	e8 00 00 00 00	 call	 ?SetZoom@CEndoScopeMFCDlg@@QAEXN@Z ; CEndoScopeMFCDlg::SetZoom

; 2078 : 	m_nZoomIn = 1;

  004dd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004e0	c7 81 6c 01 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+364], 1

; 2079 : 	Sleep(20);

  004ea	6a 14		 push	 20			; 00000014H
  004ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 2080 : 
; 2081 : 	GetDlgItem(IDC_STATIC_INFOBOX)->ShowWindow(SW_SHOW);

  004f2	6a 05		 push	 5
  004f4	68 0e 04 00 00	 push	 1038			; 0000040eH
  004f9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00502	8b c8		 mov	 ecx, eax
  00504	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowWindow@CWnd@@QAEHH@Z

; 2082 : 	GetDlgItem(IDC_STATIC_INFOBOX)->SetWindowText(_T("恢复出厂设置完成"));

  0050a	68 00 00 00 00	 push	 OFFSET $SG4294957188
  0050f	68 0e 04 00 00	 push	 1038			; 0000040eH
  00514	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00517	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0051d	8b c8		 mov	 ecx, eax
  0051f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 2083 : 	GetDlgItem(IDC_STATIC_INFOBOX)->ShowWindow(SW_SHOW);

  00525	6a 05		 push	 5
  00527	68 0e 04 00 00	 push	 1038			; 0000040eH
  0052c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0052f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00535	8b c8		 mov	 ecx, eax
  00537	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowWindow@CWnd@@QAEHH@Z

; 2084 : 	Sleep(3000);

  0053d	68 b8 0b 00 00	 push	 3000			; 00000bb8H
  00542	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 2085 : 	GetDlgItem(IDC_STATIC_INFOBOX)->ShowWindow(SW_HIDE);

  00548	6a 00		 push	 0
  0054a	68 0e 04 00 00	 push	 1038			; 0000040eH
  0054f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00552	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00558	8b c8		 mov	 ecx, eax
  0055a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ShowWindow@CWnd@@QAEHH@Z

; 2086 : 
; 2087 : }

  00560	8b e5		 mov	 esp, ebp
  00562	5d		 pop	 ebp
  00563	c3		 ret	 0
?RestoreFactorySetting@CEndoScopeMFCDlg@@QAEXXZ ENDP	; CEndoScopeMFCDlg::RestoreFactorySetting
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?SetModeofMeterLight@CEndoScopeMFCDlg@@QAEXPAE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pbuf$ = 8						; size = 4
?SetModeofMeterLight@CEndoScopeMFCDlg@@QAEXPAE@Z PROC	; CEndoScopeMFCDlg::SetModeofMeterLight, COMDAT
; _this$ = ecx

; 2090 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2091 : 	cout<<"get signal"<<endl;

  00007	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
  0000c	50		 push	 eax
  0000d	68 00 00 00 00	 push	 OFFSET $SG4294957187
  00012	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0001e	83 c4 08	 add	 esp, 8
  00021	8b c8		 mov	 ecx, eax
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 2092 : 	if (pbuf[8] == 0x0A)

  00029	ba 01 00 00 00	 mov	 edx, 1
  0002e	c1 e2 03	 shl	 edx, 3
  00031	8b 45 08	 mov	 eax, DWORD PTR _pbuf$[ebp]
  00034	0f b6 0c 10	 movzx	 ecx, BYTE PTR [eax+edx]
  00038	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  0003b	75 32		 jne	 SHORT $LN3@SetModeofM

; 2093 : 	{
; 2094 : 		//平均测光
; 2095 : 		g_nMetering = 0;

  0003d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_nMetering@@3HA, 0 ; g_nMetering

; 2096 : 		g_pPLC->AverageMetering();

  00047	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0004d	e8 00 00 00 00	 call	 ?AverageMetering@CPLC@@QAEHXZ ; CPLC::AverageMetering

; 2097 : 		GetDlgItem(IDC_TESTLIGHT_INFO_STATIC)->SetWindowText(_T("平均测光"));

  00052	68 00 00 00 00	 push	 OFFSET $SG4294957186
  00057	68 03 04 00 00	 push	 1027			; 00000403H
  0005c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00065	8b c8		 mov	 ecx, eax
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z
  0006d	eb 44		 jmp	 SHORT $LN4@SetModeofM
$LN3@SetModeofM:

; 2098 : 	}
; 2099 : 	else if (0x0B == pbuf[8])

  0006f	ba 01 00 00 00	 mov	 edx, 1
  00074	c1 e2 03	 shl	 edx, 3
  00077	8b 45 08	 mov	 eax, DWORD PTR _pbuf$[ebp]
  0007a	0f b6 0c 10	 movzx	 ecx, BYTE PTR [eax+edx]
  0007e	83 f9 0b	 cmp	 ecx, 11			; 0000000bH
  00081	75 30		 jne	 SHORT $LN4@SetModeofM

; 2100 : 	{
; 2101 : 		//峰值测光
; 2102 : 		g_nMetering = 1;

  00083	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?g_nMetering@@3HA, 1 ; g_nMetering

; 2103 : 		g_pPLC->PeakMetering();

  0008d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00093	e8 00 00 00 00	 call	 ?PeakMetering@CPLC@@QAEHXZ ; CPLC::PeakMetering

; 2104 : 		GetDlgItem(IDC_TESTLIGHT_INFO_STATIC)->SetWindowText(_T("峰值测光"));

  00098	68 00 00 00 00	 push	 OFFSET $SG4294957185
  0009d	68 03 04 00 00	 push	 1027			; 00000403H
  000a2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  000ab	8b c8		 mov	 ecx, eax
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z
$LN4@SetModeofM:

; 2105 : 	}
; 2106 : }

  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 04 00	 ret	 4
?SetModeofMeterLight@CEndoScopeMFCDlg@@QAEXPAE@Z ENDP	; CEndoScopeMFCDlg::SetModeofMeterLight
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?ChangeImageRB@CEndoScopeMFCDlg@@QAEXPAEH@Z
_TEXT	SEGMENT
_pos$1 = -44						; size = 4
_pos$2 = -40						; size = 4
_pos$3 = -36						; size = 4
_pos$4 = -32						; size = 4
_pos$5 = -28						; size = 4
_pos$6 = -24						; size = 4
_pos$7 = -20						; size = 4
_pos$8 = -16						; size = 4
_this$ = -12						; size = 4
_B$9 = -5						; size = 1
_R$10 = -4						; size = 1
_R$11 = -3						; size = 1
_B$12 = -2						; size = 1
_B$13 = -1						; size = 1
_pbuf$ = 8						; size = 4
_flag$ = 12						; size = 4
?ChangeImageRB@CEndoScopeMFCDlg@@QAEXPAEH@Z PROC	; CEndoScopeMFCDlg::ChangeImageRB, COMDAT
; _this$ = ecx

; 2109 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 2110 : 	//printf("1%d\n",g_nBlue);
; 2111 : 	if (flag==1)

  00009	83 7d 0c 01	 cmp	 DWORD PTR _flag$[ebp], 1
  0000d	0f 85 b3 02 00
	00		 jne	 $LN25@ChangeImag

; 2112 : 	{
; 2113 : 		if (pbuf[8] == 0x0A)

  00013	b8 01 00 00 00	 mov	 eax, 1
  00018	c1 e0 03	 shl	 eax, 3
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _pbuf$[ebp]
  0001e	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  00022	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  00025	0f 85 40 01 00
	00		 jne	 $LN24@ChangeImag

; 2114 : 		{
; 2115 : 			//-B值
; 2116 : 			if (g_nBlue > -9)

  0002b	83 3d 00 00 00
	00 f7		 cmp	 DWORD PTR ?g_nBlue@@3HA, -9 ; g_nBlue, fffffff7H
  00032	0f 8e 24 01 00
	00		 jle	 $LN23@ChangeImag

; 2117 : 			{
; 2118 : 				g_nBlue--;

  00038	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_nBlue@@3HA ; g_nBlue
  0003d	83 e8 01	 sub	 eax, 1
  00040	a3 00 00 00 00	 mov	 DWORD PTR ?g_nBlue@@3HA, eax ; g_nBlue

; 2119 : 				//SetConfig(_T("HUE_B"), g_nBlue);
; 2120 : 				g_pPLC->B(g_nBlue);//LJ

  00045	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_nBlue@@3HA ; g_nBlue
  0004b	51		 push	 ecx
  0004c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00052	e8 00 00 00 00	 call	 ?B@CPLC@@QAEHH@Z	; CPLC::B

; 2121 : 				char B;
; 2122 : 				B = '0' + abs(g_nBlue);

  00057	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_nBlue@@3HA ; g_nBlue
  0005c	99		 cdq
  0005d	33 c2		 xor	 eax, edx
  0005f	2b c2		 sub	 eax, edx
  00061	83 c0 30	 add	 eax, 48			; 00000030H
  00064	88 45 ff	 mov	 BYTE PTR _B$13[ebp], al

; 2123 : 				if (g_nBlue >= 0)

  00067	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_nBlue@@3HA, 0 ; g_nBlue
  0006e	7c 57		 jl	 SHORT $LN22@ChangeImag

; 2124 : 				{
; 2125 : 					int pos = m_strRB.Find('B');

  00070	6a 00		 push	 0
  00072	6a 42		 push	 66			; 00000042H
  00074	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHDH@Z
  00083	89 45 f0	 mov	 DWORD PTR _pos$8[ebp], eax

; 2126 : 					m_strRB.SetAt(++pos, '+');

  00086	8b 55 f0	 mov	 edx, DWORD PTR _pos$8[ebp]
  00089	83 c2 01	 add	 edx, 1
  0008c	89 55 f0	 mov	 DWORD PTR _pos$8[ebp], edx
  0008f	6a 2b		 push	 43			; 0000002bH
  00091	8b 45 f0	 mov	 eax, DWORD PTR _pos$8[ebp]
  00094	50		 push	 eax
  00095	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00098	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAt@?$CSimpleStringT@D$00@ATL@@QAEXHD@Z

; 2127 : 					m_strRB.SetAt(++pos, B);

  000a4	8b 4d f0	 mov	 ecx, DWORD PTR _pos$8[ebp]
  000a7	83 c1 01	 add	 ecx, 1
  000aa	89 4d f0	 mov	 DWORD PTR _pos$8[ebp], ecx
  000ad	0f b6 55 ff	 movzx	 edx, BYTE PTR _B$13[ebp]
  000b1	52		 push	 edx
  000b2	8b 45 f0	 mov	 eax, DWORD PTR _pos$8[ebp]
  000b5	50		 push	 eax
  000b6	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000b9	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  000bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAt@?$CSimpleStringT@D$00@ATL@@QAEXHD@Z

; 2128 : 				}
; 2129 : 				else

  000c5	eb 55		 jmp	 SHORT $LN21@ChangeImag
$LN22@ChangeImag:

; 2130 : 				{
; 2131 : 					int pos = m_strRB.Find('B');

  000c7	6a 00		 push	 0
  000c9	6a 42		 push	 66			; 00000042H
  000cb	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000ce	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  000d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHDH@Z
  000da	89 45 ec	 mov	 DWORD PTR _pos$7[ebp], eax

; 2132 : 					m_strRB.SetAt(++pos, '-');

  000dd	8b 4d ec	 mov	 ecx, DWORD PTR _pos$7[ebp]
  000e0	83 c1 01	 add	 ecx, 1
  000e3	89 4d ec	 mov	 DWORD PTR _pos$7[ebp], ecx
  000e6	6a 2d		 push	 45			; 0000002dH
  000e8	8b 55 ec	 mov	 edx, DWORD PTR _pos$7[ebp]
  000eb	52		 push	 edx
  000ec	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000ef	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  000f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAt@?$CSimpleStringT@D$00@ATL@@QAEXHD@Z

; 2133 : 					m_strRB.SetAt(++pos, B);

  000fb	8b 45 ec	 mov	 eax, DWORD PTR _pos$7[ebp]
  000fe	83 c0 01	 add	 eax, 1
  00101	89 45 ec	 mov	 DWORD PTR _pos$7[ebp], eax
  00104	0f b6 4d ff	 movzx	 ecx, BYTE PTR _B$13[ebp]
  00108	51		 push	 ecx
  00109	8b 55 ec	 mov	 edx, DWORD PTR _pos$7[ebp]
  0010c	52		 push	 edx
  0010d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00110	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  00116	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAt@?$CSimpleStringT@D$00@ATL@@QAEXHD@Z
$LN21@ChangeImag:

; 2134 : 				}
; 2135 : 				//printf("2%d\n",g_nBlue);
; 2136 : 				GetDlgItem(IDC_IMGCLR_INFO_STATIC)->SetWindowText(m_strRB);

  0011c	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0011f	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  00125	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0012b	50		 push	 eax
  0012c	68 04 04 00 00	 push	 1028			; 00000404H
  00131	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00134	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0013a	8b c8		 mov	 ecx, eax
  0013c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 2137 : 				if (0 == g_nBlue)

  00142	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_nBlue@@3HA, 0 ; g_nBlue
  00149	75 11		 jne	 SHORT $LN23@ChangeImag

; 2138 : 				{
; 2139 : 					g_pPLC->B(g_nBlue);

  0014b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_nBlue@@3HA ; g_nBlue
  00150	50		 push	 eax
  00151	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00157	e8 00 00 00 00	 call	 ?B@CPLC@@QAEHH@Z	; CPLC::B
$LN23@ChangeImag:

; 2140 : 				}
; 2141 : 			}
; 2142 : 			g_bOneB = TRUE;

  0015c	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?g_bOneB@@3HA, 1 ; g_bOneB
  00166	e9 56 01 00 00	 jmp	 $LN19@ChangeImag
$LN24@ChangeImag:

; 2143 : 		}
; 2144 : 		else if (pbuf[8] == 0x0B)

  0016b	b9 01 00 00 00	 mov	 ecx, 1
  00170	c1 e1 03	 shl	 ecx, 3
  00173	8b 55 08	 mov	 edx, DWORD PTR _pbuf$[ebp]
  00176	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  0017a	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0017d	0f 85 3e 01 00
	00		 jne	 $LN19@ChangeImag

; 2145 : 		{
; 2146 : 			//+B值
; 2147 : 			//printf("3%d\n",g_nBlue);
; 2148 : 			if (g_nBlue < 9)

  00183	83 3d 00 00 00
	00 09		 cmp	 DWORD PTR ?g_nBlue@@3HA, 9 ; g_nBlue
  0018a	0f 8d 27 01 00
	00		 jge	 $LN17@ChangeImag

; 2149 : 			{
; 2150 : 				g_nBlue++;

  00190	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_nBlue@@3HA ; g_nBlue
  00196	83 c1 01	 add	 ecx, 1
  00199	89 0d 00 00 00
	00		 mov	 DWORD PTR ?g_nBlue@@3HA, ecx ; g_nBlue

; 2151 : 				//SetConfig(_T("HUE_B"), g_nBlue);
; 2152 : 				g_pPLC->B(g_nBlue);//LJ

  0019f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_nBlue@@3HA ; g_nBlue
  001a5	52		 push	 edx
  001a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  001ac	e8 00 00 00 00	 call	 ?B@CPLC@@QAEHH@Z	; CPLC::B

; 2153 : 				char B;
; 2154 : 				B = '0' + abs(g_nBlue);

  001b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_nBlue@@3HA ; g_nBlue
  001b6	99		 cdq
  001b7	33 c2		 xor	 eax, edx
  001b9	2b c2		 sub	 eax, edx
  001bb	83 c0 30	 add	 eax, 48			; 00000030H
  001be	88 45 fe	 mov	 BYTE PTR _B$12[ebp], al

; 2155 : 				if (g_nBlue >= 0)

  001c1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_nBlue@@3HA, 0 ; g_nBlue
  001c8	7c 57		 jl	 SHORT $LN16@ChangeImag

; 2156 : 				{
; 2157 : 					int pos = m_strRB.Find('B');

  001ca	6a 00		 push	 0
  001cc	6a 42		 push	 66			; 00000042H
  001ce	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  001d1	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  001d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHDH@Z
  001dd	89 45 e8	 mov	 DWORD PTR _pos$6[ebp], eax

; 2158 : 					m_strRB.SetAt(++pos, '+');

  001e0	8b 45 e8	 mov	 eax, DWORD PTR _pos$6[ebp]
  001e3	83 c0 01	 add	 eax, 1
  001e6	89 45 e8	 mov	 DWORD PTR _pos$6[ebp], eax
  001e9	6a 2b		 push	 43			; 0000002bH
  001eb	8b 4d e8	 mov	 ecx, DWORD PTR _pos$6[ebp]
  001ee	51		 push	 ecx
  001ef	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  001f2	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  001f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAt@?$CSimpleStringT@D$00@ATL@@QAEXHD@Z

; 2159 : 					m_strRB.SetAt(++pos, B);

  001fe	8b 55 e8	 mov	 edx, DWORD PTR _pos$6[ebp]
  00201	83 c2 01	 add	 edx, 1
  00204	89 55 e8	 mov	 DWORD PTR _pos$6[ebp], edx
  00207	0f b6 45 fe	 movzx	 eax, BYTE PTR _B$12[ebp]
  0020b	50		 push	 eax
  0020c	8b 4d e8	 mov	 ecx, DWORD PTR _pos$6[ebp]
  0020f	51		 push	 ecx
  00210	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00213	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  00219	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAt@?$CSimpleStringT@D$00@ATL@@QAEXHD@Z

; 2160 : 				}
; 2161 : 				else

  0021f	eb 55		 jmp	 SHORT $LN15@ChangeImag
$LN16@ChangeImag:

; 2162 : 				{
; 2163 : 					int pos = m_strRB.Find('B');

  00221	6a 00		 push	 0
  00223	6a 42		 push	 66			; 00000042H
  00225	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00228	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  0022e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHDH@Z
  00234	89 45 e4	 mov	 DWORD PTR _pos$5[ebp], eax

; 2164 : 					m_strRB.SetAt(++pos, '-');

  00237	8b 55 e4	 mov	 edx, DWORD PTR _pos$5[ebp]
  0023a	83 c2 01	 add	 edx, 1
  0023d	89 55 e4	 mov	 DWORD PTR _pos$5[ebp], edx
  00240	6a 2d		 push	 45			; 0000002dH
  00242	8b 45 e4	 mov	 eax, DWORD PTR _pos$5[ebp]
  00245	50		 push	 eax
  00246	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00249	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  0024f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAt@?$CSimpleStringT@D$00@ATL@@QAEXHD@Z

; 2165 : 					m_strRB.SetAt(++pos, B);

  00255	8b 4d e4	 mov	 ecx, DWORD PTR _pos$5[ebp]
  00258	83 c1 01	 add	 ecx, 1
  0025b	89 4d e4	 mov	 DWORD PTR _pos$5[ebp], ecx
  0025e	0f b6 55 fe	 movzx	 edx, BYTE PTR _B$12[ebp]
  00262	52		 push	 edx
  00263	8b 45 e4	 mov	 eax, DWORD PTR _pos$5[ebp]
  00266	50		 push	 eax
  00267	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0026a	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  00270	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAt@?$CSimpleStringT@D$00@ATL@@QAEXHD@Z
$LN15@ChangeImag:

; 2166 : 				}
; 2167 : 				//printf("4%d\n",g_nBlue);
; 2168 : 				GetDlgItem(IDC_IMGCLR_INFO_STATIC)->SetWindowText(m_strRB);

  00276	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00279	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  0027f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00285	50		 push	 eax
  00286	68 04 04 00 00	 push	 1028			; 00000404H
  0028b	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0028e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00294	8b c8		 mov	 ecx, eax
  00296	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 2169 : 				if (0 == g_nBlue)

  0029c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_nBlue@@3HA, 0 ; g_nBlue
  002a3	75 12		 jne	 SHORT $LN17@ChangeImag

; 2170 : 				{
; 2171 : 					g_pPLC->B(g_nBlue);

  002a5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_nBlue@@3HA ; g_nBlue
  002ab	51		 push	 ecx
  002ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  002b2	e8 00 00 00 00	 call	 ?B@CPLC@@QAEHH@Z	; CPLC::B
$LN17@ChangeImag:

; 2172 : 				}
; 2173 : 			}
; 2174 : 			g_bOneB = TRUE;

  002b7	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?g_bOneB@@3HA, 1 ; g_bOneB
$LN19@ChangeImag:

; 2175 : 		}
; 2176 : 	}

  002c1	e9 c4 02 00 00	 jmp	 $LN26@ChangeImag
$LN25@ChangeImag:

; 2177 : 	else if (flag==2)

  002c6	83 7d 0c 02	 cmp	 DWORD PTR _flag$[ebp], 2
  002ca	0f 85 ba 02 00
	00		 jne	 $LN26@ChangeImag

; 2178 : 	{
; 2179 : 		if (pbuf[8] == 0x0A)

  002d0	ba 01 00 00 00	 mov	 edx, 1
  002d5	c1 e2 03	 shl	 edx, 3
  002d8	8b 45 08	 mov	 eax, DWORD PTR _pbuf$[ebp]
  002db	0f b6 0c 10	 movzx	 ecx, BYTE PTR [eax+edx]
  002df	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  002e2	0f 85 42 01 00
	00		 jne	 $LN11@ChangeImag

; 2180 : 		{
; 2181 : 			//-R值
; 2182 : 			if (g_nRed > -9)

  002e8	83 3d 00 00 00
	00 f7		 cmp	 DWORD PTR ?g_nRed@@3HA, -9 ; g_nRed, fffffff7H
  002ef	0f 8e 26 01 00
	00		 jle	 $LN10@ChangeImag

; 2183 : 			{
; 2184 : 				g_nRed--;

  002f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_nRed@@3HA ; g_nRed
  002fb	83 ea 01	 sub	 edx, 1
  002fe	89 15 00 00 00
	00		 mov	 DWORD PTR ?g_nRed@@3HA, edx ; g_nRed

; 2185 : 				//SetConfig(_T("HUE_R"), g_nRed);
; 2186 : 				g_pPLC->R(g_nRed);//LJ

  00304	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_nRed@@3HA ; g_nRed
  00309	50		 push	 eax
  0030a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00310	e8 00 00 00 00	 call	 ?R@CPLC@@QAEHH@Z	; CPLC::R

; 2187 : 				char R;
; 2188 : 				R = '0' + abs(g_nRed);

  00315	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_nRed@@3HA ; g_nRed
  0031a	99		 cdq
  0031b	33 c2		 xor	 eax, edx
  0031d	2b c2		 sub	 eax, edx
  0031f	83 c0 30	 add	 eax, 48			; 00000030H
  00322	88 45 fd	 mov	 BYTE PTR _R$11[ebp], al

; 2189 : 
; 2190 : 				if (g_nRed >= 0)

  00325	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_nRed@@3HA, 0 ; g_nRed
  0032c	7c 57		 jl	 SHORT $LN9@ChangeImag

; 2191 : 				{
; 2192 : 					int pos = m_strRB.Find('R');

  0032e	6a 00		 push	 0
  00330	6a 52		 push	 82			; 00000052H
  00332	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00335	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  0033b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHDH@Z
  00341	89 45 e0	 mov	 DWORD PTR _pos$4[ebp], eax

; 2193 : 					m_strRB.SetAt(++pos, '+');

  00344	8b 4d e0	 mov	 ecx, DWORD PTR _pos$4[ebp]
  00347	83 c1 01	 add	 ecx, 1
  0034a	89 4d e0	 mov	 DWORD PTR _pos$4[ebp], ecx
  0034d	6a 2b		 push	 43			; 0000002bH
  0034f	8b 55 e0	 mov	 edx, DWORD PTR _pos$4[ebp]
  00352	52		 push	 edx
  00353	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00356	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  0035c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAt@?$CSimpleStringT@D$00@ATL@@QAEXHD@Z

; 2194 : 					m_strRB.SetAt(++pos, R);

  00362	8b 45 e0	 mov	 eax, DWORD PTR _pos$4[ebp]
  00365	83 c0 01	 add	 eax, 1
  00368	89 45 e0	 mov	 DWORD PTR _pos$4[ebp], eax
  0036b	0f b6 4d fd	 movzx	 ecx, BYTE PTR _R$11[ebp]
  0036f	51		 push	 ecx
  00370	8b 55 e0	 mov	 edx, DWORD PTR _pos$4[ebp]
  00373	52		 push	 edx
  00374	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00377	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  0037d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAt@?$CSimpleStringT@D$00@ATL@@QAEXHD@Z

; 2195 : 				}
; 2196 : 				else

  00383	eb 55		 jmp	 SHORT $LN8@ChangeImag
$LN9@ChangeImag:

; 2197 : 				{
; 2198 : 					int pos = m_strRB.Find('R');

  00385	6a 00		 push	 0
  00387	6a 52		 push	 82			; 00000052H
  00389	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0038c	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  00392	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHDH@Z
  00398	89 45 dc	 mov	 DWORD PTR _pos$3[ebp], eax

; 2199 : 					m_strRB.SetAt(++pos, '-');

  0039b	8b 45 dc	 mov	 eax, DWORD PTR _pos$3[ebp]
  0039e	83 c0 01	 add	 eax, 1
  003a1	89 45 dc	 mov	 DWORD PTR _pos$3[ebp], eax
  003a4	6a 2d		 push	 45			; 0000002dH
  003a6	8b 4d dc	 mov	 ecx, DWORD PTR _pos$3[ebp]
  003a9	51		 push	 ecx
  003aa	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  003ad	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  003b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAt@?$CSimpleStringT@D$00@ATL@@QAEXHD@Z

; 2200 : 					m_strRB.SetAt(++pos, R);

  003b9	8b 55 dc	 mov	 edx, DWORD PTR _pos$3[ebp]
  003bc	83 c2 01	 add	 edx, 1
  003bf	89 55 dc	 mov	 DWORD PTR _pos$3[ebp], edx
  003c2	0f b6 45 fd	 movzx	 eax, BYTE PTR _R$11[ebp]
  003c6	50		 push	 eax
  003c7	8b 4d dc	 mov	 ecx, DWORD PTR _pos$3[ebp]
  003ca	51		 push	 ecx
  003cb	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  003ce	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  003d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAt@?$CSimpleStringT@D$00@ATL@@QAEXHD@Z
$LN8@ChangeImag:

; 2201 : 				}
; 2202 : 				GetDlgItem(IDC_IMGCLR_INFO_STATIC)->SetWindowText(m_strRB);

  003da	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  003dd	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  003e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  003e9	50		 push	 eax
  003ea	68 04 04 00 00	 push	 1028			; 00000404H
  003ef	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  003f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  003f8	8b c8		 mov	 ecx, eax
  003fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 2203 : 
; 2204 : 				if (0 == g_nRed)

  00400	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_nRed@@3HA, 0 ; g_nRed
  00407	75 12		 jne	 SHORT $LN10@ChangeImag

; 2205 : 				{
; 2206 : 					g_pPLC->R(g_nRed);

  00409	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_nRed@@3HA ; g_nRed
  0040f	52		 push	 edx
  00410	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00416	e8 00 00 00 00	 call	 ?R@CPLC@@QAEHH@Z	; CPLC::R
$LN10@ChangeImag:

; 2207 : 				}
; 2208 : 			}
; 2209 : 			g_bOneR = TRUE;

  0041b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?g_bOneR@@3HA, 1 ; g_bOneR
  00425	e9 60 01 00 00	 jmp	 $LN26@ChangeImag
$LN11@ChangeImag:

; 2210 : 		}
; 2211 : 		else if (pbuf[8] == 0x0B) 

  0042a	b8 01 00 00 00	 mov	 eax, 1
  0042f	c1 e0 03	 shl	 eax, 3
  00432	8b 4d 08	 mov	 ecx, DWORD PTR _pbuf$[ebp]
  00435	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  00439	83 fa 0b	 cmp	 edx, 11			; 0000000bH
  0043c	0f 85 48 01 00
	00		 jne	 $LN26@ChangeImag

; 2212 : 		{
; 2213 : 			//+R值
; 2214 : 			if (g_nRed < 9)

  00442	83 3d 00 00 00
	00 09		 cmp	 DWORD PTR ?g_nRed@@3HA, 9 ; g_nRed
  00449	0f 8d 31 01 00
	00		 jge	 $LN4@ChangeImag

; 2215 : 			{
; 2216 : 				g_nRed++;

  0044f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_nRed@@3HA ; g_nRed
  00454	83 c0 01	 add	 eax, 1
  00457	a3 00 00 00 00	 mov	 DWORD PTR ?g_nRed@@3HA, eax ; g_nRed

; 2217 : 				//SetConfig(_T("HUE_R"), g_nRed);
; 2218 : 				g_pPLC->R(g_nRed);//LJ

  0045c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_nRed@@3HA ; g_nRed
  00462	51		 push	 ecx
  00463	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00469	e8 00 00 00 00	 call	 ?R@CPLC@@QAEHH@Z	; CPLC::R

; 2219 : 				char R;
; 2220 : 				R = '0' + abs(g_nRed);

  0046e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_nRed@@3HA ; g_nRed
  00473	99		 cdq
  00474	33 c2		 xor	 eax, edx
  00476	2b c2		 sub	 eax, edx
  00478	83 c0 30	 add	 eax, 48			; 00000030H
  0047b	88 45 fc	 mov	 BYTE PTR _R$10[ebp], al

; 2221 : 
; 2222 : 				if (g_nRed >= 0)

  0047e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_nRed@@3HA, 0 ; g_nRed
  00485	7c 63		 jl	 SHORT $LN3@ChangeImag

; 2223 : 				{
; 2224 : 					char B;
; 2225 : 					B = '0' + g_nRed;

  00487	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_nRed@@3HA ; g_nRed
  0048d	83 c2 30	 add	 edx, 48			; 00000030H
  00490	88 55 fb	 mov	 BYTE PTR _B$9[ebp], dl

; 2226 : 					int pos = m_strRB.Find('R');

  00493	6a 00		 push	 0
  00495	6a 52		 push	 82			; 00000052H
  00497	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0049a	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  004a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHDH@Z
  004a6	89 45 d8	 mov	 DWORD PTR _pos$2[ebp], eax

; 2227 : 					m_strRB.SetAt(++pos, '+');

  004a9	8b 45 d8	 mov	 eax, DWORD PTR _pos$2[ebp]
  004ac	83 c0 01	 add	 eax, 1
  004af	89 45 d8	 mov	 DWORD PTR _pos$2[ebp], eax
  004b2	6a 2b		 push	 43			; 0000002bH
  004b4	8b 4d d8	 mov	 ecx, DWORD PTR _pos$2[ebp]
  004b7	51		 push	 ecx
  004b8	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  004bb	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  004c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAt@?$CSimpleStringT@D$00@ATL@@QAEXHD@Z

; 2228 : 					m_strRB.SetAt(++pos, R);

  004c7	8b 55 d8	 mov	 edx, DWORD PTR _pos$2[ebp]
  004ca	83 c2 01	 add	 edx, 1
  004cd	89 55 d8	 mov	 DWORD PTR _pos$2[ebp], edx
  004d0	0f b6 45 fc	 movzx	 eax, BYTE PTR _R$10[ebp]
  004d4	50		 push	 eax
  004d5	8b 4d d8	 mov	 ecx, DWORD PTR _pos$2[ebp]
  004d8	51		 push	 ecx
  004d9	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  004dc	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  004e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAt@?$CSimpleStringT@D$00@ATL@@QAEXHD@Z

; 2229 : 				}
; 2230 : 				else

  004e8	eb 55		 jmp	 SHORT $LN2@ChangeImag
$LN3@ChangeImag:

; 2231 : 				{
; 2232 : 					int pos = m_strRB.Find('R');

  004ea	6a 00		 push	 0
  004ec	6a 52		 push	 82			; 00000052H
  004ee	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  004f1	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  004f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHDH@Z
  004fd	89 45 d4	 mov	 DWORD PTR _pos$1[ebp], eax

; 2233 : 					m_strRB.SetAt(++pos, '-');

  00500	8b 55 d4	 mov	 edx, DWORD PTR _pos$1[ebp]
  00503	83 c2 01	 add	 edx, 1
  00506	89 55 d4	 mov	 DWORD PTR _pos$1[ebp], edx
  00509	6a 2d		 push	 45			; 0000002dH
  0050b	8b 45 d4	 mov	 eax, DWORD PTR _pos$1[ebp]
  0050e	50		 push	 eax
  0050f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00512	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  00518	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAt@?$CSimpleStringT@D$00@ATL@@QAEXHD@Z

; 2234 : 					m_strRB.SetAt(++pos, R);

  0051e	8b 4d d4	 mov	 ecx, DWORD PTR _pos$1[ebp]
  00521	83 c1 01	 add	 ecx, 1
  00524	89 4d d4	 mov	 DWORD PTR _pos$1[ebp], ecx
  00527	0f b6 55 fc	 movzx	 edx, BYTE PTR _R$10[ebp]
  0052b	52		 push	 edx
  0052c	8b 45 d4	 mov	 eax, DWORD PTR _pos$1[ebp]
  0052f	50		 push	 eax
  00530	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00533	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  00539	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetAt@?$CSimpleStringT@D$00@ATL@@QAEXHD@Z
$LN2@ChangeImag:

; 2235 : 				}
; 2236 : 				GetDlgItem(IDC_IMGCLR_INFO_STATIC)->SetWindowText(m_strRB);

  0053f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00542	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  00548	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0054e	50		 push	 eax
  0054f	68 04 04 00 00	 push	 1028			; 00000404H
  00554	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00557	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0055d	8b c8		 mov	 ecx, eax
  0055f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 2237 : 
; 2238 : 				if (0 == g_nRed)

  00565	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_nRed@@3HA, 0 ; g_nRed
  0056c	75 12		 jne	 SHORT $LN4@ChangeImag

; 2239 : 				{
; 2240 : 					g_pPLC->R(g_nRed);

  0056e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_nRed@@3HA ; g_nRed
  00574	51		 push	 ecx
  00575	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0057b	e8 00 00 00 00	 call	 ?R@CPLC@@QAEHH@Z	; CPLC::R
$LN4@ChangeImag:

; 2241 : 				}
; 2242 : 			}
; 2243 : 			g_bOneR = TRUE;

  00580	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?g_bOneR@@3HA, 1 ; g_bOneR
$LN26@ChangeImag:

; 2244 : 		}
; 2245 : 	}
; 2246 : }

  0058a	8b e5		 mov	 esp, ebp
  0058c	5d		 pop	 ebp
  0058d	c2 08 00	 ret	 8
?ChangeImageRB@CEndoScopeMFCDlg@@QAEXPAEH@Z ENDP	; CEndoScopeMFCDlg::ChangeImageRB
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?SaveVideo@CEndoScopeMFCDlg@@QAEXXZ
_TEXT	SEGMENT
$T2 = -68						; size = 4
$T3 = -64						; size = 8
_codec$4 = -56						; size = 4
tv173 = -52						; size = 4
_isok$5 = -45						; size = 1
_this$ = -44						; size = 4
_t_imgpath$6 = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?SaveVideo@CEndoScopeMFCDlg@@QAEXXZ PROC		; CEndoScopeMFCDlg::SaveVideo, COMDAT
; _this$ = ecx

; 2249 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SaveVideo@CEndoScopeMFCDlg@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx

; 2250 : //	static BOOL bStart=FALSE;
; 2251 : 
; 2252 : 	if (!bSaveVideoStart)//启动线程

  0002b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bSaveVideoStart, 0
  00032	0f 85 0d 01 00
	00		 jne	 $LN3@SaveVideo

; 2253 : 	{
; 2254 : 		g_bVideo = TRUE;

  00038	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?g_bVideo@@3HA, 1 ; g_bVideo

; 2255 : 		//m_dwcap.StartWriteVideo();
; 2256 : 		//InitQueue();
; 2257 : 		m_bstartsave = true;

  00042	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  00045	c6 80 ad 01 00
	00 01		 mov	 BYTE PTR [eax+429], 1

; 2258 : 		int codec = VideoWriter::fourcc('M', 'J', 'P', 'G');

  0004c	6a 47		 push	 71			; 00000047H
  0004e	6a 50		 push	 80			; 00000050H
  00050	6a 4a		 push	 74			; 0000004aH
  00052	6a 4d		 push	 77			; 0000004dH
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fourcc@VideoWriter@cv@@SAHDDDD@Z
  0005a	83 c4 10	 add	 esp, 16			; 00000010H
  0005d	89 45 c8	 mov	 DWORD PTR _codec$4[ebp], eax

; 2259 : 		string t_imgpath = GetSaveImgPath(0);

  00060	6a 00		 push	 0
  00062	8d 4d d8	 lea	 ecx, DWORD PTR _t_imgpath$6[ebp]
  00065	51		 push	 ecx
  00066	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?GetSaveImgPath@CEndoScopeMFCDlg@@QAE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H@Z ; CEndoScopeMFCDlg::GetSaveImgPath
  0006e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2260 : 		bool isok = m_vwriter.open(t_imgpath, codec,30, Size(IMGWIDTH, IMGHEIGHT));

  00075	8d 55 d8	 lea	 edx, DWORD PTR _t_imgpath$6[ebp]
  00078	52		 push	 edx
  00079	8d 4d c0	 lea	 ecx, DWORD PTR $T3[ebp]
  0007c	e8 00 00 00 00	 call	 ??0String@cv@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; cv::String::String
  00081	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00085	6a 01		 push	 1
  00087	83 ec 08	 sub	 esp, 8
  0008a	8b cc		 mov	 ecx, esp
  0008c	89 65 bc	 mov	 DWORD PTR $T2[ebp], esp
  0008f	68 d0 02 00 00	 push	 720			; 000002d0H
  00094	68 00 05 00 00	 push	 1280			; 00000500H
  00099	e8 00 00 00 00	 call	 ??0?$Size_@H@cv@@QAE@HH@Z ; cv::Size_<int>::Size_<int>
  0009e	83 ec 08	 sub	 esp, 8
  000a1	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@403e000000000000
  000a9	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000ae	8b 45 c8	 mov	 eax, DWORD PTR _codec$4[ebp]
  000b1	50		 push	 eax
  000b2	8d 4d c0	 lea	 ecx, DWORD PTR $T3[ebp]
  000b5	51		 push	 ecx
  000b6	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  000b9	81 c1 e8 01 00
	00		 add	 ecx, 488		; 000001e8H
  000bf	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  000c2	8b 82 e8 01 00
	00		 mov	 eax, DWORD PTR [edx+488]
  000c8	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000cb	ff d2		 call	 edx
  000cd	88 45 d3	 mov	 BYTE PTR _isok$5[ebp], al
  000d0	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000d4	8d 4d c0	 lea	 ecx, DWORD PTR $T3[ebp]
  000d7	e8 00 00 00 00	 call	 ??1String@cv@@QAE@XZ	; cv::String::~String

; 2261 : 		if (isok)

  000dc	0f b6 45 d3	 movzx	 eax, BYTE PTR _isok$5[ebp]
  000e0	85 c0		 test	 eax, eax
  000e2	74 20		 je	 SHORT $LN2@SaveVideo

; 2262 : 		{
; 2263 : 			pThreadVideo = AfxBeginThread(ScreenCAPThreadProc, this);

  000e4	6a 00		 push	 0
  000e6	6a 00		 push	 0
  000e8	6a 00		 push	 0
  000ea	6a 00		 push	 0
  000ec	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  000ef	51		 push	 ecx
  000f0	68 00 00 00 00	 push	 OFFSET ?ScreenCAPThreadProc@CEndoScopeMFCDlg@@CAIPAX@Z ; CEndoScopeMFCDlg::ScreenCAPThreadProc
  000f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AfxBeginThread@@YGPAVCWinThread@@P6AIPAX@Z0HIKPAU_SECURITY_ATTRIBUTES@@@Z
  000fb	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  000fe	89 82 bc 01 00
	00		 mov	 DWORD PTR [edx+444], eax
$LN2@SaveVideo:

; 2264 : 		}
; 2265 : 		m_bwritevideo = true;

  00104	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  00107	c6 80 ac 01 00
	00 01		 mov	 BYTE PTR [eax+428], 1

; 2266 : 		g_pPLC->NowVideo();

  0010e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00114	e8 00 00 00 00	 call	 ?NowVideo@CPLC@@QAEHXZ	; CPLC::NowVideo

; 2267 : 		GetDlgItem(IDC_RECORD_INFO_STATIC)->SetWindowText(_T("正在录制"));

  00119	68 00 00 00 00	 push	 OFFSET $SG4294957184
  0011e	68 0b 04 00 00	 push	 1035			; 0000040bH
  00123	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00126	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0012c	8b c8		 mov	 ecx, eax
  0012e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 2268 : 	}

  00134	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0013b	8d 4d d8	 lea	 ecx, DWORD PTR _t_imgpath$6[ebp]
  0013e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 2269 : 	else

  00143	eb 49		 jmp	 SHORT $LN1@SaveVideo
$LN3@SaveVideo:

; 2270 : 	{
; 2271 : 		m_bwritevideo = false;		

  00145	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00148	c6 81 ac 01 00
	00 00		 mov	 BYTE PTR [ecx+428], 0

; 2272 : 		//m_dwcap.StopWriteVideo();
; 2273 : 		g_pPLC->StopVideo();

  0014f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00155	e8 00 00 00 00	 call	 ?StopVideo@CPLC@@QAEHXZ	; CPLC::StopVideo

; 2274 : 		g_bVideo = FALSE;

  0015a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_bVideo@@3HA, 0 ; g_bVideo

; 2275 : 		m_bstartsave = false;

  00164	8b 55 d4	 mov	 edx, DWORD PTR _this$[ebp]
  00167	c6 82 ad 01 00
	00 00		 mov	 BYTE PTR [edx+429], 0

; 2276 : 		resetQueue();

  0016e	e8 00 00 00 00	 call	 ?resetQueue@@YAXXZ	; resetQueue

; 2277 : 		GetDlgItem(IDC_RECORD_INFO_STATIC)->SetWindowText(_T("录制完成"));

  00173	68 00 00 00 00	 push	 OFFSET $SG4294957183
  00178	68 0b 04 00 00	 push	 1035			; 0000040bH
  0017d	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00180	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00186	8b c8		 mov	 ecx, eax
  00188	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z
$LN1@SaveVideo:

; 2278 : 	}
; 2279 : 	this->SetFocus();//这个很重要，要将当前 窗口激活状态

  0018e	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00191	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetFocus@CWnd@@QAEPAV1@XZ

; 2280 : 	bSaveVideoStart = !bSaveVideoStart;

  00197	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _bSaveVideoStart, 0
  0019e	75 09		 jne	 SHORT $LN6@SaveVideo
  001a0	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR tv173[ebp], 1
  001a7	eb 07		 jmp	 SHORT $LN7@SaveVideo
$LN6@SaveVideo:
  001a9	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR tv173[ebp], 0
$LN7@SaveVideo:
  001b0	8b 45 cc	 mov	 eax, DWORD PTR tv173[ebp]
  001b3	a3 00 00 00 00	 mov	 DWORD PTR _bSaveVideoStart, eax

; 2281 : }

  001b8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001bb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001c2	59		 pop	 ecx
  001c3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001c6	33 cd		 xor	 ecx, ebp
  001c8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001cd	8b e5		 mov	 esp, ebp
  001cf	5d		 pop	 ebp
  001d0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SaveVideo@CEndoScopeMFCDlg@@QAEXXZ$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _t_imgpath$6[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SaveVideo@CEndoScopeMFCDlg@@QAEXXZ$1:
  00008	8d 4d c0	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1String@cv@@QAE@XZ	; cv::String::~String
__ehhandler$?SaveVideo@CEndoScopeMFCDlg@@QAEXXZ:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SaveVideo@CEndoScopeMFCDlg@@QAEXXZ
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SaveVideo@CEndoScopeMFCDlg@@QAEXXZ ENDP		; CEndoScopeMFCDlg::SaveVideo
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?MoveDatatoUSBDevice@CEndoScopeMFCDlg@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MoveDatatoUSBDevice@CEndoScopeMFCDlg@@QAEXXZ PROC	; CEndoScopeMFCDlg::MoveDatatoUSBDevice, COMDAT
; _this$ = ecx

; 2283 : {   

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2284 : 	if(!g_bStop)

  00007	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_bStop@@3HA, 0 ; g_bStop
  0000e	75 0c		 jne	 SHORT $LN2@MoveDatato

; 2285 : 	{
; 2286 : 		g_bStop = TRUE;

  00010	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?g_bStop@@3HA, 1 ; g_bStop

; 2287 : 	}
; 2288 : 	else

  0001a	eb 02		 jmp	 SHORT $LN1@MoveDatato
$LN2@MoveDatato:

; 2289 : 	{
; 2290 : 		return;

  0001c	eb 12		 jmp	 SHORT $LN3@MoveDatato
$LN1@MoveDatato:

; 2291 : 	}
; 2292 : 	SaveToPeripherals();

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?SaveToPeripherals@CEndoScopeMFCDlg@@AAEXXZ ; CEndoScopeMFCDlg::SaveToPeripherals

; 2293 : 	g_bStop = FALSE;

  00026	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_bStop@@3HA, 0 ; g_bStop
$LN3@MoveDatato:

; 2294 : }

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?MoveDatatoUSBDevice@CEndoScopeMFCDlg@@QAEXXZ ENDP	; CEndoScopeMFCDlg::MoveDatatoUSBDevice
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?EnterPatientInfo@CEndoScopeMFCDlg@@QAEXXZ
_TEXT	SEGMENT
tv208 = -8						; size = 4
_this$ = -4						; size = 4
?EnterPatientInfo@CEndoScopeMFCDlg@@QAEXXZ PROC		; CEndoScopeMFCDlg::EnterPatientInfo, COMDAT
; _this$ = ecx

; 2297 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2298 : 	if (m_bInputInfo)

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	0f b6 88 b3 01
	00 00		 movzx	 ecx, BYTE PTR [eax+435]
  00013	85 c9		 test	 ecx, ecx
  00015	0f 84 9e 00 00
	00		 je	 $LN2@EnterPatie

; 2299 : 	{
; 2300 : 		//cout << "input" << endl;
; 2301 : 		GetDlgItem(IDC_NAME_EDIT)->EnableWindow(TRUE);

  0001b	6a 01		 push	 1
  0001d	68 ed 03 00 00	 push	 1005			; 000003edH
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0002b	8b c8		 mov	 ecx, eax
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?EnableWindow@CWnd@@QAEHH@Z

; 2302 : 		GetDlgItem(IDC_ID_EDIT)->EnableWindow(TRUE);

  00033	6a 01		 push	 1
  00035	68 ec 03 00 00	 push	 1004			; 000003ecH
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00043	8b c8		 mov	 ecx, eax
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?EnableWindow@CWnd@@QAEHH@Z

; 2303 : 		GetDlgItem(IDC_SEX_EDIT)->EnableWindow(TRUE);

  0004b	6a 01		 push	 1
  0004d	68 ee 03 00 00	 push	 1006			; 000003eeH
  00052	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0005b	8b c8		 mov	 ecx, eax
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?EnableWindow@CWnd@@QAEHH@Z

; 2304 : 		GetDlgItem(IDC_AGE_EDIT)->EnableWindow(TRUE);

  00063	6a 01		 push	 1
  00065	68 ef 03 00 00	 push	 1007			; 000003efH
  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00073	8b c8		 mov	 ecx, eax
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?EnableWindow@CWnd@@QAEHH@Z

; 2305 : 		GetDlgItem(IDC_DOCTOR_EDIT)->EnableWindow(TRUE);

  0007b	6a 01		 push	 1
  0007d	68 f0 03 00 00	 push	 1008			; 000003f0H
  00082	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  0008b	8b c8		 mov	 ecx, eax
  0008d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?EnableWindow@CWnd@@QAEHH@Z

; 2306 : 		GetDlgItem(IDC_ID_EDIT)->SetFocus();

  00093	68 ec 03 00 00	 push	 1004			; 000003ecH
  00098	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  000a1	8b c8		 mov	 ecx, eax
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetFocus@CWnd@@QAEPAV1@XZ

; 2307 : 		g_pPLC->NowEnter();

  000a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  000af	e8 00 00 00 00	 call	 ?NowEnter@CPLC@@QAEHXZ	; CPLC::NowEnter

; 2308 : 	}
; 2309 : 	else

  000b4	e9 8c 00 00 00	 jmp	 $LN1@EnterPatie
$LN2@EnterPatie:

; 2310 : 	{
; 2311 : 		//cout << "cant input" << endl;
; 2312 : 		GetDlgItem(IDC_NAME_EDIT)->EnableWindow(FALSE);

  000b9	6a 00		 push	 0
  000bb	68 ed 03 00 00	 push	 1005			; 000003edH
  000c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  000c9	8b c8		 mov	 ecx, eax
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?EnableWindow@CWnd@@QAEHH@Z

; 2313 : 		GetDlgItem(IDC_ID_EDIT)->EnableWindow(FALSE);

  000d1	6a 00		 push	 0
  000d3	68 ec 03 00 00	 push	 1004			; 000003ecH
  000d8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  000e1	8b c8		 mov	 ecx, eax
  000e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?EnableWindow@CWnd@@QAEHH@Z

; 2314 : 		GetDlgItem(IDC_SEX_EDIT)->EnableWindow(FALSE);

  000e9	6a 00		 push	 0
  000eb	68 ee 03 00 00	 push	 1006			; 000003eeH
  000f0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  000f9	8b c8		 mov	 ecx, eax
  000fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?EnableWindow@CWnd@@QAEHH@Z

; 2315 : 		GetDlgItem(IDC_AGE_EDIT)->EnableWindow(FALSE);

  00101	6a 00		 push	 0
  00103	68 ef 03 00 00	 push	 1007			; 000003efH
  00108	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0010b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00111	8b c8		 mov	 ecx, eax
  00113	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?EnableWindow@CWnd@@QAEHH@Z

; 2316 : 		GetDlgItem(IDC_DOCTOR_EDIT)->EnableWindow(FALSE);

  00119	6a 00		 push	 0
  0011b	68 f0 03 00 00	 push	 1008			; 000003f0H
  00120	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00123	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  00129	8b c8		 mov	 ecx, eax
  0012b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?EnableWindow@CWnd@@QAEHH@Z

; 2317 : 		g_pPLC->OverEnter();

  00131	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00137	e8 00 00 00 00	 call	 ?OverEnter@CPLC@@QAEHXZ	; CPLC::OverEnter

; 2318 : 		//m_bInputInfo = true;
; 2319 : 		//GetDlgItem(IDC_STILL)->SetFocus();//这个很重要，要将当前 窗口激活状态
; 2320 : 		this->SetFocus();

  0013c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0013f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetFocus@CWnd@@QAEPAV1@XZ
$LN1@EnterPatie:

; 2321 : 		
; 2322 : 	}
; 2323 : 	m_bInputInfo=!m_bInputInfo;

  00145	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00148	0f b6 82 b3 01
	00 00		 movzx	 eax, BYTE PTR [edx+435]
  0014f	85 c0		 test	 eax, eax
  00151	75 09		 jne	 SHORT $LN5@EnterPatie
  00153	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv208[ebp], 1
  0015a	eb 07		 jmp	 SHORT $LN6@EnterPatie
$LN5@EnterPatie:
  0015c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv208[ebp], 0
$LN6@EnterPatie:
  00163	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00166	8a 55 f8	 mov	 dl, BYTE PTR tv208[ebp]
  00169	88 91 b3 01 00
	00		 mov	 BYTE PTR [ecx+435], dl

; 2324 : 
; 2325 : }

  0016f	8b e5		 mov	 esp, ebp
  00171	5d		 pop	 ebp
  00172	c3		 ret	 0
?EnterPatientInfo@CEndoScopeMFCDlg@@QAEXXZ ENDP		; CEndoScopeMFCDlg::EnterPatientInfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?BrightnessAdd@CEndoScopeMFCDlg@@AAEXXZ
_TEXT	SEGMENT
tv139 = -20						; size = 4
$T1 = -16						; size = 4
_this$ = -12						; size = 4
_nBrightness$ = -8					; size = 4
tv81 = -4						; size = 4
?BrightnessAdd@CEndoScopeMFCDlg@@AAEXXZ PROC		; CEndoScopeMFCDlg::BrightnessAdd, COMDAT
; _this$ = ecx

; 2328 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 2329 : 	int nBrightness= ++g_nBrightness;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_nBrightness@@3HA ; g_nBrightness
  0000e	83 c0 01	 add	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR ?g_nBrightness@@3HA, eax ; g_nBrightness
  00016	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_nBrightness@@3HA ; g_nBrightness
  0001c	89 4d f8	 mov	 DWORD PTR _nBrightness$[ebp], ecx

; 2330 : 	
; 2331 : 	SetConfig(_T("BRIGHTNESS"), nBrightness);

  0001f	f2 0f 2a 45 f8	 cvtsi2sd xmm0, DWORD PTR _nBrightness$[ebp]
  00024	83 ec 08	 sub	 esp, 8
  00027	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0002c	51		 push	 ecx
  0002d	8b cc		 mov	 ecx, esp
  0002f	89 65 f0	 mov	 DWORD PTR $T1[ebp], esp
  00032	68 00 00 00 00	 push	 OFFSET $SG4294957182
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  0003d	89 45 ec	 mov	 DWORD PTR tv139[ebp], eax
  00040	e8 00 00 00 00	 call	 ?SetConfig@@YAXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@N@Z ; SetConfig
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2332 : 	//}
; 2333 : 	switch (nBrightness)

  00048	8b 55 f8	 mov	 edx, DWORD PTR _nBrightness$[ebp]
  0004b	89 55 fc	 mov	 DWORD PTR tv81[ebp], edx
  0004e	8b 45 fc	 mov	 eax, DWORD PTR tv81[ebp]
  00051	83 c0 0a	 add	 eax, 10			; 0000000aH
  00054	89 45 fc	 mov	 DWORD PTR tv81[ebp], eax
  00057	83 7d fc 14	 cmp	 DWORD PTR tv81[ebp], 20	; 00000014H
  0005b	0f 87 3a 01 00
	00		 ja	 $LN1@Brightness
  00061	8b 4d fc	 mov	 ecx, DWORD PTR tv81[ebp]
  00064	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN28@Brightness[ecx*4]
$LN22@Brightness:

; 2334 : 	{
; 2335 : 	case -10:
; 2336 : 		g_pPLC->Brightness20();

  0006b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00071	e8 00 00 00 00	 call	 ?Brightness20@CPLC@@QAEHXZ ; CPLC::Brightness20

; 2337 : 		//g_nExposure = -10;
; 2338 : 		break;

  00076	e9 20 01 00 00	 jmp	 $LN23@Brightness
$LN21@Brightness:

; 2339 : 	case -9:
; 2340 : 		g_pPLC->Brightness19();

  0007b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00081	e8 00 00 00 00	 call	 ?Brightness19@CPLC@@QAEHXZ ; CPLC::Brightness19

; 2341 : 		//g_nExposure = -10;
; 2342 : 		break;

  00086	e9 10 01 00 00	 jmp	 $LN23@Brightness
$LN20@Brightness:

; 2343 : 	case -8:
; 2344 : 		g_pPLC->Brightness18();

  0008b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00091	e8 00 00 00 00	 call	 ?Brightness18@CPLC@@QAEHXZ ; CPLC::Brightness18

; 2345 : 		//g_nExposure = -9;
; 2346 : 		break;

  00096	e9 00 01 00 00	 jmp	 $LN23@Brightness
$LN19@Brightness:

; 2347 : 	case -7:
; 2348 : 		g_pPLC->Brightness17();

  0009b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  000a1	e8 00 00 00 00	 call	 ?Brightness17@CPLC@@QAEHXZ ; CPLC::Brightness17

; 2349 : 		//g_nExposure = -9;
; 2350 : 		break;

  000a6	e9 f0 00 00 00	 jmp	 $LN23@Brightness
$LN18@Brightness:

; 2351 : 	case -6:
; 2352 : 		g_pPLC->Brightness16();

  000ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  000b1	e8 00 00 00 00	 call	 ?Brightness16@CPLC@@QAEHXZ ; CPLC::Brightness16

; 2353 : 		//g_nExposure = -8;
; 2354 : 		break;

  000b6	e9 e0 00 00 00	 jmp	 $LN23@Brightness
$LN17@Brightness:

; 2355 : 	case -5:
; 2356 : 		g_pPLC->Brightness15();

  000bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  000c1	e8 00 00 00 00	 call	 ?Brightness15@CPLC@@QAEHXZ ; CPLC::Brightness15

; 2357 : 		//g_nExposure = -8;
; 2358 : 		break;

  000c6	e9 d0 00 00 00	 jmp	 $LN23@Brightness
$LN16@Brightness:

; 2359 : 	case -4:
; 2360 : 		g_pPLC->Brightness14();

  000cb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  000d1	e8 00 00 00 00	 call	 ?Brightness14@CPLC@@QAEHXZ ; CPLC::Brightness14

; 2361 : 		//g_nExposure = -7;
; 2362 : 		break;

  000d6	e9 c0 00 00 00	 jmp	 $LN23@Brightness
$LN15@Brightness:

; 2363 : 	case -3:
; 2364 : 		g_pPLC->Brightness13();

  000db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  000e1	e8 00 00 00 00	 call	 ?Brightness13@CPLC@@QAEHXZ ; CPLC::Brightness13

; 2365 : 		//g_nExposure = -7;
; 2366 : 		break;

  000e6	e9 b0 00 00 00	 jmp	 $LN23@Brightness
$LN14@Brightness:

; 2367 : 	case -2:
; 2368 : 		g_pPLC->Brightness12();

  000eb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  000f1	e8 00 00 00 00	 call	 ?Brightness12@CPLC@@QAEHXZ ; CPLC::Brightness12

; 2369 : 		//g_nExposure = -6;
; 2370 : 		break;

  000f6	e9 a0 00 00 00	 jmp	 $LN23@Brightness
$LN13@Brightness:

; 2371 : 	case -1:
; 2372 : 		g_pPLC->Brightness11();

  000fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00101	e8 00 00 00 00	 call	 ?Brightness11@CPLC@@QAEHXZ ; CPLC::Brightness11

; 2373 : 		//g_nExposure = -6;
; 2374 : 		break;

  00106	e9 90 00 00 00	 jmp	 $LN23@Brightness
$LN12@Brightness:

; 2375 : 	case 0:
; 2376 : 		g_pPLC->Brightness0();

  0010b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00111	e8 00 00 00 00	 call	 ?Brightness0@CPLC@@QAEHXZ ; CPLC::Brightness0

; 2377 : 		//g_nExposure = -5;
; 2378 : 		break;

  00116	e9 80 00 00 00	 jmp	 $LN23@Brightness
$LN11@Brightness:

; 2379 : 	case 1:
; 2380 : 		g_pPLC->Brightness1();

  0011b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00121	e8 00 00 00 00	 call	 ?Brightness1@CPLC@@QAEHXZ ; CPLC::Brightness1

; 2381 : 		//g_nExposure = -5;
; 2382 : 		break;

  00126	eb 73		 jmp	 SHORT $LN23@Brightness
$LN10@Brightness:

; 2383 : 	case 2:
; 2384 : 		g_pPLC->Brightness2();

  00128	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0012e	e8 00 00 00 00	 call	 ?Brightness2@CPLC@@QAEHXZ ; CPLC::Brightness2

; 2385 : 		//g_nExposure = -4;
; 2386 : 		break;

  00133	eb 66		 jmp	 SHORT $LN23@Brightness
$LN9@Brightness:

; 2387 : 	case 3:
; 2388 : 		g_pPLC->Brightness3();

  00135	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0013b	e8 00 00 00 00	 call	 ?Brightness3@CPLC@@QAEHXZ ; CPLC::Brightness3

; 2389 : 		//g_nExposure = -4;
; 2390 : 		break;

  00140	eb 59		 jmp	 SHORT $LN23@Brightness
$LN8@Brightness:

; 2391 : 	case 4:
; 2392 : 		g_pPLC->Brightness4();

  00142	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00148	e8 00 00 00 00	 call	 ?Brightness4@CPLC@@QAEHXZ ; CPLC::Brightness4

; 2393 : 		//g_nExposure = -3;
; 2394 : 		break;

  0014d	eb 4c		 jmp	 SHORT $LN23@Brightness
$LN7@Brightness:

; 2395 : 	case 5:
; 2396 : 		g_pPLC->Brightness5();

  0014f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00155	e8 00 00 00 00	 call	 ?Brightness5@CPLC@@QAEHXZ ; CPLC::Brightness5

; 2397 : 		//g_nExposure = -3;
; 2398 : 		break;

  0015a	eb 3f		 jmp	 SHORT $LN23@Brightness
$LN6@Brightness:

; 2399 : 	case 6:
; 2400 : 		g_pPLC->Brightness6();

  0015c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00162	e8 00 00 00 00	 call	 ?Brightness6@CPLC@@QAEHXZ ; CPLC::Brightness6

; 2401 : 		//g_nExposure = -2;
; 2402 : 		break;

  00167	eb 32		 jmp	 SHORT $LN23@Brightness
$LN5@Brightness:

; 2403 : 	case 7:
; 2404 : 		g_pPLC->Brightness7();

  00169	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0016f	e8 00 00 00 00	 call	 ?Brightness7@CPLC@@QAEHXZ ; CPLC::Brightness7

; 2405 : 		//g_nExposure = -2;
; 2406 : 		break;

  00174	eb 25		 jmp	 SHORT $LN23@Brightness
$LN4@Brightness:

; 2407 : 	case 8:
; 2408 : 		g_pPLC->Brightness8();

  00176	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0017c	e8 00 00 00 00	 call	 ?Brightness8@CPLC@@QAEHXZ ; CPLC::Brightness8

; 2409 : 		//g_nExposure = -1;
; 2410 : 		break;

  00181	eb 18		 jmp	 SHORT $LN23@Brightness
$LN3@Brightness:

; 2411 : 	case 9:
; 2412 : 		g_pPLC->Brightness9();

  00183	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00189	e8 00 00 00 00	 call	 ?Brightness9@CPLC@@QAEHXZ ; CPLC::Brightness9

; 2413 : 		//g_nExposure = -1;
; 2414 : 		break;

  0018e	eb 0b		 jmp	 SHORT $LN23@Brightness
$LN2@Brightness:

; 2415 : 	case 10:
; 2416 : 		g_pPLC->Brightness10();

  00190	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00196	e8 00 00 00 00	 call	 ?Brightness10@CPLC@@QAEHXZ ; CPLC::Brightness10
$LN1@Brightness:
$LN23@Brightness:

; 2417 : 		//g_nExposure = 0;
; 2418 : 		break;
; 2419 : 	default:
; 2420 : 		break;
; 2421 : 	}
; 2422 : }

  0019b	8b e5		 mov	 esp, ebp
  0019d	5d		 pop	 ebp
  0019e	c3		 ret	 0
  0019f	90		 npad	 1
$LN28@Brightness:
  001a0	00 00 00 00	 DD	 $LN22@Brightness
  001a4	00 00 00 00	 DD	 $LN21@Brightness
  001a8	00 00 00 00	 DD	 $LN20@Brightness
  001ac	00 00 00 00	 DD	 $LN19@Brightness
  001b0	00 00 00 00	 DD	 $LN18@Brightness
  001b4	00 00 00 00	 DD	 $LN17@Brightness
  001b8	00 00 00 00	 DD	 $LN16@Brightness
  001bc	00 00 00 00	 DD	 $LN15@Brightness
  001c0	00 00 00 00	 DD	 $LN14@Brightness
  001c4	00 00 00 00	 DD	 $LN13@Brightness
  001c8	00 00 00 00	 DD	 $LN12@Brightness
  001cc	00 00 00 00	 DD	 $LN11@Brightness
  001d0	00 00 00 00	 DD	 $LN10@Brightness
  001d4	00 00 00 00	 DD	 $LN9@Brightness
  001d8	00 00 00 00	 DD	 $LN8@Brightness
  001dc	00 00 00 00	 DD	 $LN7@Brightness
  001e0	00 00 00 00	 DD	 $LN6@Brightness
  001e4	00 00 00 00	 DD	 $LN5@Brightness
  001e8	00 00 00 00	 DD	 $LN4@Brightness
  001ec	00 00 00 00	 DD	 $LN3@Brightness
  001f0	00 00 00 00	 DD	 $LN2@Brightness
?BrightnessAdd@CEndoScopeMFCDlg@@AAEXXZ ENDP		; CEndoScopeMFCDlg::BrightnessAdd
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?BrightnessSub@CEndoScopeMFCDlg@@AAEXXZ
_TEXT	SEGMENT
tv139 = -20						; size = 4
$T1 = -16						; size = 4
_this$ = -12						; size = 4
_nBrightness$ = -8					; size = 4
tv81 = -4						; size = 4
?BrightnessSub@CEndoScopeMFCDlg@@AAEXXZ PROC		; CEndoScopeMFCDlg::BrightnessSub, COMDAT
; _this$ = ecx

; 2425 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 2426 : 	int nBrightness= --g_nBrightness;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_nBrightness@@3HA ; g_nBrightness
  0000e	83 e8 01	 sub	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR ?g_nBrightness@@3HA, eax ; g_nBrightness
  00016	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_nBrightness@@3HA ; g_nBrightness
  0001c	89 4d f8	 mov	 DWORD PTR _nBrightness$[ebp], ecx

; 2427 : 	
; 2428 : 	SetConfig(_T("BRIGHTNESS"), nBrightness);

  0001f	f2 0f 2a 45 f8	 cvtsi2sd xmm0, DWORD PTR _nBrightness$[ebp]
  00024	83 ec 08	 sub	 esp, 8
  00027	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0002c	51		 push	 ecx
  0002d	8b cc		 mov	 ecx, esp
  0002f	89 65 f0	 mov	 DWORD PTR $T1[ebp], esp
  00032	68 00 00 00 00	 push	 OFFSET $SG4294957181
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  0003d	89 45 ec	 mov	 DWORD PTR tv139[ebp], eax
  00040	e8 00 00 00 00	 call	 ?SetConfig@@YAXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@N@Z ; SetConfig
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2429 : 	switch (nBrightness)

  00048	8b 55 f8	 mov	 edx, DWORD PTR _nBrightness$[ebp]
  0004b	89 55 fc	 mov	 DWORD PTR tv81[ebp], edx
  0004e	8b 45 fc	 mov	 eax, DWORD PTR tv81[ebp]
  00051	83 c0 0a	 add	 eax, 10			; 0000000aH
  00054	89 45 fc	 mov	 DWORD PTR tv81[ebp], eax
  00057	83 7d fc 14	 cmp	 DWORD PTR tv81[ebp], 20	; 00000014H
  0005b	0f 87 3a 01 00
	00		 ja	 $LN1@Brightness
  00061	8b 4d fc	 mov	 ecx, DWORD PTR tv81[ebp]
  00064	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN28@Brightness[ecx*4]
$LN22@Brightness:

; 2430 : 	{
; 2431 : 	case -10:
; 2432 : 		g_pPLC->Brightness20();

  0006b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00071	e8 00 00 00 00	 call	 ?Brightness20@CPLC@@QAEHXZ ; CPLC::Brightness20

; 2433 : 		//g_nExposure = -10;
; 2434 : 		break;

  00076	e9 20 01 00 00	 jmp	 $LN23@Brightness
$LN21@Brightness:

; 2435 : 	case -9:
; 2436 : 		g_pPLC->Brightness19();

  0007b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00081	e8 00 00 00 00	 call	 ?Brightness19@CPLC@@QAEHXZ ; CPLC::Brightness19

; 2437 : 		//g_nExposure = -10;
; 2438 : 		break;

  00086	e9 10 01 00 00	 jmp	 $LN23@Brightness
$LN20@Brightness:

; 2439 : 	case -8:
; 2440 : 		g_pPLC->Brightness18();

  0008b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00091	e8 00 00 00 00	 call	 ?Brightness18@CPLC@@QAEHXZ ; CPLC::Brightness18

; 2441 : 		//g_nExposure = -9;
; 2442 : 		break;

  00096	e9 00 01 00 00	 jmp	 $LN23@Brightness
$LN19@Brightness:

; 2443 : 	case -7:
; 2444 : 		g_pPLC->Brightness17();

  0009b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  000a1	e8 00 00 00 00	 call	 ?Brightness17@CPLC@@QAEHXZ ; CPLC::Brightness17

; 2445 : 		//g_nExposure = -9;
; 2446 : 		break;

  000a6	e9 f0 00 00 00	 jmp	 $LN23@Brightness
$LN18@Brightness:

; 2447 : 	case -6:
; 2448 : 		g_pPLC->Brightness16();

  000ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  000b1	e8 00 00 00 00	 call	 ?Brightness16@CPLC@@QAEHXZ ; CPLC::Brightness16

; 2449 : 		//g_nExposure = -8;
; 2450 : 		break;

  000b6	e9 e0 00 00 00	 jmp	 $LN23@Brightness
$LN17@Brightness:

; 2451 : 	case -5:
; 2452 : 		g_pPLC->Brightness15();

  000bb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  000c1	e8 00 00 00 00	 call	 ?Brightness15@CPLC@@QAEHXZ ; CPLC::Brightness15

; 2453 : 		//g_nExposure = -8;
; 2454 : 		break;

  000c6	e9 d0 00 00 00	 jmp	 $LN23@Brightness
$LN16@Brightness:

; 2455 : 	case -4:
; 2456 : 		g_pPLC->Brightness14();

  000cb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  000d1	e8 00 00 00 00	 call	 ?Brightness14@CPLC@@QAEHXZ ; CPLC::Brightness14

; 2457 : 		//g_nExposure = -7;
; 2458 : 		break;

  000d6	e9 c0 00 00 00	 jmp	 $LN23@Brightness
$LN15@Brightness:

; 2459 : 	case -3:
; 2460 : 		g_pPLC->Brightness13();

  000db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  000e1	e8 00 00 00 00	 call	 ?Brightness13@CPLC@@QAEHXZ ; CPLC::Brightness13

; 2461 : 		//g_nExposure = -7;
; 2462 : 		break;

  000e6	e9 b0 00 00 00	 jmp	 $LN23@Brightness
$LN14@Brightness:

; 2463 : 	case -2:
; 2464 : 		g_pPLC->Brightness12();

  000eb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  000f1	e8 00 00 00 00	 call	 ?Brightness12@CPLC@@QAEHXZ ; CPLC::Brightness12

; 2465 : 		//g_nExposure = -6;
; 2466 : 		break;

  000f6	e9 a0 00 00 00	 jmp	 $LN23@Brightness
$LN13@Brightness:

; 2467 : 	case -1:
; 2468 : 		g_pPLC->Brightness11();

  000fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00101	e8 00 00 00 00	 call	 ?Brightness11@CPLC@@QAEHXZ ; CPLC::Brightness11

; 2469 : 		//g_nExposure = -6;
; 2470 : 		break;

  00106	e9 90 00 00 00	 jmp	 $LN23@Brightness
$LN12@Brightness:

; 2471 : 	case 0:
; 2472 : 		g_pPLC->Brightness0();

  0010b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00111	e8 00 00 00 00	 call	 ?Brightness0@CPLC@@QAEHXZ ; CPLC::Brightness0

; 2473 : 		//g_nExposure = -5;
; 2474 : 		break;

  00116	e9 80 00 00 00	 jmp	 $LN23@Brightness
$LN11@Brightness:

; 2475 : 	case 1:
; 2476 : 		g_pPLC->Brightness1();

  0011b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00121	e8 00 00 00 00	 call	 ?Brightness1@CPLC@@QAEHXZ ; CPLC::Brightness1

; 2477 : 		//g_nExposure = -5;
; 2478 : 		break;

  00126	eb 73		 jmp	 SHORT $LN23@Brightness
$LN10@Brightness:

; 2479 : 	case 2:
; 2480 : 		g_pPLC->Brightness2();

  00128	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0012e	e8 00 00 00 00	 call	 ?Brightness2@CPLC@@QAEHXZ ; CPLC::Brightness2

; 2481 : 		//g_nExposure = -4;
; 2482 : 		break;

  00133	eb 66		 jmp	 SHORT $LN23@Brightness
$LN9@Brightness:

; 2483 : 	case 3:
; 2484 : 		g_pPLC->Brightness3();

  00135	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0013b	e8 00 00 00 00	 call	 ?Brightness3@CPLC@@QAEHXZ ; CPLC::Brightness3

; 2485 : 		//g_nExposure = -4;
; 2486 : 		break;

  00140	eb 59		 jmp	 SHORT $LN23@Brightness
$LN8@Brightness:

; 2487 : 	case 4:
; 2488 : 		g_pPLC->Brightness4();

  00142	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00148	e8 00 00 00 00	 call	 ?Brightness4@CPLC@@QAEHXZ ; CPLC::Brightness4

; 2489 : 		//g_nExposure = -3;
; 2490 : 		break;

  0014d	eb 4c		 jmp	 SHORT $LN23@Brightness
$LN7@Brightness:

; 2491 : 	case 5:
; 2492 : 		g_pPLC->Brightness5();

  0014f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00155	e8 00 00 00 00	 call	 ?Brightness5@CPLC@@QAEHXZ ; CPLC::Brightness5

; 2493 : 		//g_nExposure = -3;
; 2494 : 		break;

  0015a	eb 3f		 jmp	 SHORT $LN23@Brightness
$LN6@Brightness:

; 2495 : 	case 6:
; 2496 : 		g_pPLC->Brightness6();

  0015c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00162	e8 00 00 00 00	 call	 ?Brightness6@CPLC@@QAEHXZ ; CPLC::Brightness6

; 2497 : 		//g_nExposure = -2;
; 2498 : 		break;

  00167	eb 32		 jmp	 SHORT $LN23@Brightness
$LN5@Brightness:

; 2499 : 	case 7:
; 2500 : 		g_pPLC->Brightness7();

  00169	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0016f	e8 00 00 00 00	 call	 ?Brightness7@CPLC@@QAEHXZ ; CPLC::Brightness7

; 2501 : 		//g_nExposure = -2;
; 2502 : 		break;

  00174	eb 25		 jmp	 SHORT $LN23@Brightness
$LN4@Brightness:

; 2503 : 	case 8:
; 2504 : 		g_pPLC->Brightness8();

  00176	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0017c	e8 00 00 00 00	 call	 ?Brightness8@CPLC@@QAEHXZ ; CPLC::Brightness8

; 2505 : 		//g_nExposure = -1;
; 2506 : 		break;

  00181	eb 18		 jmp	 SHORT $LN23@Brightness
$LN3@Brightness:

; 2507 : 	case 9:
; 2508 : 		g_pPLC->Brightness9();

  00183	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00189	e8 00 00 00 00	 call	 ?Brightness9@CPLC@@QAEHXZ ; CPLC::Brightness9

; 2509 : 		//g_nExposure = -1;
; 2510 : 		break;

  0018e	eb 0b		 jmp	 SHORT $LN23@Brightness
$LN2@Brightness:

; 2511 : 	case 10:
; 2512 : 		g_pPLC->Brightness10();

  00190	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00196	e8 00 00 00 00	 call	 ?Brightness10@CPLC@@QAEHXZ ; CPLC::Brightness10
$LN1@Brightness:
$LN23@Brightness:

; 2513 : 		//g_nExposure = 0;
; 2514 : 		break;
; 2515 : 	default:
; 2516 : 		break;
; 2517 : 	}
; 2518 : }

  0019b	8b e5		 mov	 esp, ebp
  0019d	5d		 pop	 ebp
  0019e	c3		 ret	 0
  0019f	90		 npad	 1
$LN28@Brightness:
  001a0	00 00 00 00	 DD	 $LN22@Brightness
  001a4	00 00 00 00	 DD	 $LN21@Brightness
  001a8	00 00 00 00	 DD	 $LN20@Brightness
  001ac	00 00 00 00	 DD	 $LN19@Brightness
  001b0	00 00 00 00	 DD	 $LN18@Brightness
  001b4	00 00 00 00	 DD	 $LN17@Brightness
  001b8	00 00 00 00	 DD	 $LN16@Brightness
  001bc	00 00 00 00	 DD	 $LN15@Brightness
  001c0	00 00 00 00	 DD	 $LN14@Brightness
  001c4	00 00 00 00	 DD	 $LN13@Brightness
  001c8	00 00 00 00	 DD	 $LN12@Brightness
  001cc	00 00 00 00	 DD	 $LN11@Brightness
  001d0	00 00 00 00	 DD	 $LN10@Brightness
  001d4	00 00 00 00	 DD	 $LN9@Brightness
  001d8	00 00 00 00	 DD	 $LN8@Brightness
  001dc	00 00 00 00	 DD	 $LN7@Brightness
  001e0	00 00 00 00	 DD	 $LN6@Brightness
  001e4	00 00 00 00	 DD	 $LN5@Brightness
  001e8	00 00 00 00	 DD	 $LN4@Brightness
  001ec	00 00 00 00	 DD	 $LN3@Brightness
  001f0	00 00 00 00	 DD	 $LN2@Brightness
?BrightnessSub@CEndoScopeMFCDlg@@AAEXXZ ENDP		; CEndoScopeMFCDlg::BrightnessSub
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?ContrastAdd@CEndoScopeMFCDlg@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nContrast$ = -4					; size = 4
?ContrastAdd@CEndoScopeMFCDlg@@AAEXXZ PROC		; CEndoScopeMFCDlg::ContrastAdd, COMDAT
; _this$ = ecx

; 2521 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2522 : 	//printf("contrast  %d",g_nContrast);
; 2523 : 	int nContrast = ++g_nContrast;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_nContrast@@3HA ; g_nContrast
  0000e	83 c0 01	 add	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR ?g_nContrast@@3HA, eax ; g_nContrast
  00016	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_nContrast@@3HA ; g_nContrast
  0001c	89 4d fc	 mov	 DWORD PTR _nContrast$[ebp], ecx

; 2524 : 	g_pPLC->Contrast(nContrast);

  0001f	8b 55 fc	 mov	 edx, DWORD PTR _nContrast$[ebp]
  00022	52		 push	 edx
  00023	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00029	e8 00 00 00 00	 call	 ?Contrast@CPLC@@QAEHH@Z	; CPLC::Contrast

; 2525 : }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?ContrastAdd@CEndoScopeMFCDlg@@AAEXXZ ENDP		; CEndoScopeMFCDlg::ContrastAdd
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?ContrastSub@CEndoScopeMFCDlg@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nContrast$ = -4					; size = 4
?ContrastSub@CEndoScopeMFCDlg@@AAEXXZ PROC		; CEndoScopeMFCDlg::ContrastSub, COMDAT
; _this$ = ecx

; 2529 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2530 : 	//printf("contrast  %d",g_nContrast);
; 2531 : 	int nContrast = --g_nContrast;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_nContrast@@3HA ; g_nContrast
  0000e	83 e8 01	 sub	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR ?g_nContrast@@3HA, eax ; g_nContrast
  00016	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_nContrast@@3HA ; g_nContrast
  0001c	89 4d fc	 mov	 DWORD PTR _nContrast$[ebp], ecx

; 2532 : 
; 2533 : 	g_pPLC->Contrast(nContrast);

  0001f	8b 55 fc	 mov	 edx, DWORD PTR _nContrast$[ebp]
  00022	52		 push	 edx
  00023	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00029	e8 00 00 00 00	 call	 ?Contrast@CPLC@@QAEHH@Z	; CPLC::Contrast

; 2534 : }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?ContrastSub@CEndoScopeMFCDlg@@AAEXXZ ENDP		; CEndoScopeMFCDlg::ContrastSub
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?SaturationAdd@CEndoScopeMFCDlg@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nSaturation$ = -4					; size = 4
?SaturationAdd@CEndoScopeMFCDlg@@AAEXXZ PROC		; CEndoScopeMFCDlg::SaturationAdd, COMDAT
; _this$ = ecx

; 2537 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2538 : 	int nSaturation = ++g_nSaturation;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_nSaturation@@3HA ; g_nSaturation
  0000e	83 c0 01	 add	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR ?g_nSaturation@@3HA, eax ; g_nSaturation
  00016	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_nSaturation@@3HA ; g_nSaturation
  0001c	89 4d fc	 mov	 DWORD PTR _nSaturation$[ebp], ecx

; 2539 : 	g_pPLC->Saturation(nSaturation);

  0001f	8b 55 fc	 mov	 edx, DWORD PTR _nSaturation$[ebp]
  00022	52		 push	 edx
  00023	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00029	e8 00 00 00 00	 call	 ?Saturation@CPLC@@QAEHH@Z ; CPLC::Saturation

; 2540 : }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?SaturationAdd@CEndoScopeMFCDlg@@AAEXXZ ENDP		; CEndoScopeMFCDlg::SaturationAdd
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?SaturationSub@CEndoScopeMFCDlg@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nSaturation$ = -4					; size = 4
?SaturationSub@CEndoScopeMFCDlg@@AAEXXZ PROC		; CEndoScopeMFCDlg::SaturationSub, COMDAT
; _this$ = ecx

; 2543 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2544 : 
; 2545 : 	int nSaturation = --g_nSaturation;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_nSaturation@@3HA ; g_nSaturation
  0000e	83 e8 01	 sub	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR ?g_nSaturation@@3HA, eax ; g_nSaturation
  00016	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_nSaturation@@3HA ; g_nSaturation
  0001c	89 4d fc	 mov	 DWORD PTR _nSaturation$[ebp], ecx

; 2546 : 	g_pPLC->Saturation(nSaturation);

  0001f	8b 55 fc	 mov	 edx, DWORD PTR _nSaturation$[ebp]
  00022	52		 push	 edx
  00023	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00029	e8 00 00 00 00	 call	 ?Saturation@CPLC@@QAEHH@Z ; CPLC::Saturation

; 2547 : }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?SaturationSub@CEndoScopeMFCDlg@@AAEXXZ ENDP		; CEndoScopeMFCDlg::SaturationSub
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?SharpnessAdd@CEndoScopeMFCDlg@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SharpnessAdd@CEndoScopeMFCDlg@@AAEXXZ PROC		; CEndoScopeMFCDlg::SharpnessAdd, COMDAT
; _this$ = ecx

; 2560 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2561 : 	g_nSharpness++;

  00007	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_nSharpness@@3HA ; g_nSharpness
  0000c	83 c0 01	 add	 eax, 1
  0000f	a3 00 00 00 00	 mov	 DWORD PTR ?g_nSharpness@@3HA, eax ; g_nSharpness

; 2562 : 	g_nExposure++;

  00014	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_nExposure@@3HA ; g_nExposure
  0001a	83 c1 01	 add	 ecx, 1
  0001d	89 0d 00 00 00
	00		 mov	 DWORD PTR ?g_nExposure@@3HA, ecx ; g_nExposure

; 2563 : 	g_pPLC->Sharpness(g_nSharpness);

  00023	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_nSharpness@@3HA ; g_nSharpness
  00029	52		 push	 edx
  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00030	e8 00 00 00 00	 call	 ?Sharpness@CPLC@@QAEHH@Z ; CPLC::Sharpness

; 2564 : }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?SharpnessAdd@CEndoScopeMFCDlg@@AAEXXZ ENDP		; CEndoScopeMFCDlg::SharpnessAdd
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?SharpnessSub@CEndoScopeMFCDlg@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SharpnessSub@CEndoScopeMFCDlg@@AAEXXZ PROC		; CEndoScopeMFCDlg::SharpnessSub, COMDAT
; _this$ = ecx

; 2567 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2568 : 	g_nSharpness--;

  00007	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_nSharpness@@3HA ; g_nSharpness
  0000c	83 e8 01	 sub	 eax, 1
  0000f	a3 00 00 00 00	 mov	 DWORD PTR ?g_nSharpness@@3HA, eax ; g_nSharpness

; 2569 : 	g_nExposure--;

  00014	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_nExposure@@3HA ; g_nExposure
  0001a	83 e9 01	 sub	 ecx, 1
  0001d	89 0d 00 00 00
	00		 mov	 DWORD PTR ?g_nExposure@@3HA, ecx ; g_nExposure

; 2570 : 	g_pPLC->Sharpness(g_nSharpness);

  00023	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_nSharpness@@3HA ; g_nSharpness
  00029	52		 push	 edx
  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00030	e8 00 00 00 00	 call	 ?Sharpness@CPLC@@QAEHH@Z ; CPLC::Sharpness

; 2571 : }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?SharpnessSub@CEndoScopeMFCDlg@@AAEXXZ ENDP		; CEndoScopeMFCDlg::SharpnessSub
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?GainAdd@CEndoScopeMFCDlg@@AAEXXZ
_TEXT	SEGMENT
_ok$ = -12						; size = 4
_this$ = -8						; size = 4
_nGain$ = -4						; size = 4
?GainAdd@CEndoScopeMFCDlg@@AAEXXZ PROC			; CEndoScopeMFCDlg::GainAdd, COMDAT
; _this$ = ecx

; 2574 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2575 : 	int nGain = ++g_nGain;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_nGain@@3HA ; g_nGain
  0000e	83 c0 01	 add	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR ?g_nGain@@3HA, eax ; g_nGain
  00016	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_nGain@@3HA ; g_nGain
  0001c	89 4d fc	 mov	 DWORD PTR _nGain$[ebp], ecx

; 2576 : 	BOOL ok=g_pPLC->Gain(nGain);

  0001f	8b 55 fc	 mov	 edx, DWORD PTR _nGain$[ebp]
  00022	52		 push	 edx
  00023	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00029	e8 00 00 00 00	 call	 ?Gain@CPLC@@QAEHH@Z	; CPLC::Gain
  0002e	89 45 f4	 mov	 DWORD PTR _ok$[ebp], eax

; 2577 : 
; 2578 : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?GainAdd@CEndoScopeMFCDlg@@AAEXXZ ENDP			; CEndoScopeMFCDlg::GainAdd
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?GainSub@CEndoScopeMFCDlg@@AAEXXZ
_TEXT	SEGMENT
_ok$ = -12						; size = 4
_this$ = -8						; size = 4
_nGain$ = -4						; size = 4
?GainSub@CEndoScopeMFCDlg@@AAEXXZ PROC			; CEndoScopeMFCDlg::GainSub, COMDAT
; _this$ = ecx

; 2581 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2582 : 	int nGain = --g_nGain;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_nGain@@3HA ; g_nGain
  0000e	83 e8 01	 sub	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR ?g_nGain@@3HA, eax ; g_nGain
  00016	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_nGain@@3HA ; g_nGain
  0001c	89 4d fc	 mov	 DWORD PTR _nGain$[ebp], ecx

; 2583 : 	BOOL ok=g_pPLC->Gain(nGain);

  0001f	8b 55 fc	 mov	 edx, DWORD PTR _nGain$[ebp]
  00022	52		 push	 edx
  00023	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00029	e8 00 00 00 00	 call	 ?Gain@CPLC@@QAEHH@Z	; CPLC::Gain
  0002e	89 45 f4	 mov	 DWORD PTR _ok$[ebp], eax

; 2584 : 
; 2585 : }

  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?GainSub@CEndoScopeMFCDlg@@AAEXXZ ENDP			; CEndoScopeMFCDlg::GainSub
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?ExposeAdd@CEndoScopeMFCDlg@@AAE_NXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
_nexpose$ = -8						; size = 4
tv65 = -4						; size = 4
?ExposeAdd@CEndoScopeMFCDlg@@AAE_NXZ PROC		; CEndoScopeMFCDlg::ExposeAdd, COMDAT
; _this$ = ecx

; 2587 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 2588 : 	int nexpose = ++g_nExposure;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_nExposure@@3HA ; g_nExposure
  0000e	83 c0 01	 add	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR ?g_nExposure@@3HA, eax ; g_nExposure
  00016	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_nExposure@@3HA ; g_nExposure
  0001c	89 4d f8	 mov	 DWORD PTR _nexpose$[ebp], ecx

; 2589 : 	switch (nexpose)

  0001f	8b 55 f8	 mov	 edx, DWORD PTR _nexpose$[ebp]
  00022	89 55 fc	 mov	 DWORD PTR tv65[ebp], edx
  00025	8b 45 fc	 mov	 eax, DWORD PTR tv65[ebp]
  00028	83 c0 0a	 add	 eax, 10			; 0000000aH
  0002b	89 45 fc	 mov	 DWORD PTR tv65[ebp], eax
  0002e	83 7d fc 0a	 cmp	 DWORD PTR tv65[ebp], 10	; 0000000aH
  00032	0f 87 14 01 00
	00		 ja	 $LN13@ExposeAdd
  00038	8b 4d fc	 mov	 ecx, DWORD PTR tv65[ebp]
  0003b	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN17@ExposeAdd[ecx*4]
$LN12@ExposeAdd:

; 2590 : 	{
; 2591 : 	case -10:
; 2592 : 		g_pPLC->Exposure10();

  00042	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00048	e8 00 00 00 00	 call	 ?Exposure10@CPLC@@QAEHXZ ; CPLC::Exposure10

; 2593 : 		g_nSharpness = 0;

  0004d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_nSharpness@@3HA, 0 ; g_nSharpness

; 2594 : 		break;

  00057	e9 f0 00 00 00	 jmp	 $LN13@ExposeAdd
$LN11@ExposeAdd:

; 2595 : 	case -9:
; 2596 : 		g_pPLC->Exposure9();

  0005c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00062	e8 00 00 00 00	 call	 ?Exposure9@CPLC@@QAEHXZ	; CPLC::Exposure9

; 2597 : 		g_nSharpness = 1;

  00067	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?g_nSharpness@@3HA, 1 ; g_nSharpness

; 2598 : 		break;

  00071	e9 d6 00 00 00	 jmp	 $LN13@ExposeAdd
$LN10@ExposeAdd:

; 2599 : 	case -8:
; 2600 : 		g_pPLC->Exposure8();

  00076	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0007c	e8 00 00 00 00	 call	 ?Exposure8@CPLC@@QAEHXZ	; CPLC::Exposure8

; 2601 : 		g_nSharpness = 2;

  00081	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?g_nSharpness@@3HA, 2 ; g_nSharpness

; 2602 : 		break;

  0008b	e9 bc 00 00 00	 jmp	 $LN13@ExposeAdd
$LN9@ExposeAdd:

; 2603 : 	case -7:
; 2604 : 		g_pPLC->Exposure7();

  00090	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00096	e8 00 00 00 00	 call	 ?Exposure7@CPLC@@QAEHXZ	; CPLC::Exposure7

; 2605 : 		g_nSharpness = 3;

  0009b	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?g_nSharpness@@3HA, 3 ; g_nSharpness

; 2606 : 		break;

  000a5	e9 a2 00 00 00	 jmp	 $LN13@ExposeAdd
$LN8@ExposeAdd:

; 2607 : 	case -6:
; 2608 : 		g_pPLC->Exposure6();

  000aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  000b0	e8 00 00 00 00	 call	 ?Exposure6@CPLC@@QAEHXZ	; CPLC::Exposure6

; 2609 : 		g_nSharpness = 4;

  000b5	c7 05 00 00 00
	00 04 00 00 00	 mov	 DWORD PTR ?g_nSharpness@@3HA, 4 ; g_nSharpness

; 2610 : 		break;

  000bf	e9 88 00 00 00	 jmp	 $LN13@ExposeAdd
$LN7@ExposeAdd:

; 2611 : 	case -5:
; 2612 : 		g_pPLC->Exposure5();

  000c4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  000ca	e8 00 00 00 00	 call	 ?Exposure5@CPLC@@QAEHXZ	; CPLC::Exposure5

; 2613 : 		g_nSharpness = 5;

  000cf	c7 05 00 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?g_nSharpness@@3HA, 5 ; g_nSharpness

; 2614 : 		break;

  000d9	eb 71		 jmp	 SHORT $LN13@ExposeAdd
$LN6@ExposeAdd:

; 2615 : 	case -4:
; 2616 : 		g_pPLC->Exposure4();

  000db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  000e1	e8 00 00 00 00	 call	 ?Exposure4@CPLC@@QAEHXZ	; CPLC::Exposure4

; 2617 : 		g_nSharpness = 6;

  000e6	c7 05 00 00 00
	00 06 00 00 00	 mov	 DWORD PTR ?g_nSharpness@@3HA, 6 ; g_nSharpness

; 2618 : 		break;

  000f0	eb 5a		 jmp	 SHORT $LN13@ExposeAdd
$LN5@ExposeAdd:

; 2619 : 	case -3:
; 2620 : 		g_pPLC->Exposure3();

  000f2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  000f8	e8 00 00 00 00	 call	 ?Exposure3@CPLC@@QAEHXZ	; CPLC::Exposure3

; 2621 : 		g_nSharpness = 7;

  000fd	c7 05 00 00 00
	00 07 00 00 00	 mov	 DWORD PTR ?g_nSharpness@@3HA, 7 ; g_nSharpness

; 2622 : 		break;

  00107	eb 43		 jmp	 SHORT $LN13@ExposeAdd
$LN4@ExposeAdd:

; 2623 : 	case -2:
; 2624 : 		g_pPLC->Exposure2();

  00109	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0010f	e8 00 00 00 00	 call	 ?Exposure2@CPLC@@QAEHXZ	; CPLC::Exposure2

; 2625 : 		g_nSharpness = 8;

  00114	c7 05 00 00 00
	00 08 00 00 00	 mov	 DWORD PTR ?g_nSharpness@@3HA, 8 ; g_nSharpness

; 2626 : 		break;

  0011e	eb 2c		 jmp	 SHORT $LN13@ExposeAdd
$LN3@ExposeAdd:

; 2627 : 	case -1:
; 2628 : 		g_pPLC->Exposure1();

  00120	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00126	e8 00 00 00 00	 call	 ?Exposure1@CPLC@@QAEHXZ	; CPLC::Exposure1

; 2629 : 		g_nSharpness = 9;

  0012b	c7 05 00 00 00
	00 09 00 00 00	 mov	 DWORD PTR ?g_nSharpness@@3HA, 9 ; g_nSharpness

; 2630 : 		break;

  00135	eb 15		 jmp	 SHORT $LN13@ExposeAdd
$LN2@ExposeAdd:

; 2631 : 	case 0:
; 2632 : 		g_pPLC->Exposure0();

  00137	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0013d	e8 00 00 00 00	 call	 ?Exposure0@CPLC@@QAEHXZ	; CPLC::Exposure0

; 2633 : 		g_nSharpness = 10;

  00142	c7 05 00 00 00
	00 0a 00 00 00	 mov	 DWORD PTR ?g_nSharpness@@3HA, 10 ; g_nSharpness, 0000000aH
$LN13@ExposeAdd:

; 2634 : 		break;
; 2635 : 	default:
; 2636 : 		break;
; 2637 : 	}
; 2638 : 	return true;

  0014c	b0 01		 mov	 al, 1

; 2639 : }

  0014e	8b e5		 mov	 esp, ebp
  00150	5d		 pop	 ebp
  00151	c3		 ret	 0
  00152	8b ff		 npad	 2
$LN17@ExposeAdd:
  00154	00 00 00 00	 DD	 $LN12@ExposeAdd
  00158	00 00 00 00	 DD	 $LN11@ExposeAdd
  0015c	00 00 00 00	 DD	 $LN10@ExposeAdd
  00160	00 00 00 00	 DD	 $LN9@ExposeAdd
  00164	00 00 00 00	 DD	 $LN8@ExposeAdd
  00168	00 00 00 00	 DD	 $LN7@ExposeAdd
  0016c	00 00 00 00	 DD	 $LN6@ExposeAdd
  00170	00 00 00 00	 DD	 $LN5@ExposeAdd
  00174	00 00 00 00	 DD	 $LN4@ExposeAdd
  00178	00 00 00 00	 DD	 $LN3@ExposeAdd
  0017c	00 00 00 00	 DD	 $LN2@ExposeAdd
?ExposeAdd@CEndoScopeMFCDlg@@AAE_NXZ ENDP		; CEndoScopeMFCDlg::ExposeAdd
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?ExposeSub@CEndoScopeMFCDlg@@AAE_NXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
_nexpose$ = -8						; size = 4
tv65 = -4						; size = 4
?ExposeSub@CEndoScopeMFCDlg@@AAE_NXZ PROC		; CEndoScopeMFCDlg::ExposeSub, COMDAT
; _this$ = ecx

; 2641 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 2642 : 	int nexpose = --g_nExposure;

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_nExposure@@3HA ; g_nExposure
  0000e	83 e8 01	 sub	 eax, 1
  00011	a3 00 00 00 00	 mov	 DWORD PTR ?g_nExposure@@3HA, eax ; g_nExposure
  00016	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_nExposure@@3HA ; g_nExposure
  0001c	89 4d f8	 mov	 DWORD PTR _nexpose$[ebp], ecx

; 2643 : 	
; 2644 : 	switch (nexpose)

  0001f	8b 55 f8	 mov	 edx, DWORD PTR _nexpose$[ebp]
  00022	89 55 fc	 mov	 DWORD PTR tv65[ebp], edx
  00025	8b 45 fc	 mov	 eax, DWORD PTR tv65[ebp]
  00028	83 c0 0a	 add	 eax, 10			; 0000000aH
  0002b	89 45 fc	 mov	 DWORD PTR tv65[ebp], eax
  0002e	83 7d fc 0a	 cmp	 DWORD PTR tv65[ebp], 10	; 0000000aH
  00032	0f 87 14 01 00
	00		 ja	 $LN13@ExposeSub
  00038	8b 4d fc	 mov	 ecx, DWORD PTR tv65[ebp]
  0003b	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN17@ExposeSub[ecx*4]
$LN12@ExposeSub:

; 2645 : 	{
; 2646 : 	case -10:
; 2647 : 		g_pPLC->Exposure10();

  00042	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00048	e8 00 00 00 00	 call	 ?Exposure10@CPLC@@QAEHXZ ; CPLC::Exposure10

; 2648 : 		g_nSharpness = 0;

  0004d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_nSharpness@@3HA, 0 ; g_nSharpness

; 2649 : 		break;

  00057	e9 f0 00 00 00	 jmp	 $LN13@ExposeSub
$LN11@ExposeSub:

; 2650 : 	case -9:
; 2651 : 		g_pPLC->Exposure9();

  0005c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00062	e8 00 00 00 00	 call	 ?Exposure9@CPLC@@QAEHXZ	; CPLC::Exposure9

; 2652 : 		g_nSharpness = 1;

  00067	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?g_nSharpness@@3HA, 1 ; g_nSharpness

; 2653 : 		break;

  00071	e9 d6 00 00 00	 jmp	 $LN13@ExposeSub
$LN10@ExposeSub:

; 2654 : 	case -8:
; 2655 : 		g_pPLC->Exposure8();

  00076	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0007c	e8 00 00 00 00	 call	 ?Exposure8@CPLC@@QAEHXZ	; CPLC::Exposure8

; 2656 : 		g_nSharpness = 2;

  00081	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?g_nSharpness@@3HA, 2 ; g_nSharpness

; 2657 : 		break;

  0008b	e9 bc 00 00 00	 jmp	 $LN13@ExposeSub
$LN9@ExposeSub:

; 2658 : 	case -7:
; 2659 : 		g_pPLC->Exposure7();

  00090	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00096	e8 00 00 00 00	 call	 ?Exposure7@CPLC@@QAEHXZ	; CPLC::Exposure7

; 2660 : 		g_nSharpness = 3;

  0009b	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?g_nSharpness@@3HA, 3 ; g_nSharpness

; 2661 : 		break;

  000a5	e9 a2 00 00 00	 jmp	 $LN13@ExposeSub
$LN8@ExposeSub:

; 2662 : 	case -6:
; 2663 : 		g_pPLC->Exposure6();

  000aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  000b0	e8 00 00 00 00	 call	 ?Exposure6@CPLC@@QAEHXZ	; CPLC::Exposure6

; 2664 : 		g_nSharpness = 4;

  000b5	c7 05 00 00 00
	00 04 00 00 00	 mov	 DWORD PTR ?g_nSharpness@@3HA, 4 ; g_nSharpness

; 2665 : 		break;

  000bf	e9 88 00 00 00	 jmp	 $LN13@ExposeSub
$LN7@ExposeSub:

; 2666 : 	case -5:
; 2667 : 		g_pPLC->Exposure5();

  000c4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  000ca	e8 00 00 00 00	 call	 ?Exposure5@CPLC@@QAEHXZ	; CPLC::Exposure5

; 2668 : 		g_nSharpness = 5;

  000cf	c7 05 00 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?g_nSharpness@@3HA, 5 ; g_nSharpness

; 2669 : 		break;

  000d9	eb 71		 jmp	 SHORT $LN13@ExposeSub
$LN6@ExposeSub:

; 2670 : 	case -4:
; 2671 : 		g_pPLC->Exposure4();

  000db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  000e1	e8 00 00 00 00	 call	 ?Exposure4@CPLC@@QAEHXZ	; CPLC::Exposure4

; 2672 : 		g_nSharpness = 6;

  000e6	c7 05 00 00 00
	00 06 00 00 00	 mov	 DWORD PTR ?g_nSharpness@@3HA, 6 ; g_nSharpness

; 2673 : 		break;

  000f0	eb 5a		 jmp	 SHORT $LN13@ExposeSub
$LN5@ExposeSub:

; 2674 : 	case -3:
; 2675 : 		g_pPLC->Exposure3();

  000f2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  000f8	e8 00 00 00 00	 call	 ?Exposure3@CPLC@@QAEHXZ	; CPLC::Exposure3

; 2676 : 		g_nSharpness = 7;

  000fd	c7 05 00 00 00
	00 07 00 00 00	 mov	 DWORD PTR ?g_nSharpness@@3HA, 7 ; g_nSharpness

; 2677 : 		break;

  00107	eb 43		 jmp	 SHORT $LN13@ExposeSub
$LN4@ExposeSub:

; 2678 : 	case -2:
; 2679 : 		g_pPLC->Exposure2();

  00109	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0010f	e8 00 00 00 00	 call	 ?Exposure2@CPLC@@QAEHXZ	; CPLC::Exposure2

; 2680 : 		g_nSharpness = 8;

  00114	c7 05 00 00 00
	00 08 00 00 00	 mov	 DWORD PTR ?g_nSharpness@@3HA, 8 ; g_nSharpness

; 2681 : 		break;

  0011e	eb 2c		 jmp	 SHORT $LN13@ExposeSub
$LN3@ExposeSub:

; 2682 : 	case -1:
; 2683 : 		g_pPLC->Exposure1();

  00120	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00126	e8 00 00 00 00	 call	 ?Exposure1@CPLC@@QAEHXZ	; CPLC::Exposure1

; 2684 : 		g_nSharpness = 9;

  0012b	c7 05 00 00 00
	00 09 00 00 00	 mov	 DWORD PTR ?g_nSharpness@@3HA, 9 ; g_nSharpness

; 2685 : 		break;

  00135	eb 15		 jmp	 SHORT $LN13@ExposeSub
$LN2@ExposeSub:

; 2686 : 	case 0:
; 2687 : 		g_pPLC->Exposure0();

  00137	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0013d	e8 00 00 00 00	 call	 ?Exposure0@CPLC@@QAEHXZ	; CPLC::Exposure0

; 2688 : 		g_nSharpness = 10;

  00142	c7 05 00 00 00
	00 0a 00 00 00	 mov	 DWORD PTR ?g_nSharpness@@3HA, 10 ; g_nSharpness, 0000000aH
$LN13@ExposeSub:

; 2689 : 		break;
; 2690 : 	default:
; 2691 : 		break;
; 2692 : 	}
; 2693 : 	return true;

  0014c	b0 01		 mov	 al, 1

; 2694 : }

  0014e	8b e5		 mov	 esp, ebp
  00150	5d		 pop	 ebp
  00151	c3		 ret	 0
  00152	8b ff		 npad	 2
$LN17@ExposeSub:
  00154	00 00 00 00	 DD	 $LN12@ExposeSub
  00158	00 00 00 00	 DD	 $LN11@ExposeSub
  0015c	00 00 00 00	 DD	 $LN10@ExposeSub
  00160	00 00 00 00	 DD	 $LN9@ExposeSub
  00164	00 00 00 00	 DD	 $LN8@ExposeSub
  00168	00 00 00 00	 DD	 $LN7@ExposeSub
  0016c	00 00 00 00	 DD	 $LN6@ExposeSub
  00170	00 00 00 00	 DD	 $LN5@ExposeSub
  00174	00 00 00 00	 DD	 $LN4@ExposeSub
  00178	00 00 00 00	 DD	 $LN3@ExposeSub
  0017c	00 00 00 00	 DD	 $LN2@ExposeSub
?ExposeSub@CEndoScopeMFCDlg@@AAE_NXZ ENDP		; CEndoScopeMFCDlg::ExposeSub
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?MenuStart@CEndoScopeMFCDlg@@AAE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bMenuStart$ = -2					; size = 1
tv67 = -1						; size = 1
?MenuStart@CEndoScopeMFCDlg@@AAE_NXZ PROC		; CEndoScopeMFCDlg::MenuStart, COMDAT
; _this$ = ecx

; 2696 : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2697 : 	bool bMenuStart = false;

  00009	c6 45 fe 00	 mov	 BYTE PTR _bMenuStart$[ebp], 0

; 2698 : 	bMenuStart = g_pPLC->MenuStart();

  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00013	e8 00 00 00 00	 call	 ?MenuStart@CPLC@@QAEHXZ	; CPLC::MenuStart
  00018	85 c0		 test	 eax, eax
  0001a	74 06		 je	 SHORT $LN3@MenuStart
  0001c	c6 45 ff 01	 mov	 BYTE PTR tv67[ebp], 1
  00020	eb 04		 jmp	 SHORT $LN4@MenuStart
$LN3@MenuStart:
  00022	c6 45 ff 00	 mov	 BYTE PTR tv67[ebp], 0
$LN4@MenuStart:
  00026	8a 45 ff	 mov	 al, BYTE PTR tv67[ebp]
  00029	88 45 fe	 mov	 BYTE PTR _bMenuStart$[ebp], al

; 2699 : 	return bMenuStart;

  0002c	8a 45 fe	 mov	 al, BYTE PTR _bMenuStart$[ebp]

; 2700 : }

  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?MenuStart@CEndoScopeMFCDlg@@AAE_NXZ ENDP		; CEndoScopeMFCDlg::MenuStart
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?MenuStop@CEndoScopeMFCDlg@@AAE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bMenuStop$ = -2					; size = 1
tv67 = -1						; size = 1
?MenuStop@CEndoScopeMFCDlg@@AAE_NXZ PROC		; CEndoScopeMFCDlg::MenuStop, COMDAT
; _this$ = ecx

; 2702 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2703 : 	bool bMenuStop = false;

  00009	c6 45 fe 00	 mov	 BYTE PTR _bMenuStop$[ebp], 0

; 2704 : 	bMenuStop = g_pPLC->MenuStop();

  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00013	e8 00 00 00 00	 call	 ?MenuStop@CPLC@@QAEHXZ	; CPLC::MenuStop
  00018	85 c0		 test	 eax, eax
  0001a	74 06		 je	 SHORT $LN3@MenuStop
  0001c	c6 45 ff 01	 mov	 BYTE PTR tv67[ebp], 1
  00020	eb 04		 jmp	 SHORT $LN4@MenuStop
$LN3@MenuStop:
  00022	c6 45 ff 00	 mov	 BYTE PTR tv67[ebp], 0
$LN4@MenuStop:
  00026	8a 45 ff	 mov	 al, BYTE PTR tv67[ebp]
  00029	88 45 fe	 mov	 BYTE PTR _bMenuStop$[ebp], al

; 2705 : 	return bMenuStop;

  0002c	8a 45 fe	 mov	 al, BYTE PTR _bMenuStop$[ebp]

; 2706 : }

  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?MenuStop@CEndoScopeMFCDlg@@AAE_NXZ ENDP		; CEndoScopeMFCDlg::MenuStop
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?MenuUp@CEndoScopeMFCDlg@@AAE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bMenuUp$ = -2						; size = 1
tv67 = -1						; size = 1
?MenuUp@CEndoScopeMFCDlg@@AAE_NXZ PROC			; CEndoScopeMFCDlg::MenuUp, COMDAT
; _this$ = ecx

; 2708 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2709 : 	bool bMenuUp = false;

  00009	c6 45 fe 00	 mov	 BYTE PTR _bMenuUp$[ebp], 0

; 2710 : 	bMenuUp = g_pPLC->MenuUp();

  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00013	e8 00 00 00 00	 call	 ?MenuUp@CPLC@@QAEHXZ	; CPLC::MenuUp
  00018	85 c0		 test	 eax, eax
  0001a	74 06		 je	 SHORT $LN3@MenuUp
  0001c	c6 45 ff 01	 mov	 BYTE PTR tv67[ebp], 1
  00020	eb 04		 jmp	 SHORT $LN4@MenuUp
$LN3@MenuUp:
  00022	c6 45 ff 00	 mov	 BYTE PTR tv67[ebp], 0
$LN4@MenuUp:
  00026	8a 45 ff	 mov	 al, BYTE PTR tv67[ebp]
  00029	88 45 fe	 mov	 BYTE PTR _bMenuUp$[ebp], al

; 2711 : 	return bMenuUp;

  0002c	8a 45 fe	 mov	 al, BYTE PTR _bMenuUp$[ebp]

; 2712 : }

  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?MenuUp@CEndoScopeMFCDlg@@AAE_NXZ ENDP			; CEndoScopeMFCDlg::MenuUp
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?MenuDown@CEndoScopeMFCDlg@@AAE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bMenuDown$ = -2					; size = 1
tv67 = -1						; size = 1
?MenuDown@CEndoScopeMFCDlg@@AAE_NXZ PROC		; CEndoScopeMFCDlg::MenuDown, COMDAT
; _this$ = ecx

; 2714 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2715 : 	bool bMenuDown = false;

  00009	c6 45 fe 00	 mov	 BYTE PTR _bMenuDown$[ebp], 0

; 2716 : 	bMenuDown = g_pPLC->MenuDown();

  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00013	e8 00 00 00 00	 call	 ?MenuDown@CPLC@@QAEHXZ	; CPLC::MenuDown
  00018	85 c0		 test	 eax, eax
  0001a	74 06		 je	 SHORT $LN3@MenuDown
  0001c	c6 45 ff 01	 mov	 BYTE PTR tv67[ebp], 1
  00020	eb 04		 jmp	 SHORT $LN4@MenuDown
$LN3@MenuDown:
  00022	c6 45 ff 00	 mov	 BYTE PTR tv67[ebp], 0
$LN4@MenuDown:
  00026	8a 45 ff	 mov	 al, BYTE PTR tv67[ebp]
  00029	88 45 fe	 mov	 BYTE PTR _bMenuDown$[ebp], al

; 2717 : 	return bMenuDown;

  0002c	8a 45 fe	 mov	 al, BYTE PTR _bMenuDown$[ebp]

; 2718 : }

  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?MenuDown@CEndoScopeMFCDlg@@AAE_NXZ ENDP		; CEndoScopeMFCDlg::MenuDown
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?MenuLeft@CEndoScopeMFCDlg@@AAE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bMenuLeft$ = -2					; size = 1
tv67 = -1						; size = 1
?MenuLeft@CEndoScopeMFCDlg@@AAE_NXZ PROC		; CEndoScopeMFCDlg::MenuLeft, COMDAT
; _this$ = ecx

; 2720 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2721 : 	bool bMenuLeft = false;

  00009	c6 45 fe 00	 mov	 BYTE PTR _bMenuLeft$[ebp], 0

; 2722 : 	bMenuLeft = g_pPLC->MenuLeft();

  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00013	e8 00 00 00 00	 call	 ?MenuLeft@CPLC@@QAEHXZ	; CPLC::MenuLeft
  00018	85 c0		 test	 eax, eax
  0001a	74 06		 je	 SHORT $LN3@MenuLeft
  0001c	c6 45 ff 01	 mov	 BYTE PTR tv67[ebp], 1
  00020	eb 04		 jmp	 SHORT $LN4@MenuLeft
$LN3@MenuLeft:
  00022	c6 45 ff 00	 mov	 BYTE PTR tv67[ebp], 0
$LN4@MenuLeft:
  00026	8a 45 ff	 mov	 al, BYTE PTR tv67[ebp]
  00029	88 45 fe	 mov	 BYTE PTR _bMenuLeft$[ebp], al

; 2723 : 	return bMenuLeft;

  0002c	8a 45 fe	 mov	 al, BYTE PTR _bMenuLeft$[ebp]

; 2724 : }

  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?MenuLeft@CEndoScopeMFCDlg@@AAE_NXZ ENDP		; CEndoScopeMFCDlg::MenuLeft
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?MenuRight@CEndoScopeMFCDlg@@AAE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bMenuRight$ = -2					; size = 1
tv67 = -1						; size = 1
?MenuRight@CEndoScopeMFCDlg@@AAE_NXZ PROC		; CEndoScopeMFCDlg::MenuRight, COMDAT
; _this$ = ecx

; 2726 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2727 : 	bool bMenuRight = false;

  00009	c6 45 fe 00	 mov	 BYTE PTR _bMenuRight$[ebp], 0

; 2728 : 	bMenuRight = g_pPLC->MenuRight();

  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00013	e8 00 00 00 00	 call	 ?MenuRight@CPLC@@QAEHXZ	; CPLC::MenuRight
  00018	85 c0		 test	 eax, eax
  0001a	74 06		 je	 SHORT $LN3@MenuRight
  0001c	c6 45 ff 01	 mov	 BYTE PTR tv67[ebp], 1
  00020	eb 04		 jmp	 SHORT $LN4@MenuRight
$LN3@MenuRight:
  00022	c6 45 ff 00	 mov	 BYTE PTR tv67[ebp], 0
$LN4@MenuRight:
  00026	8a 45 ff	 mov	 al, BYTE PTR tv67[ebp]
  00029	88 45 fe	 mov	 BYTE PTR _bMenuRight$[ebp], al

; 2729 : 	return bMenuRight;

  0002c	8a 45 fe	 mov	 al, BYTE PTR _bMenuRight$[ebp]

; 2730 : }

  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?MenuRight@CEndoScopeMFCDlg@@AAE_NXZ ENDP		; CEndoScopeMFCDlg::MenuRight
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?MenuEnter@CEndoScopeMFCDlg@@AAE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bMenuEnter$ = -2					; size = 1
tv67 = -1						; size = 1
?MenuEnter@CEndoScopeMFCDlg@@AAE_NXZ PROC		; CEndoScopeMFCDlg::MenuEnter, COMDAT
; _this$ = ecx

; 2732 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2733 : 	bool bMenuEnter = false;

  00009	c6 45 fe 00	 mov	 BYTE PTR _bMenuEnter$[ebp], 0

; 2734 : 	bMenuEnter = g_pPLC->MenuEnter();

  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  00013	e8 00 00 00 00	 call	 ?MenuEnter@CPLC@@QAEHXZ	; CPLC::MenuEnter
  00018	85 c0		 test	 eax, eax
  0001a	74 06		 je	 SHORT $LN3@MenuEnter
  0001c	c6 45 ff 01	 mov	 BYTE PTR tv67[ebp], 1
  00020	eb 04		 jmp	 SHORT $LN4@MenuEnter
$LN3@MenuEnter:
  00022	c6 45 ff 00	 mov	 BYTE PTR tv67[ebp], 0
$LN4@MenuEnter:
  00026	8a 45 ff	 mov	 al, BYTE PTR tv67[ebp]
  00029	88 45 fe	 mov	 BYTE PTR _bMenuEnter$[ebp], al

; 2735 : 	return bMenuEnter;

  0002c	8a 45 fe	 mov	 al, BYTE PTR _bMenuEnter$[ebp]

; 2736 : }

  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?MenuEnter@CEndoScopeMFCDlg@@AAE_NXZ ENDP		; CEndoScopeMFCDlg::MenuEnter
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?CutDirFileAPI@@YAHV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z
_TEXT	SEGMENT
tv255 = -656						; size = 4
tv289 = -652						; size = 4
tv295 = -648						; size = 4
_From$ = -644						; size = 4
$T2 = -640						; size = 4
$T3 = -636						; size = 4
tv253 = -632						; size = 4
$T4 = -628						; size = 4
$T5 = -624						; size = 4
tv294 = -620						; size = 4
$T6 = -616						; size = 4
_To$ = -612						; size = 4
tv296 = -608						; size = 4
$T7 = -604						; size = 4
$T8 = -600						; size = 4
_nOk$ = -596						; size = 4
_FileOp$ = -592						; size = 30
_szFrom$ = -560						; size = 260
_szTo$ = -300						; size = 260
_strTitle$ = -40					; size = 23
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_strSrcPath$ = 8					; size = 4
_strDesPath$ = 12					; size = 4
?CutDirFileAPI@@YAHV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z PROC ; CutDirFileAPI, COMDAT

; 2738 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CutDirFileAPI@@YAHV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 84 02 00
	00		 sub	 esp, 644		; 00000284H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 2739 : 	//剪切文件
; 2740 : 
; 2741 : 	if (strSrcPath.GetAt(strSrcPath.GetLength() - 1) == '\\' || strSrcPath.GetAt(strSrcPath.GetLength() - 1) == '/')

  00034	8d 4d 08	 lea	 ecx, DWORD PTR _strSrcPath$[ebp]
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  0003d	83 e8 01	 sub	 eax, 1
  00040	50		 push	 eax
  00041	8d 4d 08	 lea	 ecx, DWORD PTR _strSrcPath$[ebp]
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAt@?$CSimpleStringT@D$00@ATL@@QBEDH@Z
  0004a	0f be c0	 movsx	 eax, al
  0004d	83 f8 5c	 cmp	 eax, 92			; 0000005cH
  00050	74 1e		 je	 SHORT $LN5@CutDirFile
  00052	8d 4d 08	 lea	 ecx, DWORD PTR _strSrcPath$[ebp]
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  0005b	83 e8 01	 sub	 eax, 1
  0005e	50		 push	 eax
  0005f	8d 4d 08	 lea	 ecx, DWORD PTR _strSrcPath$[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAt@?$CSimpleStringT@D$00@ATL@@QBEDH@Z
  00068	0f be c8	 movsx	 ecx, al
  0006b	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  0006e	75 53		 jne	 SHORT $LN6@CutDirFile
$LN5@CutDirFile:

; 2742 : 	{
; 2743 : 		strSrcPath = strSrcPath.Left(strSrcPath.GetLength() - 1);

  00070	8d 4d 08	 lea	 ecx, DWORD PTR _strSrcPath$[ebp]
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  00079	83 e8 01	 sub	 eax, 1
  0007c	50		 push	 eax
  0007d	8d 95 80 fd ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  00083	52		 push	 edx
  00084	8d 4d 08	 lea	 ecx, DWORD PTR _strSrcPath$[ebp]
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Left@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z
  0008d	89 85 94 fd ff
	ff		 mov	 DWORD PTR tv294[ebp], eax
  00093	8b 85 94 fd ff
	ff		 mov	 eax, DWORD PTR tv294[ebp]
  00099	89 85 88 fd ff
	ff		 mov	 DWORD PTR tv253[ebp], eax
  0009f	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000a3	8b 8d 88 fd ff
	ff		 mov	 ecx, DWORD PTR tv253[ebp]
  000a9	51		 push	 ecx
  000aa	8d 4d 08	 lea	 ecx, DWORD PTR _strSrcPath$[ebp]
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  000b3	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000b7	8d 8d 80 fd ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  000bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$LN6@CutDirFile:

; 2744 : 	}
; 2745 : 	if (strDesPath.GetAt(strDesPath.GetLength() - 1) == '\\' || strDesPath.GetAt(strDesPath.GetLength() - 1) == '/')

  000c3	8d 4d 0c	 lea	 ecx, DWORD PTR _strDesPath$[ebp]
  000c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  000cc	83 e8 01	 sub	 eax, 1
  000cf	50		 push	 eax
  000d0	8d 4d 0c	 lea	 ecx, DWORD PTR _strDesPath$[ebp]
  000d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAt@?$CSimpleStringT@D$00@ATL@@QBEDH@Z
  000d9	0f be d0	 movsx	 edx, al
  000dc	83 fa 5c	 cmp	 edx, 92			; 0000005cH
  000df	74 1e		 je	 SHORT $LN3@CutDirFile
  000e1	8d 4d 0c	 lea	 ecx, DWORD PTR _strDesPath$[ebp]
  000e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  000ea	83 e8 01	 sub	 eax, 1
  000ed	50		 push	 eax
  000ee	8d 4d 0c	 lea	 ecx, DWORD PTR _strDesPath$[ebp]
  000f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetAt@?$CSimpleStringT@D$00@ATL@@QBEDH@Z
  000f7	0f be c0	 movsx	 eax, al
  000fa	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  000fd	75 53		 jne	 SHORT $LN4@CutDirFile
$LN3@CutDirFile:

; 2746 : 	{
; 2747 : 		strDesPath = strDesPath.Left(strDesPath.GetLength() - 1);

  000ff	8d 4d 0c	 lea	 ecx, DWORD PTR _strDesPath$[ebp]
  00102	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  00108	83 e8 01	 sub	 eax, 1
  0010b	50		 push	 eax
  0010c	8d 8d 84 fd ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00112	51		 push	 ecx
  00113	8d 4d 0c	 lea	 ecx, DWORD PTR _strDesPath$[ebp]
  00116	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Left@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z
  0011c	89 85 78 fd ff
	ff		 mov	 DWORD PTR tv295[ebp], eax
  00122	8b 95 78 fd ff
	ff		 mov	 edx, DWORD PTR tv295[ebp]
  00128	89 95 70 fd ff
	ff		 mov	 DWORD PTR tv255[ebp], edx
  0012e	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00132	8b 85 70 fd ff
	ff		 mov	 eax, DWORD PTR tv255[ebp]
  00138	50		 push	 eax
  00139	8d 4d 0c	 lea	 ecx, DWORD PTR _strDesPath$[ebp]
  0013c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  00142	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00146	8d 8d 84 fd ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0014c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$LN4@CutDirFile:

; 2748 : 	}
; 2749 : 
; 2750 : 	char szFrom[MAX_PATH] = { 0 };

  00152	c6 85 d0 fd ff
	ff 00		 mov	 BYTE PTR _szFrom$[ebp], 0
  00159	68 03 01 00 00	 push	 259			; 00000103H
  0015e	6a 00		 push	 0
  00160	8d 8d d1 fd ff
	ff		 lea	 ecx, DWORD PTR _szFrom$[ebp+1]
  00166	51		 push	 ecx
  00167	e8 00 00 00 00	 call	 _memset
  0016c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2751 : 	char szTo[MAX_PATH] = { 0 };

  0016f	c6 85 d4 fe ff
	ff 00		 mov	 BYTE PTR _szTo$[ebp], 0
  00176	68 03 01 00 00	 push	 259			; 00000103H
  0017b	6a 00		 push	 0
  0017d	8d 95 d5 fe ff
	ff		 lea	 edx, DWORD PTR _szTo$[ebp+1]
  00183	52		 push	 edx
  00184	e8 00 00 00 00	 call	 _memset
  00189	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2752 : 	strSrcPath = strSrcPath + "\\*.*";

  0018c	68 00 00 00 00	 push	 OFFSET $SG4294957180
  00191	8d 45 08	 lea	 eax, DWORD PTR _strSrcPath$[ebp]
  00194	50		 push	 eax
  00195	8d 8d 8c fd ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  0019b	51		 push	 ecx
  0019c	e8 00 00 00 00	 call	 ??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@PBD@Z ; ATL::operator+
  001a1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a4	89 85 a0 fd ff
	ff		 mov	 DWORD PTR tv296[ebp], eax
  001aa	8b 95 a0 fd ff
	ff		 mov	 edx, DWORD PTR tv296[ebp]
  001b0	89 95 74 fd ff
	ff		 mov	 DWORD PTR tv289[ebp], edx
  001b6	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  001ba	8b 85 74 fd ff
	ff		 mov	 eax, DWORD PTR tv289[ebp]
  001c0	50		 push	 eax
  001c1	8d 4d 08	 lea	 ecx, DWORD PTR _strSrcPath$[ebp]
  001c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  001ca	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001ce	8d 8d 8c fd ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  001d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 2753 : 	strcpy_s(szFrom, (LPCTSTR)strSrcPath);

  001da	8d 4d 08	 lea	 ecx, DWORD PTR _strSrcPath$[ebp]
  001dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  001e3	50		 push	 eax
  001e4	8d 8d d0 fd ff
	ff		 lea	 ecx, DWORD PTR _szFrom$[ebp]
  001ea	51		 push	 ecx
  001eb	e8 00 00 00 00	 call	 ??$strcpy_s@$0BAE@@@YAHAAY0BAE@DPBD@Z ; strcpy_s<260>
  001f0	83 c4 08	 add	 esp, 8

; 2754 : 	szFrom[strSrcPath.GetLength() + 1] = '\0';

  001f3	8d 4d 08	 lea	 ecx, DWORD PTR _strSrcPath$[ebp]
  001f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  001fc	83 c0 01	 add	 eax, 1
  001ff	89 85 a8 fd ff
	ff		 mov	 DWORD PTR $T8[ebp], eax
  00205	81 bd a8 fd ff
	ff 04 01 00 00	 cmp	 DWORD PTR $T8[ebp], 260	; 00000104H
  0020f	73 02		 jae	 SHORT $LN9@CutDirFile
  00211	eb 05		 jmp	 SHORT $LN10@CutDirFile
$LN9@CutDirFile:
  00213	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN10@CutDirFile:
  00218	8b 95 a8 fd ff
	ff		 mov	 edx, DWORD PTR $T8[ebp]
  0021e	c6 84 15 d0 fd
	ff ff 00	 mov	 BYTE PTR _szFrom$[ebp+edx], 0

; 2755 : 	//strDes=strDes+"\\*.*";
; 2756 : 	strcpy_s(szTo, (LPCTSTR)strDesPath);

  00226	8d 4d 0c	 lea	 ecx, DWORD PTR _strDesPath$[ebp]
  00229	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0022f	50		 push	 eax
  00230	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szTo$[ebp]
  00236	50		 push	 eax
  00237	e8 00 00 00 00	 call	 ??$strcpy_s@$0BAE@@@YAHAAY0BAE@DPBD@Z ; strcpy_s<260>
  0023c	83 c4 08	 add	 esp, 8

; 2757 : 	szTo[strDesPath.GetLength() + 1] = '\0';

  0023f	8d 4d 0c	 lea	 ecx, DWORD PTR _strDesPath$[ebp]
  00242	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  00248	83 c0 01	 add	 eax, 1
  0024b	89 85 a4 fd ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
  00251	81 bd a4 fd ff
	ff 04 01 00 00	 cmp	 DWORD PTR $T7[ebp], 260	; 00000104H
  0025b	73 02		 jae	 SHORT $LN11@CutDirFile
  0025d	eb 05		 jmp	 SHORT $LN12@CutDirFile
$LN11@CutDirFile:
  0025f	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN12@CutDirFile:
  00264	8b 8d a4 fd ff
	ff		 mov	 ecx, DWORD PTR $T7[ebp]
  0026a	c6 84 0d d4 fe
	ff ff 00	 mov	 BYTE PTR _szTo$[ebp+ecx], 0

; 2758 : 	int nOk = 2000;

  00272	c7 85 ac fd ff
	ff d0 07 00 00	 mov	 DWORD PTR _nOk$[ebp], 2000 ; 000007d0H

; 2759 : 	char strTitle[] = "正在拷贝文件,请稍候..."; //进度条标题

  0027c	b9 05 00 00 00	 mov	 ecx, 5
  00281	be 00 00 00 00	 mov	 esi, OFFSET $SG4294957179
  00286	8d 7d d8	 lea	 edi, DWORD PTR _strTitle$[ebp]
  00289	f3 a5		 rep movsd
  0028b	66 a5		 movsw
  0028d	a4		 movsb

; 2760 : 	SHFILEOPSTRUCT FileOp;
; 2761 : 	const char* From = szFrom;

  0028e	8d 95 d0 fd ff
	ff		 lea	 edx, DWORD PTR _szFrom$[ebp]
  00294	89 95 7c fd ff
	ff		 mov	 DWORD PTR _From$[ebp], edx

; 2762 : 	const char* To = szTo;

  0029a	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _szTo$[ebp]
  002a0	89 85 9c fd ff
	ff		 mov	 DWORD PTR _To$[ebp], eax

; 2763 : 	//FileOp.hwnd = this->m_hWnd;
; 2764 : 	FileOp.hwnd = NULL;

  002a6	c7 85 b0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _FileOp$[ebp], 0

; 2765 : 	FileOp.wFunc = FO_MOVE; //执行文件剪切

  002b0	c7 85 b4 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _FileOp$[ebp+4], 1

; 2766 : 	FileOp.pFrom = From;

  002ba	8b 8d 7c fd ff
	ff		 mov	 ecx, DWORD PTR _From$[ebp]
  002c0	89 8d b8 fd ff
	ff		 mov	 DWORD PTR _FileOp$[ebp+8], ecx

; 2767 : 	FileOp.pTo = To;

  002c6	8b 95 9c fd ff
	ff		 mov	 edx, DWORD PTR _To$[ebp]
  002cc	89 95 bc fd ff
	ff		 mov	 DWORD PTR _FileOp$[ebp+12], edx

; 2768 : 	FileOp.fFlags = FOF_ALLOWUNDO | FOF_NOCONFIRMATION;

  002d2	b8 50 00 00 00	 mov	 eax, 80			; 00000050H
  002d7	66 89 85 c0 fd
	ff ff		 mov	 WORD PTR _FileOp$[ebp+16], ax

; 2769 : 	FileOp.hNameMappings = NULL;

  002de	c7 85 c6 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _FileOp$[ebp+22], 0

; 2770 : 	FileOp.lpszProgressTitle = strTitle;

  002e8	8d 4d d8	 lea	 ecx, DWORD PTR _strTitle$[ebp]
  002eb	89 8d ca fd ff
	ff		 mov	 DWORD PTR _FileOp$[ebp+26], ecx

; 2771 : 	nOk = SHFileOperation(&FileOp);

  002f1	8d 95 b0 fd ff
	ff		 lea	 edx, DWORD PTR _FileOp$[ebp]
  002f7	52		 push	 edx
  002f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SHFileOperationA@4
  002fe	89 85 ac fd ff
	ff		 mov	 DWORD PTR _nOk$[ebp], eax

; 2772 : 	if (FileOp.fAnyOperationsAborted) //防止出现低配置光驱BUG

  00304	83 bd c2 fd ff
	ff 00		 cmp	 DWORD PTR _FileOp$[ebp+18], 0
  0030b	74 0a		 je	 SHORT $LN2@CutDirFile

; 2773 : 	{
; 2774 : 		nOk = 1;

  0030d	c7 85 ac fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _nOk$[ebp], 1
$LN2@CutDirFile:

; 2775 : 	}
; 2776 : 	if (nOk == 1)

  00317	83 bd ac fd ff
	ff 01		 cmp	 DWORD PTR _nOk$[ebp], 1
  0031e	75 2f		 jne	 SHORT $LN1@CutDirFile

; 2777 : 	{
; 2778 : 		return false;

  00320	c7 85 98 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T6[ebp], 0
  0032a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0032e	8d 4d 08	 lea	 ecx, DWORD PTR _strSrcPath$[ebp]
  00331	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00337	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0033e	8d 4d 0c	 lea	 ecx, DWORD PTR _strDesPath$[ebp]
  00341	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00347	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR $T6[ebp]
  0034d	eb 38		 jmp	 SHORT $LN8@CutDirFile
$LN1@CutDirFile:

; 2779 : 	}
; 2780 : 	Sleep(200);

  0034f	68 c8 00 00 00	 push	 200			; 000000c8H
  00354	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 2781 : 	return true;

  0035a	c7 85 90 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR $T5[ebp], 1
  00364	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00368	8d 4d 08	 lea	 ecx, DWORD PTR _strSrcPath$[ebp]
  0036b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00371	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00378	8d 4d 0c	 lea	 ecx, DWORD PTR _strDesPath$[ebp]
  0037b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00381	8b 85 90 fd ff
	ff		 mov	 eax, DWORD PTR $T5[ebp]
$LN8@CutDirFile:

; 2782 : }

  00387	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0038a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00391	59		 pop	 ecx
  00392	5f		 pop	 edi
  00393	5e		 pop	 esi
  00394	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00397	33 cd		 xor	 ecx, ebp
  00399	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0039e	8b e5		 mov	 esp, ebp
  003a0	5d		 pop	 ebp
  003a1	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CutDirFileAPI@@YAHV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z$0:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR _strDesPath$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?CutDirFileAPI@@YAHV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z$1:
  00009	8d 4d 08	 lea	 ecx, DWORD PTR _strSrcPath$[ebp]
  0000c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?CutDirFileAPI@@YAHV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z$2:
  00012	8d 8d 80 fd ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00018	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?CutDirFileAPI@@YAHV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z$3:
  0001e	8d 8d 84 fd ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00024	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?CutDirFileAPI@@YAHV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z$4:
  0002a	8d 8d 8c fd ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00030	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?CutDirFileAPI@@YAHV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z:
  00036	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003d	8b 8a 70 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-656]
  00043	33 c8		 xor	 ecx, eax
  00045	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0004d	33 c8		 xor	 ecx, eax
  0004f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00054	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CutDirFileAPI@@YAHV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z
  00059	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CutDirFileAPI@@YAHV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z ENDP ; CutDirFileAPI
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?SaveToPeripherals@CEndoScopeMFCDlg@@AAEXXZ
_TEXT	SEGMENT
tv245 = -724						; size = 4
$T2 = -720						; size = 4
tv248 = -716						; size = 4
$T3 = -712						; size = 4
tv243 = -708						; size = 4
$T4 = -704						; size = 4
tv137 = -700						; size = 4
tv239 = -696						; size = 4
tv134 = -692						; size = 4
tv241 = -688						; size = 4
tv249 = -684						; size = 4
$T5 = -680						; size = 4
$T6 = -676						; size = 4
tv68 = -672						; size = 4
_this$ = -668						; size = 4
_login_dlg$7 = -664					; size = 640
_strFileDir$8 = -24					; size = 4
_strPeri$9 = -20					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?SaveToPeripherals@CEndoScopeMFCDlg@@AAEXXZ PROC	; CEndoScopeMFCDlg::SaveToPeripherals, COMDAT
; _this$ = ecx

; 2785 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SaveToPeripherals@CEndoScopeMFCDlg@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c8 02 00
	00		 sub	 esp, 712		; 000002c8H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 8d 64 fd ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 2786 : 	if (g_bIsUpan)

  00031	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_bIsUpan@@3HA, 0 ; g_bIsUpan
  00038	0f 84 af 02 00
	00		 je	 $LN6@SaveToPeri

; 2787 : 	{
; 2788 : 		Login login_dlg;

  0003e	6a 01		 push	 1
  00040	8d 8d 68 fd ff
	ff		 lea	 ecx, DWORD PTR _login_dlg$7[ebp]
  00046	e8 00 00 00 00	 call	 ?__autoclassinit@Login@@QAEXI@Z
  0004b	6a 00		 push	 0
  0004d	8d 8d 68 fd ff
	ff		 lea	 ecx, DWORD PTR _login_dlg$7[ebp]
  00053	e8 00 00 00 00	 call	 ??0Login@@QAE@PAVCWnd@@@Z ; Login::Login
  00058	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2789 : 		if (login_dlg.DoModal() == IDOK)

  0005f	8d 8d 68 fd ff
	ff		 lea	 ecx, DWORD PTR _login_dlg$7[ebp]
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?DoModal@CDialog@@UAEHXZ
  0006b	83 f8 01	 cmp	 eax, 1
  0006e	0f 85 65 02 00
	00		 jne	 $LN5@SaveToPeri

; 2790 : 		{
; 2791 : 			//g_bCopyFileToFlashDisk = true;
; 2792 : 			//判断是否正在录像
; 2793 : 			if (g_bVideo)

  00074	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_bVideo@@3HA, 0 ; g_bVideo
  0007b	74 57		 je	 SHORT $LN4@SaveToPeri

; 2794 : 			{
; 2795 : 				m_bwritevideo = false;

  0007d	8b 85 64 fd ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00083	c6 80 ac 01 00
	00 00		 mov	 BYTE PTR [eax+428], 0

; 2796 : 				m_bstartsave = false;

  0008a	8b 8d 64 fd ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00090	c6 81 ad 01 00
	00 00		 mov	 BYTE PTR [ecx+429], 0

; 2797 : 				//m_dwcap.StopWriteVideo();
; 2798 : 				g_pPLC->StopVideo();

  00097	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0009d	e8 00 00 00 00	 call	 ?StopVideo@CPLC@@QAEHXZ	; CPLC::StopVideo

; 2799 : 				g_bVideo = FALSE;

  000a2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_bVideo@@3HA, 0 ; g_bVideo

; 2800 : 				GetDlgItem(IDC_RECORD_INFO_STATIC)->SetWindowText(_T("录制完成"));

  000ac	68 00 00 00 00	 push	 OFFSET $SG4294957178
  000b1	68 0b 04 00 00	 push	 1035			; 0000040bH
  000b6	8b 8d 64 fd ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  000bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  000c2	8b c8		 mov	 ecx, eax
  000c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 2801 : 				bSaveVideoStart = FALSE;

  000ca	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _bSaveVideoStart, 0
$LN4@SaveToPeri:

; 2802 : 				//m_bstartsave = false;
; 2803 : 			}
; 2804 : 			//存储
; 2805 : 			g_pPLC->NowSave();

  000d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  000da	e8 00 00 00 00	 call	 ?NowSave@CPLC@@QAEHXZ	; CPLC::NowSave

; 2806 : 			GetDlgItem(IDC_STORAGE_INFO_STATIC)->SetWindowText(_T("正在存储"));

  000df	68 00 00 00 00	 push	 OFFSET $SG4294957177
  000e4	68 09 04 00 00	 push	 1033			; 00000409H
  000e9	8b 8d 64 fd ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  000ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  000f5	8b c8		 mov	 ecx, eax
  000f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 2807 : 			CString strPeri, strFileDir;

  000fd	8d 4d ec	 lea	 ecx, DWORD PTR _strPeri$9[ebp]
  00100	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00106	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0010a	8d 4d e8	 lea	 ecx, DWORD PTR _strFileDir$8[ebp]
  0010d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00113	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 2808 : 			strFileDir = g_strSaveDir;

  00117	68 00 00 00 00	 push	 OFFSET ?g_strSaveDir@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@A ; g_strSaveDir
  0011c	8d 4d e8	 lea	 ecx, DWORD PTR _strFileDir$8[ebp]
  0011f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z

; 2809 : 			strPeri = g_decDriver + _T(":\\");

  00125	68 00 00 00 00	 push	 OFFSET $SG4294957176
  0012a	68 00 00 00 00	 push	 OFFSET ?g_decDriver@@3V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@A ; g_decDriver
  0012f	8d 95 58 fd ff
	ff		 lea	 edx, DWORD PTR $T5[ebp]
  00135	52		 push	 edx
  00136	e8 00 00 00 00	 call	 ??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@PBD@Z ; ATL::operator+
  0013b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0013e	89 85 44 fd ff
	ff		 mov	 DWORD PTR tv137[ebp], eax
  00144	8b 85 44 fd ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  0014a	89 85 48 fd ff
	ff		 mov	 DWORD PTR tv239[ebp], eax
  00150	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00154	8b 8d 48 fd ff
	ff		 mov	 ecx, DWORD PTR tv239[ebp]
  0015a	51		 push	 ecx
  0015b	8d 4d ec	 lea	 ecx, DWORD PTR _strPeri$9[ebp]
  0015e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  00164	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00168	8d 8d 58 fd ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  0016e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 2810 : 			//BOOL b = CopyFile(strFileDir,strPeri,FALSE); 
; 2811 : 			strPeri += _T("内窥镜数据");

  00174	68 00 00 00 00	 push	 OFFSET $SG4294957175
  00179	8d 4d ec	 lea	 ecx, DWORD PTR _strPeri$9[ebp]
  0017c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Y?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 2812 : 			//U盘中没有内窥镜文件夹需要建立一个
; 2813 : 			if (!PathIsDirectory(strPeri))

  00182	8d 4d ec	 lea	 ecx, DWORD PTR _strPeri$9[ebp]
  00185	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0018b	50		 push	 eax
  0018c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PathIsDirectoryA@4
  00192	85 c0		 test	 eax, eax
  00194	75 12		 jne	 SHORT $LN3@SaveToPeri

; 2814 : 			{
; 2815 : 				::CreateDirectory(strPeri, NULL);//创建目录,已有的话不影响  

  00196	6a 00		 push	 0
  00198	8d 4d ec	 lea	 ecx, DWORD PTR _strPeri$9[ebp]
  0019b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  001a1	50		 push	 eax
  001a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateDirectoryA@8
$LN3@SaveToPeri:

; 2816 : 			}
; 2817 : 			m_sdatapath = strPeri+ _T("\\")+m_sdatapath;

  001a8	68 00 00 00 00	 push	 OFFSET $SG4294957174
  001ad	8d 55 ec	 lea	 edx, DWORD PTR _strPeri$9[ebp]
  001b0	52		 push	 edx
  001b1	8d 85 5c fd ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  001b7	50		 push	 eax
  001b8	e8 00 00 00 00	 call	 ??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@PBD@Z ; ATL::operator+
  001bd	83 c4 0c	 add	 esp, 12			; 0000000cH
  001c0	89 85 4c fd ff
	ff		 mov	 DWORD PTR tv134[ebp], eax
  001c6	8b 8d 4c fd ff
	ff		 mov	 ecx, DWORD PTR tv134[ebp]
  001cc	89 8d 50 fd ff
	ff		 mov	 DWORD PTR tv241[ebp], ecx
  001d2	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  001d6	8b 95 64 fd ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  001dc	81 c2 a8 01 00
	00		 add	 edx, 424		; 000001a8H
  001e2	52		 push	 edx
  001e3	8b 85 50 fd ff
	ff		 mov	 eax, DWORD PTR tv241[ebp]
  001e9	50		 push	 eax
  001ea	8d 8d 40 fd ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  001f0	51		 push	 ecx
  001f1	e8 00 00 00 00	 call	 ??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@0@Z ; ATL::operator+
  001f6	83 c4 0c	 add	 esp, 12			; 0000000cH
  001f9	89 85 60 fd ff
	ff		 mov	 DWORD PTR tv68[ebp], eax
  001ff	8b 95 60 fd ff
	ff		 mov	 edx, DWORD PTR tv68[ebp]
  00205	89 95 3c fd ff
	ff		 mov	 DWORD PTR tv243[ebp], edx
  0020b	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  0020f	8b 85 3c fd ff
	ff		 mov	 eax, DWORD PTR tv243[ebp]
  00215	50		 push	 eax
  00216	8b 8d 64 fd ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0021c	81 c1 a8 01 00
	00		 add	 ecx, 424		; 000001a8H
  00222	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  00228	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0022c	8d 8d 40 fd ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00232	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00238	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0023c	8d 8d 5c fd ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00242	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ

; 2818 : 			CutDirFileAPI(strFileDir, strPeri);

  00248	51		 push	 ecx
  00249	8b cc		 mov	 ecx, esp
  0024b	89 a5 38 fd ff
	ff		 mov	 DWORD PTR $T3[ebp], esp
  00251	8d 55 ec	 lea	 edx, DWORD PTR _strPeri$9[ebp]
  00254	52		 push	 edx
  00255	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  0025b	89 85 54 fd ff
	ff		 mov	 DWORD PTR tv249[ebp], eax
  00261	8b 85 54 fd ff
	ff		 mov	 eax, DWORD PTR tv249[ebp]
  00267	89 85 2c fd ff
	ff		 mov	 DWORD PTR tv245[ebp], eax
  0026d	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00271	51		 push	 ecx
  00272	8b cc		 mov	 ecx, esp
  00274	89 a5 30 fd ff
	ff		 mov	 DWORD PTR $T2[ebp], esp
  0027a	8d 55 e8	 lea	 edx, DWORD PTR _strFileDir$8[ebp]
  0027d	52		 push	 edx
  0027e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00284	89 85 34 fd ff
	ff		 mov	 DWORD PTR tv248[ebp], eax
  0028a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0028e	e8 00 00 00 00	 call	 ?CutDirFileAPI@@YAHV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@0@Z ; CutDirFileAPI
  00293	83 c4 08	 add	 esp, 8

; 2819 : 			g_pPLC->OverSave();

  00296	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pPLC@@3PAVCPLC@@A ; g_pPLC
  0029c	e8 00 00 00 00	 call	 ?OverSave@CPLC@@QAEHXZ	; CPLC::OverSave

; 2820 : 			GetDlgItem(IDC_STORAGE_INFO_STATIC)->SetWindowText(_T("存储完成"));

  002a1	68 00 00 00 00	 push	 OFFSET $SG4294957173
  002a6	68 09 04 00 00	 push	 1033			; 00000409H
  002ab	8b 8d 64 fd ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  002b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetDlgItem@CWnd@@QBEPAV1@H@Z
  002b7	8b c8		 mov	 ecx, eax
  002b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?SetWindowTextA@CWnd@@QAEXPBD@Z

; 2821 : 
; 2822 : 			//g_bCopyFileToFlashDisk = false;
; 2823 : 
; 2824 : 		}

  002bf	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  002c3	8d 4d e8	 lea	 ecx, DWORD PTR _strFileDir$8[ebp]
  002c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  002cc	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  002d0	8d 4d ec	 lea	 ecx, DWORD PTR _strPeri$9[ebp]
  002d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
$LN5@SaveToPeri:

; 2825 : 	}

  002d9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002e0	8d 8d 68 fd ff
	ff		 lea	 ecx, DWORD PTR _login_dlg$7[ebp]
  002e6	e8 00 00 00 00	 call	 ??1Login@@UAE@XZ	; Login::~Login

; 2826 : 	else

  002eb	eb 40		 jmp	 SHORT $LN7@SaveToPeri
$LN6@SaveToPeri:

; 2827 : 	{
; 2828 : 		//g_pPLC->NotLink();
; 2829 : 		//AfxMessageBox("请检查移动存储设备是否正确插入！");
; 2830 : 
; 2831 : 		if (dlgBoxInfo.bHaveDlg)

  002ed	8b 85 64 fd ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  002f3	83 b8 b0 03 00
	00 00		 cmp	 DWORD PTR [eax+944], 0
  002fa	74 11		 je	 SHORT $LN1@SaveToPeri

; 2832 : 		{
; 2833 : 			dlgBoxInfo.OnClose();

  002fc	8b 8d 64 fd ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00302	81 c1 f0 02 00
	00		 add	 ecx, 752		; 000002f0H
  00308	e8 00 00 00 00	 call	 ?OnClose@CAboutDlg@@QAEXXZ ; CAboutDlg::OnClose
$LN1@SaveToPeri:

; 2834 : 		}
; 2835 : 		dlgBoxInfo.DoModal();

  0030d	8b 8d 64 fd ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00313	81 c1 f0 02 00
	00		 add	 ecx, 752		; 000002f0H
  00319	8b 95 64 fd ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  0031f	8b 82 f0 02 00
	00		 mov	 eax, DWORD PTR [edx+752]
  00325	8b 90 78 01 00
	00		 mov	 edx, DWORD PTR [eax+376]
  0032b	ff d2		 call	 edx
$LN7@SaveToPeri:

; 2836 : 	}
; 2837 : }

  0032d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00330	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00337	59		 pop	 ecx
  00338	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0033b	33 cd		 xor	 ecx, ebp
  0033d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00342	8b e5		 mov	 esp, ebp
  00344	5d		 pop	 ebp
  00345	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SaveToPeripherals@CEndoScopeMFCDlg@@AAEXXZ$0:
  00000	8d 8d 68 fd ff
	ff		 lea	 ecx, DWORD PTR _login_dlg$7[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1Login@@UAE@XZ	; Login::~Login
__unwindfunclet$?SaveToPeripherals@CEndoScopeMFCDlg@@AAEXXZ$1:
  0000b	8d 4d ec	 lea	 ecx, DWORD PTR _strPeri$9[ebp]
  0000e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?SaveToPeripherals@CEndoScopeMFCDlg@@AAEXXZ$2:
  00014	8d 4d e8	 lea	 ecx, DWORD PTR _strFileDir$8[ebp]
  00017	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?SaveToPeripherals@CEndoScopeMFCDlg@@AAEXXZ$3:
  0001d	8d 8d 58 fd ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00023	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?SaveToPeripherals@CEndoScopeMFCDlg@@AAEXXZ$4:
  00029	8d 8d 5c fd ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  0002f	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?SaveToPeripherals@CEndoScopeMFCDlg@@AAEXXZ$5:
  00035	8d 8d 40 fd ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  0003b	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?SaveToPeripherals@CEndoScopeMFCDlg@@AAEXXZ$6:
  00041	8b 8d 38 fd ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  00047	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?SaveToPeripherals@CEndoScopeMFCDlg@@AAEXXZ:
  0004d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00051	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00054	8b 8a 34 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-716]
  0005a	33 c8		 xor	 ecx, eax
  0005c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00061	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00064	33 c8		 xor	 ecx, eax
  00066	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SaveToPeripherals@CEndoScopeMFCDlg@@AAEXXZ
  00070	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SaveToPeripherals@CEndoScopeMFCDlg@@AAEXXZ ENDP	; CEndoScopeMFCDlg::SaveToPeripherals
; Function compile flags: /Odtp
;	COMDAT ?__autoclassinit@Login@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_$initVBases$ = 8					; size = 4
?__autoclassinit@Login@@QAEXI@Z PROC			; Login::__autoclassinit, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?__autoclassinit@CDialogEx@@QAEXI@Z
  00011	6a 01		 push	 1
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	81 c1 b8 00 00
	00		 add	 ecx, 184		; 000000b8H
  0001c	e8 00 00 00 00	 call	 ?__autoclassinit@CEdit@@QAEXI@Z
  00021	6a 01		 push	 1
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	81 c1 90 01 00
	00		 add	 ecx, 400		; 00000190H
  0002c	e8 00 00 00 00	 call	 ?__autoclassinit@CEdit@@QAEXI@Z
  00031	6a 01		 push	 1
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	81 c1 04 02 00
	00		 add	 ecx, 516		; 00000204H
  0003c	e8 00 00 00 00	 call	 ?__autoclassinit@CStatic@@QAEXI@Z
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
?__autoclassinit@Login@@QAEXI@Z ENDP			; Login::__autoclassinit
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?__autoclassinit@CEdit@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_$initVBases$ = 8					; size = 4
?__autoclassinit@CEdit@@QAEXI@Z PROC			; CEdit::__autoclassinit, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?__autoclassinit@CWnd@@QAEXI@Z
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?__autoclassinit@CEdit@@QAEXI@Z ENDP			; CEdit::__autoclassinit
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?OnBnClickedOk@CAboutDlg@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnBnClickedOk@CAboutDlg@@QAEXXZ PROC			; CAboutDlg::OnBnClickedOk, COMDAT
; _this$ = ecx

; 2840 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2841 : 	// TODO: 在此添加控件通知处理程序代码
; 2842 : 	CDialogEx::OnOK();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?OnOK@CDialog@@MAEXXZ

; 2843 : }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?OnBnClickedOk@CAboutDlg@@QAEXXZ ENDP			; CAboutDlg::OnBnClickedOk
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?AdjWhiteBalance@CEndoScopeMFCDlg@@QAEXPAEHHPAPAE@Z
_TEXT	SEGMENT
_oldpos$ = -20						; size = 4
_pos$ = -16						; size = 4
_this$ = -12						; size = 4
_t_dst$ = -8						; size = 4
_i$1 = -4						; size = 4
_src$ = 8						; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
_dst$ = 20						; size = 4
?AdjWhiteBalance@CEndoScopeMFCDlg@@QAEXPAEHHPAPAE@Z PROC ; CEndoScopeMFCDlg::AdjWhiteBalance, COMDAT
; _this$ = ecx

; 2850 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 2851 : 	
; 2852 : 	int pos = 0,oldpos=0;

  00009	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _pos$[ebp], 0
  00010	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _oldpos$[ebp], 0

; 2853 : 	unsigned char *t_dst = *dst;

  00017	8b 45 14	 mov	 eax, DWORD PTR _dst$[ebp]
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	89 4d f8	 mov	 DWORD PTR _t_dst$[ebp], ecx

; 2854 : 	for(int i =1;i<2764800;i=i+3)

  0001f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 1
  00026	eb 09		 jmp	 SHORT $LN3@AdjWhiteBa
$LN2@AdjWhiteBa:
  00028	8b 55 fc	 mov	 edx, DWORD PTR _i$1[ebp]
  0002b	83 c2 03	 add	 edx, 3
  0002e	89 55 fc	 mov	 DWORD PTR _i$1[ebp], edx
$LN3@AdjWhiteBa:
  00031	81 7d fc 00 30
	2a 00		 cmp	 DWORD PTR _i$1[ebp], 2764800 ; 002a3000H
  00038	7d 2c		 jge	 SHORT $LN1@AdjWhiteBa

; 2855 : 	{
; 2856 : 		src[i] = (int)(src[i] * m_lamda[i]);

  0003a	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  0003d	03 45 fc	 add	 eax, DWORD PTR _i$1[ebp]
  00040	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00043	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00047	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0004a	8b 82 b4 03 00
	00		 mov	 eax, DWORD PTR [edx+948]
  00050	8b 4d fc	 mov	 ecx, DWORD PTR _i$1[ebp]
  00053	f2 0f 59 04 c8	 mulsd	 xmm0, QWORD PTR [eax+ecx*8]
  00058	f2 0f 2c d0	 cvttsd2si edx, xmm0
  0005c	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  0005f	03 45 fc	 add	 eax, DWORD PTR _i$1[ebp]
  00062	88 10		 mov	 BYTE PTR [eax], dl

; 2857 : 	}

  00064	eb c2		 jmp	 SHORT $LN2@AdjWhiteBa
$LN1@AdjWhiteBa:

; 2858 : 	memset(t_dst,0,IMGSIZE);

  00066	68 00 30 2a 00	 push	 2764800			; 002a3000H
  0006b	6a 00		 push	 0
  0006d	8b 4d f8	 mov	 ecx, DWORD PTR _t_dst$[ebp]
  00070	51		 push	 ecx
  00071	e8 00 00 00 00	 call	 _memset
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2859 : 	memcpy(t_dst,src,IMGSIZE);

  00079	68 00 30 2a 00	 push	 2764800			; 002a3000H
  0007e	8b 55 08	 mov	 edx, DWORD PTR _src$[ebp]
  00081	52		 push	 edx
  00082	8b 45 f8	 mov	 eax, DWORD PTR _t_dst$[ebp]
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 _memcpy
  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2860 : }

  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 10 00	 ret	 16			; 00000010H
?AdjWhiteBalance@CEndoScopeMFCDlg@@QAEXPAEHHPAPAE@Z ENDP ; CEndoScopeMFCDlg::AdjWhiteBalance
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?CalWhilteLamda@CEndoScopeMFCDlg@@QAEXPAE@Z
_TEXT	SEGMENT
$T2 = -420						; size = 16
$T3 = -404						; size = 16
$T4 = -388						; size = 4
$T5 = -384						; size = 4
_b$6 = -380						; size = 8
$T7 = -372						; size = 4
tv351 = -368						; size = 4
_g$8 = -364						; size = 8
_r$9 = -356						; size = 8
$T10 = -348						; size = 4
_temp$11 = -344						; size = 4
_i$12 = -340						; size = 4
_i$13 = -336						; size = 4
_j$14 = -332						; size = 4
_pos5$15 = -328						; size = 4
_j$16 = -324						; size = 4
_i$17 = -320						; size = 4
_data$18 = -316						; size = 4
_val$19 = -312						; size = 4
_pos$20 = -308						; size = 4
_this$ = -304						; size = 4
_file$21 = -300						; size = 168
_src$22 = -132						; size = 56
_dst$23 = -76						; size = 56
_slamda$24 = -20					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_buf$ = 8						; size = 4
?CalWhilteLamda@CEndoScopeMFCDlg@@QAEXPAE@Z PROC	; CEndoScopeMFCDlg::CalWhilteLamda, COMDAT
; _this$ = ecx

; 2862 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CalWhilteLamda@CEndoScopeMFCDlg@@QAEXPAE@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 98 01 00
	00		 sub	 esp, 408		; 00000198H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 8d d0 fe ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 2863 : 	//int pos = 0;
; 2864 : 	imglistforwhite.push_back(buf);

  00031	8d 45 08	 lea	 eax, DWORD PTR _buf$[ebp]
  00034	50		 push	 eax
  00035	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	81 c1 94 04 00
	00		 add	 ecx, 1172		; 00000494H
  00041	e8 00 00 00 00	 call	 ?push_back@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXABQAE@Z ; std::list<unsigned char *,std::allocator<unsigned char *> >::push_back

; 2865 : 
; 2866 : 	if(imglistforwhite.size()==10)

  00046	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	81 c1 94 04 00
	00		 add	 ecx, 1172		; 00000494H
  00052	e8 00 00 00 00	 call	 ?size@?$list@PAEV?$allocator@PAE@std@@@std@@QBEIXZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::size
  00057	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  0005a	0f 85 1e 07 00
	00		 jne	 $LN19@CalWhilteL

; 2867 : 	{
; 2868 : 		ofstream file("lamda.txt",'w');

  00060	6a 01		 push	 1
  00062	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _file$21[ebp]
  00068	e8 00 00 00 00	 call	 ?__autoclassinit@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXI@Z
  0006d	6a 01		 push	 1
  0006f	6a 40		 push	 64			; 00000040H
  00071	6a 77		 push	 119			; 00000077H
  00073	68 00 00 00 00	 push	 OFFSET $SG4294957172
  00078	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _file$21[ebp]
  0007e	e8 00 00 00 00	 call	 ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
  00083	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2869 : 		CString slamda;

  0008a	8d 4d ec	 lea	 ecx, DWORD PTR _slamda$24[ebp]
  0008d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00093	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2870 : 		if (file.fail())

  00097	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR _file$21[ebp]
  0009d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000a0	8d 8c 15 d4 fe
	ff ff		 lea	 ecx, DWORD PTR _file$21[ebp+edx]
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fail@ios_base@std@@QBE_NXZ
  000ad	0f b6 c0	 movzx	 eax, al
  000b0	85 c0		 test	 eax, eax
  000b2	74 24		 je	 SHORT $LN18@CalWhilteL

; 2871 : 		{
; 2872 : 			return;

  000b4	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000b8	8d 4d ec	 lea	 ecx, DWORD PTR _slamda$24[ebp]
  000bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000c1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c8	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _file$21[ebp]
  000ce	e8 00 00 00 00	 call	 ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
  000d3	e9 a6 06 00 00	 jmp	 $LN20@CalWhilteL
$LN18@CalWhilteL:

; 2873 : 		}
; 2874 : 		fill(m_lamda, m_lamda +IMGSIZE,1);//初始化为1

  000d8	c7 85 8c fe ff
	ff 01 00 00 00	 mov	 DWORD PTR $T7[ebp], 1
  000e2	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  000e8	51		 push	 ecx
  000e9	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  000ef	8b 82 b4 03 00
	00		 mov	 eax, DWORD PTR [edx+948]
  000f5	05 00 80 51 01	 add	 eax, 22118400		; 01518000H
  000fa	50		 push	 eax
  000fb	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00101	8b 91 b4 03 00
	00		 mov	 edx, DWORD PTR [ecx+948]
  00107	52		 push	 edx
  00108	e8 00 00 00 00	 call	 ??$fill@PANH@std@@YAXPAN0ABH@Z ; std::fill<double *,int>
  0010d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2875 : 		BYTE* data=(BYTE*)malloc(IMGSIZE);

  00110	68 00 30 2a 00	 push	 2764800			; 002a3000H
  00115	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0011b	83 c4 04	 add	 esp, 4
  0011e	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _data$18[ebp], eax

; 2876 : 
; 2877 : 		memset(data, 0, IMGSIZE);

  00124	68 00 30 2a 00	 push	 2764800			; 002a3000H
  00129	6a 00		 push	 0
  0012b	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _data$18[ebp]
  00131	50		 push	 eax
  00132	e8 00 00 00 00	 call	 _memset
  00137	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2878 : 		double* val=(double*)malloc(IMGSIZE*sizeof(double));

  0013a	68 00 80 51 01	 push	 22118400		; 01518000H
  0013f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00145	83 c4 04	 add	 esp, 4
  00148	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _val$19[ebp], eax

; 2879 : 		memset(val,0,IMGSIZE*sizeof(double));

  0014e	68 00 80 51 01	 push	 22118400		; 01518000H
  00153	6a 00		 push	 0
  00155	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _val$19[ebp]
  0015b	51		 push	 ecx
  0015c	e8 00 00 00 00	 call	 _memset
  00161	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2880 : 		int pos=0;

  00164	c7 85 cc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _pos$20[ebp], 0

; 2881 : 		//求和
; 2882 : 		for (int i = 0; i < imglistforwhite.size(); i++)

  0016e	c7 85 ac fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$12[ebp], 0
  00178	eb 0f		 jmp	 SHORT $LN17@CalWhilteL
$LN16@CalWhilteL:
  0017a	8b 95 ac fe ff
	ff		 mov	 edx, DWORD PTR _i$12[ebp]
  00180	83 c2 01	 add	 edx, 1
  00183	89 95 ac fe ff
	ff		 mov	 DWORD PTR _i$12[ebp], edx
$LN17@CalWhilteL:
  00189	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0018f	81 c1 94 04 00
	00		 add	 ecx, 1172		; 00000494H
  00195	e8 00 00 00 00	 call	 ?size@?$list@PAEV?$allocator@PAE@std@@@std@@QBEIXZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::size
  0019a	39 85 ac fe ff
	ff		 cmp	 DWORD PTR _i$12[ebp], eax
  001a0	0f 83 cd 01 00
	00		 jae	 $LN15@CalWhilteL

; 2883 : 		{
; 2884 : 			BYTE* temp=imglistforwhite.front();

  001a6	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  001ac	81 c1 94 04 00
	00		 add	 ecx, 1172		; 00000494H
  001b2	e8 00 00 00 00	 call	 ?front@?$list@PAEV?$allocator@PAE@std@@@std@@QAEAAPAEXZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::front
  001b7	8b 00		 mov	 eax, DWORD PTR [eax]
  001b9	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _temp$11[ebp], eax

; 2885 : 			imglistforwhite.pop_front();

  001bf	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  001c5	81 c1 94 04 00
	00		 add	 ecx, 1172		; 00000494H
  001cb	e8 00 00 00 00	 call	 ?pop_front@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXXZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::pop_front

; 2886 : 			for (int i = 0;i < IMGHEIGHT;++i)

  001d0	c7 85 b0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$13[ebp], 0
  001da	eb 0f		 jmp	 SHORT $LN14@CalWhilteL
$LN13@CalWhilteL:
  001dc	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR _i$13[ebp]
  001e2	83 c1 01	 add	 ecx, 1
  001e5	89 8d b0 fe ff
	ff		 mov	 DWORD PTR _i$13[ebp], ecx
$LN14@CalWhilteL:
  001eb	81 bd b0 fe ff
	ff d0 02 00 00	 cmp	 DWORD PTR _i$13[ebp], 720 ; 000002d0H
  001f5	0f 8d 73 01 00
	00		 jge	 $LN12@CalWhilteL

; 2887 : 			{
; 2888 : 				for (int j = 0;j < IMGWIDTH;++j)

  001fb	c7 85 b4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$14[ebp], 0
  00205	eb 0f		 jmp	 SHORT $LN11@CalWhilteL
$LN10@CalWhilteL:
  00207	8b 95 b4 fe ff
	ff		 mov	 edx, DWORD PTR _j$14[ebp]
  0020d	83 c2 01	 add	 edx, 1
  00210	89 95 b4 fe ff
	ff		 mov	 DWORD PTR _j$14[ebp], edx
$LN11@CalWhilteL:
  00216	81 bd b4 fe ff
	ff 00 05 00 00	 cmp	 DWORD PTR _j$14[ebp], 1280 ; 00000500H
  00220	0f 8d 43 01 00
	00		 jge	 $LN9@CalWhilteL

; 2889 : 				{
; 2890 : 					pos=i * IMGWIDTH * 3 + j * 3;

  00226	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _i$13[ebp]
  0022c	69 c0 00 05 00
	00		 imul	 eax, 1280		; 00000500H
  00232	6b c0 03	 imul	 eax, 3
  00235	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR _j$14[ebp]
  0023b	6b c9 03	 imul	 ecx, 3
  0023e	03 c1		 add	 eax, ecx
  00240	89 85 cc fe ff
	ff		 mov	 DWORD PTR _pos$20[ebp], eax

; 2891 : 					val[pos]+=temp[pos]/10.;

  00246	8b 95 a8 fe ff
	ff		 mov	 edx, DWORD PTR _temp$11[ebp]
  0024c	03 95 cc fe ff
	ff		 add	 edx, DWORD PTR _pos$20[ebp]
  00252	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00255	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  00259	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4024000000000000
  00261	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _pos$20[ebp]
  00267	8b 95 c8 fe ff
	ff		 mov	 edx, DWORD PTR _val$19[ebp]
  0026d	f2 0f 58 04 ca	 addsd	 xmm0, QWORD PTR [edx+ecx*8]
  00272	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _pos$20[ebp]
  00278	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _val$19[ebp]
  0027e	f2 0f 11 04 c1	 movsd	 QWORD PTR [ecx+eax*8], xmm0

; 2892 : 					data[pos]=(int)val[pos];

  00283	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR _pos$20[ebp]
  00289	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _val$19[ebp]
  0028f	f2 0f 2c 0c d0	 cvttsd2si ecx, QWORD PTR [eax+edx*8]
  00294	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR _data$18[ebp]
  0029a	03 95 cc fe ff
	ff		 add	 edx, DWORD PTR _pos$20[ebp]
  002a0	88 0a		 mov	 BYTE PTR [edx], cl

; 2893 : 					val[pos+1]+=temp[pos+1]/10.;

  002a2	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _temp$11[ebp]
  002a8	03 85 cc fe ff
	ff		 add	 eax, DWORD PTR _pos$20[ebp]
  002ae	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  002b2	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  002b6	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4024000000000000
  002be	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR _pos$20[ebp]
  002c4	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _val$19[ebp]
  002ca	f2 0f 58 44 d0
	08		 addsd	 xmm0, QWORD PTR [eax+edx*8+8]
  002d0	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _pos$20[ebp]
  002d6	8b 95 c8 fe ff
	ff		 mov	 edx, DWORD PTR _val$19[ebp]
  002dc	f2 0f 11 44 ca
	08		 movsd	 QWORD PTR [edx+ecx*8+8], xmm0

; 2894 : 					data[pos+1]=(int)val[pos+1];

  002e2	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _pos$20[ebp]
  002e8	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _val$19[ebp]
  002ee	f2 0f 2c 54 c1
	08		 cvttsd2si edx, QWORD PTR [ecx+eax*8+8]
  002f4	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _data$18[ebp]
  002fa	03 85 cc fe ff
	ff		 add	 eax, DWORD PTR _pos$20[ebp]
  00300	88 50 01	 mov	 BYTE PTR [eax+1], dl

; 2895 : 					val[pos+2]+=temp[pos+2]/10.;

  00303	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR _temp$11[ebp]
  00309	03 8d cc fe ff
	ff		 add	 ecx, DWORD PTR _pos$20[ebp]
  0030f	0f b6 51 02	 movzx	 edx, BYTE PTR [ecx+2]
  00313	f2 0f 2a c2	 cvtsi2sd xmm0, edx
  00317	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4024000000000000
  0031f	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _pos$20[ebp]
  00325	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _val$19[ebp]
  0032b	f2 0f 58 44 c1
	10		 addsd	 xmm0, QWORD PTR [ecx+eax*8+16]
  00331	8b 95 cc fe ff
	ff		 mov	 edx, DWORD PTR _pos$20[ebp]
  00337	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _val$19[ebp]
  0033d	f2 0f 11 44 d0
	10		 movsd	 QWORD PTR [eax+edx*8+16], xmm0

; 2896 : 					data[pos+2]=(int)val[pos+2];

  00343	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR _pos$20[ebp]
  00349	8b 95 c8 fe ff
	ff		 mov	 edx, DWORD PTR _val$19[ebp]
  0034f	f2 0f 2c 44 ca
	10		 cvttsd2si eax, QWORD PTR [edx+ecx*8+16]
  00355	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _data$18[ebp]
  0035b	03 8d cc fe ff
	ff		 add	 ecx, DWORD PTR _pos$20[ebp]
  00361	88 41 02	 mov	 BYTE PTR [ecx+2], al

; 2897 : 				}

  00364	e9 9e fe ff ff	 jmp	 $LN10@CalWhilteL
$LN9@CalWhilteL:

; 2898 : 			}

  00369	e9 6e fe ff ff	 jmp	 $LN13@CalWhilteL
$LN12@CalWhilteL:

; 2899 : 		}

  0036e	e9 07 fe ff ff	 jmp	 $LN16@CalWhilteL
$LN15@CalWhilteL:

; 2900 : 		//for (int i = 0;i < IMGHEIGHT;++i)
; 2901 : 		//{
; 2902 : 		//	for (int j = 0;j < IMGWIDTH;++j)
; 2903 : 		//	{
; 2904 : 		//		int pos=i * IMGWIDTH * 3 + j * 3;
; 2905 : 		//		data[pos]=(int)val[pos];
; 2906 : 		//		data[pos+1]=(int)val[pos+1];
; 2907 : 		//		data[pos+2]=(int)val[pos+2];
; 2908 : 		//	}
; 2909 : 
; 2910 : 		//}
; 2911 : 		//计算系数
; 2912 : 		Mat src=Mat(IMGHEIGHT,IMGWIDTH,CV_8UC3,data);

  00373	6a 01		 push	 1
  00375	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _src$22[ebp]
  0037b	e8 00 00 00 00	 call	 ?__autoclassinit@Mat@cv@@QAEXI@Z
  00380	6a 00		 push	 0
  00382	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR _data$18[ebp]
  00388	52		 push	 edx
  00389	6a 10		 push	 16			; 00000010H
  0038b	68 00 05 00 00	 push	 1280			; 00000500H
  00390	68 d0 02 00 00	 push	 720			; 000002d0H
  00395	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _src$22[ebp]
  0039b	e8 00 00 00 00	 call	 ??0Mat@cv@@QAE@HHHPAXI@Z ; cv::Mat::Mat
  003a0	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 2913 : 		Mat dst;

  003a4	6a 01		 push	 1
  003a6	8d 4d b4	 lea	 ecx, DWORD PTR _dst$23[ebp]
  003a9	e8 00 00 00 00	 call	 ?__autoclassinit@Mat@cv@@QAEXI@Z
  003ae	8d 4d b4	 lea	 ecx, DWORD PTR _dst$23[ebp]
  003b1	e8 00 00 00 00	 call	 ??0Mat@cv@@QAE@XZ	; cv::Mat::Mat
  003b6	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 2914 : 		int pos5;
; 2915 : 		double b=255, g=255, r=255;

  003ba	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@406fe00000000000
  003c2	f2 0f 11 85 84
	fe ff ff	 movsd	 QWORD PTR _b$6[ebp], xmm0
  003ca	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@406fe00000000000
  003d2	f2 0f 11 85 94
	fe ff ff	 movsd	 QWORD PTR _g$8[ebp], xmm0
  003da	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@406fe00000000000
  003e2	f2 0f 11 85 9c
	fe ff ff	 movsd	 QWORD PTR _r$9[ebp], xmm0

; 2916 : 		blur(src,dst,Size(3,3));

  003ea	8d 45 b4	 lea	 eax, DWORD PTR _dst$23[ebp]
  003ed	50		 push	 eax
  003ee	8d 8d 5c fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  003f4	e8 00 00 00 00	 call	 ??0_OutputArray@cv@@QAE@AAVMat@1@@Z ; cv::_OutputArray::_OutputArray
  003f9	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  003fd	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _src$22[ebp]
  00403	51		 push	 ecx
  00404	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0040a	e8 00 00 00 00	 call	 ??0_InputArray@cv@@QAE@ABVMat@1@@Z ; cv::_InputArray::_InputArray
  0040f	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00413	6a 04		 push	 4
  00415	83 ec 08	 sub	 esp, 8
  00418	8b cc		 mov	 ecx, esp
  0041a	89 a5 80 fe ff
	ff		 mov	 DWORD PTR $T5[ebp], esp
  00420	6a ff		 push	 -1
  00422	6a ff		 push	 -1
  00424	e8 00 00 00 00	 call	 ??0?$Point_@H@cv@@QAE@HH@Z ; cv::Point_<int>::Point_<int>
  00429	83 ec 08	 sub	 esp, 8
  0042c	8b cc		 mov	 ecx, esp
  0042e	89 a5 7c fe ff
	ff		 mov	 DWORD PTR $T4[ebp], esp
  00434	6a 03		 push	 3
  00436	6a 03		 push	 3
  00438	e8 00 00 00 00	 call	 ??0?$Size_@H@cv@@QAE@HH@Z ; cv::Size_<int>::Size_<int>
  0043d	8d 95 5c fe ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  00443	52		 push	 edx
  00444	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0044a	50		 push	 eax
  0044b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?blur@cv@@YAXABV_InputArray@1@ABV_OutputArray@1@V?$Size_@H@1@V?$Point_@H@1@H@Z
  00451	83 c4 1c	 add	 esp, 28			; 0000001cH
  00454	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00458	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0045e	e8 00 00 00 00	 call	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
  00463	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00467	8d 8d 5c fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0046d	e8 00 00 00 00	 call	 ??1_OutputArray@cv@@QAE@XZ

; 2917 : 		for (int i = 0;i < IMGHEIGHT;++i)

  00472	c7 85 c0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$17[ebp], 0
  0047c	eb 0f		 jmp	 SHORT $LN8@CalWhilteL
$LN7@CalWhilteL:
  0047e	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _i$17[ebp]
  00484	83 c1 01	 add	 ecx, 1
  00487	89 8d c0 fe ff
	ff		 mov	 DWORD PTR _i$17[ebp], ecx
$LN8@CalWhilteL:
  0048d	81 bd c0 fe ff
	ff d0 02 00 00	 cmp	 DWORD PTR _i$17[ebp], 720 ; 000002d0H
  00497	0f 8d 2a 02 00
	00		 jge	 $LN6@CalWhilteL

; 2918 : 		{
; 2919 : 			for (int j = 0;j < IMGWIDTH;++j)

  0049d	c7 85 bc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$16[ebp], 0
  004a7	eb 0f		 jmp	 SHORT $LN5@CalWhilteL
$LN4@CalWhilteL:
  004a9	8b 95 bc fe ff
	ff		 mov	 edx, DWORD PTR _j$16[ebp]
  004af	83 c2 01	 add	 edx, 1
  004b2	89 95 bc fe ff
	ff		 mov	 DWORD PTR _j$16[ebp], edx
$LN5@CalWhilteL:
  004b8	81 bd bc fe ff
	ff 00 05 00 00	 cmp	 DWORD PTR _j$16[ebp], 1280 ; 00000500H
  004c2	0f 8d fa 01 00
	00		 jge	 $LN3@CalWhilteL

; 2920 : 			{
; 2921 : 
; 2922 : 				pos5=i * IMGWIDTH * 3 + j * 3;

  004c8	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _i$17[ebp]
  004ce	69 c0 00 05 00
	00		 imul	 eax, 1280		; 00000500H
  004d4	6b c0 03	 imul	 eax, 3
  004d7	8b 8d bc fe ff
	ff		 mov	 ecx, DWORD PTR _j$16[ebp]
  004dd	6b c9 03	 imul	 ecx, 3
  004e0	03 c1		 add	 eax, ecx
  004e2	89 85 b8 fe ff
	ff		 mov	 DWORD PTR _pos5$15[ebp], eax

; 2923 : 				b=dst.at<Vec3b>(i,j)[0];

  004e8	6a 00		 push	 0
  004ea	8b 95 bc fe ff
	ff		 mov	 edx, DWORD PTR _j$16[ebp]
  004f0	52		 push	 edx
  004f1	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _i$17[ebp]
  004f7	50		 push	 eax
  004f8	8d 4d b4	 lea	 ecx, DWORD PTR _dst$23[ebp]
  004fb	e8 00 00 00 00	 call	 ??$at@V?$Vec@E$02@cv@@@Mat@cv@@QAEAAV?$Vec@E$02@1@HH@Z ; cv::Mat::at<cv::Vec<unsigned char,3> >
  00500	8b c8		 mov	 ecx, eax
  00502	e8 00 00 00 00	 call	 ??A?$Vec@E$02@cv@@QAEAAEH@Z ; cv::Vec<unsigned char,3>::operator[]
  00507	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0050a	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  0050e	f2 0f 11 85 84
	fe ff ff	 movsd	 QWORD PTR _b$6[ebp], xmm0

; 2924 : 				g=dst.at<Vec3b>(i,j)[1];

  00516	6a 01		 push	 1
  00518	8b 95 bc fe ff
	ff		 mov	 edx, DWORD PTR _j$16[ebp]
  0051e	52		 push	 edx
  0051f	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _i$17[ebp]
  00525	50		 push	 eax
  00526	8d 4d b4	 lea	 ecx, DWORD PTR _dst$23[ebp]
  00529	e8 00 00 00 00	 call	 ??$at@V?$Vec@E$02@cv@@@Mat@cv@@QAEAAV?$Vec@E$02@1@HH@Z ; cv::Mat::at<cv::Vec<unsigned char,3> >
  0052e	8b c8		 mov	 ecx, eax
  00530	e8 00 00 00 00	 call	 ??A?$Vec@E$02@cv@@QAEAAEH@Z ; cv::Vec<unsigned char,3>::operator[]
  00535	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00538	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  0053c	f2 0f 11 85 94
	fe ff ff	 movsd	 QWORD PTR _g$8[ebp], xmm0

; 2925 : 				r=dst.at<Vec3b>(i,j)[2];

  00544	6a 02		 push	 2
  00546	8b 95 bc fe ff
	ff		 mov	 edx, DWORD PTR _j$16[ebp]
  0054c	52		 push	 edx
  0054d	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _i$17[ebp]
  00553	50		 push	 eax
  00554	8d 4d b4	 lea	 ecx, DWORD PTR _dst$23[ebp]
  00557	e8 00 00 00 00	 call	 ??$at@V?$Vec@E$02@cv@@@Mat@cv@@QAEAAV?$Vec@E$02@1@HH@Z ; cv::Mat::at<cv::Vec<unsigned char,3> >
  0055c	8b c8		 mov	 ecx, eax
  0055e	e8 00 00 00 00	 call	 ??A?$Vec@E$02@cv@@QAEAAEH@Z ; cv::Vec<unsigned char,3>::operator[]
  00563	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00566	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  0056a	f2 0f 11 85 9c
	fe ff ff	 movsd	 QWORD PTR _r$9[ebp], xmm0

; 2926 : 				//if (0 == b)
; 2927 : 				//	b = 1;
; 2928 : 				if (0 == g)

  00572	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@0000000000000000
  0057a	66 0f 2e 85 94
	fe ff ff	 ucomisd xmm0, QWORD PTR _g$8[ebp]
  00582	9f		 lahf
  00583	f6 c4 44	 test	 ah, 68			; 00000044H
  00586	7a 10		 jp	 SHORT $LN2@CalWhilteL

; 2929 : 					g= 1;

  00588	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00590	f2 0f 11 85 94
	fe ff ff	 movsd	 QWORD PTR _g$8[ebp], xmm0
$LN2@CalWhilteL:

; 2930 : 				if(0==r)

  00598	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@0000000000000000
  005a0	66 0f 2e 85 9c
	fe ff ff	 ucomisd xmm0, QWORD PTR _r$9[ebp]
  005a8	9f		 lahf
  005a9	f6 c4 44	 test	 ah, 68			; 00000044H
  005ac	7a 10		 jp	 SHORT $LN1@CalWhilteL

; 2931 : 					r=1;

  005ae	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  005b6	f2 0f 11 85 9c
	fe ff ff	 movsd	 QWORD PTR _r$9[ebp], xmm0
$LN1@CalWhilteL:

; 2932 : 				m_lamda[pos5] = 1.0;//(double)buf[pos + 1] / (double)buf[pos + 0];//Lamda_B=G/B

  005be	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  005c4	8b 82 b4 03 00
	00		 mov	 eax, DWORD PTR [edx+948]
  005ca	8b 8d b8 fe ff
	ff		 mov	 ecx, DWORD PTR _pos5$15[ebp]
  005d0	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  005d8	f2 0f 11 04 c8	 movsd	 QWORD PTR [eax+ecx*8], xmm0

; 2933 : 				m_lamda[pos5 + 1]= r/ g;//Lamda_G=R/G

  005dd	f2 0f 10 85 9c
	fe ff ff	 movsd	 xmm0, QWORD PTR _r$9[ebp]
  005e5	f2 0f 5e 85 94
	fe ff ff	 divsd	 xmm0, QWORD PTR _g$8[ebp]
  005ed	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  005f3	8b 82 b4 03 00
	00		 mov	 eax, DWORD PTR [edx+948]
  005f9	8b 8d b8 fe ff
	ff		 mov	 ecx, DWORD PTR _pos5$15[ebp]
  005ff	f2 0f 11 44 c8
	08		 movsd	 QWORD PTR [eax+ecx*8+8], xmm0

; 2934 : 				m_lamda[pos5 + 2] = 1.0;//(double)buf[pos + 1] / (double)buf[pos + 2];//Lamda_R=G/R

  00605	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  0060b	8b 82 b4 03 00
	00		 mov	 eax, DWORD PTR [edx+948]
  00611	8b 8d b8 fe ff
	ff		 mov	 ecx, DWORD PTR _pos5$15[ebp]
  00617	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0061f	f2 0f 11 44 c8
	10		 movsd	 QWORD PTR [eax+ecx*8+16], xmm0

; 2935 : 
; 2936 : 				slamda="";

  00625	68 00 00 00 00	 push	 OFFSET $SG4294957171
  0062a	8d 4d ec	 lea	 ecx, DWORD PTR _slamda$24[ebp]
  0062d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z

; 2937 : 				slamda.Format(_T("%4lf\n%.4lf\n%.4lf\n"),m_lamda[pos5 + 2],m_lamda[pos5 + 1],m_lamda[pos5]);

  00633	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00639	8b 82 b4 03 00
	00		 mov	 eax, DWORD PTR [edx+948]
  0063f	8b 8d b8 fe ff
	ff		 mov	 ecx, DWORD PTR _pos5$15[ebp]
  00645	83 ec 08	 sub	 esp, 8
  00648	f2 0f 10 04 c8	 movsd	 xmm0, QWORD PTR [eax+ecx*8]
  0064d	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00652	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00658	8b 82 b4 03 00
	00		 mov	 eax, DWORD PTR [edx+948]
  0065e	8b 8d b8 fe ff
	ff		 mov	 ecx, DWORD PTR _pos5$15[ebp]
  00664	83 ec 08	 sub	 esp, 8
  00667	f2 0f 10 44 c8
	08		 movsd	 xmm0, QWORD PTR [eax+ecx*8+8]
  0066d	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00672	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  00678	8b 82 b4 03 00
	00		 mov	 eax, DWORD PTR [edx+948]
  0067e	8b 8d b8 fe ff
	ff		 mov	 ecx, DWORD PTR _pos5$15[ebp]
  00684	83 ec 08	 sub	 esp, 8
  00687	f2 0f 10 44 c8
	10		 movsd	 xmm0, QWORD PTR [eax+ecx*8+16]
  0068d	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00692	68 00 00 00 00	 push	 OFFSET $SG4294957170
  00697	8d 55 ec	 lea	 edx, DWORD PTR _slamda$24[ebp]
  0069a	52		 push	 edx
  0069b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  006a1	83 c4 20	 add	 esp, 32			; 00000020H

; 2938 : 				file<<slamda;

  006a4	8d 4d ec	 lea	 ecx, DWORD PTR _slamda$24[ebp]
  006a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  006ad	50		 push	 eax
  006ae	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _file$21[ebp]
  006b4	50		 push	 eax
  006b5	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  006ba	83 c4 08	 add	 esp, 8

; 2939 : 			}

  006bd	e9 e7 fd ff ff	 jmp	 $LN4@CalWhilteL
$LN3@CalWhilteL:

; 2940 : 		}

  006c2	e9 b7 fd ff ff	 jmp	 $LN7@CalWhilteL
$LN6@CalWhilteL:

; 2941 : 		delete data;

  006c7	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _data$18[ebp]
  006cd	89 8d a4 fe ff
	ff		 mov	 DWORD PTR $T10[ebp], ecx
  006d3	8b 95 a4 fe ff
	ff		 mov	 edx, DWORD PTR $T10[ebp]
  006d9	52		 push	 edx
  006da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??3@YAXPAX@Z
  006e0	83 c4 04	 add	 esp, 4
  006e3	83 bd a4 fe ff
	ff 00		 cmp	 DWORD PTR $T10[ebp], 0
  006ea	75 0c		 jne	 SHORT $LN22@CalWhilteL
  006ec	c7 85 90 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv351[ebp], 0
  006f6	eb 16		 jmp	 SHORT $LN23@CalWhilteL
$LN22@CalWhilteL:
  006f8	c7 85 c4 fe ff
	ff 23 81 00 00	 mov	 DWORD PTR _data$18[ebp], 33059 ; 00008123H
  00702	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _data$18[ebp]
  00708	89 85 90 fe ff
	ff		 mov	 DWORD PTR tv351[ebp], eax
$LN23@CalWhilteL:

; 2942 : 		imglistforwhite.clear();

  0070e	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00714	81 c1 94 04 00
	00		 add	 ecx, 1172		; 00000494H
  0071a	e8 00 00 00 00	 call	 ?clear@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXXZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::clear

; 2943 : 		m_badjwhite = false;

  0071f	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00725	c6 81 b8 03 00
	00 00		 mov	 BYTE PTR [ecx+952], 0

; 2944 : 		file.close();

  0072c	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _file$21[ebp]
  00732	e8 00 00 00 00	 call	 ?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ofstream<char,std::char_traits<char> >::close

; 2945 : 		//提醒白平衡完成
; 2946 : 		m_bwhiteok = true;

  00737	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR _this$[ebp]
  0073d	c6 82 b9 03 00
	00 01		 mov	 BYTE PTR [edx+953], 1

; 2947 : 	}

  00744	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00748	8d 4d b4	 lea	 ecx, DWORD PTR _dst$23[ebp]
  0074b	e8 00 00 00 00	 call	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
  00750	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00754	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _src$22[ebp]
  0075a	e8 00 00 00 00	 call	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
  0075f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00763	8d 4d ec	 lea	 ecx, DWORD PTR _slamda$24[ebp]
  00766	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0076c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00773	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _file$21[ebp]
  00779	e8 00 00 00 00	 call	 ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
$LN19@CalWhilteL:
$LN20@CalWhilteL:

; 2948 : }

  0077e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00781	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00788	59		 pop	 ecx
  00789	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0078c	33 cd		 xor	 ecx, ebp
  0078e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00793	8b e5		 mov	 esp, ebp
  00795	5d		 pop	 ebp
  00796	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CalWhilteLamda@CEndoScopeMFCDlg@@QAEXPAE@Z$0:
  00000	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _file$21[ebp]
  00006	e9 00 00 00 00	 jmp	 ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
__unwindfunclet$?CalWhilteLamda@CEndoScopeMFCDlg@@QAEXPAE@Z$1:
  0000b	8d 4d ec	 lea	 ecx, DWORD PTR _slamda$24[ebp]
  0000e	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?CalWhilteLamda@CEndoScopeMFCDlg@@QAEXPAE@Z$2:
  00014	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR _src$22[ebp]
  0001a	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__unwindfunclet$?CalWhilteLamda@CEndoScopeMFCDlg@@QAEXPAE@Z$3:
  0001f	8d 4d b4	 lea	 ecx, DWORD PTR _dst$23[ebp]
  00022	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__unwindfunclet$?CalWhilteLamda@CEndoScopeMFCDlg@@QAEXPAE@Z$4:
  00027	8d 8d 5c fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0002d	e9 00 00 00 00	 jmp	 ??1_OutputArray@cv@@QAE@XZ
__unwindfunclet$?CalWhilteLamda@CEndoScopeMFCDlg@@QAEXPAE@Z$5:
  00032	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00038	e9 00 00 00 00	 jmp	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
__ehhandler$?CalWhilteLamda@CEndoScopeMFCDlg@@QAEXPAE@Z:
  0003d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00041	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00044	8b 8a 64 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-412]
  0004a	33 c8		 xor	 ecx, eax
  0004c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00051	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00054	33 c8		 xor	 ecx, eax
  00056	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CalWhilteLamda@CEndoScopeMFCDlg@@QAEXPAE@Z
  00060	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CalWhilteLamda@CEndoScopeMFCDlg@@QAEXPAE@Z ENDP	; CEndoScopeMFCDlg::CalWhilteLamda
; Function compile flags: /Odtp
;	COMDAT ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ofstream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 60	 add	 ecx, 96			; 00000060H
  0000d	e8 00 00 00 00	 call	 ??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 60	 add	 ecx, 96			; 00000060H
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ofstream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?__autoclassinit@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_$initVBases$ = 8					; size = 4
?__autoclassinit@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXI@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::__autoclassinit, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 01		 push	 1
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 04	 add	 ecx, 4
  0000f	e8 00 00 00 00	 call	 ?__autoclassinit@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEXI@Z
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?__autoclassinit@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXI@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::__autoclassinit
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?__autoclassinit@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_$initVBases$ = 8					; size = 4
?__autoclassinit@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEXI@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::__autoclassinit, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	c7 41 3c 00 00
	00 00		 mov	 DWORD PTR [ecx+60], 0
  0001b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001e	c7 42 40 00 00
	00 00		 mov	 DWORD PTR [edx+64], 0
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
?__autoclassinit@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEXI@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::__autoclassinit
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?IniWhilteLamda@CEndoScopeMFCDlg@@QAEXXZ
_TEXT	SEGMENT
$T2 = -236						; size = 4
_this$ = -232						; size = 4
_i$ = -228						; size = 4
_file$ = -224						; size = 184
_t_buf$3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?IniWhilteLamda@CEndoScopeMFCDlg@@QAEXXZ PROC		; CEndoScopeMFCDlg::IniWhilteLamda, COMDAT
; _this$ = ecx

; 2950 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?IniWhilteLamda@CEndoScopeMFCDlg@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 8d 18 ff ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 2951 : 	ifstream file("lamda.txt");

  00031	6a 01		 push	 1
  00033	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00039	e8 00 00 00 00	 call	 ?__autoclassinit@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXI@Z
  0003e	6a 01		 push	 1
  00040	6a 40		 push	 64			; 00000040H
  00042	6a 01		 push	 1
  00044	68 00 00 00 00	 push	 OFFSET $SG4294957169
  00049	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  0004f	e8 00 00 00 00	 call	 ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2952 : 	int i=0;

  0005b	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0

; 2953 : 	if (file.fail())

  00065	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _file$[ebp]
  0006b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006e	8d 8c 0d 20 ff
	ff ff		 lea	 ecx, DWORD PTR _file$[ebp+ecx]
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fail@ios_base@std@@QBE_NXZ
  0007b	0f b6 d0	 movzx	 edx, al
  0007e	85 d2		 test	 edx, edx
  00080	74 55		 je	 SHORT $LN4@IniWhilteL

; 2954 : 	{
; 2955 : 		fill(m_lamda, m_lamda +IMGSIZE,1);

  00082	c7 85 14 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR $T2[ebp], 1
  0008c	8d 85 14 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00092	50		 push	 eax
  00093	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00099	8b 91 b4 03 00
	00		 mov	 edx, DWORD PTR [ecx+948]
  0009f	81 c2 00 80 51
	01		 add	 edx, 22118400		; 01518000H
  000a5	52		 push	 edx
  000a6	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  000ac	8b 88 b4 03 00
	00		 mov	 ecx, DWORD PTR [eax+948]
  000b2	51		 push	 ecx
  000b3	e8 00 00 00 00	 call	 ??$fill@PANH@std@@YAXPAN0ABH@Z ; std::fill<double *,int>
  000b8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2956 : 		return;

  000bb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c2	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  000c8	e8 00 00 00 00	 call	 ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
  000cd	e9 bc 00 00 00	 jmp	 $LN5@IniWhilteL

; 2957 : 	}
; 2958 : 	else

  000d2	e9 a5 00 00 00	 jmp	 $LN3@IniWhilteL
$LN4@IniWhilteL:

; 2959 : 	{
; 2960 : 		string t_buf;

  000d7	8d 4d d8	 lea	 ecx, DWORD PTR _t_buf$3[ebp]
  000da	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000df	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
$LN2@IniWhilteL:

; 2961 : 		while(!file.eof())

  000e3	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR _file$[ebp]
  000e9	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000ec	8d 8c 05 20 ff
	ff ff		 lea	 ecx, DWORD PTR _file$[ebp+eax]
  000f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eof@ios_base@std@@QBE_NXZ
  000f9	0f b6 c8	 movzx	 ecx, al
  000fc	85 c9		 test	 ecx, ecx
  000fe	75 4b		 jne	 SHORT $LN1@IniWhilteL

; 2962 : 		{
; 2963 : 			getline(file,t_buf);

  00100	8d 55 d8	 lea	 edx, DWORD PTR _t_buf$3[ebp]
  00103	52		 push	 edx
  00104	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR _file$[ebp]
  0010a	50		 push	 eax
  0010b	e8 00 00 00 00	 call	 ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
  00110	83 c4 08	 add	 esp, 8

; 2964 : 			m_lamda[i]=atof(t_buf.c_str());

  00113	8d 4d d8	 lea	 ecx, DWORD PTR _t_buf$3[ebp]
  00116	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0011b	50		 push	 eax
  0011c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atof
  00122	83 c4 04	 add	 esp, 4
  00125	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0012b	8b 91 b4 03 00
	00		 mov	 edx, DWORD PTR [ecx+948]
  00131	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00137	dd 1c c2	 fstp	 QWORD PTR [edx+eax*8]

; 2965 : 			i++;

  0013a	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  00140	83 c1 01	 add	 ecx, 1
  00143	89 8d 1c ff ff
	ff		 mov	 DWORD PTR _i$[ebp], ecx

; 2966 : 		}

  00149	eb 98		 jmp	 SHORT $LN2@IniWhilteL
$LN1@IniWhilteL:

; 2967 : 		file.clear();

  0014b	6a 00		 push	 0
  0014d	6a 00		 push	 0
  0014f	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR _file$[ebp]
  00155	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00158	8d 8c 05 20 ff
	ff ff		 lea	 ecx, DWORD PTR _file$[ebp+eax]
  0015f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z

; 2968 : 		file.close();

  00165	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  0016b	e8 00 00 00 00	 call	 ?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ifstream<char,std::char_traits<char> >::close

; 2969 : 	}

  00170	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00174	8d 4d d8	 lea	 ecx, DWORD PTR _t_buf$3[ebp]
  00177	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN3@IniWhilteL:

; 2970 : 
; 2971 : }

  0017c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00183	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00189	e8 00 00 00 00	 call	 ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
$LN5@IniWhilteL:
  0018e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00191	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00198	59		 pop	 ecx
  00199	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0019c	33 cd		 xor	 ecx, ebp
  0019e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a3	8b e5		 mov	 esp, ebp
  001a5	5d		 pop	 ebp
  001a6	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?IniWhilteLamda@CEndoScopeMFCDlg@@QAEXXZ$0:
  00000	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _file$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
__unwindfunclet$?IniWhilteLamda@CEndoScopeMFCDlg@@QAEXXZ$1:
  0000b	8d 4d d8	 lea	 ecx, DWORD PTR _t_buf$3[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?IniWhilteLamda@CEndoScopeMFCDlg@@QAEXXZ:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 8a 1c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-228]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?IniWhilteLamda@CEndoScopeMFCDlg@@QAEXXZ
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?IniWhilteLamda@CEndoScopeMFCDlg@@QAEXXZ ENDP		; CEndoScopeMFCDlg::IniWhilteLamda
; Function compile flags: /Odtp
;	COMDAT ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ifstream<char,std::char_traits<char> >::`vbase destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 70	 add	 ecx, 112		; 00000070H
  0000d	e8 00 00 00 00	 call	 ??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 70	 add	 ecx, 112		; 00000070H
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ifstream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?__autoclassinit@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_$initVBases$ = 8					; size = 4
?__autoclassinit@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXI@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::__autoclassinit, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 01		 push	 1
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 10	 add	 ecx, 16			; 00000010H
  0000f	e8 00 00 00 00	 call	 ?__autoclassinit@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEXI@Z
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
?__autoclassinit@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXI@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::__autoclassinit
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\src\endoscopemfc\endoscopemfcdlg.cpp
;	COMDAT ?SetZoom@CEndoScopeMFCDlg@@QAEXN@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 8
?SetZoom@CEndoScopeMFCDlg@@QAEXN@Z PROC			; CEndoScopeMFCDlg::SetZoom, COMDAT
; _this$ = ecx

; 2974 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2975 : 	WaitForSingleObject(g_resizeevent, INFINITE);

  00007	6a ff		 push	 -1
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_resizeevent@@3VCEvent@@A ; g_resizeevent
  0000e	e8 00 00 00 00	 call	 ??BCSyncObject@@QBEPAXXZ ; CSyncObject::operator void *
  00013	50		 push	 eax
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WaitForSingleObject@8

; 2976 : 	m_dZoom=flag;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR _flag$[ebp]
  00022	f2 0f 11 80 78
	04 00 00	 movsd	 QWORD PTR [eax+1144], xmm0

; 2977 : 	roi_w = IMGWIDTH*flag;

  0002a	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4094000000000000
  00032	f2 0f 59 45 08	 mulsd	 xmm0, QWORD PTR _flag$[ebp]
  00037	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  0003b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	89 8a 64 04 00
	00		 mov	 DWORD PTR [edx+1124], ecx

; 2978 : 	roi_h = IMGHEIGHT*flag;

  00044	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4086800000000000
  0004c	f2 0f 59 45 08	 mulsd	 xmm0, QWORD PTR _flag$[ebp]
  00051	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	89 81 68 04 00
	00		 mov	 DWORD PTR [ecx+1128], eax

; 2979 : 	roi_c=(roi_w-IMGWIDTH)/2;

  0005e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00061	8b 82 64 04 00
	00		 mov	 eax, DWORD PTR [edx+1124]
  00067	2d 00 05 00 00	 sub	 eax, 1280		; 00000500H
  0006c	99		 cdq
  0006d	2b c2		 sub	 eax, edx
  0006f	d1 f8		 sar	 eax, 1
  00071	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	89 81 6c 04 00
	00		 mov	 DWORD PTR [ecx+1132], eax

; 2980 : 	roi_r=(roi_h-IMGHEIGHT)/2;

  0007a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0007d	8b 82 68 04 00
	00		 mov	 eax, DWORD PTR [edx+1128]
  00083	2d d0 02 00 00	 sub	 eax, 720		; 000002d0H
  00088	99		 cdq
  00089	2b c2		 sub	 eax, edx
  0008b	d1 f8		 sar	 eax, 1
  0008d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	89 81 70 04 00
	00		 mov	 DWORD PTR [ecx+1136], eax

; 2981 : 	SetEvent(g_resizeevent);

  00096	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_resizeevent@@3VCEvent@@A ; g_resizeevent
  0009b	e8 00 00 00 00	 call	 ??BCSyncObject@@QBEPAXXZ ; CSyncObject::operator void *
  000a0	50		 push	 eax
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetEvent@4

; 2982 : }

  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c2 08 00	 ret	 8
?SetZoom@CEndoScopeMFCDlg@@QAEXN@Z ENDP			; CEndoScopeMFCDlg::SetZoom
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\cstringt.h
;	COMDAT ??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@0@Z
_TEXT	SEGMENT
$T2 = -24						; size = 4
_strResult$ = -20					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_str1$ = 12						; size = 4
_str2$ = 16						; size = 4
??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@0@Z PROC ; ATL::operator+, COMDAT

; 2329 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 2330 : 		CStringT strResult( str1.GetManager() );

  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _str1$[ebp]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetManager@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEPAUIAtlStringMgr@2@XZ
  00038	50		 push	 eax
  00039	8d 4d ec	 lea	 ecx, DWORD PTR _strResult$[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2331 : 
; 2332 : 		Concatenate( strResult, str1, str1.GetLength(), str2, str2.GetLength() );

  00049	8b 4d 10	 mov	 ecx, DWORD PTR _str2$[ebp]
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  00052	50		 push	 eax
  00053	8b 4d 10	 mov	 ecx, DWORD PTR _str2$[ebp]
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0005c	50		 push	 eax
  0005d	8b 4d 0c	 mov	 ecx, DWORD PTR _str1$[ebp]
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  00066	50		 push	 eax
  00067	8b 4d 0c	 mov	 ecx, DWORD PTR _str1$[ebp]
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00070	50		 push	 eax
  00071	8d 45 ec	 lea	 eax, DWORD PTR _strResult$[ebp]
  00074	50		 push	 eax
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Concatenate@?$CSimpleStringT@D$00@ATL@@KAXAAV12@PBDH1H@Z
  0007b	83 c4 14	 add	 esp, 20			; 00000014H

; 2333 : 
; 2334 : 		return( strResult );

  0007e	8d 4d ec	 lea	 ecx, DWORD PTR _strResult$[ebp]
  00081	51		 push	 ecx
  00082	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  0008b	8b 55 e8	 mov	 edx, DWORD PTR $T2[ebp]
  0008e	83 ca 01	 or	 edx, 1
  00091	89 55 e8	 mov	 DWORD PTR $T2[ebp], edx
  00094	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009b	8d 4d ec	 lea	 ecx, DWORD PTR _strResult$[ebp]
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000a4	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2335 : 	}

  000a7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000aa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b1	59		 pop	 ecx
  000b2	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b5	33 cd		 xor	 ecx, ebp
  000b7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@0@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _strResult$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@0@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@0@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??HATL@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@0@ABV10@0@Z ENDP ; ATL::operator+
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv70 = -4						; size = 4
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty, COMDAT
; _this$ = ecx

; 1771 : 		{	// test if sequence is empty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1772 : 		return (this->_Mysize == 0);

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00010	75 09		 jne	 SHORT $LN3@empty
  00012	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv70[ebp], 1
  00019	eb 07		 jmp	 SHORT $LN4@empty
$LN3@empty:
  0001b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN4@empty:
  00022	8a 45 fc	 mov	 al, BYTE PTR tv70[ebp]

; 1773 : 		}

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 685  : 		{	// construct empty vector

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8d 4d ff	 lea	 ecx, DWORD PTR $T1[ebp]
  0000c	e8 00 00 00 00	 call	 ??0?$allocator@H@std@@QAE@XZ ; std::allocator<int>::allocator<int>
  00011	50		 push	 eax
  00012	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >

; 686  : 		}

  0001a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 899  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 900  : 		_Tidy();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy

; 901  : 		}

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$list@PAEV?$allocator@PAE@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
??0?$list@PAEV?$allocator@PAE@std@@@std@@QAE@XZ PROC	; std::list<unsigned char *,std::allocator<unsigned char *> >::list<unsigned char *,std::allocator<unsigned char *> >, COMDAT
; _this$ = ecx

; 899  : 		{	// construct empty list

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8d 4d ff	 lea	 ecx, DWORD PTR $T1[ebp]
  0000c	e8 00 00 00 00	 call	 ??0?$allocator@PAE@std@@QAE@XZ ; std::allocator<unsigned char *>::allocator<unsigned char *>
  00011	50		 push	 eax
  00012	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??0?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z ; std::_List_buy<unsigned char *,std::allocator<unsigned char *> >::_List_buy<unsigned char *,std::allocator<unsigned char *> >

; 900  : 		}

  0001a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0?$list@PAEV?$allocator@PAE@std@@@std@@QAE@XZ ENDP	; std::list<unsigned char *,std::allocator<unsigned char *> >::list<unsigned char *,std::allocator<unsigned char *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??1?$list@PAEV?$allocator@PAE@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$list@PAEV?$allocator@PAE@std@@@std@@QAE@XZ PROC	; std::list<unsigned char *,std::allocator<unsigned char *> >::~list<unsigned char *,std::allocator<unsigned char *> >, COMDAT
; _this$ = ecx

; 1091 : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1092 : 		_Tidy();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXXZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::_Tidy

; 1093 : 		}

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ??1?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAE@XZ
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??1?$list@PAEV?$allocator@PAE@std@@@std@@QAE@XZ ENDP	; std::list<unsigned char *,std::allocator<unsigned char *> >::~list<unsigned char *,std::allocator<unsigned char *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?size@?$list@PAEV?$allocator@PAE@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$list@PAEV?$allocator@PAE@std@@@std@@QBEIXZ PROC	; std::list<unsigned char *,std::allocator<unsigned char *> >::size, COMDAT
; _this$ = ecx

; 1236 : 		{	// return length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1237 : 		return (this->_Mysize);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1238 : 		}

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?size@?$list@PAEV?$allocator@PAE@std@@@std@@QBEIXZ ENDP	; std::list<unsigned char *,std::allocator<unsigned char *> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?empty@?$list@PAEV?$allocator@PAE@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv70 = -4						; size = 4
?empty@?$list@PAEV?$allocator@PAE@std@@@std@@QBE_NXZ PROC ; std::list<unsigned char *,std::allocator<unsigned char *> >::empty, COMDAT
; _this$ = ecx

; 1246 : 		{	// test if sequence is empty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1247 : 		return (this->_Mysize == 0);

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00010	75 09		 jne	 SHORT $LN3@empty
  00012	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv70[ebp], 1
  00019	eb 07		 jmp	 SHORT $LN4@empty
$LN3@empty:
  0001b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN4@empty:
  00022	8a 45 fc	 mov	 al, BYTE PTR tv70[ebp]

; 1248 : 		}

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?empty@?$list@PAEV?$allocator@PAE@std@@@std@@QBE_NXZ ENDP ; std::list<unsigned char *,std::allocator<unsigned char *> >::empty
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?front@?$list@PAEV?$allocator@PAE@std@@@std@@QAEAAPAEXZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
?front@?$list@PAEV?$allocator@PAE@std@@@std@@QAEAAPAEXZ PROC ; std::list<unsigned char *,std::allocator<unsigned char *> >::front, COMDAT
; _this$ = ecx

; 1256 : 		{	// return first element of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1257 : 		return (*begin());

  00009	8d 45 f8	 lea	 eax, DWORD PTR $T1[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ?begin@?$list@PAEV?$allocator@PAE@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@2@XZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::begin
  00015	8b c8		 mov	 ecx, eax
  00017	e8 00 00 00 00	 call	 ??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QBEAAPAEXZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::operator*

; 1258 : 		}

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?front@?$list@PAEV?$allocator@PAE@std@@@std@@QAEAAPAEXZ ENDP ; std::list<unsigned char *,std::allocator<unsigned char *> >::front
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?pop_front@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -16						; size = 4
$T2 = -12						; size = 4
$T3 = -8						; size = 4
_this$ = -4						; size = 4
?pop_front@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXXZ PROC ; std::list<unsigned char *,std::allocator<unsigned char *> >::pop_front, COMDAT
; _this$ = ecx

; 1281 : 		{	// erase element at beginning

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1282 : 		erase(begin());

  00009	8d 45 f4	 lea	 eax, DWORD PTR $T2[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ?begin@?$list@PAEV?$allocator@PAE@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@2@XZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::begin
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	89 4d f8	 mov	 DWORD PTR $T3[ebp], ecx
  0001a	8b 55 f8	 mov	 edx, DWORD PTR $T3[ebp]
  0001d	52		 push	 edx
  0001e	8d 45 f0	 lea	 eax, DWORD PTR $T1[ebp]
  00021	50		 push	 eax
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	e8 00 00 00 00	 call	 ?erase@?$list@PAEV?$allocator@PAE@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@2@@Z ; std::list<unsigned char *,std::allocator<unsigned char *> >::erase

; 1283 : 		}

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?pop_front@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXXZ ENDP ; std::list<unsigned char *,std::allocator<unsigned char *> >::pop_front
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?push_back@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXABQAE@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXABQAE@Z PROC ; std::list<unsigned char *,std::allocator<unsigned char *> >::push_back, COMDAT
; _this$ = ecx

; 1286 : 		{	// insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1287 : 		_Insert(_Unchecked_end(), _Val);

  00009	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ?_Unchecked_end@?$list@PAEV?$allocator@PAE@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@2@XZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::_Unchecked_end
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	89 4d f8	 mov	 DWORD PTR $T2[ebp], ecx
  0001a	8b 55 08	 mov	 edx, DWORD PTR __Val$[ebp]
  0001d	52		 push	 edx
  0001e	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  00021	50		 push	 eax
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	e8 00 00 00 00	 call	 ??$_Insert@ABQAE@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@U_Iterator_base0@2@@1@ABQAE@Z ; std::list<unsigned char *,std::allocator<unsigned char *> >::_Insert<unsigned char * const &>

; 1288 : 		}

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?push_back@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXABQAE@Z ENDP ; std::list<unsigned char *,std::allocator<unsigned char *> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?clear@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$1 = -12						; size = 4
__Pnode$ = -8						; size = 4
_this$ = -4						; size = 4
?clear@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXXZ PROC ; std::list<unsigned char *,std::allocator<unsigned char *> >::clear, COMDAT
; _this$ = ecx

; 1470 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1471 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1472 : 		this->_Orphan_all();
; 1473 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1474 : 
; 1475 : 		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead);

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 ?_Nextnode@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAU?$_List_node@PAEPAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Nextnode
  00014	83 c4 04	 add	 esp, 4
  00017	8b 10		 mov	 edx, DWORD PTR [eax]
  00019	89 55 f8	 mov	 DWORD PTR __Pnode$[ebp], edx

; 1476 : 		this->_Nextnode(this->_Myhead) = this->_Myhead;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ?_Nextnode@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAU?$_List_node@PAEPAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Nextnode
  00027	83 c4 04	 add	 esp, 4
  0002a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0002f	89 08		 mov	 DWORD PTR [eax], ecx

; 1477 : 		this->_Prevnode(this->_Myhead) = this->_Myhead;

  00031	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00034	8b 02		 mov	 eax, DWORD PTR [edx]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ?_Prevnode@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAU?$_List_node@PAEPAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Prevnode
  0003c	83 c4 04	 add	 esp, 4
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	8b 11		 mov	 edx, DWORD PTR [ecx]
  00044	89 10		 mov	 DWORD PTR [eax], edx

; 1478 : 		this->_Mysize = 0;

  00046	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1479 : 
; 1480 : 		for (_Nodeptr _Pnext; _Pnode != this->_Myhead; _Pnode = _Pnext)

  00050	eb 06		 jmp	 SHORT $LN3@clear
$LN2@clear:
  00052	8b 4d f4	 mov	 ecx, DWORD PTR __Pnext$1[ebp]
  00055	89 4d f8	 mov	 DWORD PTR __Pnode$[ebp], ecx
$LN3@clear:
  00058	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005b	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0005e	3b 02		 cmp	 eax, DWORD PTR [edx]
  00060	74 1f		 je	 SHORT $LN4@clear

; 1481 : 			{	// delete an element
; 1482 : 			_Pnext = this->_Nextnode(_Pnode);

  00062	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00065	51		 push	 ecx
  00066	e8 00 00 00 00	 call	 ?_Nextnode@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAU?$_List_node@PAEPAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Nextnode
  0006b	83 c4 04	 add	 esp, 4
  0006e	8b 10		 mov	 edx, DWORD PTR [eax]
  00070	89 55 f4	 mov	 DWORD PTR __Pnext$1[ebp], edx

; 1483 : 			this->_Freenode(_Pnode);

  00073	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00076	50		 push	 eax
  00077	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	e8 00 00 00 00	 call	 ?_Freenode@?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAEXPAU?$_List_node@PAEPAX@2@@Z ; std::_List_buy<unsigned char *,std::allocator<unsigned char *> >::_Freenode

; 1484 : 			}

  0007f	eb d1		 jmp	 SHORT $LN2@clear
$LN4@clear:

; 1485 : 		}

  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
?clear@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXXZ ENDP ; std::list<unsigned char *,std::allocator<unsigned char *> >::clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Filename$ = 8						; size = 4
__Mode$ = 12						; size = 4
__Prot$ = 16						; size = 4
_$initVBases$ = 20					; size = 4
??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 950  : 		{	// construct with named file and specified mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00028	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  0002f	83 7d 14 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  00033	74 25		 je	 SHORT $LN2@basic_ofst
  00035	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00038	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_8?$basic_ofstream@DU?$char_traits@D@std@@@std@@7B@
  0003e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	83 c1 60	 add	 ecx, 96			; 00000060H
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00051	8b 4d ec	 mov	 ecx, DWORD PTR $T2[ebp]
  00054	83 c9 01	 or	 ecx, 1
  00057	89 4d ec	 mov	 DWORD PTR $T2[ebp], ecx
$LN2@basic_ofst:
  0005a	6a 00		 push	 0
  0005c	6a 00		 push	 0
  0005e	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00061	83 c2 04	 add	 edx, 4
  00064	52		 push	 edx
  00065	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  0006e	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00075	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00078	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00080	c7 04 10 00 00
	00 00		 mov	 DWORD PTR [eax+edx], OFFSET ??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
  00087	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0008f	83 e8 60	 sub	 eax, 96			; 00000060H
  00092	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00095	8b 11		 mov	 edx, DWORD PTR [ecx]
  00097	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0009a	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0009d	89 44 0a fc	 mov	 DWORD PTR [edx+ecx-4], eax
  000a1	6a 00		 push	 0
  000a3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	83 c1 04	 add	 ecx, 4
  000a9	e8 00 00 00 00	 call	 ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
  000ae	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 951  : 		if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)

  000b2	8b 45 10	 mov	 eax, DWORD PTR __Prot$[ebp]
  000b5	50		 push	 eax
  000b6	8b 4d 0c	 mov	 ecx, DWORD PTR __Mode$[ebp]
  000b9	83 c9 02	 or	 ecx, 2
  000bc	51		 push	 ecx
  000bd	8b 55 08	 mov	 edx, DWORD PTR __Filename$[ebp]
  000c0	52		 push	 edx
  000c1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c4	83 c1 04	 add	 ecx, 4
  000c7	e8 00 00 00 00	 call	 ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
  000cc	85 c0		 test	 eax, eax
  000ce	75 17		 jne	 SHORT $LN3@basic_ofst

; 952  : 			_Myios::setstate(ios_base::failbit);

  000d0	6a 00		 push	 0
  000d2	6a 02		 push	 2
  000d4	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000d7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d9	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000dc	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000df	8b ca		 mov	 ecx, edx
  000e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
$LN3@basic_ofst:

; 953  : 		}

  000e7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ee	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000f1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fb	59		 pop	 ecx
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 10 00 00
	00		 je	 $LN6@basic_ofst
  0000c	83 65 ec fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 60	 add	 ecx, 96			; 00000060H
  00016	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
$LN6@basic_ofst:
  0001c	c3		 ret	 0
__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$1:
  0001d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	83 c1 08	 add	 ecx, 8
  00023	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ
__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$2:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 04	 add	 ecx, 4
  0002f	e9 00 00 00 00	 jmp	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
__ehhandler$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z:
  00034	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00038	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003b	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::basic_ofstream<char,std::char_traits<char> >
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 1080 : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 a0	 mov	 ecx, DWORD PTR [eax-96]
  0000d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	c7 44 10 a0 00
	00 00 00	 mov	 DWORD PTR [eax+edx-96], OFFSET ??_7?$basic_ofstream@DU?$char_traits@D@std@@@std@@6B@
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 51 a0	 mov	 edx, DWORD PTR [ecx-96]
  00021	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00024	83 e8 60	 sub	 eax, 96			; 00000060H
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	8b 51 a0	 mov	 edx, DWORD PTR [ecx-96]
  0002d	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00030	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00033	89 44 0a 9c	 mov	 DWORD PTR [edx+ecx-100], eax

; 1081 : 		}

  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	83 e9 5c	 sub	 ecx, 92			; 0000005cH
  0003d	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	83 e9 58	 sub	 ecx, 88			; 00000058H
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_ofstream<char,std::char_traits<char> >::~basic_ofstream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ofstream<char,std::char_traits<char> >::close, COMDAT
; _this$ = ecx

; 1118 : 		{	// close the C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1119 : 		if (_Filebuffer.close() == 0)

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 04	 add	 ecx, 4
  0000d	e8 00 00 00 00	 call	 ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
  00012	85 c0		 test	 eax, eax
  00014	75 17		 jne	 SHORT $LN2@close

; 1120 : 			_Myios::setstate(ios_base::failbit);

  00016	6a 00		 push	 0
  00018	6a 02		 push	 2
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00022	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00025	8b ca		 mov	 ecx, edx
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
$LN2@close:

; 1121 : 		}

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ofstream<char,std::char_traits<char> >::close
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 151  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@

; 152  : 		if (_Myfile != 0)

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  00017	74 08		 je	 SHORT $LN2@basic_file

; 153  : 			_Reset_back();	// revert from _Mychar buffer

  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
$LN2@basic_file:

; 154  : 		if (_Closef)

  00021	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00024	0f b6 42 4c	 movzx	 eax, BYTE PTR [edx+76]
  00028	85 c0		 test	 eax, eax
  0002a	74 08		 je	 SHORT $LN3@basic_file

; 155  : 			close();

  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
$LN3@basic_file:

; 156  : 		}

  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Lock, COMDAT
; _this$ = ecx

; 355  : 		{	// lock file instead of stream buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 356  : 		if (_Myfile)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  0000e	74 10		 je	 SHORT $LN2@Lock

; 357  : 			_CSTD _lock_file(_Myfile);

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00016	52		 push	 edx
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___lock_file
  0001d	83 c4 04	 add	 esp, 4
$LN2@Lock:

; 358  : 		}

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Lock
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock, COMDAT
; _this$ = ecx

; 361  : 		{	// unlock file instead of stream buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 362  : 		if (_Myfile)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  0000e	74 10		 je	 SHORT $LN2@Unlock

; 363  : 			_CSTD _unlock_file(_Myfile);

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00016	52		 push	 edx
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___unlock_file
  0001d	83 c4 04	 add	 esp, 4
$LN2@Unlock:

; 364  : 		}

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Unlock
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
$T2 = -116						; size = 4
$T3 = -112						; size = 4
$T4 = -108						; size = 4
$T5 = -104						; size = 4
__STRING_INC$6 = -100					; size = 4
$T7 = -96						; size = 4
$T8 = -92						; size = 4
$T9 = -88						; size = 4
$T10 = -84						; size = 4
$T11 = -80						; size = 4
$T12 = -76						; size = 4
tv147 = -72						; size = 4
tv218 = -68						; size = 4
tv180 = -64						; size = 4
__Count$13 = -60					; size = 4
_this$ = -56						; size = 4
__Dest$14 = -52						; size = 4
__Src$15 = -48						; size = 4
__Str$16 = -44						; size = 24
__Ch$17 = -18						; size = 1
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Meta$ = 8						; size = 4
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::overflow, COMDAT
; _this$ = ecx

; 369  : 		{	// put an element to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d c8	 mov	 DWORD PTR _this$[ebp], ecx

; 370  : 		if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  0002d	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00032	89 45 ac	 mov	 DWORD PTR $T10[ebp], eax
  00035	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  00038	50		 push	 eax
  00039	8d 4d ac	 lea	 ecx, DWORD PTR $T10[ebp]
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  00042	83 c4 08	 add	 esp, 8
  00045	0f b6 d0	 movzx	 edx, al
  00048	85 d2		 test	 edx, edx
  0004a	74 13		 je	 SHORT $LN20@overflow

; 371  : 			return (_Traits::not_eof(_Meta));	// EOF, return success code

  0004c	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ?not_eof@?$char_traits@D@std@@SAHABH@Z ; std::char_traits<char>::not_eof
  00055	83 c4 04	 add	 esp, 4
  00058	e9 a0 02 00 00	 jmp	 $LN21@overflow

; 372  : 		else if (_Mysb::pptr() != 0

  0005d	eb 5b		 jmp	 SHORT $LN19@overflow
$LN20@overflow:

; 373  : 			&& _Mysb::pptr() < _Mysb::epptr())

  0005f	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00068	85 c0		 test	 eax, eax
  0006a	74 3b		 je	 SHORT $LN18@overflow
  0006c	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00075	8b f0		 mov	 esi, eax
  00077	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00080	3b f0		 cmp	 esi, eax
  00082	73 23		 jae	 SHORT $LN18@overflow

; 374  : 			{	// room in buffer, store it
; 375  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  00084	8d 4d 08	 lea	 ecx, DWORD PTR __Meta$[ebp]
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  0008d	83 c4 04	 add	 esp, 4
  00090	8a d8		 mov	 bl, al
  00092	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
  0009b	88 18		 mov	 BYTE PTR [eax], bl

; 376  : 			return (_Meta);

  0009d	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  000a0	e9 58 02 00 00	 jmp	 $LN21@overflow
  000a5	eb 13		 jmp	 SHORT $LN19@overflow
$LN18@overflow:

; 377  : 			}
; 378  : 		else if (_Myfile == 0)

  000a7	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  000aa	83 7a 50 00	 cmp	 DWORD PTR [edx+80], 0
  000ae	75 0a		 jne	 SHORT $LN19@overflow

; 379  : 			return (_Traits::eof());	// no open C stream, fail

  000b0	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000b5	e9 43 02 00 00	 jmp	 $LN21@overflow
$LN19@overflow:

; 380  : 		_Reset_back();	// revert from _Mychar buffer

  000ba	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bd	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 381  : 		if (_Pcvt == 0)

  000c2	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  000c5	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  000c9	75 43		 jne	 SHORT $LN15@overflow

; 382  : 			return (_Fputc(_Traits::to_char_type(_Meta), _Myfile)
; 383  : 				? _Meta : _Traits::eof());	// no codecvt facet, put as is

  000cb	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ce	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  000d1	52		 push	 edx
  000d2	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  000db	83 c4 04	 add	 esp, 4
  000de	0f b6 c8	 movzx	 ecx, al
  000e1	51		 push	 ecx
  000e2	e8 00 00 00 00	 call	 ??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z ; std::_Fputc<char>
  000e7	83 c4 08	 add	 esp, 8
  000ea	0f b6 d0	 movzx	 edx, al
  000ed	85 d2		 test	 edx, edx
  000ef	74 08		 je	 SHORT $LN23@overflow
  000f1	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  000f4	89 45 b8	 mov	 DWORD PTR tv147[ebp], eax
  000f7	eb 08		 jmp	 SHORT $LN24@overflow
$LN23@overflow:
  000f9	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000fe	89 45 b8	 mov	 DWORD PTR tv147[ebp], eax
$LN24@overflow:
  00101	8b 45 b8	 mov	 eax, DWORD PTR tv147[ebp]
  00104	e9 f4 01 00 00	 jmp	 $LN21@overflow

; 384  : 		else

  00109	e9 ef 01 00 00	 jmp	 $LN21@overflow
$LN15@overflow:

; 385  : 			{	// put using codecvt facet
; 386  : 			const int _STRING_INC = 8;

  0010e	c7 45 9c 08 00
	00 00		 mov	 DWORD PTR __STRING_INC$6[ebp], 8

; 387  : 			const _Elem _Ch = _Traits::to_char_type(_Meta);

  00115	8d 4d 08	 lea	 ecx, DWORD PTR __Meta$[ebp]
  00118	51		 push	 ecx
  00119	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  0011e	83 c4 04	 add	 esp, 4
  00121	88 45 ee	 mov	 BYTE PTR __Ch$17[ebp], al

; 388  : 			const _Elem *_Src;
; 389  : 			char *_Dest;
; 390  : 
; 391  : 			string _Str(_STRING_INC, '\0');

  00124	6a 00		 push	 0
  00126	6a 08		 push	 8
  00128	8d 4d d4	 lea	 ecx, DWORD PTR __Str$16[ebp]
  0012b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00130	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
$LN13@overflow:

; 392  : 			for (; ; )
; 393  : 				switch (_Pcvt->out(_State,
; 394  : 					&_Ch, &_Ch + 1, _Src,
; 395  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))

  00137	8d 55 cc	 lea	 edx, DWORD PTR __Dest$14[ebp]
  0013a	52		 push	 edx
  0013b	8d 45 8c	 lea	 eax, DWORD PTR $T2[ebp]
  0013e	50		 push	 eax
  0013f	8d 4d d4	 lea	 ecx, DWORD PTR __Str$16[ebp]
  00142	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  00147	8b c8		 mov	 ecx, eax
  00149	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  0014e	8b f0		 mov	 esi, eax
  00150	8d 4d d4	 lea	 ecx, DWORD PTR __Str$16[ebp]
  00153	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00158	03 f0		 add	 esi, eax
  0015a	56		 push	 esi
  0015b	8d 4d 90	 lea	 ecx, DWORD PTR $T3[ebp]
  0015e	51		 push	 ecx
  0015f	8d 4d d4	 lea	 ecx, DWORD PTR __Str$16[ebp]
  00162	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  00167	8b c8		 mov	 ecx, eax
  00169	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  0016e	50		 push	 eax
  0016f	8d 55 d0	 lea	 edx, DWORD PTR __Src$15[ebp]
  00172	52		 push	 edx
  00173	8d 45 ef	 lea	 eax, DWORD PTR __Ch$17[ebp+1]
  00176	50		 push	 eax
  00177	8d 4d ee	 lea	 ecx, DWORD PTR __Ch$17[ebp]
  0017a	51		 push	 ecx
  0017b	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  0017e	83 c2 48	 add	 edx, 72			; 00000048H
  00181	52		 push	 edx
  00182	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  00185	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  00188	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?out@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z
  0018e	89 45 c0	 mov	 DWORD PTR tv180[ebp], eax
  00191	83 7d c0 00	 cmp	 DWORD PTR tv180[ebp], 0
  00195	0f 8c 32 01 00
	00		 jl	 $LN1@overflow
  0019b	83 7d c0 01	 cmp	 DWORD PTR tv180[ebp], 1
  0019f	7e 0f		 jle	 SHORT $LN9@overflow
  001a1	83 7d c0 03	 cmp	 DWORD PTR tv180[ebp], 3
  001a5	0f 84 dd 00 00
	00		 je	 $LN2@overflow
  001ab	e9 1d 01 00 00	 jmp	 $LN1@overflow
$LN9@overflow:

; 396  : 				{	// test result of converting one element
; 397  : 				case codecvt_base::partial:
; 398  : 				case codecvt_base::ok:
; 399  : 					{	// converted something, try to put it out
; 400  : 					size_t _Count = _Dest - &*_Str.begin();

  001b0	8d 4d 98	 lea	 ecx, DWORD PTR $T5[ebp]
  001b3	51		 push	 ecx
  001b4	8d 4d d4	 lea	 ecx, DWORD PTR __Str$16[ebp]
  001b7	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  001bc	8b c8		 mov	 ecx, eax
  001be	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  001c3	8b 55 cc	 mov	 edx, DWORD PTR __Dest$14[ebp]
  001c6	2b d0		 sub	 edx, eax
  001c8	89 55 c4	 mov	 DWORD PTR __Count$13[ebp], edx

; 401  : 					if (0 < _Count && _Count !=
; 402  : 						fwrite(&*_Str.begin(), 1, _Count, _Myfile))

  001cb	74 4e		 je	 SHORT $LN8@overflow
  001cd	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  001d0	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  001d3	51		 push	 ecx
  001d4	8b 55 c4	 mov	 edx, DWORD PTR __Count$13[ebp]
  001d7	52		 push	 edx
  001d8	6a 01		 push	 1
  001da	8d 45 94	 lea	 eax, DWORD PTR $T4[ebp]
  001dd	50		 push	 eax
  001de	8d 4d d4	 lea	 ecx, DWORD PTR __Str$16[ebp]
  001e1	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  001e6	8b c8		 mov	 ecx, eax
  001e8	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  001ed	50		 push	 eax
  001ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  001f4	83 c4 10	 add	 esp, 16			; 00000010H
  001f7	39 45 c4	 cmp	 DWORD PTR __Count$13[ebp], eax
  001fa	74 1f		 je	 SHORT $LN8@overflow

; 403  : 						return (_Traits::eof());	// write failed

  001fc	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00201	89 45 a4	 mov	 DWORD PTR $T8[ebp], eax
  00204	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0020b	8d 4d d4	 lea	 ecx, DWORD PTR __Str$16[ebp]
  0020e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00213	8b 45 a4	 mov	 eax, DWORD PTR $T8[ebp]
  00216	e9 e2 00 00 00	 jmp	 $LN21@overflow
$LN8@overflow:

; 404  : 
; 405  : 					_Wrotesome = true;	// write succeeded

  0021b	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0021e	c6 41 45 01	 mov	 BYTE PTR [ecx+69], 1

; 406  : 					if (_Src != &_Ch)

  00222	8d 55 ee	 lea	 edx, DWORD PTR __Ch$17[ebp]
  00225	39 55 d0	 cmp	 DWORD PTR __Src$15[ebp], edx
  00228	74 1d		 je	 SHORT $LN7@overflow

; 407  : 						return (_Meta);	// converted whole element

  0022a	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  0022d	89 45 a0	 mov	 DWORD PTR $T7[ebp], eax
  00230	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00237	8d 4d d4	 lea	 ecx, DWORD PTR __Str$16[ebp]
  0023a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0023f	8b 45 a0	 mov	 eax, DWORD PTR $T7[ebp]
  00242	e9 b6 00 00 00	 jmp	 $LN21@overflow
$LN7@overflow:

; 408  : 
; 409  : 					if (0 < _Count)

  00247	83 7d c4 00	 cmp	 DWORD PTR __Count$13[ebp], 0
  0024b	76 02		 jbe	 SHORT $LN6@overflow
  0024d	eb 37		 jmp	 SHORT $LN5@overflow
$LN6@overflow:

; 410  : 						;
; 411  : 					else if (_Str.size() < 4 * _STRING_INC)

  0024f	8d 4d d4	 lea	 ecx, DWORD PTR __Str$16[ebp]
  00252	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00257	83 f8 20	 cmp	 eax, 32			; 00000020H
  0025a	73 0e		 jae	 SHORT $LN4@overflow

; 412  : 						_Str.append(_STRING_INC, '\0');	// try with more space

  0025c	6a 00		 push	 0
  0025e	6a 08		 push	 8
  00260	8d 4d d4	 lea	 ecx, DWORD PTR __Str$16[ebp]
  00263	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 413  : 					else

  00268	eb 1c		 jmp	 SHORT $LN5@overflow
$LN4@overflow:

; 414  : 						return (_Traits::eof());	// conversion failed

  0026a	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0026f	89 45 b4	 mov	 DWORD PTR $T12[ebp], eax
  00272	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00279	8d 4d d4	 lea	 ecx, DWORD PTR __Str$16[ebp]
  0027c	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00281	8b 45 b4	 mov	 eax, DWORD PTR $T12[ebp]
  00284	eb 77		 jmp	 SHORT $LN21@overflow
$LN5@overflow:

; 415  : 					break;

  00286	eb 61		 jmp	 SHORT $LN10@overflow
$LN2@overflow:

; 416  : 					}
; 417  : 
; 418  : 				case codecvt_base::noconv:
; 419  : 					return (_Fputc(_Ch, _Myfile) ? _Meta
; 420  : 						: _Traits::eof());	// no conversion, put as is

  00288	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0028b	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  0028e	52		 push	 edx
  0028f	0f b6 45 ee	 movzx	 eax, BYTE PTR __Ch$17[ebp]
  00293	50		 push	 eax
  00294	e8 00 00 00 00	 call	 ??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z ; std::_Fputc<char>
  00299	83 c4 08	 add	 esp, 8
  0029c	0f b6 c8	 movzx	 ecx, al
  0029f	85 c9		 test	 ecx, ecx
  002a1	74 08		 je	 SHORT $LN25@overflow
  002a3	8b 55 08	 mov	 edx, DWORD PTR __Meta$[ebp]
  002a6	89 55 bc	 mov	 DWORD PTR tv218[ebp], edx
  002a9	eb 08		 jmp	 SHORT $LN26@overflow
$LN25@overflow:
  002ab	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  002b0	89 45 bc	 mov	 DWORD PTR tv218[ebp], eax
$LN26@overflow:
  002b3	8b 45 bc	 mov	 eax, DWORD PTR tv218[ebp]
  002b6	89 45 b0	 mov	 DWORD PTR $T11[ebp], eax
  002b9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002c0	8d 4d d4	 lea	 ecx, DWORD PTR __Str$16[ebp]
  002c3	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  002c8	8b 45 b0	 mov	 eax, DWORD PTR $T11[ebp]
  002cb	eb 30		 jmp	 SHORT $LN21@overflow
$LN1@overflow:

; 421  : 
; 422  : 				default:
; 423  : 					return (_Traits::eof());	// conversion failed

  002cd	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  002d2	89 45 a8	 mov	 DWORD PTR $T9[ebp], eax
  002d5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002dc	8d 4d d4	 lea	 ecx, DWORD PTR __Str$16[ebp]
  002df	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  002e4	8b 45 a8	 mov	 eax, DWORD PTR $T9[ebp]
  002e7	eb 14		 jmp	 SHORT $LN21@overflow
$LN10@overflow:

; 424  : 				}

  002e9	e9 49 fe ff ff	 jmp	 $LN13@overflow

; 425  : 			}

  002ee	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002f5	8d 4d d4	 lea	 ecx, DWORD PTR __Str$16[ebp]
  002f8	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN21@overflow:

; 426  : 	}

  002fd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00300	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00307	59		 pop	 ecx
  00308	5e		 pop	 esi
  00309	5b		 pop	 ebx
  0030a	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0030d	33 cd		 xor	 ecx, ebp
  0030f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00314	8b e5		 mov	 esp, ebp
  00316	5d		 pop	 ebp
  00317	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Str$16[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a 8c	 mov	 ecx, DWORD PTR [edx-116]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::overflow
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
_TEXT	SEGMENT
$T1 = -20						; size = 4
$T2 = -16						; size = 4
$T3 = -12						; size = 4
_this$ = -8						; size = 4
$T4 = -1						; size = 1
__Meta$ = 8						; size = 4
?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail, COMDAT
; _this$ = ecx

; 430  : 		{	// put an element back to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 431  : 		if (_Mysb::gptr() != 0
; 432  : 			&& _Mysb::eback() < _Mysb::gptr()
; 433  : 			&& (_Traits::eq_int_type(_Traits::eof(), _Meta)
; 434  : 			|| _Traits::eq_int_type(_Traits::to_int_type(_Mysb::gptr()[-1]),
; 435  : 				_Meta)))

  0000a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00013	85 c0		 test	 eax, eax
  00015	0f 84 8c 00 00
	00		 je	 $LN10@pbackfail
  0001b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00024	8b f0		 mov	 esi, eax
  00026	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0002f	3b f0		 cmp	 esi, eax
  00031	73 74		 jae	 SHORT $LN10@pbackfail
  00033	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00038	89 45 f4	 mov	 DWORD PTR $T3[ebp], eax
  0003b	8d 45 08	 lea	 eax, DWORD PTR __Meta$[ebp]
  0003e	50		 push	 eax
  0003f	8d 4d f4	 lea	 ecx, DWORD PTR $T3[ebp]
  00042	51		 push	 ecx
  00043	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  00048	83 c4 08	 add	 esp, 8
  0004b	0f b6 d0	 movzx	 edx, al
  0004e	85 d2		 test	 edx, edx
  00050	75 36		 jne	 SHORT $LN9@pbackfail
  00052	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0005b	b9 01 00 00 00	 mov	 ecx, 1
  00060	6b c9 ff	 imul	 ecx, -1
  00063	03 c1		 add	 eax, ecx
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  0006b	83 c4 04	 add	 esp, 4
  0006e	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00071	8d 55 08	 lea	 edx, DWORD PTR __Meta$[ebp]
  00074	52		 push	 edx
  00075	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0007e	83 c4 08	 add	 esp, 8
  00081	0f b6 c8	 movzx	 ecx, al
  00084	85 c9		 test	 ecx, ecx
  00086	74 1f		 je	 SHORT $LN10@pbackfail
$LN9@pbackfail:

; 436  : 			{	// just back up position
; 437  : 			_Mysb::_Gndec();

  00088	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ

; 438  : 			return (_Traits::not_eof(_Meta));

  00091	8d 55 08	 lea	 edx, DWORD PTR __Meta$[ebp]
  00094	52		 push	 edx
  00095	e8 00 00 00 00	 call	 ?not_eof@?$char_traits@D@std@@SAHABH@Z ; std::char_traits<char>::not_eof
  0009a	83 c4 04	 add	 esp, 4
  0009d	e9 a8 00 00 00	 jmp	 $LN11@pbackfail
  000a2	e9 a3 00 00 00	 jmp	 $LN11@pbackfail
$LN10@pbackfail:

; 439  : 			}
; 440  : 		else if (_Myfile == 0 || _Traits::eq_int_type(_Traits::eof(), _Meta))

  000a7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  000ae	74 1f		 je	 SHORT $LN6@pbackfail
  000b0	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000b5	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax
  000b8	8d 4d 08	 lea	 ecx, DWORD PTR __Meta$[ebp]
  000bb	51		 push	 ecx
  000bc	8d 55 ec	 lea	 edx, DWORD PTR $T1[ebp]
  000bf	52		 push	 edx
  000c0	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  000c5	83 c4 08	 add	 esp, 8
  000c8	0f b6 c0	 movzx	 eax, al
  000cb	85 c0		 test	 eax, eax
  000cd	74 09		 je	 SHORT $LN7@pbackfail
$LN6@pbackfail:

; 441  : 			return (_Traits::eof());	// no open C stream or EOF, fail

  000cf	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000d4	eb 74		 jmp	 SHORT $LN11@pbackfail
  000d6	eb 72		 jmp	 SHORT $LN11@pbackfail
$LN7@pbackfail:

; 442  : 		else if (_Pcvt == 0 && _Ungetc(_Traits::to_char_type(_Meta), _Myfile))

  000d8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	83 79 40 00	 cmp	 DWORD PTR [ecx+64], 0
  000df	75 30		 jne	 SHORT $LN4@pbackfail
  000e1	8d 55 08	 lea	 edx, DWORD PTR __Meta$[ebp]
  000e4	52		 push	 edx
  000e5	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  000ea	83 c4 04	 add	 esp, 4
  000ed	88 45 ff	 mov	 BYTE PTR $T4[ebp], al
  000f0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000f3	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  000f6	51		 push	 ecx
  000f7	8d 55 ff	 lea	 edx, DWORD PTR $T4[ebp]
  000fa	52		 push	 edx
  000fb	e8 00 00 00 00	 call	 ??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z ; std::_Ungetc<char>
  00100	83 c4 08	 add	 esp, 8
  00103	0f b6 c0	 movzx	 eax, al
  00106	85 c0		 test	 eax, eax
  00108	74 07		 je	 SHORT $LN4@pbackfail

; 443  : 			return (_Meta);	// no facet and unget succeeded, return

  0010a	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  0010d	eb 3b		 jmp	 SHORT $LN11@pbackfail
  0010f	eb 39		 jmp	 SHORT $LN11@pbackfail
$LN4@pbackfail:

; 444  : 		else if (_Mysb::gptr() != &_Mychar)

  00111	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00114	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0011a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0011d	83 c1 44	 add	 ecx, 68			; 00000044H
  00120	3b c1		 cmp	 eax, ecx
  00122	74 21		 je	 SHORT $LN2@pbackfail

; 445  : 			{	// putback to _Mychar
; 446  : 			_Mychar = _Traits::to_char_type(_Meta);

  00124	8d 55 08	 lea	 edx, DWORD PTR __Meta$[ebp]
  00127	52		 push	 edx
  00128	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  0012d	83 c4 04	 add	 esp, 4
  00130	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00133	88 41 44	 mov	 BYTE PTR [ecx+68], al

; 447  : 			_Set_back();	// switch to _Mychar buffer

  00136	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00139	e8 00 00 00 00	 call	 ?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back

; 448  : 			return (_Meta);

  0013e	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  00141	eb 07		 jmp	 SHORT $LN11@pbackfail

; 449  : 			}
; 450  : 		else

  00143	eb 05		 jmp	 SHORT $LN11@pbackfail
$LN2@pbackfail:

; 451  : 			return (_Traits::eof());	// nowhere to put back

  00145	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
$LN11@pbackfail:

; 452  : 	}

  0014a	5e		 pop	 esi
  0014b	8b e5		 mov	 esp, ebp
  0014d	5d		 pop	 ebp
  0014e	c2 04 00	 ret	 4
?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
$T1 = -16						; size = 4
_this$ = -12						; size = 4
__Meta$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::underflow, COMDAT
; _this$ = ecx

; 455  : 		{	// get an element from stream, but don't point past it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 456  : 		int_type _Meta;
; 457  : 		if (_Mysb::gptr() != 0
; 458  : 			&& _Mysb::gptr() < _Mysb::egptr())

  00014	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0001d	85 c0		 test	 eax, eax
  0001f	74 2e		 je	 SHORT $LN4@underflow
  00021	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0002a	8b f0		 mov	 esi, eax
  0002c	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00035	3b f0		 cmp	 esi, eax
  00037	73 16		 jae	 SHORT $LN4@underflow

; 459  : 			return (_Traits::to_int_type(*_Mysb::gptr()));	// return buffered

  00039	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  00048	83 c4 04	 add	 esp, 4
  0004b	eb 4c		 jmp	 SHORT $LN5@underflow
  0004d	eb 4a		 jmp	 SHORT $LN5@underflow
$LN4@underflow:

; 460  : 		else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))

  0004f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00052	8b 10		 mov	 edx, DWORD PTR [eax]
  00054	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0005a	ff d0		 call	 eax
  0005c	89 45 f8	 mov	 DWORD PTR __Meta$[ebp], eax
  0005f	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00064	89 45 f0	 mov	 DWORD PTR $T1[ebp], eax
  00067	8d 4d f8	 lea	 ecx, DWORD PTR __Meta$[ebp]
  0006a	51		 push	 ecx
  0006b	8d 55 f0	 lea	 edx, DWORD PTR $T1[ebp]
  0006e	52		 push	 edx
  0006f	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  00074	83 c4 08	 add	 esp, 8
  00077	0f b6 c0	 movzx	 eax, al
  0007a	85 c0		 test	 eax, eax
  0007c	74 07		 je	 SHORT $LN2@underflow

; 461  : 			return (_Meta);	// uflow failed, return EOF

  0007e	8b 45 f8	 mov	 eax, DWORD PTR __Meta$[ebp]
  00081	eb 16		 jmp	 SHORT $LN5@underflow

; 462  : 		else

  00083	eb 14		 jmp	 SHORT $LN5@underflow
$LN2@underflow:

; 463  : 			{	// get a char, don't point past it
; 464  : 			pbackfail(_Meta);

  00085	8b 4d f8	 mov	 ecx, DWORD PTR __Meta$[ebp]
  00088	51		 push	 ecx
  00089	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  0008c	8b 02		 mov	 eax, DWORD PTR [edx]
  0008e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00091	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00094	ff d2		 call	 edx

; 465  : 			return (_Meta);

  00096	8b 45 f8	 mov	 eax, DWORD PTR __Meta$[ebp]
$LN5@underflow:

; 466  : 			}
; 467  : 		}

  00099	5e		 pop	 esi
  0009a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009d	33 cd		 xor	 ecx, ebp
  0009f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::underflow
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
$T2 = -108						; size = 4
$T3 = -104						; size = 4
$T4 = -100						; size = 4
$T5 = -96						; size = 4
$T6 = -92						; size = 4
$T7 = -88						; size = 4
$T8 = -84						; size = 4
$T9 = -80						; size = 4
$T10 = -76						; size = 4
tv139 = -72						; size = 4
__Meta$11 = -68						; size = 4
tv176 = -64						; size = 4
__Nleft$12 = -60					; size = 4
_this$ = -56						; size = 4
__Dest$13 = -52						; size = 4
__Src$14 = -48						; size = 4
__Str$15 = -44						; size = 24
__Ch$16 = -19						; size = 1
__Ch$17 = -18						; size = 1
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::uflow, COMDAT
; _this$ = ecx

; 470  : 		{	// get an element from stream, point past it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 60	 sub	 esp, 96			; 00000060H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 4d c8	 mov	 DWORD PTR _this$[ebp], ecx

; 471  : 		if (_Mysb::gptr() != 0
; 472  : 			&& _Mysb::gptr() < _Mysb::egptr())

  0002c	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00035	85 c0		 test	 eax, eax
  00037	74 31		 je	 SHORT $LN18@uflow
  00039	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00042	8b f0		 mov	 esi, eax
  00044	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0004d	3b f0		 cmp	 esi, eax
  0004f	73 19		 jae	 SHORT $LN18@uflow

; 473  : 			return (_Traits::to_int_type(
; 474  : 				*_Mysb::_Gninc()));	// return buffered

  00051	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  00060	83 c4 04	 add	 esp, 4
  00063	e9 65 02 00 00	 jmp	 $LN19@uflow
  00068	eb 13		 jmp	 SHORT $LN17@uflow
$LN18@uflow:

; 475  : 		else if (_Myfile == 0)

  0006a	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  00071	75 0a		 jne	 SHORT $LN17@uflow

; 476  : 			return (_Traits::eof());	// no open C stream, fail

  00073	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00078	e9 50 02 00 00	 jmp	 $LN19@uflow
$LN17@uflow:

; 477  : 		_Reset_back();	// revert from _Mychar buffer

  0007d	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 478  : 		if (_Pcvt == 0)

  00085	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	83 79 40 00	 cmp	 DWORD PTR [ecx+64], 0
  0008c	75 44		 jne	 SHORT $LN15@uflow

; 479  : 			{	// no codecvt facet, just get it
; 480  : 			_Elem _Ch = 0;

  0008e	c6 45 ed 00	 mov	 BYTE PTR __Ch$16[ebp], 0

; 481  : 			return (_Fgetc(_Ch, _Myfile) ? _Traits::to_int_type(_Ch)
; 482  : 				: _Traits::eof());

  00092	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  00095	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  00098	50		 push	 eax
  00099	8d 4d ed	 lea	 ecx, DWORD PTR __Ch$16[ebp]
  0009c	51		 push	 ecx
  0009d	e8 00 00 00 00	 call	 ??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z ; std::_Fgetc<char>
  000a2	83 c4 08	 add	 esp, 8
  000a5	0f b6 d0	 movzx	 edx, al
  000a8	85 d2		 test	 edx, edx
  000aa	74 11		 je	 SHORT $LN21@uflow
  000ac	8d 45 ed	 lea	 eax, DWORD PTR __Ch$16[ebp]
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  000b5	83 c4 04	 add	 esp, 4
  000b8	89 45 b8	 mov	 DWORD PTR tv139[ebp], eax
  000bb	eb 08		 jmp	 SHORT $LN22@uflow
$LN21@uflow:
  000bd	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000c2	89 45 b8	 mov	 DWORD PTR tv139[ebp], eax
$LN22@uflow:
  000c5	8b 45 b8	 mov	 eax, DWORD PTR tv139[ebp]
  000c8	e9 00 02 00 00	 jmp	 $LN19@uflow

; 483  : 			}
; 484  : 		else

  000cd	e9 fb 01 00 00	 jmp	 $LN19@uflow
$LN15@uflow:

; 485  : 			{	// build string until codecvt succeeds
; 486  : 			string _Str;

  000d2	8d 4d d4	 lea	 ecx, DWORD PTR __Str$15[ebp]
  000d5	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000da	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
$LN13@uflow:

; 487  : 
; 488  : 			for (; ; )
; 489  : 				{	// get using codecvt facet
; 490  : 				_Elem _Ch, *_Dest;
; 491  : 				const char *_Src;
; 492  : 				int _Nleft;
; 493  : 				int _Meta = fgetc(_Myfile);

  000e1	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e4	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  000e7	52		 push	 edx
  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  000ee	83 c4 04	 add	 esp, 4
  000f1	89 45 bc	 mov	 DWORD PTR __Meta$11[ebp], eax

; 494  : 
; 495  : 				if (_Meta == EOF)

  000f4	83 7d bc ff	 cmp	 DWORD PTR __Meta$11[ebp], -1
  000f8	75 1f		 jne	 SHORT $LN11@uflow

; 496  : 					return (_Traits::eof());	// partial char?

  000fa	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000ff	89 45 a8	 mov	 DWORD PTR $T7[ebp], eax
  00102	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00109	8d 4d d4	 lea	 ecx, DWORD PTR __Str$15[ebp]
  0010c	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00111	8b 45 a8	 mov	 eax, DWORD PTR $T7[ebp]
  00114	e9 b4 01 00 00	 jmp	 $LN19@uflow
$LN11@uflow:

; 497  : 
; 498  : 				_Str.append(1, (char)_Meta);	// append byte and convert

  00119	0f b6 45 bc	 movzx	 eax, BYTE PTR __Meta$11[ebp]
  0011d	50		 push	 eax
  0011e	6a 01		 push	 1
  00120	8d 4d d4	 lea	 ecx, DWORD PTR __Str$15[ebp]
  00123	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 499  : 				switch (_Pcvt->in(_State,
; 500  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Src,
; 501  : 					&_Ch, &_Ch + 1, _Dest))

  00128	8d 4d cc	 lea	 ecx, DWORD PTR __Dest$13[ebp]
  0012b	51		 push	 ecx
  0012c	8d 55 ef	 lea	 edx, DWORD PTR __Ch$17[ebp+1]
  0012f	52		 push	 edx
  00130	8d 45 ee	 lea	 eax, DWORD PTR __Ch$17[ebp]
  00133	50		 push	 eax
  00134	8d 4d d0	 lea	 ecx, DWORD PTR __Src$14[ebp]
  00137	51		 push	 ecx
  00138	8d 55 94	 lea	 edx, DWORD PTR $T2[ebp]
  0013b	52		 push	 edx
  0013c	8d 4d d4	 lea	 ecx, DWORD PTR __Str$15[ebp]
  0013f	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  00144	8b c8		 mov	 ecx, eax
  00146	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  0014b	8b f0		 mov	 esi, eax
  0014d	8d 4d d4	 lea	 ecx, DWORD PTR __Str$15[ebp]
  00150	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00155	03 f0		 add	 esi, eax
  00157	56		 push	 esi
  00158	8d 45 a4	 lea	 eax, DWORD PTR $T6[ebp]
  0015b	50		 push	 eax
  0015c	8d 4d d4	 lea	 ecx, DWORD PTR __Str$15[ebp]
  0015f	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  00164	8b c8		 mov	 ecx, eax
  00166	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  0016b	50		 push	 eax
  0016c	8b 4d c8	 mov	 ecx, DWORD PTR _this$[ebp]
  0016f	83 c1 48	 add	 ecx, 72			; 00000048H
  00172	51		 push	 ecx
  00173	8b 55 c8	 mov	 edx, DWORD PTR _this$[ebp]
  00176	8b 4a 40	 mov	 ecx, DWORD PTR [edx+64]
  00179	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?in@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z
  0017f	89 45 c0	 mov	 DWORD PTR tv176[ebp], eax
  00182	83 7d c0 00	 cmp	 DWORD PTR tv176[ebp], 0
  00186	0f 8c 11 01 00
	00		 jl	 $LN1@uflow
  0018c	83 7d c0 01	 cmp	 DWORD PTR tv176[ebp], 1
  00190	7e 0f		 jle	 SHORT $LN8@uflow
  00192	83 7d c0 03	 cmp	 DWORD PTR tv176[ebp], 3
  00196	0f 84 aa 00 00
	00		 je	 $LN3@uflow
  0019c	e9 fc 00 00 00	 jmp	 $LN1@uflow
$LN8@uflow:

; 502  : 					{	// test result of converting one element
; 503  : 				case codecvt_base::partial:
; 504  : 				case codecvt_base::ok:
; 505  : 					if (_Dest != &_Ch)

  001a1	8d 45 ee	 lea	 eax, DWORD PTR __Ch$17[ebp]
  001a4	39 45 cc	 cmp	 DWORD PTR __Dest$13[ebp], eax
  001a7	74 78		 je	 SHORT $LN7@uflow

; 506  : 						{	// got an element, put back excess and deliver it
; 507  : 						_Nleft = (int)(&*_Str.begin() + _Str.size() - _Src);

  001a9	8d 4d 98	 lea	 ecx, DWORD PTR $T3[ebp]
  001ac	51		 push	 ecx
  001ad	8d 4d d4	 lea	 ecx, DWORD PTR __Str$15[ebp]
  001b0	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  001b5	8b c8		 mov	 ecx, eax
  001b7	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  001bc	8b f0		 mov	 esi, eax
  001be	8d 4d d4	 lea	 ecx, DWORD PTR __Str$15[ebp]
  001c1	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  001c6	03 f0		 add	 esi, eax
  001c8	2b 75 d0	 sub	 esi, DWORD PTR __Src$14[ebp]
  001cb	89 75 c4	 mov	 DWORD PTR __Nleft$12[ebp], esi
$LN6@uflow:

; 508  : 						for (; 0 < _Nleft; )

  001ce	83 7d c4 00	 cmp	 DWORD PTR __Nleft$12[ebp], 0
  001d2	7e 25		 jle	 SHORT $LN5@uflow

; 509  : 							ungetc(_Src[--_Nleft], _Myfile);

  001d4	8b 55 c4	 mov	 edx, DWORD PTR __Nleft$12[ebp]
  001d7	83 ea 01	 sub	 edx, 1
  001da	89 55 c4	 mov	 DWORD PTR __Nleft$12[ebp], edx
  001dd	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  001e0	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  001e3	51		 push	 ecx
  001e4	8b 55 d0	 mov	 edx, DWORD PTR __Src$14[ebp]
  001e7	03 55 c4	 add	 edx, DWORD PTR __Nleft$12[ebp]
  001ea	0f be 02	 movsx	 eax, BYTE PTR [edx]
  001ed	50		 push	 eax
  001ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ungetc
  001f4	83 c4 08	 add	 esp, 8
  001f7	eb d5		 jmp	 SHORT $LN6@uflow
$LN5@uflow:

; 510  : 						return (_Traits::to_int_type(_Ch));

  001f9	8d 4d ee	 lea	 ecx, DWORD PTR __Ch$17[ebp]
  001fc	51		 push	 ecx
  001fd	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  00202	83 c4 04	 add	 esp, 4
  00205	89 45 ac	 mov	 DWORD PTR $T8[ebp], eax
  00208	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0020f	8d 4d d4	 lea	 ecx, DWORD PTR __Str$15[ebp]
  00212	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00217	8b 45 ac	 mov	 eax, DWORD PTR $T8[ebp]
  0021a	e9 ae 00 00 00	 jmp	 $LN19@uflow

; 511  : 						}
; 512  : 					else

  0021f	eb 23		 jmp	 SHORT $LN4@uflow
$LN7@uflow:

; 513  : 						_Str.erase((size_t)0,	// partial, discard used input
; 514  : 							(size_t)(_Src - &*_Str.begin()));

  00221	8d 55 a0	 lea	 edx, DWORD PTR $T5[ebp]
  00224	52		 push	 edx
  00225	8d 4d d4	 lea	 ecx, DWORD PTR __Str$15[ebp]
  00228	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  0022d	8b c8		 mov	 ecx, eax
  0022f	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  00234	8b 4d d0	 mov	 ecx, DWORD PTR __Src$14[ebp]
  00237	2b c8		 sub	 ecx, eax
  00239	51		 push	 ecx
  0023a	6a 00		 push	 0
  0023c	8d 4d d4	 lea	 ecx, DWORD PTR __Str$15[ebp]
  0023f	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
$LN4@uflow:

; 515  : 					break;

  00244	eb 73		 jmp	 SHORT $LN9@uflow
$LN3@uflow:

; 516  : 
; 517  : 				case codecvt_base::noconv:
; 518  : 					if (_Str.size() < sizeof (_Elem))

  00246	8d 4d d4	 lea	 ecx, DWORD PTR __Str$15[ebp]
  00249	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  0024e	83 f8 01	 cmp	 eax, 1
  00251	73 02		 jae	 SHORT $LN2@uflow

; 519  : 						break;	// no conversion, but need more chars

  00253	eb 64		 jmp	 SHORT $LN9@uflow
$LN2@uflow:

; 520  : 
; 521  : 					_CRT_SECURE_MEMCPY(&_Ch, sizeof (_Elem), &*_Str.begin(),

  00255	6a 01		 push	 1
  00257	8d 55 9c	 lea	 edx, DWORD PTR $T4[ebp]
  0025a	52		 push	 edx
  0025b	8d 4d d4	 lea	 ecx, DWORD PTR __Str$15[ebp]
  0025e	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  00263	8b c8		 mov	 ecx, eax
  00265	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  0026a	50		 push	 eax
  0026b	6a 01		 push	 1
  0026d	8d 45 ee	 lea	 eax, DWORD PTR __Ch$17[ebp]
  00270	50		 push	 eax
  00271	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__memcpy_s
  00277	83 c4 10	 add	 esp, 16			; 00000010H

; 522  : 						sizeof (_Elem));	// copy raw bytes to element
; 523  : 
; 524  : 					return (_Traits::to_int_type(_Ch));	// return result

  0027a	8d 4d ee	 lea	 ecx, DWORD PTR __Ch$17[ebp]
  0027d	51		 push	 ecx
  0027e	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  00283	83 c4 04	 add	 esp, 4
  00286	89 45 b4	 mov	 DWORD PTR $T10[ebp], eax
  00289	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00290	8d 4d d4	 lea	 ecx, DWORD PTR __Str$15[ebp]
  00293	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00298	8b 45 b4	 mov	 eax, DWORD PTR $T10[ebp]
  0029b	eb 30		 jmp	 SHORT $LN19@uflow
$LN1@uflow:

; 525  : 
; 526  : 				default:
; 527  : 					return (_Traits::eof());	// conversion failed

  0029d	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  002a2	89 45 b0	 mov	 DWORD PTR $T9[ebp], eax
  002a5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002ac	8d 4d d4	 lea	 ecx, DWORD PTR __Str$15[ebp]
  002af	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  002b4	8b 45 b0	 mov	 eax, DWORD PTR $T9[ebp]
  002b7	eb 14		 jmp	 SHORT $LN19@uflow
$LN9@uflow:

; 528  : 					}
; 529  : 				}

  002b9	e9 23 fe ff ff	 jmp	 $LN13@uflow

; 530  : 			}

  002be	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002c5	8d 4d d4	 lea	 ecx, DWORD PTR __Str$15[ebp]
  002c8	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN19@uflow:

; 531  : 		}

  002cd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002d0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002d7	59		 pop	 ecx
  002d8	5e		 pop	 esi
  002d9	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002dc	33 cd		 xor	 ecx, ebp
  002de	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002e3	8b e5		 mov	 esp, ebp
  002e5	5d		 pop	 ebp
  002e6	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Str$15[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::uflow
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__Fileposition$ = -12					; size = 8
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 8
__Way$ = 20						; size = 4
___formal$ = 24						; size = 4
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::seekoff, COMDAT
; _this$ = ecx

; 537  : 		{	// change position by _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 538  : 		fpos_t _Fileposition;
; 539  : 
; 540  : 		if (_Mysb::gptr() == &_Mychar	// something putback
; 541  : 			&& _Way == ios_base::cur	// a relative seek
; 542  : 			&& _Pcvt == 0)	// not converting

  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  0001c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	83 c1 44	 add	 ecx, 68			; 00000044H
  00022	3b c1		 cmp	 eax, ecx
  00024	75 21		 jne	 SHORT $LN5@seekoff
  00026	83 7d 14 01	 cmp	 DWORD PTR __Way$[ebp], 1
  0002a	75 1b		 jne	 SHORT $LN5@seekoff
  0002c	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0002f	83 7a 40 00	 cmp	 DWORD PTR [edx+64], 0
  00033	75 12		 jne	 SHORT $LN5@seekoff

; 543  : 			_Off -= (off_type)sizeof (_Elem);	// back up over _Elem bytes

  00035	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  00038	83 e8 01	 sub	 eax, 1
  0003b	8b 4d 10	 mov	 ecx, DWORD PTR __Off$[ebp+4]
  0003e	83 d9 00	 sbb	 ecx, 0
  00041	89 45 0c	 mov	 DWORD PTR __Off$[ebp], eax
  00044	89 4d 10	 mov	 DWORD PTR __Off$[ebp+4], ecx
$LN5@seekoff:

; 544  : 
; 545  : 		if (_Myfile == 0 || !_Endwrite()
; 546  : 			|| (_Off != 0 || _Way != ios_base::cur)
; 547  : 				&& _FSEEK_OFF(_Myfile, _Off, _Way) != 0
; 548  : 			|| fgetpos(_Myfile, &_Fileposition) != 0)

  00047	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0004a	83 7a 50 00	 cmp	 DWORD PTR [edx+80], 0
  0004e	74 55		 je	 SHORT $LN3@seekoff
  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
  00058	0f b6 c0	 movzx	 eax, al
  0005b	85 c0		 test	 eax, eax
  0005d	74 46		 je	 SHORT $LN3@seekoff
  0005f	8b 4d 0c	 mov	 ecx, DWORD PTR __Off$[ebp]
  00062	0b 4d 10	 or	 ecx, DWORD PTR __Off$[ebp+4]
  00065	75 06		 jne	 SHORT $LN1@seekoff
  00067	83 7d 14 01	 cmp	 DWORD PTR __Way$[ebp], 1
  0006b	74 20		 je	 SHORT $LN2@seekoff
$LN1@seekoff:
  0006d	8b 55 14	 mov	 edx, DWORD PTR __Way$[ebp]
  00070	52		 push	 edx
  00071	8b 45 10	 mov	 eax, DWORD PTR __Off$[ebp+4]
  00074	50		 push	 eax
  00075	8b 4d 0c	 mov	 ecx, DWORD PTR __Off$[ebp]
  00078	51		 push	 ecx
  00079	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0007c	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  0007f	50		 push	 eax
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fseeki64
  00086	83 c4 10	 add	 esp, 16			; 00000010H
  00089	85 c0		 test	 eax, eax
  0008b	75 18		 jne	 SHORT $LN3@seekoff
$LN2@seekoff:
  0008d	8d 4d f4	 lea	 ecx, DWORD PTR __Fileposition$[ebp]
  00090	51		 push	 ecx
  00091	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00094	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  00097	50		 push	 eax
  00098	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetpos
  0009e	83 c4 08	 add	 esp, 8
  000a1	85 c0		 test	 eax, eax
  000a3	74 1a		 je	 SHORT $LN4@seekoff
$LN3@seekoff:

; 549  : 			return (pos_type(_BADOFF));	// report failure

  000a5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?_BADOFF@std@@3_JB
  000ab	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ae	52		 push	 edx
  000af	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b1	50		 push	 eax
  000b2	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000b5	e8 00 00 00 00	 call	 ??0?$fpos@H@std@@QAE@_J@Z ; std::fpos<int>::fpos<int>
  000ba	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000bd	eb 22		 jmp	 SHORT $LN6@seekoff
$LN4@seekoff:

; 550  : 
; 551  : 		_Reset_back();	// revert from _Mychar buffer, discarding any putback

  000bf	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c2	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 552  : 		return (_POS_TYPE_FROM_STATE(pos_type, _State,

  000c7	8b 4d f8	 mov	 ecx, DWORD PTR __Fileposition$[ebp+4]
  000ca	51		 push	 ecx
  000cb	8b 55 f4	 mov	 edx, DWORD PTR __Fileposition$[ebp]
  000ce	52		 push	 edx
  000cf	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000d2	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  000d5	51		 push	 ecx
  000d6	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000d9	e8 00 00 00 00	 call	 ??0?$fpos@H@std@@QAE@H_J@Z ; std::fpos<int>::fpos<int>
  000de	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN6@seekoff:

; 553  : 			_Fileposition));	// return new position
; 554  : 		}

  000e1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e4	33 cd		 xor	 ecx, ebp
  000e6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c2 14 00	 ret	 20			; 00000014H
?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@_JHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::seekoff
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z
_TEXT	SEGMENT
__Off$ = -24						; size = 8
_this$ = -16						; size = 4
__Fileposition$ = -12					; size = 8
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Pos$ = 12						; size = 24
___formal$ = 36						; size = 4
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::seekpos, COMDAT
; _this$ = ecx

; 559  : 		{	// change position to _Pos

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 560  : 		fpos_t _Fileposition = _POS_TYPE_TO_FPOS_T(_Pos);

  00013	8d 4d 0c	 lea	 ecx, DWORD PTR __Pos$[ebp]
  00016	e8 00 00 00 00	 call	 ?seekpos@?$fpos@H@std@@QBE_JXZ ; std::fpos<int>::seekpos
  0001b	89 45 f4	 mov	 DWORD PTR __Fileposition$[ebp], eax
  0001e	89 55 f8	 mov	 DWORD PTR __Fileposition$[ebp+4], edx

; 561  : 		off_type _Off = (off_type)_Pos - (off_type)_FPOSOFF(_Fileposition);

  00021	8d 4d 0c	 lea	 ecx, DWORD PTR __Pos$[ebp]
  00024	e8 00 00 00 00	 call	 ??B?$fpos@H@std@@QBE_JXZ ; std::fpos<int>::operator __int64
  00029	2b 45 f4	 sub	 eax, DWORD PTR __Fileposition$[ebp]
  0002c	1b 55 f8	 sbb	 edx, DWORD PTR __Fileposition$[ebp+4]
  0002f	89 45 e8	 mov	 DWORD PTR __Off$[ebp], eax
  00032	89 55 ec	 mov	 DWORD PTR __Off$[ebp+4], edx

; 562  : 
; 563  : 		if (_Myfile == 0 || !_Endwrite()
; 564  : 			|| fsetpos(_Myfile, &_Fileposition) != 0
; 565  : 			|| _Off != 0 && _FSEEK_OFF(_Myfile, _Off, SEEK_CUR) != 0
; 566  : 			|| fgetpos(_Myfile, &_Fileposition) != 0)

  00035	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00038	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  0003c	74 65		 je	 SHORT $LN2@seekpos
  0003e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
  00046	0f b6 c8	 movzx	 ecx, al
  00049	85 c9		 test	 ecx, ecx
  0004b	74 56		 je	 SHORT $LN2@seekpos
  0004d	8d 55 f4	 lea	 edx, DWORD PTR __Fileposition$[ebp]
  00050	52		 push	 edx
  00051	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00054	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00057	51		 push	 ecx
  00058	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fsetpos
  0005e	83 c4 08	 add	 esp, 8
  00061	85 c0		 test	 eax, eax
  00063	75 3e		 jne	 SHORT $LN2@seekpos
  00065	8b 55 e8	 mov	 edx, DWORD PTR __Off$[ebp]
  00068	0b 55 ec	 or	 edx, DWORD PTR __Off$[ebp+4]
  0006b	74 1e		 je	 SHORT $LN1@seekpos
  0006d	6a 01		 push	 1
  0006f	8b 45 ec	 mov	 eax, DWORD PTR __Off$[ebp+4]
  00072	50		 push	 eax
  00073	8b 4d e8	 mov	 ecx, DWORD PTR __Off$[ebp]
  00076	51		 push	 ecx
  00077	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0007a	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  0007d	50		 push	 eax
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fseeki64
  00084	83 c4 10	 add	 esp, 16			; 00000010H
  00087	85 c0		 test	 eax, eax
  00089	75 18		 jne	 SHORT $LN2@seekpos
$LN1@seekpos:
  0008b	8d 4d f4	 lea	 ecx, DWORD PTR __Fileposition$[ebp]
  0008e	51		 push	 ecx
  0008f	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00092	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  00095	50		 push	 eax
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetpos
  0009c	83 c4 08	 add	 esp, 8
  0009f	85 c0		 test	 eax, eax
  000a1	74 1a		 je	 SHORT $LN3@seekpos
$LN2@seekpos:

; 567  : 			return (pos_type(_BADOFF));	// report failure

  000a3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?_BADOFF@std@@3_JB
  000a9	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ac	52		 push	 edx
  000ad	8b 01		 mov	 eax, DWORD PTR [ecx]
  000af	50		 push	 eax
  000b0	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000b3	e8 00 00 00 00	 call	 ??0?$fpos@H@std@@QAE@_J@Z ; std::fpos<int>::fpos<int>
  000b8	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000bb	eb 30		 jmp	 SHORT $LN4@seekpos
$LN3@seekpos:

; 568  : 
; 569  : 		_State = _POS_TYPE_TO_STATE(_Pos);

  000bd	8d 4d 0c	 lea	 ecx, DWORD PTR __Pos$[ebp]
  000c0	e8 00 00 00 00	 call	 ?state@?$fpos@H@std@@QBEHXZ ; std::fpos<int>::state
  000c5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c8	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 570  : 
; 571  : 		_Reset_back();	// revert from _Mychar buffer, discarding any putback

  000cb	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ce	e8 00 00 00 00	 call	 ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back

; 572  : 		return (_POS_TYPE_FROM_STATE(pos_type, _State,

  000d3	8b 55 f8	 mov	 edx, DWORD PTR __Fileposition$[ebp+4]
  000d6	52		 push	 edx
  000d7	8b 45 f4	 mov	 eax, DWORD PTR __Fileposition$[ebp]
  000da	50		 push	 eax
  000db	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000de	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  000e1	52		 push	 edx
  000e2	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000e5	e8 00 00 00 00	 call	 ??0?$fpos@H@std@@QAE@H_J@Z ; std::fpos<int>::fpos<int>
  000ea	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN4@seekpos:

; 573  : 			_Fileposition));	// return new position
; 574  : 		}

  000ed	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f0	33 cd		 xor	 ecx, ebp
  000f2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::seekpos
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Count$ = 12						; size = 8
?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::setbuf, COMDAT
; _this$ = ecx

; 577  : 		{	// offer _Buffer to C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 578  : 		if (_Myfile == 0 || setvbuf(_Myfile, (char *)_Buffer,
; 579  : 			_Buffer == 0 && _Count == 0 ? _IONBF : _IOFBF,
; 580  : 			(size_t)_Count * sizeof (_Elem)) != 0)

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  00010	74 3e		 je	 SHORT $LN2@setbuf
  00012	83 7d 08 00	 cmp	 DWORD PTR __Buffer$[ebp], 0
  00016	75 11		 jne	 SHORT $LN6@setbuf
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0001b	0b 4d 10	 or	 ecx, DWORD PTR __Count$[ebp+4]
  0001e	75 09		 jne	 SHORT $LN6@setbuf
  00020	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR tv71[ebp], 4
  00027	eb 07		 jmp	 SHORT $LN7@setbuf
$LN6@setbuf:
  00029	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$LN7@setbuf:
  00030	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  00033	52		 push	 edx
  00034	8b 45 f8	 mov	 eax, DWORD PTR tv71[ebp]
  00037	50		 push	 eax
  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0003b	51		 push	 ecx
  0003c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003f	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  00042	50		 push	 eax
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__setvbuf
  00049	83 c4 10	 add	 esp, 16			; 00000010H
  0004c	85 c0		 test	 eax, eax
  0004e	74 06		 je	 SHORT $LN3@setbuf
$LN2@setbuf:

; 581  : 			return (0);	// failed

  00050	33 c0		 xor	 eax, eax
  00052	eb 16		 jmp	 SHORT $LN4@setbuf

; 582  : 		else

  00054	eb 14		 jmp	 SHORT $LN4@setbuf
$LN3@setbuf:

; 583  : 			{	// new buffer, reinitialize pointers
; 584  : 			_Init(_Myfile, _Openfl);

  00056	6a 01		 push	 1
  00058	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  0005e	52		 push	 edx
  0005f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 585  : 			return (this);

  00067	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
$LN4@setbuf:

; 586  : 			}
; 587  : 		}

  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 0c 00	 ret	 12			; 0000000cH
?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::setbuf
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
_TEXT	SEGMENT
$T1 = -16						; size = 4
$T2 = -12						; size = 4
tv86 = -8						; size = 4
_this$ = -4						; size = 4
?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::sync, COMDAT
; _this$ = ecx

; 590  : 		{	// synchronize C stream with external file

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Myfile == 0
; 592  : 			|| _Traits::eq_int_type(_Traits::eof(), overflow())
; 593  : 			|| 0 <= fflush(_Myfile) ? 0 : -1);

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  00010	74 52		 je	 SHORT $LN3@sync
  00012	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00017	50		 push	 eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00023	ff d0		 call	 eax
  00025	89 45 f4	 mov	 DWORD PTR $T2[ebp], eax
  00028	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0002d	89 45 f0	 mov	 DWORD PTR $T1[ebp], eax
  00030	8d 4d f4	 lea	 ecx, DWORD PTR $T2[ebp]
  00033	51		 push	 ecx
  00034	8d 55 f0	 lea	 edx, DWORD PTR $T1[ebp]
  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0003d	83 c4 08	 add	 esp, 8
  00040	0f b6 c0	 movzx	 eax, al
  00043	85 c0		 test	 eax, eax
  00045	75 1d		 jne	 SHORT $LN3@sync
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  0004d	52		 push	 edx
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fflush
  00054	83 c4 04	 add	 esp, 4
  00057	85 c0		 test	 eax, eax
  00059	7d 09		 jge	 SHORT $LN3@sync
  0005b	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR tv86[ebp], -1
  00062	eb 07		 jmp	 SHORT $LN4@sync
$LN3@sync:
  00064	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv86[ebp], 0
$LN4@sync:
  0006b	8b 45 f8	 mov	 eax, DWORD PTR tv86[ebp]

; 594  : 		}

  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::sync
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Loc$ = 8						; size = 4
?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::imbue, COMDAT
; _this$ = ecx

; 597  : 		{	// set locale to argument (capture nontrivial codecvt facet)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 598  : 		_Initcvt(&_USE(_Loc, _Cvt));

  00007	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,int> >
  00010	83 c4 04	 add	 esp, 4
  00013	50		 push	 eax
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt

; 599  : 		}

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::imbue
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Filename$ = 8						; size = 4
__Mode$ = 12						; size = 4
__Prot$ = 16						; size = 4
_$initVBases$ = 20					; size = 4
??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 743  : 		{	// construct with named file and specified mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00028	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  0002f	83 7d 14 00	 cmp	 DWORD PTR _$initVBases$[ebp], 0
  00033	74 25		 je	 SHORT $LN2@basic_ifst
  00035	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00038	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@
  0003e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	83 c1 70	 add	 ecx, 112		; 00000070H
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00051	8b 4d ec	 mov	 ecx, DWORD PTR $T2[ebp]
  00054	83 c9 01	 or	 ecx, 1
  00057	89 4d ec	 mov	 DWORD PTR $T2[ebp], ecx
$LN2@basic_ifst:
  0005a	6a 00		 push	 0
  0005c	6a 00		 push	 0
  0005e	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00061	83 c2 10	 add	 edx, 16			; 00000010H
  00064	52		 push	 edx
  00065	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  0006e	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00075	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00078	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00080	c7 04 10 00 00
	00 00		 mov	 DWORD PTR [eax+edx], OFFSET ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
  00087	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0008f	83 e8 70	 sub	 eax, 112		; 00000070H
  00092	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00095	8b 11		 mov	 edx, DWORD PTR [ecx]
  00097	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0009a	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0009d	89 44 0a fc	 mov	 DWORD PTR [edx+ecx-4], eax
  000a1	6a 00		 push	 0
  000a3	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	83 c1 10	 add	 ecx, 16			; 00000010H
  000a9	e8 00 00 00 00	 call	 ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
  000ae	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 744  : 		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)

  000b2	8b 45 10	 mov	 eax, DWORD PTR __Prot$[ebp]
  000b5	50		 push	 eax
  000b6	8b 4d 0c	 mov	 ecx, DWORD PTR __Mode$[ebp]
  000b9	83 c9 01	 or	 ecx, 1
  000bc	51		 push	 ecx
  000bd	8b 55 08	 mov	 edx, DWORD PTR __Filename$[ebp]
  000c0	52		 push	 edx
  000c1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c4	83 c1 10	 add	 ecx, 16			; 00000010H
  000c7	e8 00 00 00 00	 call	 ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ; std::basic_filebuf<char,std::char_traits<char> >::open
  000cc	85 c0		 test	 eax, eax
  000ce	75 17		 jne	 SHORT $LN3@basic_ifst

; 745  : 			_Myios::setstate(ios_base::failbit);

  000d0	6a 00		 push	 0
  000d2	6a 02		 push	 2
  000d4	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000d7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d9	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000dc	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000df	8b ca		 mov	 ecx, edx
  000e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
$LN3@basic_ifst:

; 746  : 		}

  000e7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ee	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000f1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fb	59		 pop	 ecx
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$0:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 10 00 00
	00		 je	 $LN6@basic_ifst
  0000c	83 65 ec fe	 and	 DWORD PTR $T2[ebp], -2	; fffffffeH
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 70	 add	 ecx, 112		; 00000070H
  00016	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
$LN6@basic_ifst:
  0001c	c3		 ret	 0
__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$1:
  0001d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	83 c1 18	 add	 ecx, 24			; 00000018H
  00023	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$2:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 10	 add	 ecx, 16			; 00000010H
  0002f	e9 00 00 00 00	 jmp	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
__ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z:
  00034	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00038	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003b	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ PROC ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 873  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 90	 mov	 ecx, DWORD PTR [eax-112]
  0000d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	c7 44 10 90 00
	00 00 00	 mov	 DWORD PTR [eax+edx-112], OFFSET ??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 51 90	 mov	 edx, DWORD PTR [ecx-112]
  00021	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00024	83 e8 70	 sub	 eax, 112		; 00000070H
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	8b 51 90	 mov	 edx, DWORD PTR [ecx-112]
  0002d	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00030	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00033	89 44 0a 8c	 mov	 DWORD PTR [edx+ecx-116], eax

; 874  : 		}

  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	83 e9 60	 sub	 ecx, 96			; 00000060H
  0003d	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	83 e9 58	 sub	 ecx, 88			; 00000058H
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ ENDP ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ifstream<char,std::char_traits<char> >::close, COMDAT
; _this$ = ecx

; 911  : 		{	// close the C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 912  : 		if (_Filebuffer.close() == 0)

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 10	 add	 ecx, 16			; 00000010H
  0000d	e8 00 00 00 00	 call	 ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
  00012	85 c0		 test	 eax, eax
  00014	75 17		 jne	 SHORT $LN2@close

; 913  : 			_Myios::setstate(ios_base::failbit);

  00016	6a 00		 push	 0
  00018	6a 02		 push	 2
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00022	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00025	8b ca		 mov	 ecx, edx
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
$LN2@close:

; 914  : 		}

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ifstream<char,std::char_traits<char> >::close
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAE@XZ PROC ; std::_List_buy<unsigned char *,std::allocator<unsigned char *> >::~_List_buy<unsigned char *,std::allocator<unsigned char *> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@XZ ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::~_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAE@XZ ENDP ; std::_List_buy<unsigned char *,std::allocator<unsigned char *> >::~_List_buy<unsigned char *,std::allocator<unsigned char *> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 e9 60	 sub	 ecx, 96			; 00000060H
  0000d	e8 00 00 00 00	 call	 ??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00012	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	74 10		 je	 SHORT $LN1@scalar
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	83 e9 60	 sub	 ecx, 96			; 00000060H
  00020	51		 push	 ecx
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??3@YAXPAX@Z
  00027	83 c4 04	 add	 esp, 4
$LN1@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 e8 60	 sub	 eax, 96			; 00000060H
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ ; std::basic_filebuf<char,std::char_traits<char> >::~basic_filebuf<char,std::char_traits<char> >
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0d		 je	 SHORT $LN1@scalar
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??3@YAXPAX@Z
  00021	83 c4 04	 add	 esp, 4
$LN1@scalar:
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 e9 70	 sub	 ecx, 112		; 00000070H
  0000d	e8 00 00 00 00	 call	 ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00012	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	74 10		 je	 SHORT $LN1@scalar
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	83 e9 70	 sub	 ecx, 112		; 00000070H
  00020	51		 push	 ecx
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??3@YAXPAX@Z
  00027	83 c4 04	 add	 esp, 4
$LN1@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 e8 70	 sub	 eax, 112		; 00000070H
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ??0?$fpos@H@std@@QAE@H_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__State$ = 8						; size = 4
__Fileposition$ = 12					; size = 8
??0?$fpos@H@std@@QAE@H_J@Z PROC				; std::fpos<int>::fpos<int>, COMDAT
; _this$ = ecx

; 48   : 		{	// construct with conversion state and C file position

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 55 0c	 mov	 edx, DWORD PTR __Fileposition$[ebp]
  0001d	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00020	8b 45 10	 mov	 eax, DWORD PTR __Fileposition$[ebp+4]
  00023	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	8b 55 08	 mov	 edx, DWORD PTR __State$[ebp]
  0002c	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 49   : 		}

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 0c 00	 ret	 12			; 0000000cH
??0?$fpos@H@std@@QAE@H_J@Z ENDP				; std::fpos<int>::fpos<int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?state@?$fpos@H@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?state@?$fpos@H@std@@QBEHXZ PROC			; std::fpos<int>::state, COMDAT
; _this$ = ecx

; 52   : 		{	// return conversion state

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 53   : 		return (_Mystate);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 54   : 		}

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?state@?$fpos@H@std@@QBEHXZ ENDP			; std::fpos<int>::state
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?seekpos@?$fpos@H@std@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?seekpos@?$fpos@H@std@@QBE_JXZ PROC			; std::fpos<int>::seekpos, COMDAT
; _this$ = ecx

; 62   : 		{	// return C file position

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 63   : 		return (_Fpos);

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]

; 64   : 		}

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?seekpos@?$fpos@H@std@@QBE_JXZ ENDP			; std::fpos<int>::seekpos
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ??B?$fpos@H@std@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$fpos@H@std@@QBE_JXZ PROC				; std::fpos<int>::operator __int64, COMDAT
; _this$ = ecx

; 67   : 		{	// return offset

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 68   : 		return ((streamoff)(_Myoff + _FPOSOFF(_Fpos)));

  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 10		 mov	 edx, DWORD PTR [eax]
  00010	03 51 08	 add	 edx, DWORD PTR [ecx+8]
  00013	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00016	13 71 0c	 adc	 esi, DWORD PTR [ecx+12]
  00019	8b c2		 mov	 eax, edx
  0001b	8b d6		 mov	 edx, esi

; 69   : 		}

  0001d	5e		 pop	 esi
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??B?$fpos@H@std@@QBE_JXZ ENDP				; std::fpos<int>::operator __int64
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*, COMDAT
; _this$ = ecx

; 334  : 		{	// return designated object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 335  : 		return ((reference)**(_Mybase *)this);

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*

; 336  : 		}

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ PROC	; std::vector<int,std::allocator<int> >::_Tidy, COMDAT
; _this$ = ecx

; 1535 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1536 : 		if (this->_Myfirst != pointer())

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000f	74 63		 je	 SHORT $LN2@Tidy

; 1537 : 			{	// something to free, destroy and deallocate it
; 1538 : 			this->_Orphan_all();

  00011	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base0@std@@QAEXXZ

; 1539 : 			_Destroy(this->_Myfirst, this->_Mylast);

  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00020	52		 push	 edx
  00021	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	51		 push	 ecx
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy

; 1540 : 			this->_Getal().deallocate(this->_Myfirst,
; 1541 : 				this->_Myend - this->_Myfirst);

  0002f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00038	2b 08		 sub	 ecx, DWORD PTR [eax]
  0003a	c1 f9 02	 sar	 ecx, 2
  0003d	51		 push	 ecx
  0003e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00041	8b 02		 mov	 eax, DWORD PTR [edx]
  00043	50		 push	 eax
  00044	8d 4d ff	 lea	 ecx, DWORD PTR $T1[ebp]
  00047	51		 push	 ecx
  00048	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
  00050	8b c8		 mov	 ecx, eax
  00052	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ; std::_Wrap_alloc<std::allocator<int> >::deallocate

; 1542 : 			this->_Myfirst = pointer();

  00057	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0005a	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 1543 : 			this->_Mylast = pointer();

  00060	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00063	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1544 : 			this->_Myend = pointer();

  0006a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
$LN2@Tidy:

; 1545 : 			}
; 1546 : 		}

  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@H@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@H@std@@QAE@XZ PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0?$allocator@H@std@@QAE@XZ ENDP			; std::allocator<int>::allocator<int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >, COMDAT
; _this$ = ecx

; 593  : 	_Vector_alloc(const _Alloc& = _Alloc())

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >

; 594  : 		{	// construct allocator from _Al
; 595  : 		}

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?begin@?$list@PAEV?$allocator@PAE@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@PAEV?$allocator@PAE@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@2@XZ PROC ; std::list<unsigned char *,std::allocator<unsigned char *> >::begin, COMDAT
; _this$ = ecx

; 1114 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1115 : 		return (iterator(this->_Nextnode(this->_Myhead), this));

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 ?_Nextnode@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAU?$_List_node@PAEPAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Nextnode
  00016	83 c4 04	 add	 esp, 4
  00019	8b 00		 mov	 eax, DWORD PTR [eax]
  0001b	50		 push	 eax
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0001f	e8 00 00 00 00	 call	 ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QAE@PAU?$_List_node@PAEPAX@1@PBV?$_List_val@U?$_List_simple_types@PAE@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::_List_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >
  00024	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1116 : 		}

  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?begin@?$list@PAEV?$allocator@PAE@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@2@XZ ENDP ; std::list<unsigned char *,std::allocator<unsigned char *> >::begin
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Unchecked_end@?$list@PAEV?$allocator@PAE@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Unchecked_end@?$list@PAEV?$allocator@PAE@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@2@XZ PROC ; std::list<unsigned char *,std::allocator<unsigned char *> >::_Unchecked_end, COMDAT
; _this$ = ecx

; 1146 : 		{	// return unchecked iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1147 : 		return (_Unchecked_iterator(this->_Myhead, this));

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00010	52		 push	 edx
  00011	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00014	e8 00 00 00 00	 call	 ??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QAE@PAU?$_List_node@PAEPAX@1@PBV?$_List_val@U?$_List_simple_types@PAE@std@@@1@@Z ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >
  00019	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1148 : 		}

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 04 00	 ret	 4
?_Unchecked_end@?$list@PAEV?$allocator@PAE@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@2@XZ ENDP ; std::list<unsigned char *,std::allocator<unsigned char *> >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?erase@?$list@PAEV?$allocator@PAE@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
_this$ = -8						; size = 4
__Pnode$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$list@PAEV?$allocator@PAE@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@2@@Z PROC ; std::list<unsigned char *,std::allocator<unsigned char *> >::erase, COMDAT
; _this$ = ecx

; 1416 : 		{	// erase element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1417 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1418 : 		if (_Where._Getcont() != this || _Where._Ptr == this->_Myhead)
; 1419 : 			_DEBUG_ERROR("list erase iterator outside range");
; 1420 : 		_Nodeptr _Pnode = (_Where++)._Mynode();
; 1421 : 		_Orphan_ptr(*this, _Pnode);
; 1422 : 
; 1423 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1424 : 		_Nodeptr _Pnode = (_Where++)._Mynode();

  0000a	6a 00		 push	 0
  0000c	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  0000f	50		 push	 eax
  00010	8d 4d 0c	 lea	 ecx, DWORD PTR __Where$[ebp]
  00013	e8 00 00 00 00	 call	 ??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QAE?AV01@H@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::operator++
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 ?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PAEPAX@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> >,std::_Iterator_base0>::_Mynode
  0001f	89 45 fc	 mov	 DWORD PTR __Pnode$[ebp], eax

; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Pnode != this->_Myhead)

  00022	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	8b 55 fc	 mov	 edx, DWORD PTR __Pnode$[ebp]
  00028	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0002a	74 6d		 je	 SHORT $LN1@erase

; 1428 : 			{	// not list head, safe to erase
; 1429 : 			this->_Nextnode(this->_Prevnode(_Pnode)) =
; 1430 : 				this->_Nextnode(_Pnode);

  0002c	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ?_Nextnode@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAU?$_List_node@PAEPAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Nextnode
  00035	83 c4 04	 add	 esp, 4
  00038	8b f0		 mov	 esi, eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 ?_Prevnode@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAU?$_List_node@PAEPAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Prevnode
  00043	83 c4 04	 add	 esp, 4
  00046	8b 10		 mov	 edx, DWORD PTR [eax]
  00048	52		 push	 edx
  00049	e8 00 00 00 00	 call	 ?_Nextnode@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAU?$_List_node@PAEPAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Nextnode
  0004e	83 c4 04	 add	 esp, 4
  00051	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00053	89 08		 mov	 DWORD PTR [eax], ecx

; 1431 : 			this->_Prevnode(this->_Nextnode(_Pnode)) =
; 1432 : 				this->_Prevnode(_Pnode);

  00055	8b 55 fc	 mov	 edx, DWORD PTR __Pnode$[ebp]
  00058	52		 push	 edx
  00059	e8 00 00 00 00	 call	 ?_Prevnode@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAU?$_List_node@PAEPAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Prevnode
  0005e	83 c4 04	 add	 esp, 4
  00061	8b f0		 mov	 esi, eax
  00063	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00066	50		 push	 eax
  00067	e8 00 00 00 00	 call	 ?_Nextnode@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAU?$_List_node@PAEPAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Nextnode
  0006c	83 c4 04	 add	 esp, 4
  0006f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00071	51		 push	 ecx
  00072	e8 00 00 00 00	 call	 ?_Prevnode@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAU?$_List_node@PAEPAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Prevnode
  00077	83 c4 04	 add	 esp, 4
  0007a	8b 16		 mov	 edx, DWORD PTR [esi]
  0007c	89 10		 mov	 DWORD PTR [eax], edx

; 1433 : 			this->_Freenode(_Pnode);

  0007e	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00081	50		 push	 eax
  00082	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00085	e8 00 00 00 00	 call	 ?_Freenode@?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAEXPAU?$_List_node@PAEPAX@2@@Z ; std::_List_buy<unsigned char *,std::allocator<unsigned char *> >::_Freenode

; 1434 : 			--this->_Mysize;

  0008a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00090	83 ea 01	 sub	 edx, 1
  00093	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00096	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN1@erase:

; 1435 : 			}
; 1436 : 		return (_Make_iter(_Where));

  00099	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  0009c	51		 push	 ecx
  0009d	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  000a0	52		 push	 edx
  000a1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a4	e8 00 00 00 00	 call	 ?_Make_iter@?$list@PAEV?$allocator@PAE@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@2@@Z ; std::list<unsigned char *,std::allocator<unsigned char *> >::_Make_iter
  000a9	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1437 : 		}

  000ac	5e		 pop	 esi
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c2 08 00	 ret	 8
?erase@?$list@PAEV?$allocator@PAE@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@2@@Z ENDP ; std::list<unsigned char *,std::allocator<unsigned char *> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Tidy@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXXZ PROC ; std::list<unsigned char *,std::allocator<unsigned char *> >::_Tidy, COMDAT
; _this$ = ecx

; 1926 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1927 : 		clear();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?clear@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXXZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::clear

; 1928 : 		}

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?_Tidy@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXXZ ENDP ; std::list<unsigned char *,std::allocator<unsigned char *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Al$ = 8						; size = 4
??0?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z PROC ; std::_List_buy<unsigned char *,std::allocator<unsigned char *> >::_List_buy<unsigned char *,std::allocator<unsigned char *> >, COMDAT
; _this$ = ecx

; 829  : 		{	// construct from allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __Al$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >

; 830  : 		}

  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z ENDP ; std::_List_buy<unsigned char *,std::allocator<unsigned char *> >::_List_buy<unsigned char *,std::allocator<unsigned char *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Freenode@?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAEXPAU?$_List_node@PAEPAX@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 1
$T2 = -3						; size = 1
$T3 = -2						; size = 1
$T4 = -1						; size = 1
__Pnode$ = 8						; size = 4
?_Freenode@?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAEXPAU?$_List_node@PAEPAX@2@@Z PROC ; std::_List_buy<unsigned char *,std::allocator<unsigned char *> >::_Freenode, COMDAT
; _this$ = ecx

; 854  : 		{	// give node back

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 855  : 		this->_Getal().destroy(
; 856  : 			_STD addressof(this->_Nextnode(_Pnode)));

  00009	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?_Nextnode@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAU?$_List_node@PAEPAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Nextnode
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??$addressof@PAU?$_List_node@PAEPAX@std@@@std@@YAPAPAU?$_List_node@PAEPAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<unsigned char *,void *> *>
  0001b	83 c4 04	 add	 esp, 4
  0001e	50		 push	 eax
  0001f	8d 4d ff	 lea	 ecx, DWORD PTR $T4[ebp]
  00022	51		 push	 ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Getal
  0002b	8b c8		 mov	 ecx, eax
  0002d	e8 00 00 00 00	 call	 ??$destroy@PAU?$_List_node@PAEPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::destroy<std::_List_node<unsigned char *,void *> *>

; 857  : 		this->_Getal().destroy(
; 858  : 			_STD addressof(this->_Prevnode(_Pnode)));

  00032	8b 55 08	 mov	 edx, DWORD PTR __Pnode$[ebp]
  00035	52		 push	 edx
  00036	e8 00 00 00 00	 call	 ?_Prevnode@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAU?$_List_node@PAEPAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Prevnode
  0003b	83 c4 04	 add	 esp, 4
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ??$addressof@PAU?$_List_node@PAEPAX@std@@@std@@YAPAPAU?$_List_node@PAEPAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<unsigned char *,void *> *>
  00044	83 c4 04	 add	 esp, 4
  00047	50		 push	 eax
  00048	8d 45 fe	 lea	 eax, DWORD PTR $T3[ebp]
  0004b	50		 push	 eax
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Getal
  00054	8b c8		 mov	 ecx, eax
  00056	e8 00 00 00 00	 call	 ??$destroy@PAU?$_List_node@PAEPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::destroy<std::_List_node<unsigned char *,void *> *>

; 859  : 		this->_Getal().destroy(
; 860  : 			_STD addressof(this->_Myval(_Pnode)));

  0005b	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0005e	51		 push	 ecx
  0005f	e8 00 00 00 00	 call	 ?_Myval@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAEPAU?$_List_node@PAEPAX@2@@Z ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Myval
  00064	83 c4 04	 add	 esp, 4
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 ??$addressof@PAE@std@@YAPAPAEAAPAE@Z ; std::addressof<unsigned char *>
  0006d	83 c4 04	 add	 esp, 4
  00070	50		 push	 eax
  00071	8d 55 fd	 lea	 edx, DWORD PTR $T2[ebp]
  00074	52		 push	 edx
  00075	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	e8 00 00 00 00	 call	 ?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Getal
  0007d	8b c8		 mov	 ecx, eax
  0007f	e8 00 00 00 00	 call	 ??$destroy@PAE@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAPAE@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::destroy<unsigned char *>

; 861  : 		this->_Getal().deallocate(_Pnode, 1);

  00084	6a 01		 push	 1
  00086	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00089	50		 push	 eax
  0008a	8d 4d fc	 lea	 ecx, DWORD PTR $T1[ebp]
  0008d	51		 push	 ecx
  0008e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00091	e8 00 00 00 00	 call	 ?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Getal
  00096	8b c8		 mov	 ecx, eax
  00098	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAEPAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::deallocate

; 862  : 		}

  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 04 00	 ret	 4
?_Freenode@?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAEXPAU?$_List_node@PAEPAX@2@@Z ENDP ; std::_List_buy<unsigned char *,std::allocator<unsigned char *> >::_Freenode
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??1?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@XZ PROC ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::~_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >, COMDAT
; _this$ = ecx

; 712  : 		{	// destroy head node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 713  : 		_Freeheadnode(this->_Myhead);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	51		 push	 ecx
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEXPAU?$_List_node@PAEPAX@2@@Z ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Freeheadnode

; 714  : 		}

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??1?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::~_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Nextnode@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAU?$_List_node@PAEPAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Nextnode@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAU?$_List_node@PAEPAX@2@PAU32@@Z PROC ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Nextnode, COMDAT

; 536  : 		{	// return reference to successor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 537  : 		return ((_Nodepref)_Pnode->_Next);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]

; 538  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?_Nextnode@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAU?$_List_node@PAEPAX@2@PAU32@@Z ENDP ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Nextnode
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Prevnode@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAU?$_List_node@PAEPAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Prevnode@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAU?$_List_node@PAEPAX@2@PAU32@@Z PROC ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Prevnode, COMDAT

; 541  : 		{	// return reference to predecessor pointer in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 542  : 		return ((_Nodepref)_Pnode->_Prev);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 04	 add	 eax, 4

; 543  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Prevnode@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAU?$_List_node@PAEPAX@2@PAU32@@Z ENDP ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Prevnode
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__File$ = 8						; size = 4
??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 146  : 		{	// construct from pointer to C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00036	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00039	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@

; 147  : 		_Init(_File, _Newfl);

  0003f	6a 00		 push	 0
  00041	8b 4d 08	 mov	 ecx, DWORD PTR __File$[ebp]
  00044	51		 push	 ecx
  00045	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 148  : 		}

  0004d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00054	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00057	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00061	59		 pop	 ecx
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
__ehhandler$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
  0001f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::basic_filebuf<char,std::char_traits<char> >
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
_TEXT	SEGMENT
$T2 = -32						; size = 4
tv88 = -28						; size = 4
tv89 = -24						; size = 4
__File$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Filename$ = 8						; size = 4
__Mode$ = 12						; size = 4
__Prot$ = 16						; size = 4
?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::open, COMDAT
; _this$ = ecx

; 265  : 		{	// open a C stream with specified mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 266  : 		_Filet *_File;
; 267  : 		if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)

  00028	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	83 78 50 00	 cmp	 DWORD PTR [eax+80], 0
  0002f	75 1e		 jne	 SHORT $LN1@open
  00031	8b 4d 10	 mov	 ecx, DWORD PTR __Prot$[ebp]
  00034	51		 push	 ecx
  00035	8b 55 0c	 mov	 edx, DWORD PTR __Mode$[ebp]
  00038	52		 push	 edx
  00039	8b 45 08	 mov	 eax, DWORD PTR __Filename$[ebp]
  0003c	50		 push	 eax
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Fiopen@std@@YAPAU_iobuf@@PBDHH@Z
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH
  00046	89 45 ec	 mov	 DWORD PTR __File$[ebp], eax
  00049	83 7d ec 00	 cmp	 DWORD PTR __File$[ebp], 0
  0004d	75 04		 jne	 SHORT $LN2@open
$LN1@open:

; 268  : 			return (0);	// open failed

  0004f	33 c0		 xor	 eax, eax
  00051	eb 52		 jmp	 SHORT $LN3@open
$LN2@open:

; 269  : 
; 270  : 		_Init(_File, _Openfl);

  00053	6a 01		 push	 1
  00055	8b 4d ec	 mov	 ecx, DWORD PTR __File$[ebp]
  00058	51		 push	 ecx
  00059	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 271  : 		_Initcvt(&_USE(_Mysb::getloc(), _Cvt));

  00061	8d 55 e0	 lea	 edx, DWORD PTR $T2[ebp]
  00064	52		 push	 edx
  00065	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ
  0006e	89 45 e8	 mov	 DWORD PTR tv89[ebp], eax
  00071	8b 45 e8	 mov	 eax, DWORD PTR tv89[ebp]
  00074	89 45 e4	 mov	 DWORD PTR tv88[ebp], eax
  00077	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007e	8b 4d e4	 mov	 ecx, DWORD PTR tv88[ebp]
  00081	51		 push	 ecx
  00082	e8 00 00 00 00	 call	 ??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z ; std::use_facet<std::codecvt<char,char,int> >
  00087	83 c4 04	 add	 esp, 4
  0008a	50		 push	 eax
  0008b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008e	e8 00 00 00 00	 call	 ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
  00093	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009a	8d 4d e0	 lea	 ecx, DWORD PTR $T2[ebp]
  0009d	e8 00 00 00 00	 call	 ??1locale@std@@QAE@XZ	; std::locale::~locale

; 272  : 		return (this);	// open succeeded

  000a2	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN3@open:

; 273  : 		}

  000a5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000af	59		 pop	 ecx
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::open
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ
_TEXT	SEGMENT
__Ans$ = -8						; size = 4
_this$ = -4						; size = 4
?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::close, COMDAT
; _this$ = ecx

; 339  : 		{	// close the C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 340  : 		_Myt *_Ans = this;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __Ans$[ebp], eax

; 341  : 		if (_Myfile == 0)

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 79 50 00	 cmp	 DWORD PTR [ecx+80], 0
  00016	75 09		 jne	 SHORT $LN4@close

; 342  : 			_Ans = 0;

  00018	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __Ans$[ebp], 0

; 343  : 		else

  0001f	eb 31		 jmp	 SHORT $LN3@close
$LN4@close:

; 344  : 			{	// put any homing sequence and close file
; 345  : 			if (!_Endwrite())

  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
  00029	0f b6 d0	 movzx	 edx, al
  0002c	85 d2		 test	 edx, edx
  0002e	75 07		 jne	 SHORT $LN2@close

; 346  : 				_Ans = 0;

  00030	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __Ans$[ebp], 0
$LN2@close:

; 347  : 			if (fclose(_Myfile) != 0)

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0003d	51		 push	 ecx
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  00044	83 c4 04	 add	 esp, 4
  00047	85 c0		 test	 eax, eax
  00049	74 07		 je	 SHORT $LN3@close

; 348  : 				_Ans = 0;

  0004b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __Ans$[ebp], 0
$LN3@close:

; 349  : 			}
; 350  : 		_Init(0, _Closefl);

  00052	6a 02		 push	 2
  00054	6a 00		 push	 0
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ; std::basic_filebuf<char,std::char_traits<char> >::_Init

; 351  : 		return (_Ans);

  0005e	8b 45 f8	 mov	 eax, DWORD PTR __Ans$[ebp]

; 352  : 		}

  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::close
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z
_TEXT	SEGMENT
__Nr$1 = -24						; size = 4
__Nw$2 = -20						; size = 4
__Pb$3 = -16						; size = 4
__Pn$4 = -12						; size = 4
tv66 = -8						; size = 4
_this$ = -4						; size = 4
__File$ = 8						; size = 4
__Which$ = 12						; size = 4
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Init, COMDAT
; _this$ = ecx

; 602  : 		{	// initialize to C stream _File after {new, open, close}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 603  : 		__PURE_APPDOMAIN_GLOBAL static _Myst _Stinit;	// initial state
; 604  : 
; 605  : 		_Closef = _Which == _Openfl;

  00009	83 7d 0c 01	 cmp	 DWORD PTR __Which$[ebp], 1
  0000d	75 09		 jne	 SHORT $LN4@Init
  0000f	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  00016	eb 07		 jmp	 SHORT $LN5@Init
$LN4@Init:
  00018	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN5@Init:
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8a 4d f8	 mov	 cl, BYTE PTR tv66[ebp]
  00025	88 48 4c	 mov	 BYTE PTR [eax+76], cl

; 606  : 		_Wrotesome = false;

  00028	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002b	c6 42 45 00	 mov	 BYTE PTR [edx+69], 0

; 607  : 
; 608  : 		_Mysb::_Init();	// initialize stream buffer base object

  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ

; 609  : 
; 610  :  #ifndef _IORCNT
; 611  :   #define _IORCNT	_IOCNT	/* read and write counts are the same */
; 612  :   #define _IOWCNT _IOCNT
; 613  :  #endif /* _IORCNT */
; 614  : 
; 615  :   #pragma warning(push)
; 616  :   #pragma warning(disable: 6240)	/* prefast noise VSW 489858 */
; 617  : 		if (_File != 0 && sizeof (_Elem) == 1)

  00038	83 7d 08 00	 cmp	 DWORD PTR __File$[ebp], 0
  0003c	74 4b		 je	 SHORT $LN1@Init
  0003e	b8 01 00 00 00	 mov	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 42		 je	 SHORT $LN1@Init

; 618  :   #pragma warning(pop)
; 619  : 
; 620  : 			{	// point inside C stream with [first, first + count) buffer
; 621  : 			_Elem **_Pb = (_Elem **)&_File->_IOBASE;

  00047	8b 4d 08	 mov	 ecx, DWORD PTR __File$[ebp]
  0004a	83 c1 08	 add	 ecx, 8
  0004d	89 4d f0	 mov	 DWORD PTR __Pb$3[ebp], ecx

; 622  : 			_Elem **_Pn = (_Elem **)&_File->_IOPTR;

  00050	8b 55 08	 mov	 edx, DWORD PTR __File$[ebp]
  00053	89 55 f4	 mov	 DWORD PTR __Pn$4[ebp], edx

; 623  : 			int *_Nr = (int *)&_File->_IORCNT;

  00056	8b 45 08	 mov	 eax, DWORD PTR __File$[ebp]
  00059	83 c0 04	 add	 eax, 4
  0005c	89 45 e8	 mov	 DWORD PTR __Nr$1[ebp], eax

; 624  : 			int *_Nw = (int *)&_File->_IOWCNT;

  0005f	8b 4d 08	 mov	 ecx, DWORD PTR __File$[ebp]
  00062	83 c1 04	 add	 ecx, 4
  00065	89 4d ec	 mov	 DWORD PTR __Nw$2[ebp], ecx

; 625  : 			_Mysb::_Init(_Pb, _Pn, _Nr, _Pb, _Pn, _Nw);

  00068	8b 55 ec	 mov	 edx, DWORD PTR __Nw$2[ebp]
  0006b	52		 push	 edx
  0006c	8b 45 f4	 mov	 eax, DWORD PTR __Pn$4[ebp]
  0006f	50		 push	 eax
  00070	8b 4d f0	 mov	 ecx, DWORD PTR __Pb$3[ebp]
  00073	51		 push	 ecx
  00074	8b 55 e8	 mov	 edx, DWORD PTR __Nr$1[ebp]
  00077	52		 push	 edx
  00078	8b 45 f4	 mov	 eax, DWORD PTR __Pn$4[ebp]
  0007b	50		 push	 eax
  0007c	8b 4d f0	 mov	 ecx, DWORD PTR __Pb$3[ebp]
  0007f	51		 push	 ecx
  00080	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAPAD0PAH001@Z
$LN1@Init:

; 626  : 			}
; 627  : 
; 628  : 		_Myfile = _File;

  00089	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008c	8b 45 08	 mov	 eax, DWORD PTR __File$[ebp]
  0008f	89 42 50	 mov	 DWORD PTR [edx+80], eax

; 629  : 		_State = _Stinit;

  00092	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00095	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@23@@Z@4HA ; `std::basic_filebuf<char,std::char_traits<char> >::_Init'::`2'::_Stinit
  0009b	89 51 48	 mov	 DWORD PTR [ecx+72], edx

; 630  : 		_Pcvt = 0;	// pointer to codecvt facet

  0009e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a1	c7 40 40 00 00
	00 00		 mov	 DWORD PTR [eax+64], 0

; 631  : 		}

  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c2 08 00	 ret	 8
?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
_TEXT	SEGMENT
$T2 = -88						; size = 4
__STRING_INC$3 = -84					; size = 4
$T4 = -80						; size = 4
$T5 = -76						; size = 4
$T6 = -72						; size = 4
$T7 = -68						; size = 4
$T8 = -64						; size = 4
tv143 = -60						; size = 4
__Count$9 = -56						; size = 4
$T10 = -52						; size = 1
$T11 = -51						; size = 1
$T12 = -50						; size = 1
$T13 = -49						; size = 1
_this$ = -48						; size = 4
__Dest$14 = -44						; size = 4
__Str$15 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite, COMDAT
; _this$ = ecx

; 634  : 		{	// put shift to initial conversion state, as needed

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx

; 635  : 		if (_Pcvt == 0 || !_Wrotesome)

  0002c	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  00033	74 0b		 je	 SHORT $LN14@Endwrite
  00035	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	0f b6 51 45	 movzx	 edx, BYTE PTR [ecx+69]
  0003c	85 d2		 test	 edx, edx
  0003e	75 0c		 jne	 SHORT $LN15@Endwrite
$LN14@Endwrite:

; 636  : 			return (true);

  00040	b0 01		 mov	 al, 1
  00042	e9 aa 01 00 00	 jmp	 $LN16@Endwrite

; 637  : 		else

  00047	e9 a5 01 00 00	 jmp	 $LN16@Endwrite
$LN15@Endwrite:

; 638  : 			{	// may have to put
; 639  : 			const int _STRING_INC = 8;

  0004c	c7 45 ac 08 00
	00 00		 mov	 DWORD PTR __STRING_INC$3[ebp], 8

; 640  : 			char *_Dest;
; 641  : 			if (_Traits::eq_int_type(_Traits::eof(), overflow()))

  00053	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00058	50		 push	 eax
  00059	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 10		 mov	 edx, DWORD PTR [eax]
  0005e	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00064	ff d0		 call	 eax
  00066	89 45 c0	 mov	 DWORD PTR $T8[ebp], eax
  00069	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0006e	89 45 bc	 mov	 DWORD PTR $T7[ebp], eax
  00071	8d 4d c0	 lea	 ecx, DWORD PTR $T8[ebp]
  00074	51		 push	 ecx
  00075	8d 55 bc	 lea	 edx, DWORD PTR $T7[ebp]
  00078	52		 push	 edx
  00079	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0007e	83 c4 08	 add	 esp, 8
  00081	0f b6 c0	 movzx	 eax, al
  00084	85 c0		 test	 eax, eax
  00086	74 07		 je	 SHORT $LN12@Endwrite

; 642  : 				return (false);

  00088	32 c0		 xor	 al, al
  0008a	e9 62 01 00 00	 jmp	 $LN16@Endwrite
$LN12@Endwrite:

; 643  : 
; 644  : 			string _Str(_STRING_INC, '\0');

  0008f	6a 00		 push	 0
  00091	6a 08		 push	 8
  00093	8d 4d d8	 lea	 ecx, DWORD PTR __Str$15[ebp]
  00096	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0009b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
$LN11@Endwrite:

; 645  : 			for (; ; )
; 646  : 				switch (_Pcvt->unshift(_State,
; 647  : 					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))

  000a2	8d 4d d4	 lea	 ecx, DWORD PTR __Dest$14[ebp]
  000a5	51		 push	 ecx
  000a6	8d 55 a8	 lea	 edx, DWORD PTR $T2[ebp]
  000a9	52		 push	 edx
  000aa	8d 4d d8	 lea	 ecx, DWORD PTR __Str$15[ebp]
  000ad	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  000b2	8b c8		 mov	 ecx, eax
  000b4	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  000b9	8b f0		 mov	 esi, eax
  000bb	8d 4d d8	 lea	 ecx, DWORD PTR __Str$15[ebp]
  000be	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  000c3	03 f0		 add	 esi, eax
  000c5	56		 push	 esi
  000c6	8d 45 b8	 lea	 eax, DWORD PTR $T6[ebp]
  000c9	50		 push	 eax
  000ca	8d 4d d8	 lea	 ecx, DWORD PTR __Str$15[ebp]
  000cd	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  000d2	8b c8		 mov	 ecx, eax
  000d4	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  000d9	50		 push	 eax
  000da	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  000dd	83 c1 48	 add	 ecx, 72			; 00000048H
  000e0	51		 push	 ecx
  000e1	8b 55 d0	 mov	 edx, DWORD PTR _this$[ebp]
  000e4	8b 4a 40	 mov	 ecx, DWORD PTR [edx+64]
  000e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?unshift@?$codecvt@DDH@std@@QBEHAAHPAD1AAPAD@Z
  000ed	89 45 c4	 mov	 DWORD PTR tv143[ebp], eax
  000f0	83 7d c4 00	 cmp	 DWORD PTR tv143[ebp], 0
  000f4	74 15		 je	 SHORT $LN7@Endwrite
  000f6	83 7d c4 01	 cmp	 DWORD PTR tv143[ebp], 1
  000fa	74 16		 je	 SHORT $LN6@Endwrite
  000fc	83 7d c4 03	 cmp	 DWORD PTR tv143[ebp], 3
  00100	0f 84 a7 00 00
	00		 je	 $LN2@Endwrite
  00106	e9 ba 00 00 00	 jmp	 $LN1@Endwrite
$LN7@Endwrite:

; 648  : 				{	// test result of homing conversion
; 649  : 				case codecvt_base::ok:
; 650  : 					_Wrotesome = false;	// homed successfully

  0010b	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  0010e	c6 40 45 00	 mov	 BYTE PTR [eax+69], 0
$LN6@Endwrite:

; 651  : 
; 652  : 				case codecvt_base::partial:	// fall through
; 653  : 					{	// put any generated bytes
; 654  : 					size_t _Count = _Dest - &*_Str.begin();

  00112	8d 4d b4	 lea	 ecx, DWORD PTR $T5[ebp]
  00115	51		 push	 ecx
  00116	8d 4d d8	 lea	 ecx, DWORD PTR __Str$15[ebp]
  00119	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  0011e	8b c8		 mov	 ecx, eax
  00120	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  00125	8b 55 d4	 mov	 edx, DWORD PTR __Dest$14[ebp]
  00128	2b d0		 sub	 edx, eax
  0012a	89 55 c8	 mov	 DWORD PTR __Count$9[ebp], edx

; 655  : 					if (0 < _Count && _Count !=
; 656  : 						fwrite(&*_Str.begin(), 1, _Count, _Myfile))

  0012d	74 47		 je	 SHORT $LN5@Endwrite
  0012f	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  00132	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00135	51		 push	 ecx
  00136	8b 55 c8	 mov	 edx, DWORD PTR __Count$9[ebp]
  00139	52		 push	 edx
  0013a	6a 01		 push	 1
  0013c	8d 45 b0	 lea	 eax, DWORD PTR $T4[ebp]
  0013f	50		 push	 eax
  00140	8d 4d d8	 lea	 ecx, DWORD PTR __Str$15[ebp]
  00143	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  00148	8b c8		 mov	 ecx, eax
  0014a	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  0014f	50		 push	 eax
  00150	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00156	83 c4 10	 add	 esp, 16			; 00000010H
  00159	39 45 c8	 cmp	 DWORD PTR __Count$9[ebp], eax
  0015c	74 18		 je	 SHORT $LN5@Endwrite

; 657  : 						return (false);	// write failed

  0015e	c6 45 cc 00	 mov	 BYTE PTR $T10[ebp], 0
  00162	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00169	8d 4d d8	 lea	 ecx, DWORD PTR __Str$15[ebp]
  0016c	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00171	8a 45 cc	 mov	 al, BYTE PTR $T10[ebp]
  00174	eb 7b		 jmp	 SHORT $LN16@Endwrite
$LN5@Endwrite:

; 658  : 					if (!_Wrotesome)

  00176	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00179	0f b6 51 45	 movzx	 edx, BYTE PTR [ecx+69]
  0017d	85 d2		 test	 edx, edx
  0017f	75 18		 jne	 SHORT $LN4@Endwrite

; 659  : 						return (true);

  00181	c6 45 cf 01	 mov	 BYTE PTR $T13[ebp], 1
  00185	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0018c	8d 4d d8	 lea	 ecx, DWORD PTR __Str$15[ebp]
  0018f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00194	8a 45 cf	 mov	 al, BYTE PTR $T13[ebp]
  00197	eb 58		 jmp	 SHORT $LN16@Endwrite
$LN4@Endwrite:

; 660  : 					if (_Count == 0)

  00199	83 7d c8 00	 cmp	 DWORD PTR __Count$9[ebp], 0
  0019d	75 0c		 jne	 SHORT $LN3@Endwrite

; 661  : 						_Str.append(_STRING_INC, '\0');	// try with more space

  0019f	6a 00		 push	 0
  001a1	6a 08		 push	 8
  001a3	8d 4d d8	 lea	 ecx, DWORD PTR __Str$15[ebp]
  001a6	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN3@Endwrite:

; 662  : 					break;

  001ab	eb 30		 jmp	 SHORT $LN8@Endwrite
$LN2@Endwrite:

; 663  : 					}
; 664  : 
; 665  : 				case codecvt_base::noconv:
; 666  : 					return (true);	// nothing to do

  001ad	c6 45 cd 01	 mov	 BYTE PTR $T11[ebp], 1
  001b1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001b8	8d 4d d8	 lea	 ecx, DWORD PTR __Str$15[ebp]
  001bb	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001c0	8a 45 cd	 mov	 al, BYTE PTR $T11[ebp]
  001c3	eb 2c		 jmp	 SHORT $LN16@Endwrite
$LN1@Endwrite:

; 667  : 
; 668  : 				default:
; 669  : 					return (false);	// conversion failed

  001c5	c6 45 ce 00	 mov	 BYTE PTR $T12[ebp], 0
  001c9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001d0	8d 4d d8	 lea	 ecx, DWORD PTR __Str$15[ebp]
  001d3	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001d8	8a 45 ce	 mov	 al, BYTE PTR $T12[ebp]
  001db	eb 14		 jmp	 SHORT $LN16@Endwrite
$LN8@Endwrite:

; 670  : 				}

  001dd	e9 c0 fe ff ff	 jmp	 $LN11@Endwrite

; 671  : 			}

  001e2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001e9	8d 4d d8	 lea	 ecx, DWORD PTR __Str$15[ebp]
  001ec	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN16@Endwrite:

; 672  : 		}

  001f1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001f4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001fb	59		 pop	 ecx
  001fc	5e		 pop	 esi
  001fd	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00200	33 cd		 xor	 ecx, ebp
  00202	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00207	8b e5		 mov	 esp, ebp
  00209	5d		 pop	 ebp
  0020a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Str$15[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Endwrite
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newpcvt$ = 8						; size = 4
?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt, COMDAT
; _this$ = ecx

; 675  : 		{	// initialize codecvt pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 676  : 		if (_Newpcvt->always_noconv())

  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Newpcvt$[ebp]
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?always_noconv@codecvt_base@std@@QBE_NXZ
  00010	0f b6 c0	 movzx	 eax, al
  00013	85 c0		 test	 eax, eax
  00015	74 0c		 je	 SHORT $LN2@Initcvt

; 677  : 			_Pcvt = 0;	// nothing to do

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	c7 41 40 00 00
	00 00		 mov	 DWORD PTR [ecx+64], 0

; 678  : 		else

  00021	eb 12		 jmp	 SHORT $LN3@Initcvt
$LN2@Initcvt:

; 679  : 			{	// set up for nontrivial codecvt facet
; 680  : 			_Pcvt = _Newpcvt;

  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 45 08	 mov	 eax, DWORD PTR __Newpcvt$[ebp]
  00029	89 42 40	 mov	 DWORD PTR [edx+64], eax

; 681  : 			_Mysb::_Init();	// reset any buffering

  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ
$LN3@Initcvt:

; 682  : 			}
; 683  : 		}

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPBV?$codecvt@DDH@2@@Z ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Initcvt
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back, COMDAT
; _this$ = ecx

; 687  : 		{	// restore buffer after putback

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 688  : 		if (_Mysb::eback() == &_Mychar)

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 44	 add	 ecx, 68			; 00000044H
  00016	3b c1		 cmp	 eax, ecx
  00018	75 1e		 jne	 SHORT $LN2@Reset_back

; 689  : 			_Mysb::setg(_Set_eback, _Set_egptr, _Set_egptr);

  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  00020	50		 push	 eax
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  00027	52		 push	 edx
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0002e	51		 push	 ecx
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
$LN2@Reset_back:

; 690  : 		}

  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Reset_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ PROC ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back, COMDAT
; _this$ = ecx

; 693  : 		{	// set up putback area

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 694  : 		if (_Mysb::eback() != &_Mychar)

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 44	 add	 ecx, 68			; 00000044H
  00016	3b c1		 cmp	 eax, ecx
  00018	74 1e		 je	 SHORT $LN1@Set_back

; 695  : 			{	// save current get buffer
; 696  : 			_Set_eback = _Mysb::eback();

  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	89 42 38	 mov	 DWORD PTR [edx+56], eax

; 697  : 			_Set_egptr = _Mysb::egptr();

  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
$LN1@Set_back:

; 698  : 			}
; 699  : 		_Mysb::setg(&_Mychar, &_Mychar, &_Mychar + 1);

  00038	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	83 c2 45	 add	 edx, 69			; 00000045H
  0003e	52		 push	 edx
  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	83 c0 44	 add	 eax, 68			; 00000044H
  00045	50		 push	 eax
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	83 c1 44	 add	 ecx, 68			; 00000044H
  0004c	51		 push	 ecx
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z

; 700  : 		}

  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ ENDP ; std::basic_filebuf<char,std::char_traits<char> >::_Set_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QBEAAPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QBEAAPAEXZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::operator*, COMDAT
; _this$ = ecx

; 362  : 		{	// return designated value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 363  : 		return ((reference)**(_Mybase *)this);

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QBEABQAEXZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::operator*

; 364  : 		}

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QBEAAPAEXZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*, COMDAT
; _this$ = ecx

; 71   : 		{	// return designated object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 72   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 73   : 		if (this->_Getcont() == 0
; 74   : 			|| this->_Ptr == 0
; 75   : 			|| this->_Ptr < ((_Mystr *)this->_Getcont())->_Myptr()
; 76   : 			|| ((_Mystr *)this->_Getcont())->_Myptr()
; 77   : 				+ ((_Mystr *)this->_Getcont())->_Mysize <= this->_Ptr)
; 78   : 			{	// report error
; 79   : 			_DEBUG_ERROR("string iterator not dereferencable");
; 80   : 			_SCL_SECURE_OUT_OF_RANGE;
; 81   : 			}
; 82   : 
; 83   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 84   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 85   : 		_SCL_SECURE_VALIDATE_RANGE(
; 86   : 			((_Mystr *)this->_Getcont())->_Myptr() <= this->_Ptr
; 87   : 			&& this->_Ptr < ((_Mystr *)this->_Getcont())->_Myptr()
; 88   : 				+ ((_Mystr *)this->_Getcont())->_Mysize);
; 89   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 90   : 
; 91   : 		_Analysis_assume_(this->_Ptr != 0);
; 92   : 
; 93   : 		return (*this->_Ptr);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]

; 94   : 		}

  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Alval$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Destroy, COMDAT
; _this$ = ecx

; 1478 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1479 : 		_Alty _Alval(this->_Getal());

  00013	8d 45 fb	 lea	 eax, DWORD PTR __Alval$[ebp]
  00016	50		 push	 eax
  00017	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal

; 1480 : 		_Destroy_range(_First, _Last, _Alval);

  0001f	8d 4d fb	 lea	 ecx, DWORD PTR __Alval$[ebp]
  00022	51		 push	 ecx
  00023	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00026	52		 push	 edx
  00027	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1481 : 		}

  00033	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00036	33 cd		 xor	 ecx, ebp
  00038	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 08 00	 ret	 8
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal, COMDAT
; _this$ = ecx

; 646  : 		{	// get reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 647  : 		return (_Alty());

  00007	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<int> >::_Wrap_alloc<std::allocator<int> >
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 648  : 		}

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<int,std::allocator<int> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

  00007	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ?deallocate@?$allocator@H@std@@QAEXPAHI@Z ; std::allocator<int>::deallocate

; 888  : 		}

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >, COMDAT
; _this$ = ecx

; 484  : 	_Vector_val()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 485  : 		{	// initialize values
; 486  : 		_Myfirst = pointer();

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 487  : 		_Mylast = pointer();

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 488  : 		_Myend = pointer();

  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 489  : 		}

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Make_iter@?$list@PAEV?$allocator@PAE@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?_Make_iter@?$list@PAEV?$allocator@PAE@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@2@@Z PROC ; std::list<unsigned char *,std::allocator<unsigned char *> >::_Make_iter, COMDAT
; _this$ = ecx

; 1156 : 		{	// make iterator from const_iterator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1157 : 		return (iterator(_Where._Ptr, this));

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00012	e8 00 00 00 00	 call	 ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QAE@PAU?$_List_node@PAEPAX@1@PBV?$_List_val@U?$_List_simple_types@PAE@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::_List_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >
  00017	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1158 : 		}

  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
?_Make_iter@?$list@PAEV?$allocator@PAE@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@2@@Z ENDP ; std::list<unsigned char *,std::allocator<unsigned char *> >::_Make_iter
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z PROC ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >, COMDAT
; _this$ = ecx

; 706  : 	_List_alloc(const _Alloc& = _Alloc())

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0?$_List_val@U?$_List_simple_types@PAE@std@@@std@@QAE@XZ ; std::_List_val<std::_List_simple_types<unsigned char *> >::_List_val<std::_List_simple_types<unsigned char *> >

; 707  : 		{	// construct head node, allocator from _Al
; 708  : 		this->_Myhead = _Buyheadnode();

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@XZ ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Buyheadnode
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	89 01		 mov	 DWORD PTR [ecx], eax

; 709  : 		}

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
??0?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z ENDP ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEXPAU?$_List_node@PAEPAX@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -3						; size = 1
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Pnode$ = 8						; size = 4
?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEXPAU?$_List_node@PAEPAX@2@@Z PROC ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Freeheadnode, COMDAT
; _this$ = ecx

; 777  : 		{	// free head node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 778  : 		this->_Getal().destroy(
; 779  : 			_STD addressof(this->_Nextnode(_Pnode)));

  00009	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?_Nextnode@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAU?$_List_node@PAEPAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Nextnode
  00012	83 c4 04	 add	 esp, 4
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??$addressof@PAU?$_List_node@PAEPAX@std@@@std@@YAPAPAU?$_List_node@PAEPAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<unsigned char *,void *> *>
  0001b	83 c4 04	 add	 esp, 4
  0001e	50		 push	 eax
  0001f	8d 4d ff	 lea	 ecx, DWORD PTR $T3[ebp]
  00022	51		 push	 ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Getal
  0002b	8b c8		 mov	 ecx, eax
  0002d	e8 00 00 00 00	 call	 ??$destroy@PAU?$_List_node@PAEPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::destroy<std::_List_node<unsigned char *,void *> *>

; 780  : 		this->_Getal().destroy(
; 781  : 			_STD addressof(this->_Prevnode(_Pnode)));

  00032	8b 55 08	 mov	 edx, DWORD PTR __Pnode$[ebp]
  00035	52		 push	 edx
  00036	e8 00 00 00 00	 call	 ?_Prevnode@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAU?$_List_node@PAEPAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Prevnode
  0003b	83 c4 04	 add	 esp, 4
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ??$addressof@PAU?$_List_node@PAEPAX@std@@@std@@YAPAPAU?$_List_node@PAEPAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<unsigned char *,void *> *>
  00044	83 c4 04	 add	 esp, 4
  00047	50		 push	 eax
  00048	8d 45 fe	 lea	 eax, DWORD PTR $T2[ebp]
  0004b	50		 push	 eax
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Getal
  00054	8b c8		 mov	 ecx, eax
  00056	e8 00 00 00 00	 call	 ??$destroy@PAU?$_List_node@PAEPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::destroy<std::_List_node<unsigned char *,void *> *>

; 782  : 		this->_Getal().deallocate(_Pnode, 1);

  0005b	6a 01		 push	 1
  0005d	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00060	51		 push	 ecx
  00061	8d 55 fd	 lea	 edx, DWORD PTR $T1[ebp]
  00064	52		 push	 edx
  00065	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	e8 00 00 00 00	 call	 ?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Getal
  0006d	8b c8		 mov	 ecx, eax
  0006f	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAEPAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::deallocate

; 783  : 		}

  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEXPAU?$_List_node@PAEPAX@2@@Z ENDP ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Freeheadnode
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@2@XZ PROC ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Getal, COMDAT
; _this$ = ecx

; 809  : 		{	// get reference to allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 810  : 		return (_Alty());

  00007	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 811  : 		}

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@2@XZ ENDP ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAEPAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAEPAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

  00007	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAU?$_List_node@PAEPAX@2@I@Z ; std::allocator<std::_List_node<unsigned char *,void *> >::deallocate

; 888  : 		}

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAEPAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Myval@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAEPAU?$_List_node@PAEPAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAEPAU?$_List_node@PAEPAX@2@@Z PROC ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Myval, COMDAT

; 546  : 		{	// return reference to value in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 547  : 		return ((reference)_Pnode->_Myval);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 08	 add	 eax, 8

; 548  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?_Myval@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAEPAU?$_List_node@PAEPAX@2@@Z ENDP ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Myval
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QAE@PAU?$_List_node@PAEPAX@1@PBV?$_List_val@U?$_List_simple_types@PAE@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QAE@PAU?$_List_node@PAEPAX@1@PBV?$_List_val@U?$_List_simple_types@PAE@std@@@1@@Z PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::_List_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >, COMDAT
; _this$ = ecx

; 345  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR __Plist$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QAE@PAU?$_List_node@PAEPAX@1@PBV?$_List_val@U?$_List_simple_types@PAE@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >

; 346  : 		}

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QAE@PAU?$_List_node@PAEPAX@1@PBV?$_List_val@U?$_List_simple_types@PAE@std@@@1@@Z ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::_List_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QBEABQAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QBEABQAEXZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::operator*, COMDAT
; _this$ = ecx

; 204  : 		{	// return designated value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 205  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 206  : 		if (this->_Getcont() == 0
; 207  : 			|| this->_Ptr == 0
; 208  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 209  : 			{	// report error
; 210  : 			_DEBUG_ERROR("list iterator not dereferencable");
; 211  : 			_SCL_SECURE_OUT_OF_RANGE;
; 212  : 			}
; 213  : 
; 214  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 215  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 216  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 217  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 218  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 219  : 
; 220  : 		return (_Mylist::_Myval(this->_Ptr));

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 ?_Myval@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAEPAU?$_List_node@PAEPAX@2@@Z ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Myval
  00012	83 c4 04	 add	 esp, 4

; 221  : 		}

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QBEABQAEXZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Tmp$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::operator++, COMDAT
; _this$ = ecx

; 245  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 246  : 		_Myiter _Tmp = *this;

  00013	6a 01		 push	 1
  00015	8d 4d f8	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  00018	e8 00 00 00 00	 call	 ?__autoclassinit@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QAEXI@Z
  0001d	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	89 4d f8	 mov	 DWORD PTR __Tmp$[ebp], ecx

; 247  : 		++*this;

  00025	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::operator++

; 248  : 		return (_Tmp);

  0002d	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00030	8b 45 f8	 mov	 eax, DWORD PTR __Tmp$[ebp]
  00033	89 02		 mov	 DWORD PTR [edx], eax
  00035	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 249  : 		}

  00038	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003b	33 cd		 xor	 ecx, ebp
  0003d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c2 08 00	 ret	 8
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PAEPAX@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PAEPAX@2@XZ PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> >,std::_Iterator_base0>::_Mynode, COMDAT
; _this$ = ecx

; 95   : 		{	// return node pointer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 96   : 		return (_Ptr);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]

; 97   : 		}

  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PAEPAX@2@XZ ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> >,std::_Iterator_base0>::_Mynode
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QAE@PAU?$_List_node@PAEPAX@1@PBV?$_List_val@U?$_List_simple_types@PAE@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QAE@PAU?$_List_node@PAEPAX@1@PBV?$_List_val@U?$_List_simple_types@PAE@std@@@1@@Z PROC ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >, COMDAT
; _this$ = ecx

; 124  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR __Plist$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PAEPAX@1@PBV?$_List_val@U?$_List_simple_types@PAE@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> >,std::_Iterator_base0>

; 125  : 		}

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QAE@PAU?$_List_node@PAEPAX@1@PBV?$_List_val@U?$_List_simple_types@PAE@std@@@1@@Z ENDP ; std::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::_List_unchecked_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?__autoclassinit@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_$initVBases$ = 8					; size = 4
?__autoclassinit@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QAEXI@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::__autoclassinit, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?__autoclassinit@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@U_Iterator_base0@2@@std@@QAEXI@Z
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?__autoclassinit@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QAEXI@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::__autoclassinit
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?__autoclassinit@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@U_Iterator_base0@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_$initVBases$ = 8					; size = 4
?__autoclassinit@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@U_Iterator_base0@2@@std@@QAEXI@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> >,std::_Iterator_base0>::__autoclassinit, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?__autoclassinit@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@U_Iterator_base0@2@@std@@QAEXI@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> >,std::_Iterator_base0>::__autoclassinit
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@H@std@@QAEXPAHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@H@std@@QAEXPAHI@Z PROC		; std::allocator<int>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

  00007	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000a	50		 push	 eax
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??3@YAXPAX@Z
  00011	83 c4 04	 add	 esp, 4

; 587  : 		}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?deallocate@?$allocator@H@std@@QAEXPAHI@Z ENDP		; std::allocator<int>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<int> >::_Wrap_alloc<std::allocator<int> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0?$allocator@H@std@@QAE@XZ ; std::allocator<int>::allocator<int>

; 831  : 		}

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<int> >::_Wrap_alloc<std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@XZ PROC ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Buyheadnode, COMDAT
; _this$ = ecx

; 772  : 		{	// get head node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 773  : 		return (_Buynode0(_Nodeptr(), _Nodeptr()));

  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@PAU32@0@Z ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Buynode0

; 774  : 		}

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@XZ ENDP ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Buyheadnode
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAE@XZ ; std::allocator<std::_List_node<unsigned char *,void *> >::allocator<std::_List_node<unsigned char *,void *> >

; 831  : 		}

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAU?$_List_node@PAEPAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAU?$_List_node@PAEPAX@2@I@Z PROC ; std::allocator<std::_List_node<unsigned char *,void *> >::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

  00007	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000a	50		 push	 eax
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??3@YAXPAX@Z
  00011	83 c4 04	 add	 esp, 4

; 587  : 		}

  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?deallocate@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAU?$_List_node@PAEPAX@2@I@Z ENDP ; std::allocator<std::_List_node<unsigned char *,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_val@U?$_List_simple_types@PAE@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_List_val@U?$_List_simple_types@PAE@std@@@std@@QAE@XZ PROC ; std::_List_val<std::_List_simple_types<unsigned char *> >::_List_val<std::_List_simple_types<unsigned char *> >, COMDAT
; _this$ = ecx

; 529  : 	_List_val()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 530  : 		{	// initialize data
; 531  : 		this->_Myhead = 0;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 532  : 		this->_Mysize = 0;

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 533  : 		}

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0?$_List_val@U?$_List_simple_types@PAE@std@@@std@@QAE@XZ ENDP ; std::_List_val<std::_List_simple_types<unsigned char *> >::_List_val<std::_List_simple_types<unsigned char *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QAE@PAU?$_List_node@PAEPAX@1@PBV?$_List_val@U?$_List_simple_types@PAE@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QAE@PAU?$_List_node@PAEPAX@1@PBV?$_List_val@U?$_List_simple_types@PAE@std@@@1@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >, COMDAT
; _this$ = ecx

; 187  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR __Plist$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PAEPAX@1@PBV?$_List_val@U?$_List_simple_types@PAE@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> >,std::_Iterator_base0>

; 188  : 		}

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QAE@PAU?$_List_node@PAEPAX@1@PBV?$_List_val@U?$_List_simple_types@PAE@std@@@1@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::operator++, COMDAT
; _this$ = ecx

; 224  : 		{	// preincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 225  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 226  : 		if (this->_Getcont() == 0
; 227  : 			|| this->_Ptr == 0
; 228  : 			|| this->_Ptr == ((_Mylist *)this->_Getcont())->_Myhead)
; 229  : 			{	// report error
; 230  : 			_DEBUG_ERROR("list iterator not incrementable");
; 231  : 			_SCL_SECURE_OUT_OF_RANGE;
; 232  : 			}
; 233  : 
; 234  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 235  : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0 && this->_Ptr != 0);
; 236  : 		_SCL_SECURE_VALIDATE_RANGE(this->_Ptr !=
; 237  : 			((_Mylist *)this->_Getcont())->_Myhead);
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 239  : 
; 240  : 		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 ?_Nextnode@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAU?$_List_node@PAEPAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Nextnode
  00012	83 c4 04	 add	 esp, 4
  00015	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00018	8b 00		 mov	 eax, DWORD PTR [eax]
  0001a	89 02		 mov	 DWORD PTR [edx], eax

; 241  : 		return (*this);

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 242  : 		}

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PAEPAX@1@PBV?$_List_val@U?$_List_simple_types@PAE@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PAEPAX@1@PBV?$_List_val@U?$_List_simple_types@PAE@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 44   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 45   : 		this->_Adopt(_Plist);

  0000f	8b 55 0c	 mov	 edx, DWORD PTR __Plist$[ebp]
  00012	52		 push	 edx
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ; std::_Iterator_base0::_Adopt

; 46   : 		}

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PAEPAX@1@PBV?$_List_val@U?$_List_simple_types@PAE@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@PAU32@0@Z
_TEXT	SEGMENT
tv135 = -44						; size = 4
tv134 = -40						; size = 4
tv133 = -36						; size = 4
tv132 = -32						; size = 4
_this$ = -28						; size = 4
__Pnode$ = -24						; size = 4
$T2 = -20						; size = 1
$T3 = -19						; size = 1
$T4 = -18						; size = 1
$T5 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@PAU32@0@Z PROC ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Buynode0, COMDAT
; _this$ = ecx

; 787  : 		{	// allocate a node and set links

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@PAU32@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 788  : 		_Nodeptr _Pnode = this->_Getal().allocate(1);

  0002f	6a 01		 push	 1
  00031	8d 45 ef	 lea	 eax, DWORD PTR $T5[ebp]
  00034	50		 push	 eax
  00035	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Getal
  0003d	8b c8		 mov	 ecx, eax
  0003f	e8 00 00 00 00	 call	 ?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::allocate
  00044	89 45 e8	 mov	 DWORD PTR __Pnode$[ebp], eax

; 789  : 
; 790  : 		if (_Next == _Nodeptr())

  00047	83 7d 08 00	 cmp	 DWORD PTR __Next$[ebp], 0
  0004b	75 0c		 jne	 SHORT $LN2@Buynode0

; 791  : 			{	// point at self
; 792  : 			_Next = _Pnode;

  0004d	8b 4d e8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00050	89 4d 08	 mov	 DWORD PTR __Next$[ebp], ecx

; 793  : 			_Prev = _Pnode;

  00053	8b 55 e8	 mov	 edx, DWORD PTR __Pnode$[ebp]
  00056	89 55 0c	 mov	 DWORD PTR __Prev$[ebp], edx
$LN2@Buynode0:

; 794  : 			}
; 795  : 		_TRY_BEGIN

  00059	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 796  : 		this->_Getal().construct(
; 797  : 			_STD addressof(this->_Nextnode(_Pnode)), _Next);

  00060	8b 45 e8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ?_Nextnode@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAU?$_List_node@PAEPAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Nextnode
  00069	83 c4 04	 add	 esp, 4
  0006c	89 45 e0	 mov	 DWORD PTR tv132[ebp], eax
  0006f	8d 4d ee	 lea	 ecx, DWORD PTR $T4[ebp]
  00072	51		 push	 ecx
  00073	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	e8 00 00 00 00	 call	 ?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Getal
  0007b	89 45 dc	 mov	 DWORD PTR tv133[ebp], eax
  0007e	8d 55 08	 lea	 edx, DWORD PTR __Next$[ebp]
  00081	52		 push	 edx
  00082	8b 45 e0	 mov	 eax, DWORD PTR tv132[ebp]
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??$addressof@PAU?$_List_node@PAEPAX@std@@@std@@YAPAPAU?$_List_node@PAEPAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<unsigned char *,void *> *>
  0008b	83 c4 04	 add	 esp, 4
  0008e	50		 push	 eax
  0008f	8b 4d dc	 mov	 ecx, DWORD PTR tv133[ebp]
  00092	e8 00 00 00 00	 call	 ??$construct@PAU?$_List_node@PAEPAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::construct<std::_List_node<unsigned char *,void *> *,std::_List_node<unsigned char *,void *> * &>

; 798  : 		this->_Getal().construct(
; 799  : 			_STD addressof(this->_Prevnode(_Pnode)), _Prev);

  00097	8b 4d e8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0009a	51		 push	 ecx
  0009b	e8 00 00 00 00	 call	 ?_Prevnode@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAU?$_List_node@PAEPAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Prevnode
  000a0	83 c4 04	 add	 esp, 4
  000a3	89 45 d8	 mov	 DWORD PTR tv134[ebp], eax
  000a6	8d 55 ed	 lea	 edx, DWORD PTR $T3[ebp]
  000a9	52		 push	 edx
  000aa	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000ad	e8 00 00 00 00	 call	 ?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Getal
  000b2	89 45 d4	 mov	 DWORD PTR tv135[ebp], eax
  000b5	8d 45 0c	 lea	 eax, DWORD PTR __Prev$[ebp]
  000b8	50		 push	 eax
  000b9	8b 4d d8	 mov	 ecx, DWORD PTR tv134[ebp]
  000bc	51		 push	 ecx
  000bd	e8 00 00 00 00	 call	 ??$addressof@PAU?$_List_node@PAEPAX@std@@@std@@YAPAPAU?$_List_node@PAEPAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<unsigned char *,void *> *>
  000c2	83 c4 04	 add	 esp, 4
  000c5	50		 push	 eax
  000c6	8b 4d d4	 mov	 ecx, DWORD PTR tv135[ebp]
  000c9	e8 00 00 00 00	 call	 ??$construct@PAU?$_List_node@PAEPAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@AAPAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::construct<std::_List_node<unsigned char *,void *> *,std::_List_node<unsigned char *,void *> * &>
  000ce	eb 28		 jmp	 SHORT $LN5@Buynode0
__catch$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@PAU32@0@Z$0:

; 800  : 		_CATCH_ALL
; 801  : 		this->_Getal().deallocate(_Pnode, 1);

  000d0	6a 01		 push	 1
  000d2	8b 55 e8	 mov	 edx, DWORD PTR __Pnode$[ebp]
  000d5	52		 push	 edx
  000d6	8d 45 ec	 lea	 eax, DWORD PTR $T2[ebp]
  000d9	50		 push	 eax
  000da	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000dd	e8 00 00 00 00	 call	 ?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Getal
  000e2	8b c8		 mov	 ecx, eax
  000e4	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAEPAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::deallocate

; 802  : 		_RERAISE;

  000e9	6a 00		 push	 0
  000eb	6a 00		 push	 0
  000ed	e8 00 00 00 00	 call	 __CxxThrowException@8

; 803  : 		_CATCH_END

  000f2	b8 00 00 00 00	 mov	 eax, $LN8@Buynode0
  000f7	c3		 ret	 0
$LN5@Buynode0:
  000f8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000ff	eb 07		 jmp	 SHORT __tryend$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@PAU32@0@Z$1
$LN8@Buynode0:
  00101	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@PAU32@0@Z$1:

; 804  : 
; 805  : 		return (_Pnode);

  00108	8b 45 e8	 mov	 eax, DWORD PTR __Pnode$[ebp]
$LN4@Buynode0:

; 806  : 		}

  0010b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0010e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00115	59		 pop	 ecx
  00116	5f		 pop	 edi
  00117	5e		 pop	 esi
  00118	5b		 pop	 ebx
  00119	8b e5		 mov	 esp, ebp
  0011b	5d		 pop	 ebp
  0011c	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@PAU32@0@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@PAU32@0@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@PAU32@0@Z ENDP ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Buynode0
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAE@XZ PROC ; std::allocator<std::_List_node<unsigned char *,void *> >::allocator<std::_List_node<unsigned char *,void *> >, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAE@XZ ENDP ; std::allocator<std::_List_node<unsigned char *,void *> >::allocator<std::_List_node<unsigned char *,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

  00007	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?allocate@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@I@Z ; std::allocator<std::_List_node<unsigned char *,void *> >::allocate

; 877  : 		}

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@I@Z PROC ; std::allocator<std::_List_node<unsigned char *,void *> >::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

  00007	6a 00		 push	 0
  00009	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??$_Allocate@U?$_List_node@PAEPAX@std@@@std@@YAPAU?$_List_node@PAEPAX@0@IPAU10@@Z ; std::_Allocate<std::_List_node<unsigned char *,void *> >
  00012	83 c4 08	 add	 esp, 8

; 592  : 		}

  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?allocate@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@I@Z ENDP ; std::allocator<std::_List_node<unsigned char *,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\types.hpp
;	COMDAT ??0?$Scalar_@N@cv@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$Scalar_@N@cv@@QAE@XZ PROC				; cv::Scalar_<double>::Scalar_<double>, COMDAT
; _this$ = ecx

; 1971 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0?$Vec@N$03@cv@@QAE@XZ ; cv::Vec<double,4>::Vec<double,4>

; 1972 :     this->val[0] = this->val[1] = this->val[2] = this->val[3] = 0;

  0000f	b8 08 00 00 00	 mov	 eax, 8
  00014	6b c0 03	 imul	 eax, 3
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@0000000000000000
  00022	f2 0f 11 04 01	 movsd	 QWORD PTR [ecx+eax], xmm0
  00027	ba 08 00 00 00	 mov	 edx, 8
  0002c	d1 e2		 shl	 edx, 1
  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@0000000000000000
  00039	f2 0f 11 04 10	 movsd	 QWORD PTR [eax+edx], xmm0
  0003e	b9 08 00 00 00	 mov	 ecx, 8
  00043	c1 e1 00	 shl	 ecx, 0
  00046	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00049	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@0000000000000000
  00051	f2 0f 11 04 0a	 movsd	 QWORD PTR [edx+ecx], xmm0
  00056	b8 08 00 00 00	 mov	 eax, 8
  0005b	6b c0 00	 imul	 eax, 0
  0005e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@0000000000000000
  00069	f2 0f 11 04 01	 movsd	 QWORD PTR [ecx+eax], xmm0

; 1973 : }

  0006e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
??0?$Scalar_@N@cv@@QAE@XZ ENDP				; cv::Scalar_<double>::Scalar_<double>
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\types.hpp
;	COMDAT ??0?$Size_@H@cv@@QAE@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__width$ = 8						; size = 4
__height$ = 12						; size = 4
??0?$Size_@H@cv@@QAE@HH@Z PROC				; cv::Size_<int>::Size_<int>, COMDAT
; _this$ = ecx

; 1569 :     : width(_width), height(_height) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __width$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR __height$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??0?$Size_@H@cv@@QAE@HH@Z ENDP				; cv::Size_<int>::Size_<int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\types.hpp
;	COMDAT ??0?$Size_@H@cv@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$Size_@H@cv@@QAE@XZ PROC				; cv::Size_<int>::Size_<int>, COMDAT
; _this$ = ecx

; 1565 :     : width(0), height(0) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0?$Size_@H@cv@@QAE@XZ ENDP				; cv::Size_<int>::Size_<int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\types.hpp
;	COMDAT ??4?$Size_@H@cv@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_sz$ = 8						; size = 4
??4?$Size_@H@cv@@QAEAAV01@ABV01@@Z PROC			; cv::Size_<int>::operator=, COMDAT
; _this$ = ecx

; 1587 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1588 :     width = sz.width; height = sz.height;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _sz$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _sz$[ebp]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1589 :     return *this;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 1590 : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??4?$Size_@H@cv@@QAEAAV01@ABV01@@Z ENDP			; cv::Size_<int>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\types.hpp
;	COMDAT ??0?$Point_@H@cv@@QAE@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
??0?$Point_@H@cv@@QAE@HH@Z PROC				; cv::Point_<int>::Point_<int>, COMDAT
; _this$ = ecx

; 1076 :     : x(_x), y(_y) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __x$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR __y$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??0?$Point_@H@cv@@QAE@HH@Z ENDP				; cv::Point_<int>::Point_<int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\types.hpp
;	COMDAT ??0?$Rect_@H@cv@@QAE@HHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__width$ = 16						; size = 4
__height$ = 20						; size = 4
??0?$Rect_@H@cv@@QAE@HHHH@Z PROC			; cv::Rect_<int>::Rect_<int>, COMDAT
; _this$ = ecx

; 1684 :     : x(_x), y(_y), width(_width), height(_height) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __x$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR __y$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 55 10	 mov	 edx, DWORD PTR __width$[ebp]
  0001e	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 4d 14	 mov	 ecx, DWORD PTR __height$[ebp]
  00027	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 10 00	 ret	 16			; 00000010H
??0?$Rect_@H@cv@@QAE@HHHH@Z ENDP			; cv::Rect_<int>::Rect_<int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
$T2 = -128						; size = 4
$T3 = -124						; size = 4
tv286 = -120						; size = 8
$T4 = -112						; size = 4
tv337 = -108						; size = 8
tv288 = -100						; size = 4
tv325 = -96						; size = 8
$T5 = -88						; size = 4
$T6 = -84						; size = 4
tv137 = -80						; size = 4
tv284 = -76						; size = 4
tv285 = -72						; size = 4
tv283 = -68						; size = 4
tv289 = -64						; size = 4
tv135 = -60						; size = 8
__Count$ = -52						; size = 8
__Pad$ = -44						; size = 8
tv287 = -34						; size = 1
tv282 = -33						; size = 1
__State$ = -32						; size = 4
__Ok$ = -28						; size = 8
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 783  : 	{	// insert NTBS into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 70	 sub	 esp, 112		; 00000070H
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001f	53		 push	 ebx
  00020	56		 push	 esi
  00021	57		 push	 edi
  00022	50		 push	 eax
  00023	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 784  : 	typedef char _Elem;
; 785  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 786  : 	ios_base::iostate _State = ios_base::goodbit;

  0002f	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 787  : 	streamsize _Count = (streamsize)_Traits::length(_Val);	// may overflow

  00036	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?length@?$char_traits@D@std@@SAIPBD@Z ; std::char_traits<char>::length
  0003f	83 c4 04	 add	 esp, 4
  00042	33 c9		 xor	 ecx, ecx
  00044	89 45 cc	 mov	 DWORD PTR __Count$[ebp], eax
  00047	89 4d d0	 mov	 DWORD PTR __Count$[ebp+4], ecx

; 788  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
; 789  : 		? 0 : _Ostr.width() - _Count;

  0004a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0004d	8b 02		 mov	 eax, DWORD PTR [edx]
  0004f	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00052	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  0005b	89 45 a0	 mov	 DWORD PTR tv325[ebp], eax
  0005e	89 55 a4	 mov	 DWORD PTR tv325[ebp+4], edx
  00061	83 7d a4 00	 cmp	 DWORD PTR tv325[ebp+4], 0
  00065	7c 50		 jl	 SHORT $LN17@operator
  00067	7f 06		 jg	 SHORT $LN24@operator
  00069	83 7d a0 00	 cmp	 DWORD PTR tv325[ebp], 0
  0006d	76 48		 jbe	 SHORT $LN17@operator
$LN24@operator:
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00072	8b 11		 mov	 edx, DWORD PTR [ecx]
  00074	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00077	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  00080	89 45 94	 mov	 DWORD PTR tv337[ebp], eax
  00083	89 55 98	 mov	 DWORD PTR tv337[ebp+4], edx
  00086	8b 45 98	 mov	 eax, DWORD PTR tv337[ebp+4]
  00089	3b 45 d0	 cmp	 eax, DWORD PTR __Count$[ebp+4]
  0008c	7c 29		 jl	 SHORT $LN17@operator
  0008e	7f 08		 jg	 SHORT $LN25@operator
  00090	8b 4d 94	 mov	 ecx, DWORD PTR tv337[ebp]
  00093	3b 4d cc	 cmp	 ecx, DWORD PTR __Count$[ebp]
  00096	76 1f		 jbe	 SHORT $LN17@operator
$LN25@operator:
  00098	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0009b	8b 02		 mov	 eax, DWORD PTR [edx]
  0009d	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000a0	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000a9	2b 45 cc	 sub	 eax, DWORD PTR __Count$[ebp]
  000ac	1b 55 d0	 sbb	 edx, DWORD PTR __Count$[ebp+4]
  000af	89 45 c4	 mov	 DWORD PTR tv135[ebp], eax
  000b2	89 55 c8	 mov	 DWORD PTR tv135[ebp+4], edx
  000b5	eb 09		 jmp	 SHORT $LN18@operator
$LN17@operator:
  000b7	66 0f 57 c0	 xorpd	 xmm0, xmm0
  000bb	66 0f 13 45 c4	 movlpd	 QWORD PTR tv135[ebp], xmm0
$LN18@operator:
  000c0	8b 4d c4	 mov	 ecx, DWORD PTR tv135[ebp]
  000c3	89 4d d4	 mov	 DWORD PTR __Pad$[ebp], ecx
  000c6	8b 55 c8	 mov	 edx, DWORD PTR tv135[ebp+4]
  000c9	89 55 d8	 mov	 DWORD PTR __Pad$[ebp+4], edx

; 790  : 	const typename _Myos::sentry _Ok(_Ostr);

  000cc	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000cf	50		 push	 eax
  000d0	8d 4d e4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000d3	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  000d8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 791  : 
; 792  : 	if (!_Ok)

  000df	8d 4d e4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  000e2	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ?$_Bool_struct@V?$basic_ostream@DU?$char_traits@D@std@@@std@@@2@HXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct<std::basic_ostream<char,std::char_traits<char> > >::*
  000e7	83 f8 ff	 cmp	 eax, -1
  000ea	75 0e		 jne	 SHORT $LN14@operator

; 793  : 		_State |= ios_base::badbit;

  000ec	8b 4d e0	 mov	 ecx, DWORD PTR __State$[ebp]
  000ef	83 c9 04	 or	 ecx, 4
  000f2	89 4d e0	 mov	 DWORD PTR __State$[ebp], ecx

; 794  : 	else

  000f5	e9 ec 01 00 00	 jmp	 $LN13@operator
$LN14@operator:

; 795  : 		{	// state okay, insert
; 796  : 		_TRY_IO_BEGIN

  000fa	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 797  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  000fe	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00101	8b 02		 mov	 eax, DWORD PTR [edx]
  00103	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00106	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00109	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  0010f	89 45 b0	 mov	 DWORD PTR tv137[ebp], eax
  00112	8b 4d b0	 mov	 ecx, DWORD PTR tv137[ebp]
  00115	81 e1 c0 01 00
	00		 and	 ecx, 448		; 000001c0H
  0011b	83 f9 40	 cmp	 ecx, 64			; 00000040H
  0011e	0f 84 92 00 00
	00		 je	 $LN11@operator

; 798  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00124	eb 12		 jmp	 SHORT $LN10@operator
$LN9@operator:
  00126	8b 55 d4	 mov	 edx, DWORD PTR __Pad$[ebp]
  00129	83 ea 01	 sub	 edx, 1
  0012c	8b 45 d8	 mov	 eax, DWORD PTR __Pad$[ebp+4]
  0012f	83 d8 00	 sbb	 eax, 0
  00132	89 55 d4	 mov	 DWORD PTR __Pad$[ebp], edx
  00135	89 45 d8	 mov	 DWORD PTR __Pad$[ebp+4], eax
$LN10@operator:
  00138	83 7d d8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  0013c	7c 78		 jl	 SHORT $LN11@operator
  0013e	7f 06		 jg	 SHORT $LN26@operator
  00140	83 7d d4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00144	76 70		 jbe	 SHORT $LN11@operator
$LN26@operator:

; 799  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 800  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  00146	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00149	8b 11		 mov	 edx, DWORD PTR [ecx]
  0014b	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0014e	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00151	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  00157	88 45 df	 mov	 BYTE PTR tv282[ebp], al
  0015a	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0015d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015f	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00162	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00165	8b ca		 mov	 ecx, edx
  00167	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0016d	89 45 bc	 mov	 DWORD PTR tv283[ebp], eax
  00170	0f b6 45 df	 movzx	 eax, BYTE PTR tv282[ebp]
  00174	50		 push	 eax
  00175	8b 4d bc	 mov	 ecx, DWORD PTR tv283[ebp]
  00178	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  0017e	89 45 b4	 mov	 DWORD PTR tv284[ebp], eax
  00181	8b 4d b4	 mov	 ecx, DWORD PTR tv284[ebp]
  00184	89 4d ac	 mov	 DWORD PTR $T6[ebp], ecx
  00187	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0018c	89 45 80	 mov	 DWORD PTR $T2[ebp], eax
  0018f	8d 55 ac	 lea	 edx, DWORD PTR $T6[ebp]
  00192	52		 push	 edx
  00193	8d 45 80	 lea	 eax, DWORD PTR $T2[ebp]
  00196	50		 push	 eax
  00197	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0019c	83 c4 08	 add	 esp, 8
  0019f	0f b6 c8	 movzx	 ecx, al
  001a2	85 c9		 test	 ecx, ecx
  001a4	74 0b		 je	 SHORT $LN7@operator

; 801  : 					{	// insertion failed, quit
; 802  : 					_State |= ios_base::badbit;

  001a6	8b 55 e0	 mov	 edx, DWORD PTR __State$[ebp]
  001a9	83 ca 04	 or	 edx, 4
  001ac	89 55 e0	 mov	 DWORD PTR __State$[ebp], edx

; 803  : 					break;

  001af	eb 05		 jmp	 SHORT $LN11@operator
$LN7@operator:

; 804  : 					}
; 805  : 
; 806  : 		if (_State == ios_base::goodbit

  001b1	e9 70 ff ff ff	 jmp	 $LN9@operator
$LN11@operator:

; 807  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

  001b6	83 7d e0 00	 cmp	 DWORD PTR __State$[ebp], 0
  001ba	75 4a		 jne	 SHORT $LN6@operator
  001bc	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001bf	8b 08		 mov	 ecx, DWORD PTR [eax]
  001c1	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001c4	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001c7	8b ca		 mov	 ecx, edx
  001c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001cf	89 45 b8	 mov	 DWORD PTR tv285[ebp], eax
  001d2	8b 45 d0	 mov	 eax, DWORD PTR __Count$[ebp+4]
  001d5	50		 push	 eax
  001d6	8b 4d cc	 mov	 ecx, DWORD PTR __Count$[ebp]
  001d9	51		 push	 ecx
  001da	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  001dd	52		 push	 edx
  001de	8b 4d b8	 mov	 ecx, DWORD PTR tv285[ebp]
  001e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  001e7	89 45 88	 mov	 DWORD PTR tv286[ebp], eax
  001ea	89 55 8c	 mov	 DWORD PTR tv286[ebp+4], edx
  001ed	8b 45 88	 mov	 eax, DWORD PTR tv286[ebp]
  001f0	3b 45 cc	 cmp	 eax, DWORD PTR __Count$[ebp]
  001f3	75 08		 jne	 SHORT $LN27@operator
  001f5	8b 4d 8c	 mov	 ecx, DWORD PTR tv286[ebp+4]
  001f8	3b 4d d0	 cmp	 ecx, DWORD PTR __Count$[ebp+4]
  001fb	74 09		 je	 SHORT $LN6@operator
$LN27@operator:

; 808  : 			_State |= ios_base::badbit;

  001fd	8b 55 e0	 mov	 edx, DWORD PTR __State$[ebp]
  00200	83 ca 04	 or	 edx, 4
  00203	89 55 e0	 mov	 DWORD PTR __State$[ebp], edx
$LN6@operator:

; 809  : 
; 810  : 		if (_State == ios_base::goodbit)

  00206	83 7d e0 00	 cmp	 DWORD PTR __State$[ebp], 0
  0020a	0f 85 90 00 00
	00		 jne	 $LN5@operator

; 811  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  00210	eb 12		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00212	8b 45 d4	 mov	 eax, DWORD PTR __Pad$[ebp]
  00215	83 e8 01	 sub	 eax, 1
  00218	8b 4d d8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  0021b	83 d9 00	 sbb	 ecx, 0
  0021e	89 45 d4	 mov	 DWORD PTR __Pad$[ebp], eax
  00221	89 4d d8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN4@operator:
  00224	83 7d d8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  00228	7c 76		 jl	 SHORT $LN5@operator
  0022a	7f 06		 jg	 SHORT $LN28@operator
  0022c	83 7d d4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00230	76 6e		 jbe	 SHORT $LN5@operator
$LN28@operator:

; 812  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 813  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

  00232	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00235	8b 02		 mov	 eax, DWORD PTR [edx]
  00237	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0023a	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0023d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  00243	88 45 de	 mov	 BYTE PTR tv287[ebp], al
  00246	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00249	8b 11		 mov	 edx, DWORD PTR [ecx]
  0024b	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0024e	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00251	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00257	89 45 9c	 mov	 DWORD PTR tv288[ebp], eax
  0025a	0f b6 45 de	 movzx	 eax, BYTE PTR tv287[ebp]
  0025e	50		 push	 eax
  0025f	8b 4d 9c	 mov	 ecx, DWORD PTR tv288[ebp]
  00262	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00268	89 45 c0	 mov	 DWORD PTR tv289[ebp], eax
  0026b	8b 4d c0	 mov	 ecx, DWORD PTR tv289[ebp]
  0026e	89 4d 84	 mov	 DWORD PTR $T3[ebp], ecx
  00271	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00276	89 45 a8	 mov	 DWORD PTR $T5[ebp], eax
  00279	8d 55 84	 lea	 edx, DWORD PTR $T3[ebp]
  0027c	52		 push	 edx
  0027d	8d 45 a8	 lea	 eax, DWORD PTR $T5[ebp]
  00280	50		 push	 eax
  00281	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  00286	83 c4 08	 add	 esp, 8
  00289	0f b6 c8	 movzx	 ecx, al
  0028c	85 c9		 test	 ecx, ecx
  0028e	74 0b		 je	 SHORT $LN1@operator

; 814  : 					{	// insertion failed, quit
; 815  : 					_State |= ios_base::badbit;

  00290	8b 55 e0	 mov	 edx, DWORD PTR __State$[ebp]
  00293	83 ca 04	 or	 edx, 4
  00296	89 55 e0	 mov	 DWORD PTR __State$[ebp], edx

; 816  : 					break;

  00299	eb 05		 jmp	 SHORT $LN5@operator
$LN1@operator:

; 817  : 					}

  0029b	e9 72 ff ff ff	 jmp	 $LN3@operator
$LN5@operator:

; 818  : 		_Ostr.width(0);

  002a0	6a 00		 push	 0
  002a2	6a 00		 push	 0
  002a4	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002a7	8b 08		 mov	 ecx, DWORD PTR [eax]
  002a9	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002ac	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002af	8b ca		 mov	 ecx, edx
  002b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  002b7	eb 1d		 jmp	 SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 819  : 		_CATCH_IO_(_Ostr)

  002b9	6a 01		 push	 1
  002bb	6a 04		 push	 4
  002bd	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002c0	8b 08		 mov	 ecx, DWORD PTR [eax]
  002c2	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002c5	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002c8	8b ca		 mov	 ecx, edx
  002ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  002d0	b8 00 00 00 00	 mov	 eax, $LN23@operator
  002d5	c3		 ret	 0
$LN19@operator:
  002d6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  002dd	eb 07		 jmp	 SHORT $LN13@operator
$LN23@operator:
  002df	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN13@operator:

; 820  : 		}
; 821  : 
; 822  : 	_Ostr.setstate(_State);

  002e6	6a 00		 push	 0
  002e8	8b 45 e0	 mov	 eax, DWORD PTR __State$[ebp]
  002eb	50		 push	 eax
  002ec	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  002ef	8b 11		 mov	 edx, DWORD PTR [ecx]
  002f1	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  002f4	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  002f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z

; 823  : 	return (_Ostr);

  002fd	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00300	89 45 90	 mov	 DWORD PTR $T4[ebp], eax
  00303	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0030a	8d 4d e4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0030d	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00312	8b 45 90	 mov	 eax, DWORD PTR $T4[ebp]

; 824  : 	}

  00315	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00318	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0031f	59		 pop	 ecx
  00320	5f		 pop	 edi
  00321	5e		 pop	 esi
  00322	5b		 pop	 ebx
  00323	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00326	33 cd		 xor	 ecx, ebp
  00328	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0032d	8b e5		 mov	 esp, ebp
  0032f	5d		 pop	 ebp
  00330	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 7c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-132]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??0?$Mat_@M@cv@@QAE@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__rows$ = 8						; size = 4
__cols$ = 12						; size = 4
??0?$Mat_@M@cv@@QAE@HH@Z PROC				; cv::Mat_<float>::Mat_<float>, COMDAT
; _this$ = ecx

; 1350 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 05		 push	 5
  00009	8b 45 0c	 mov	 eax, DWORD PTR __cols$[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR __rows$[ebp]
  00010	51		 push	 ecx
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ??0Mat@cv@@QAE@HHH@Z	; cv::Mat::Mat

; 1351 : }

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
??0?$Mat_@M@cv@@QAE@HH@Z ENDP				; cv::Mat_<float>::Mat_<float>
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??$?6MH@cv@@YA?AV?$MatCommaInitializer_@M@0@ABV?$Mat_@M@0@H@Z
_TEXT	SEGMENT
_commaInitializer$ = -24				; size = 20
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
_val$ = 16						; size = 4
??$?6MH@cv@@YA?AV?$MatCommaInitializer_@M@0@ABV?$Mat_@M@0@H@Z PROC ; cv::operator<<<float,int>, COMDAT

; 3094 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 3095 :     MatCommaInitializer_<_Tp> commaInitializer((Mat_<_Tp>*)&m);

  00010	6a 01		 push	 1
  00012	8d 4d e8	 lea	 ecx, DWORD PTR _commaInitializer$[ebp]
  00015	e8 00 00 00 00	 call	 ?__autoclassinit@?$MatCommaInitializer_@M@cv@@QAEXI@Z
  0001a	8b 45 0c	 mov	 eax, DWORD PTR _m$[ebp]
  0001d	50		 push	 eax
  0001e	8d 4d e8	 lea	 ecx, DWORD PTR _commaInitializer$[ebp]
  00021	e8 00 00 00 00	 call	 ??0?$MatCommaInitializer_@M@cv@@QAE@PAV?$Mat_@M@1@@Z ; cv::MatCommaInitializer_<float>::MatCommaInitializer_<float>

; 3096 :     return (commaInitializer, val);

  00026	8b 4d 10	 mov	 ecx, DWORD PTR _val$[ebp]
  00029	51		 push	 ecx
  0002a	8d 4d e8	 lea	 ecx, DWORD PTR _commaInitializer$[ebp]
  0002d	e8 00 00 00 00	 call	 ??$?QH@?$MatCommaInitializer_@M@cv@@QAEAAV01@H@Z ; cv::MatCommaInitializer_<float>::operator,<int>
  00032	50		 push	 eax
  00033	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00036	e8 00 00 00 00	 call	 ??0?$MatCommaInitializer_@M@cv@@QAE@ABV01@@Z
  0003b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3097 : }

  0003e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00041	33 cd		 xor	 ecx, ebp
  00043	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
??$?6MH@cv@@YA?AV?$MatCommaInitializer_@M@0@ABV?$Mat_@M@0@H@Z ENDP ; cv::operator<<<float,int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??B?$MatCommaInitializer_@M@cv@@QBE?AV?$Mat_@M@1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??B?$MatCommaInitializer_@M@cv@@QBE?AV?$Mat_@M@1@XZ PROC ; cv::MatCommaInitializer_<float>::operator cv::Mat_<float>, COMDAT
; _this$ = ecx

; 3086 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0

; 3087 :     CV_DbgAssert( this->it == ((const Mat_<_Tp>*)this->it.m)->end() );
; 3088 :     return Mat_<_Tp>(*this->it.m);

  00010	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 08		 mov	 ecx, DWORD PTR [eax]
  00015	51		 push	 ecx
  00016	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00019	e8 00 00 00 00	 call	 ??0?$Mat_@M@cv@@QAE@ABVMat@1@@Z ; cv::Mat_<float>::Mat_<float>
  0001e	8b 55 fc	 mov	 edx, DWORD PTR $T1[ebp]
  00021	83 ca 01	 or	 edx, 1
  00024	89 55 fc	 mov	 DWORD PTR $T1[ebp], edx
  00027	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3089 : }

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??B?$MatCommaInitializer_@M@cv@@QBE?AV?$Mat_@M@1@XZ ENDP ; cv::MatCommaInitializer_<float>::operator cv::Mat_<float>
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??$?QH@?$MatCommaInitializer_@M@cv@@QAEAAV01@H@Z
_TEXT	SEGMENT
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??$?QH@?$MatCommaInitializer_@M@cv@@QAEAAV01@H@Z PROC	; cv::MatCommaInitializer_<float>::operator,<int>, COMDAT
; _this$ = ecx

; 3077 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3078 :     CV_DbgAssert( this->it < ((const Mat_<_Tp>*)this->it.m)->end() );
; 3079 :     *this->it = _Tp(v);

  00009	f3 0f 2a 45 08	 cvtsi2ss xmm0, DWORD PTR _v$[ebp]
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	f3 0f 11 45 f8	 movss	 DWORD PTR tv73[ebp], xmm0
  00016	e8 00 00 00 00	 call	 ??D?$MatIterator_@M@cv@@QBEAAMXZ ; cv::MatIterator_<float>::operator*
  0001b	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR tv73[ebp]
  00020	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 3080 :     ++this->it;

  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ??E?$MatIterator_@M@cv@@QAEAAV01@XZ ; cv::MatIterator_<float>::operator++

; 3081 :     return *this;

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 3082 : }

  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
??$?QH@?$MatCommaInitializer_@M@cv@@QAEAAV01@H@Z ENDP	; cv::MatCommaInitializer_<float>::operator,<int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??$?0N$03$00@_OutputArray@cv@@QAE@AAV?$Matx@N$03$00@1@@Z
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_mtx$ = 8						; size = 4
??$?0N$03$00@_OutputArray@cv@@QAE@AAV?$Matx@N$03$00@1@@Z PROC ; cv::_OutputArray::_OutputArray<double,4,1>, COMDAT
; _this$ = ecx

; 170  : { init(FIXED_TYPE + FIXED_SIZE + MATX + DataType<_Tp>::type + ACCESS_WRITE, &mtx, Size(n, m)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0N$03$00@_OutputArray@cv@@QAE@AAV?$Matx@N$03$00@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00028	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0_InputArray@cv@@QAE@XZ ; cv::_InputArray::_InputArray
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00037	83 ec 08	 sub	 esp, 8
  0003a	8b cc		 mov	 ecx, esp
  0003c	89 65 ec	 mov	 DWORD PTR $T2[ebp], esp
  0003f	6a 04		 push	 4
  00041	6a 01		 push	 1
  00043	e8 00 00 00 00	 call	 ??0?$Size_@H@cv@@QAE@HH@Z ; cv::Size_<int>::Size_<int>
  00048	8b 45 08	 mov	 eax, DWORD PTR _mtx$[ebp]
  0004b	50		 push	 eax
  0004c	68 06 00 02 c2	 push	 -1040056314		; c2020006H
  00051	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	e8 00 00 00 00	 call	 ?init@_InputArray@cv@@IAEXHPBXV?$Size_@H@2@@Z ; cv::_InputArray::init
  00059	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00060	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00063	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00066	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006d	59		 pop	 ecx
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0N$03$00@_OutputArray@cv@@QAE@AAV?$Matx@N$03$00@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
__ehhandler$??$?0N$03$00@_OutputArray@cv@@QAE@AAV?$Matx@N$03$00@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0N$03$00@_OutputArray@cv@@QAE@AAV?$Matx@N$03$00@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0N$03$00@_OutputArray@cv@@QAE@AAV?$Matx@N$03$00@1@@Z ENDP ; cv::_OutputArray::_OutputArray<double,4,1>
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\types_c.h
;	COMDAT ??$?BH@CvSize@@QBE?AV?$Size_@H@cv@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??$?BH@CvSize@@QBE?AV?$Size_@H@cv@@XZ PROC		; CvSize::operator<int> cv::Size_<int>, COMDAT
; _this$ = ecx

; 1017 :     operator cv::Size_<_Tp>() const { return cv::Size_<_Tp>(cv::saturate_cast<_Tp>(width), cv::saturate_cast<_Tp>(height)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 ??$saturate_cast@H@cv@@YAHH@Z ; cv::saturate_cast<int>
  00013	83 c4 04	 add	 esp, 4
  00016	50		 push	 eax
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 02		 mov	 eax, DWORD PTR [edx]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ??$saturate_cast@H@cv@@YAHH@Z ; cv::saturate_cast<int>
  00022	83 c4 04	 add	 esp, 4
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00029	e8 00 00 00 00	 call	 ??0?$Size_@H@cv@@QAE@HH@Z ; cv::Size_<int>::Size_<int>
  0002e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
??$?BH@CvSize@@QBE?AV?$Size_@H@cv@@XZ ENDP		; CvSize::operator<int> cv::Size_<int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\string.h
;	COMDAT ??$strcpy_s@$0BAE@@@YAHAAY0BAE@DPBD@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Source$ = 12						; size = 4
??$strcpy_s@$0BAE@@@YAHAAY0BAE@DPBD@Z PROC		; strcpy_s<260>, COMDAT

; 109  : __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1(errno_t, strcpy_s, _Post_z_ char, _Dest, _In_z_ const char *, _Source)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __Source$[ebp]
  00006	50		 push	 eax
  00007	68 04 01 00 00	 push	 260			; 00000104H
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0000f	51		 push	 ecx
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strcpy_s
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??$strcpy_s@$0BAE@@@YAHAAY0BAE@DPBD@Z ENDP		; strcpy_s<260>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$fill@PANH@std@@YAXPAN0ABH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PANH@std@@YAXPAN0ABH@Z PROC			; std::fill<double *,int>, COMDAT

; 2667 : 	{	// copy _Val through [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2668 : 	_DEBUG_RANGE(_First, _Last);
; 2669 : 	_Fill(_Unchecked(_First), _Unchecked(_Last), _Val);

  00003	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 ??$_Unchecked@PAN@std@@YAPANPAN@Z ; std::_Unchecked<double *>
  00010	83 c4 04	 add	 esp, 4
  00013	50		 push	 eax
  00014	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00017	52		 push	 edx
  00018	e8 00 00 00 00	 call	 ??$_Unchecked@PAN@std@@YAPANPAN@Z ; std::_Unchecked<double *>
  0001d	83 c4 04	 add	 esp, 4
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??$_Fill@PANH@std@@YAXPAN0ABH@Z ; std::_Fill<double *,int>
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2670 : 	}

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??$fill@PANH@std@@YAXPAN0ABH@Z ENDP			; std::fill<double *,int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??$at@V?$Vec@E$02@cv@@@Mat@cv@@QAEAAV?$Vec@E$02@1@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i0$ = 8						; size = 4
_i1$ = 12						; size = 4
??$at@V?$Vec@E$02@cv@@@Mat@cv@@QAEAAV?$Vec@E$02@1@HH@Z PROC ; cv::Mat::at<cv::Vec<unsigned char,3> >, COMDAT
; _this$ = ecx

; 952  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 953  :     CV_DbgAssert(dims <= 2);
; 954  :     CV_DbgAssert(data);
; 955  :     CV_DbgAssert((unsigned)i0 < (unsigned)size.p[0]);
; 956  :     CV_DbgAssert((unsigned)(i1 * DataType<_Tp>::channels) < (unsigned)(size.p[1] * channels()));
; 957  :     CV_DbgAssert(CV_ELEM_SIZE1(DataType<_Tp>::depth) == elemSize1());
; 958  :     return ((_Tp*)(data + step.p[0] * i0))[i1];

  00007	b8 04 00 00 00	 mov	 eax, 4
  0000c	6b c0 00	 imul	 eax, 0
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00015	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  00018	0f af 45 08	 imul	 eax, DWORD PTR _i0$[ebp]
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00022	03 d0		 add	 edx, eax
  00024	8b 45 0c	 mov	 eax, DWORD PTR _i1$[ebp]
  00027	6b c0 03	 imul	 eax, 3
  0002a	03 c2		 add	 eax, edx

; 959  : }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 08 00	 ret	 8
??$at@V?$Vec@E$02@cv@@@Mat@cv@@QAEAAV?$Vec@E$02@1@HH@Z ENDP ; cv::Mat::at<cv::Vec<unsigned char,3> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\matx.hpp
;	COMDAT ??A?$Vec@E$02@cv@@QAEAAEH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??A?$Vec@E$02@cv@@QAEAAEH@Z PROC			; cv::Vec<unsigned char,3>::operator[], COMDAT
; _this$ = ecx

; 1055 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1056 :     CV_DbgAssert( (unsigned)i < (unsigned)cn );
; 1057 :     return this->val[i];

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	03 45 08	 add	 eax, DWORD PTR _i$[ebp]

; 1058 : }

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??A?$Vec@E$02@cv@@QAEAAEH@Z ENDP			; cv::Vec<unsigned char,3>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\string
;	COMDAT ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::getline<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 484  : 	{	// get characters into string, discard newline

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 485  : 	return (getline(_STD move(_Istr), _Str, _Istr.widen('\n')));

  00003	6a 0a		 push	 10			; 0000000aH
  00005	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00008	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000a	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  0000d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00010	8b ca		 mov	 ecx, edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00018	0f b6 c0	 movzx	 eax, al
  0001b	50		 push	 eax
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  0001f	51		 push	 ecx
  00020	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 ??$move@AAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::move<std::basic_istream<char,std::char_traits<char> > &>
  00029	83 c4 04	 add	 esp, 4
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z ; std::getline<char,std::char_traits<char>,std::allocator<char> >
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH

; 486  : 	}

  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::getline<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??$_Insert@ABQAE@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@U_Iterator_base0@2@@1@ABQAE@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Newnode$ = -8						; size = 4
__Pnode$ = -4						; size = 4
__Where$ = 8						; size = 4
__V0$ = 12						; size = 4
??$_Insert@ABQAE@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@U_Iterator_base0@2@@1@ABQAE@Z PROC ; std::list<unsigned char *,std::allocator<unsigned char *> >::_Insert<unsigned char * const &>, COMDAT
; _this$ = ecx

; 1086 : _VARIADIC_EXPAND_0X(_LIST_EMPLACE_INSERT, , , , )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  0000c	e8 00 00 00 00	 call	 ?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PAEPAX@2@XZ ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<unsigned char *> >,std::_Iterator_base0>::_Mynode
  00011	89 45 fc	 mov	 DWORD PTR __Pnode$[ebp], eax
  00014	8b 45 0c	 mov	 eax, DWORD PTR __V0$[ebp]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ??$forward@ABQAE@std@@YAABQAEABQAE@Z ; std::forward<unsigned char * const &>
  0001d	83 c4 04	 add	 esp, 4
  00020	50		 push	 eax
  00021	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00024	51		 push	 ecx
  00025	e8 00 00 00 00	 call	 ?_Prevnode@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAU?$_List_node@PAEPAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Prevnode
  0002a	83 c4 04	 add	 esp, 4
  0002d	8b 10		 mov	 edx, DWORD PTR [eax]
  0002f	52		 push	 edx
  00030	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00033	50		 push	 eax
  00034	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ??$_Buynode@ABQAE@?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAEPAU?$_List_node@PAEPAX@1@PAU21@0ABQAE@Z ; std::_List_buy<unsigned char *,std::allocator<unsigned char *> >::_Buynode<unsigned char * const &>
  0003c	89 45 f8	 mov	 DWORD PTR __Newnode$[ebp], eax
  0003f	6a 01		 push	 1
  00041	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?_Incsize@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXI@Z ; std::list<unsigned char *,std::allocator<unsigned char *> >::_Incsize
  00049	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0004c	51		 push	 ecx
  0004d	e8 00 00 00 00	 call	 ?_Prevnode@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAU?$_List_node@PAEPAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Prevnode
  00052	83 c4 04	 add	 esp, 4
  00055	8b 55 f8	 mov	 edx, DWORD PTR __Newnode$[ebp]
  00058	89 10		 mov	 DWORD PTR [eax], edx
  0005a	8b 45 f8	 mov	 eax, DWORD PTR __Newnode$[ebp]
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 ?_Prevnode@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAU?$_List_node@PAEPAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Prevnode
  00063	83 c4 04	 add	 esp, 4
  00066	8b 08		 mov	 ecx, DWORD PTR [eax]
  00068	51		 push	 ecx
  00069	e8 00 00 00 00	 call	 ?_Nextnode@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAU?$_List_node@PAEPAX@2@PAU32@@Z ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Nextnode
  0006e	83 c4 04	 add	 esp, 4
  00071	8b 55 f8	 mov	 edx, DWORD PTR __Newnode$[ebp]
  00074	89 10		 mov	 DWORD PTR [eax], edx
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 08 00	 ret	 8
??$_Insert@ABQAE@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAE@std@@@std@@U_Iterator_base0@2@@1@ABQAE@Z ENDP ; std::list<unsigned char *,std::allocator<unsigned char *> >::_Insert<unsigned char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -52						; size = 12
$T3 = -40						; size = 4
__Id$4 = -36						; size = 4
__Pfmod$5 = -32						; size = 4
__Pf$6 = -28						; size = 4
__Psave$7 = -24						; size = 4
__Lock$8 = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z PROC ; std::use_facet<std::codecvt<char,char,int> >, COMDAT

; 543  : 	{	// get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 544  :  #if _NO_LOCALES
; 545  : 	static _Wrap_facet<_Facet> _Wfac;
; 546  : 	return (*(_Facet *)&_Wfac);
; 547  : 
; 548  :  #else /* _NO_LOCALES */
; 549  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00028	6a 00		 push	 0
  0002a	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 550  : 		const locale::facet *_Psave =
; 551  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  0003a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::codecvt<char,char,int> >::_Psave
  0003f	89 45 e8	 mov	 DWORD PTR __Psave$7[ebp], eax

; 552  : 
; 553  : 		size_t _Id = _Facet::id;

  00042	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?id@?$codecvt@DDH@std@@2V0locale@2@A
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??Bid@locale@std@@QAEIXZ
  0004e	89 45 dc	 mov	 DWORD PTR __Id$4[ebp], eax

; 554  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  00051	8b 4d dc	 mov	 ecx, DWORD PTR __Id$4[ebp]
  00054	51		 push	 ecx
  00055	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00058	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ; std::locale::_Getfacet
  0005d	89 45 e4	 mov	 DWORD PTR __Pf$6[ebp], eax

; 555  : 
; 556  : 		if (_Pf != 0)

  00060	83 7d e4 00	 cmp	 DWORD PTR __Pf$6[ebp], 0
  00064	74 02		 je	 SHORT $LN6@use_facet
  00066	eb 70		 jmp	 SHORT $LN5@use_facet
$LN6@use_facet:

; 557  : 			;	// got facet from locale
; 558  : 		else if (_Psave != 0)

  00068	83 7d e8 00	 cmp	 DWORD PTR __Psave$7[ebp], 0
  0006c	74 08		 je	 SHORT $LN4@use_facet

; 559  : 			_Pf = _Psave;	// lazy facet already allocated

  0006e	8b 55 e8	 mov	 edx, DWORD PTR __Psave$7[ebp]
  00071	89 55 e4	 mov	 DWORD PTR __Pf$6[ebp], edx
  00074	eb 62		 jmp	 SHORT $LN5@use_facet
$LN4@use_facet:

; 560  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  00076	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  00079	50		 push	 eax
  0007a	8d 4d e8	 lea	 ecx, DWORD PTR __Psave$7[ebp]
  0007d	51		 push	 ecx
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00084	83 c4 08	 add	 esp, 8
  00087	83 f8 ff	 cmp	 eax, -1
  0008a	75 1e		 jne	 SHORT $LN2@use_facet

; 561  : 
; 562  :  #if _HAS_EXCEPTIONS
; 563  : 
; 564  : 			_THROW_NCEE(_XSTD bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_08EPJLHIJG@bad?5cast?$AA@
  00091	8d 4d cc	 lea	 ecx, DWORD PTR $T2[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0bad_cast@std@@QAE@PBD@Z
  0009a	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  0009f	8d 55 cc	 lea	 edx, DWORD PTR $T2[ebp]
  000a2	52		 push	 edx
  000a3	e8 00 00 00 00	 call	 __CxxThrowException@8

; 565  : 
; 566  :  #else /* _HAS_EXCEPTIONS */
; 567  : 			abort();	// lazy disallowed
; 568  :  #endif /* _HAS_EXCEPTIONS */
; 569  : 
; 570  : 		else

  000a8	eb 2e		 jmp	 SHORT $LN5@use_facet
$LN2@use_facet:

; 571  : 			{	// queue up lazy facet for destruction
; 572  : 			_Pf = _Psave;

  000aa	8b 45 e8	 mov	 eax, DWORD PTR __Psave$7[ebp]
  000ad	89 45 e4	 mov	 DWORD PTR __Pf$6[ebp], eax

; 573  : 			_Facetptr<_Facet>::_Psave = _Psave;

  000b0	8b 4d e8	 mov	 ecx, DWORD PTR __Psave$7[ebp]
  000b3	89 0d 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$codecvt@DDH@std@@@std@@2PBVfacet@locale@2@B, ecx ; std::_Facetptr<std::codecvt<char,char,int> >::_Psave

; 574  : 
; 575  : 			locale::facet *_Pfmod = (_Facet *)_Psave;

  000b9	8b 55 e8	 mov	 edx, DWORD PTR __Psave$7[ebp]
  000bc	89 55 e0	 mov	 DWORD PTR __Pfmod$5[ebp], edx

; 576  : 			_Pfmod->_Incref();

  000bf	8b 45 e0	 mov	 eax, DWORD PTR __Pfmod$5[ebp]
  000c2	8b 10		 mov	 edx, DWORD PTR [eax]
  000c4	8b 4d e0	 mov	 ecx, DWORD PTR __Pfmod$5[ebp]
  000c7	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000ca	ff d0		 call	 eax

; 577  : 
; 578  :  #if defined(_M_CEE)
; 579  : 			_Facet_Register_m(_Pfmod);
; 580  : 
; 581  :  #else /* defined(_M_CEE) */
; 582  : 			_Facet_Register(_Pfmod);

  000cc	8b 4d e0	 mov	 ecx, DWORD PTR __Pfmod$5[ebp]
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register
  000d5	83 c4 04	 add	 esp, 4
$LN5@use_facet:

; 583  :  #endif /* defined(_M_CEE) */
; 584  : 			}
; 585  : 
; 586  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  000d8	8b 55 e4	 mov	 edx, DWORD PTR __Pf$6[ebp]
  000db	89 55 d8	 mov	 DWORD PTR $T3[ebp], edx
  000de	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000e5	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
  000ee	8b 45 d8	 mov	 eax, DWORD PTR $T3[ebp]
$LN8@use_facet:

; 587  : 	_END_LOCK()
; 588  :  #endif /* _NO_LOCALES */
; 589  : 	}	// end of use_facet body

  000f1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fb	59		 pop	 ecx
  000fc	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ff	33 cd		 xor	 ecx, ebp
  00101	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
__ehhandler$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z:
  00009	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00010	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00013	33 c8		 xor	 ecx, eax
  00015	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::codecvt<char,char,int> >
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@PAU?$_List_node@PAEPAX@std@@@std@@YAPAPAU?$_List_node@PAEPAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_List_node@PAEPAX@std@@@std@@YAPAPAU?$_List_node@PAEPAX@0@AAPAU10@@Z PROC ; std::addressof<std::_List_node<unsigned char *,void *> *>, COMDAT

; 85   : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 89   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PAU?$_List_node@PAEPAX@std@@@std@@YAPAPAU?$_List_node@PAEPAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_List_node<unsigned char *,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@PAEPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_List_node@PAEPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::destroy<std::_List_node<unsigned char *,void *> *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

  00007	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 ??$destroy@PAU?$_List_node@PAEPAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAEPAX@std@@@1@PAPAU?$_List_node@PAEPAX@1@@Z ; std::allocator_traits<std::allocator<std::_List_node<unsigned char *,void *> > >::destroy<std::_List_node<unsigned char *,void *> *>
  00014	83 c4 08	 add	 esp, 8

; 910  : 		}

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??$destroy@PAU?$_List_node@PAEPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::destroy<std::_List_node<unsigned char *,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@PAE@std@@YAPAPAEAAPAE@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAE@std@@YAPAPAEAAPAE@Z PROC		; std::addressof<unsigned char *>, COMDAT

; 85   : 	{	// return address of _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 89   : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$addressof@PAE@std@@YAPAPAEAAPAE@Z ENDP		; std::addressof<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAE@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAPAE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAE@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAPAE@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::destroy<unsigned char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

  00007	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 ??$destroy@PAE@?$allocator_traits@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAEPAX@std@@@1@PAPAE@Z ; std::allocator_traits<std::allocator<std::_List_node<unsigned char *,void *> > >::destroy<unsigned char *>
  00014	83 c4 08	 add	 esp, 8

; 910  : 		}

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??$destroy@PAE@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAPAE@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::destroy<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >, COMDAT

; 79   : 	{	// destroy [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 80   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00004	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00007	50		 push	 eax
  00008	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 ??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ; std::_Ptr_cat<int,int>
  00011	83 c4 08	 add	 esp, 8
  00014	88 45 ff	 mov	 BYTE PTR $T1[ebp], al
  00017	0f b6 55 ff	 movzx	 edx, BYTE PTR $T1[ebp]
  0001b	52		 push	 edx
  0001c	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  0001f	50		 push	 eax
  00020	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00023	51		 push	 ecx
  00024	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00027	52		 push	 edx
  00028	e8 00 00 00 00	 call	 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >
  0002d	83 c4 10	 add	 esp, 16			; 00000010H

; 81   : 	}

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@PAEPAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@AAPAU21@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAU?$_List_node@PAEPAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@AAPAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::construct<std::_List_node<unsigned char *,void *> *,std::_List_node<unsigned char *,void *> * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR __V0$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??$forward@AAPAU?$_List_node@PAEPAX@std@@@std@@YAAAPAU?$_List_node@PAEPAX@0@AAPAU10@@Z ; std::forward<std::_List_node<unsigned char *,void *> * &>
  00010	83 c4 04	 add	 esp, 4
  00013	50		 push	 eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00017	51		 push	 ecx
  00018	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001b	52		 push	 edx
  0001c	e8 00 00 00 00	 call	 ??$construct@PAU?$_List_node@PAEPAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAEPAX@std@@@1@PAPAU?$_List_node@PAEPAX@1@AAPAU31@@Z ; std::allocator_traits<std::allocator<std::_List_node<unsigned char *,void *> > >::construct<std::_List_node<unsigned char *,void *> *,std::_List_node<unsigned char *,void *> * &>
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
??$construct@PAU?$_List_node@PAEPAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@AAPAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::construct<std::_List_node<unsigned char *,void *> *,std::_List_node<unsigned char *,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@U?$_List_node@PAEPAX@std@@@std@@YAPAU?$_List_node@PAEPAX@0@IPAU10@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U?$_List_node@PAEPAX@std@@@std@@YAPAU?$_List_node@PAEPAX@0@IPAU10@@Z PROC ; std::_Allocate<std::_List_node<unsigned char *,void *> >, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 23   : 	void *_Ptr = 0;

  00004	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

  0000b	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  0000f	75 02		 jne	 SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

  00011	eb 28		 jmp	 SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00013	81 7d 08 55 55
	55 15		 cmp	 DWORD PTR __Count$[ebp], 357913941 ; 15555555H
  0001a	77 19		 ja	 SHORT $LN1@Allocate
  0001c	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0001f	6b c0 0c	 imul	 eax, 12			; 0000000cH
  00022	50		 push	 eax
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??2@YAPAXI@Z
  00029	83 c4 04	 add	 esp, 4
  0002c	89 45 fc	 mov	 DWORD PTR __Ptr$[ebp], eax
  0002f	83 7d fc 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  00033	75 06		 jne	 SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

  0003b	8b 45 fc	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
??$_Allocate@U?$_List_node@PAEPAX@std@@@std@@YAPAU?$_List_node@PAEPAX@0@IPAU10@@Z ENDP ; std::_Allocate<std::_List_node<unsigned char *,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?__autoclassinit@?$MatCommaInitializer_@M@cv@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_$initVBases$ = 8					; size = 4
?__autoclassinit@?$MatCommaInitializer_@M@cv@@QAEXI@Z PROC ; cv::MatCommaInitializer_<float>::__autoclassinit, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 01		 push	 1
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?__autoclassinit@?$MatIterator_@M@cv@@QAEXI@Z
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?__autoclassinit@?$MatCommaInitializer_@M@cv@@QAEXI@Z ENDP ; cv::MatCommaInitializer_<float>::__autoclassinit
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0?$MatCommaInitializer_@M@cv@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$MatCommaInitializer_@M@cv@@QAE@ABV01@@Z PROC	; cv::MatCommaInitializer_<float>::MatCommaInitializer_<float>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0?$MatIterator_@M@cv@@QAE@ABV01@@Z ; cv::MatIterator_<float>::MatIterator_<float>
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0?$MatCommaInitializer_@M@cv@@QAE@ABV01@@Z ENDP	; cv::MatCommaInitializer_<float>::MatCommaInitializer_<float>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?__autoclassinit@?$MatIterator_@M@cv@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_$initVBases$ = 8					; size = 4
?__autoclassinit@?$MatIterator_@M@cv@@QAEXI@Z PROC	; cv::MatIterator_<float>::__autoclassinit, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?__autoclassinit@?$MatConstIterator_@M@cv@@QAEXI@Z
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?__autoclassinit@?$MatIterator_@M@cv@@QAEXI@Z ENDP	; cv::MatIterator_<float>::__autoclassinit
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?__autoclassinit@?$MatConstIterator_@M@cv@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_$initVBases$ = 8					; size = 4
?__autoclassinit@?$MatConstIterator_@M@cv@@QAEXI@Z PROC	; cv::MatConstIterator_<float>::__autoclassinit, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?__autoclassinit@MatConstIterator@cv@@QAEXI@Z
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?__autoclassinit@?$MatConstIterator_@M@cv@@QAEXI@Z ENDP	; cv::MatConstIterator_<float>::__autoclassinit
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?_Incsize@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?_Incsize@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXI@Z PROC ; std::list<unsigned char *,std::allocator<unsigned char *> >::_Incsize, COMDAT
; _this$ = ecx

; 1949 : 		{	// alter element count, with checking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1950 : 		if (max_size() - this->_Mysize - 1 < _Count)

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?max_size@?$list@PAEV?$allocator@PAE@std@@@std@@QBEIXZ ; std::list<unsigned char *,std::allocator<unsigned char *> >::max_size
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00015	83 e8 01	 sub	 eax, 1
  00018	3b 45 08	 cmp	 eax, DWORD PTR __Count$[ebp]
  0001b	73 0b		 jae	 SHORT $LN1@Incsize

; 1951 : 			_Xlength_error("list<T> too long");

  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN1@Incsize:

; 1952 : 		this->_Mysize += _Count;

  00028	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0002e	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN3@Incsize:

; 1953 : 		}

  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?_Incsize@?$list@PAEV?$allocator@PAE@std@@@std@@QAEXI@Z ENDP ; std::list<unsigned char *,std::allocator<unsigned char *> >::_Incsize
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ?max_size@?$list@PAEV?$allocator@PAE@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$list@PAEV?$allocator@PAE@std@@@std@@QBEIXZ PROC ; std::list<unsigned char *,std::allocator<unsigned char *> >::max_size, COMDAT
; _this$ = ecx

; 1241 : 		{	// return maximum possible length of sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1242 : 		return (this->_Getal().max_size());

  00009	8d 45 ff	 lea	 eax, DWORD PTR $T1[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Getal
  00015	8b c8		 mov	 ecx, eax
  00017	e8 00 00 00 00	 call	 ?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::max_size

; 1243 : 		}

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?max_size@?$list@PAEV?$allocator@PAE@std@@@std@@QBEIXZ ENDP ; std::list<unsigned char *,std::allocator<unsigned char *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ?max_size@?$allocator_traits@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@PAEPAX@std@@@2@@Z ; std::allocator_traits<std::allocator<std::_List_node<unsigned char *,void *> > >::max_size
  00010	83 c4 04	 add	 esp, 4

; 915  : 		}

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@PAEPAX@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@PAEPAX@std@@@2@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<unsigned char *,void *> > >::max_size, COMDAT

; 761  : 		{	// get maximum size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 762  : 		return (_Al.max_size());

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  00006	e8 00 00 00 00	 call	 ?max_size@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QBEIXZ ; std::allocator<std::_List_node<unsigned char *,void *> >::max_size

; 763  : 		}

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@PAEPAX@std@@@2@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<unsigned char *,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?max_size@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QBEIXZ PROC ; std::allocator<std::_List_node<unsigned char *,void *> >::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

  00007	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 629  : 		}

  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?max_size@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QBEIXZ ENDP ; std::allocator<std::_List_node<unsigned char *,void *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\matx.hpp
;	COMDAT ??0?$Vec@N$03@cv@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$Vec@N$03@cv@@QAE@XZ PROC				; cv::Vec<double,4>::Vec<double,4>, COMDAT
; _this$ = ecx

; 909  : Vec<_Tp, cn>::Vec() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0?$Matx@N$03$00@cv@@QAE@XZ ; cv::Matx<double,4,1>::Matx<double,4,1>
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??0?$Vec@N$03@cv@@QAE@XZ ENDP				; cv::Vec<double,4>::Vec<double,4>
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\saturate.hpp
;	COMDAT ??$saturate_cast@H@cv@@YAHH@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$saturate_cast@H@cv@@YAHH@Z PROC			; cv::saturate_cast<int>, COMDAT

; 92   : template<typename _Tp> static inline _Tp saturate_cast(int v)      { return _Tp(v); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$saturate_cast@H@cv@@YAHH@Z ENDP			; cv::saturate_cast<int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??0?$Mat_@M@cv@@QAE@ABVMat@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_m$ = 8							; size = 4
??0?$Mat_@M@cv@@QAE@ABVMat@1@@Z PROC			; cv::Mat_<float>::Mat_<float>, COMDAT
; _this$ = ecx

; 1400 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$Mat_@M@cv@@QAE@ABVMat@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ??0Mat@cv@@QAE@XZ	; cv::Mat::Mat
  0002e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1401 :     flags = (flags & ~CV_MAT_TYPE_MASK) | DataType<_Tp>::type;

  00035	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003a	81 e1 00 f0 ff
	ff		 and	 ecx, -4096		; fffff000H
  00040	83 c9 05	 or	 ecx, 5
  00043	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00046	89 0a		 mov	 DWORD PTR [edx], ecx

; 1402 :     *this = m;

  00048	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  0004b	50		 push	 eax
  0004c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ??4?$Mat_@M@cv@@QAEAAV01@ABVMat@1@@Z ; cv::Mat_<float>::operator=

; 1403 : }

  00054	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00061	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00068	59		 pop	 ecx
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$Mat_@M@cv@@QAE@ABVMat@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__ehhandler$??0?$Mat_@M@cv@@QAE@ABVMat@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$Mat_@M@cv@@QAE@ABVMat@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$Mat_@M@cv@@QAE@ABVMat@1@@Z ENDP			; cv::Mat_<float>::Mat_<float>
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??0?$MatCommaInitializer_@M@cv@@QAE@PAV?$Mat_@M@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__m$ = 8						; size = 4
??0?$MatCommaInitializer_@M@cv@@QAE@PAV?$Mat_@M@1@@Z PROC ; cv::MatCommaInitializer_<float>::MatCommaInitializer_<float>, COMDAT
; _this$ = ecx

; 3073 : {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __m$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0?$MatIterator_@M@cv@@QAE@PAV?$Mat_@M@1@@Z ; cv::MatIterator_<float>::MatIterator_<float>
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0?$MatCommaInitializer_@M@cv@@QAE@PAV?$Mat_@M@1@@Z ENDP ; cv::MatCommaInitializer_<float>::MatCommaInitializer_<float>
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??0?$MatIterator_@M@cv@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_it$ = 8						; size = 4
??0?$MatIterator_@M@cv@@QAE@ABV01@@Z PROC		; cv::MatIterator_<float>::MatIterator_<float>, COMDAT
; _this$ = ecx

; 2741 : {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _it$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0?$MatConstIterator_@M@cv@@QAE@ABV01@@Z ; cv::MatConstIterator_<float>::MatConstIterator_<float>
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0?$MatIterator_@M@cv@@QAE@ABV01@@Z ENDP		; cv::MatIterator_<float>::MatIterator_<float>
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??D?$MatIterator_@M@cv@@QBEAAMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$MatIterator_@M@cv@@QBEAAMXZ PROC			; cv::MatIterator_<float>::operator*, COMDAT
; _this$ = ecx

; 2752 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2753 :     return *(_Tp*)(this->ptr);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 2754 : }

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??D?$MatIterator_@M@cv@@QBEAAMXZ ENDP			; cv::MatIterator_<float>::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??E?$MatIterator_@M@cv@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$MatIterator_@M@cv@@QAEAAV01@XZ PROC		; cv::MatIterator_<float>::operator++, COMDAT
; _this$ = ecx

; 2787 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2788 :     MatConstIterator::operator ++();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??EMatConstIterator@cv@@QAEAAV01@XZ ; cv::MatConstIterator::operator++

; 2789 :     return *this;

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 2790 : }

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??E?$MatIterator_@M@cv@@QAEAAV01@XZ ENDP		; cv::MatIterator_<float>::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PAN@std@@YAPANPAN@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAN@std@@YAPANPAN@Z PROC			; std::_Unchecked<double *>, COMDAT

; 275  : 	{	// construct unchecked from checked, generic

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 276  : 	return (_Src);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Src$[ebp]

; 277  : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Unchecked@PAN@std@@YAPANPAN@Z ENDP			; std::_Unchecked<double *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Fill@PANH@std@@YAXPAN0ABH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PANH@std@@YAXPAN0ABH@Z PROC			; std::_Fill<double *,int>, COMDAT

; 2644 : 	{	// copy _Val through [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2645 : 	for (; _First != _Last; ++_First)

  00003	eb 09		 jmp	 SHORT $LN3@Fill
$LN2@Fill:
  00005	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00008	83 c0 08	 add	 eax, 8
  0000b	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN3@Fill:
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00011	3b 4d 0c	 cmp	 ecx, DWORD PTR __Last$[ebp]
  00014	74 10		 je	 SHORT $LN1@Fill

; 2646 : 		*_First = _Val;

  00016	8b 55 10	 mov	 edx, DWORD PTR __Val$[ebp]
  00019	f2 0f 2a 02	 cvtsi2sd xmm0, DWORD PTR [edx]
  0001d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00020	f2 0f 11 00	 movsd	 QWORD PTR [eax], xmm0
  00024	eb df		 jmp	 SHORT $LN2@Fill
$LN1@Fill:

; 2647 : 	}

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Fill@PANH@std@@YAXPAN0ABH@Z ENDP			; std::_Fill<double *,int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$move@AAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::move<std::basic_istream<char,std::char_traits<char> > &>, COMDAT

; 1790 : 	{	// forward _Arg as movable

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1791 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1792 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$move@AAV?$basic_istream@DU?$char_traits@D@std@@@std@@@std@@YA$$QAV?$basic_istream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::move<std::basic_istream<char,std::char_traits<char> > &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\string
;	COMDAT ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
_TEXT	SEGMENT
tv65 = -72						; size = 4
tv200 = -68						; size = 4
$T2 = -64						; size = 4
$T3 = -60						; size = 4
tv201 = -56						; size = 4
tv198 = -52						; size = 4
tv199 = -48						; size = 4
__State$ = -44						; size = 4
__Changed$ = -37					; size = 1
__Ok$ = -36						; size = 8
__Metadelim$4 = -28					; size = 4
__Meta$5 = -24						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Istr$ = 8						; size = 4
__Str$ = 12						; size = 4
__Delim$ = 16						; size = 1
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z PROC ; std::getline<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 401  : 	{	// get characters into string, discard delimiter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 38	 sub	 esp, 56			; 00000038H
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001f	53		 push	 ebx
  00020	56		 push	 esi
  00021	57		 push	 edi
  00022	50		 push	 eax
  00023	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 402  : 	typedef basic_istream<_Elem, _Traits> _Myis;
; 403  : 
; 404  : 	ios_base::iostate _State = ios_base::goodbit;

  0002f	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 405  : 	bool _Changed = false;

  00036	c6 45 db 00	 mov	 BYTE PTR __Changed$[ebp], 0

; 406  : 	const typename _Myis::sentry _Ok(_Istr, true);

  0003a	6a 01		 push	 1
  0003c	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  0003f	50		 push	 eax
  00040	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00043	e8 00 00 00 00	 call	 ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 407  : 
; 408  : 	if (_Ok)

  0004f	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00052	e8 00 00 00 00	 call	 ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBEPQ?$_Bool_struct@V?$basic_istream@DU?$char_traits@D@std@@@std@@@2@HXZ ; std::basic_istream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct<std::basic_istream<char,std::char_traits<char> > >::*
  00057	83 f8 ff	 cmp	 eax, -1
  0005a	0f 84 4b 01 00
	00		 je	 $LN12@getline

; 409  : 		{	// state okay, extract characters
; 410  : 		_TRY_IO_BEGIN

  00060	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 411  : 		_Str.erase();

  00064	6a 00		 push	 0
  00066	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00069	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 412  : 		const typename _Traits::int_type _Metadelim =
; 413  : 			_Traits::to_int_type(_Delim);

  0006e	8d 4d 10	 lea	 ecx, DWORD PTR __Delim$[ebp]
  00071	51		 push	 ecx
  00072	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
  00077	83 c4 04	 add	 esp, 4
  0007a	89 45 e4	 mov	 DWORD PTR __Metadelim$4[ebp], eax

; 414  : 		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  0007d	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  00080	8b 02		 mov	 eax, DWORD PTR [edx]
  00082	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  00085	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0008e	89 45 b8	 mov	 DWORD PTR tv65[ebp], eax
  00091	8b 4d b8	 mov	 ecx, DWORD PTR tv65[ebp]
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
  0009a	89 45 cc	 mov	 DWORD PTR tv198[ebp], eax
  0009d	8b 4d cc	 mov	 ecx, DWORD PTR tv198[ebp]
  000a0	89 4d e8	 mov	 DWORD PTR __Meta$5[ebp], ecx
  000a3	eb 26		 jmp	 SHORT $LN10@getline
$LN9@getline:

; 415  : 
; 416  : 		for (; ; _Meta = _Istr.rdbuf()->snextc())

  000a5	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  000a8	8b 02		 mov	 eax, DWORD PTR [edx]
  000aa	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  000ad	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  000b6	89 45 d0	 mov	 DWORD PTR tv199[ebp], eax
  000b9	8b 4d d0	 mov	 ecx, DWORD PTR tv199[ebp]
  000bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
  000c2	89 45 bc	 mov	 DWORD PTR tv200[ebp], eax
  000c5	8b 4d bc	 mov	 ecx, DWORD PTR tv200[ebp]
  000c8	89 4d e8	 mov	 DWORD PTR __Meta$5[ebp], ecx
$LN10@getline:

; 417  : 			if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  000cb	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000d0	89 45 c4	 mov	 DWORD PTR $T3[ebp], eax
  000d3	8d 55 e8	 lea	 edx, DWORD PTR __Meta$5[ebp]
  000d6	52		 push	 edx
  000d7	8d 45 c4	 lea	 eax, DWORD PTR $T3[ebp]
  000da	50		 push	 eax
  000db	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  000e0	83 c4 08	 add	 esp, 8
  000e3	0f b6 c8	 movzx	 ecx, al
  000e6	85 c9		 test	 ecx, ecx
  000e8	74 10		 je	 SHORT $LN7@getline

; 418  : 				{	// end of file, quit
; 419  : 				_State |= ios_base::eofbit;

  000ea	8b 55 d4	 mov	 edx, DWORD PTR __State$[ebp]
  000ed	83 ca 01	 or	 edx, 1
  000f0	89 55 d4	 mov	 DWORD PTR __State$[ebp], edx

; 420  : 				break;

  000f3	e9 84 00 00 00	 jmp	 $LN8@getline
  000f8	eb 7d		 jmp	 SHORT $LN6@getline
$LN7@getline:

; 421  : 				}
; 422  : 			else if (_Traits::eq_int_type(_Meta, _Metadelim))

  000fa	8d 45 e4	 lea	 eax, DWORD PTR __Metadelim$4[ebp]
  000fd	50		 push	 eax
  000fe	8d 4d e8	 lea	 ecx, DWORD PTR __Meta$5[ebp]
  00101	51		 push	 ecx
  00102	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  00107	83 c4 08	 add	 esp, 8
  0010a	0f b6 d0	 movzx	 edx, al
  0010d	85 d2		 test	 edx, edx
  0010f	74 27		 je	 SHORT $LN5@getline

; 423  : 				{	// got a delimiter, discard it and quit
; 424  : 				_Changed = true;

  00111	c6 45 db 01	 mov	 BYTE PTR __Changed$[ebp], 1

; 425  : 				_Istr.rdbuf()->sbumpc();

  00115	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00118	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011a	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  0011d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00120	8b ca		 mov	 ecx, edx
  00122	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00128	89 45 c8	 mov	 DWORD PTR tv201[ebp], eax
  0012b	8b 4d c8	 mov	 ecx, DWORD PTR tv201[ebp]
  0012e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ

; 426  : 				break;

  00134	eb 46		 jmp	 SHORT $LN8@getline
  00136	eb 3f		 jmp	 SHORT $LN6@getline
$LN5@getline:

; 427  : 				}
; 428  : 			else if (_Str.max_size() <= _Str.size())

  00138	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  0013b	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00140	8b f0		 mov	 esi, eax
  00142	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  00145	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  0014a	3b c6		 cmp	 eax, esi
  0014c	77 0d		 ja	 SHORT $LN3@getline

; 429  : 				{	// string too large, quit
; 430  : 				_State |= ios_base::failbit;

  0014e	8b 45 d4	 mov	 eax, DWORD PTR __State$[ebp]
  00151	83 c8 02	 or	 eax, 2
  00154	89 45 d4	 mov	 DWORD PTR __State$[ebp], eax

; 431  : 				break;

  00157	eb 23		 jmp	 SHORT $LN8@getline

; 432  : 				}
; 433  : 			else

  00159	eb 1c		 jmp	 SHORT $LN6@getline
$LN3@getline:

; 434  : 				{	// got a character, add it to string
; 435  : 				_Str += _Traits::to_char_type(_Meta);

  0015b	8d 4d e8	 lea	 ecx, DWORD PTR __Meta$5[ebp]
  0015e	51		 push	 ecx
  0015f	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADABH@Z ; std::char_traits<char>::to_char_type
  00164	83 c4 04	 add	 esp, 4
  00167	0f b6 d0	 movzx	 edx, al
  0016a	52		 push	 edx
  0016b	8b 4d 0c	 mov	 ecx, DWORD PTR __Str$[ebp]
  0016e	e8 00 00 00 00	 call	 ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=

; 436  : 				_Changed = true;

  00173	c6 45 db 01	 mov	 BYTE PTR __Changed$[ebp], 1
$LN6@getline:

; 437  : 				}

  00177	e9 29 ff ff ff	 jmp	 $LN9@getline
$LN8@getline:
  0017c	eb 1d		 jmp	 SHORT $LN15@getline
__catch$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$0:

; 438  : 		_CATCH_IO_(_Istr)

  0017e	6a 01		 push	 1
  00180	6a 04		 push	 4
  00182	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00185	8b 08		 mov	 ecx, DWORD PTR [eax]
  00187	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  0018a	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0018d	8b ca		 mov	 ecx, edx
  0018f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00195	b8 00 00 00 00	 mov	 eax, $LN19@getline
  0019a	c3		 ret	 0
$LN15@getline:
  0019b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  001a2	eb 07		 jmp	 SHORT $LN12@getline
$LN19@getline:
  001a4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN12@getline:

; 439  : 		}
; 440  : 
; 441  : 	if (!_Changed)

  001ab	0f b6 45 db	 movzx	 eax, BYTE PTR __Changed$[ebp]
  001af	85 c0		 test	 eax, eax
  001b1	75 09		 jne	 SHORT $LN1@getline

; 442  : 		_State |= ios_base::failbit;

  001b3	8b 4d d4	 mov	 ecx, DWORD PTR __State$[ebp]
  001b6	83 c9 02	 or	 ecx, 2
  001b9	89 4d d4	 mov	 DWORD PTR __State$[ebp], ecx
$LN1@getline:

; 443  : 	_Istr.setstate(_State);

  001bc	6a 00		 push	 0
  001be	8b 55 d4	 mov	 edx, DWORD PTR __State$[ebp]
  001c1	52		 push	 edx
  001c2	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  001c5	8b 08		 mov	 ecx, DWORD PTR [eax]
  001c7	8b 55 08	 mov	 edx, DWORD PTR __Istr$[ebp]
  001ca	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001cd	8b ca		 mov	 ecx, edx
  001cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z

; 444  : 	return (_Istr);

  001d5	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  001d8	89 45 c0	 mov	 DWORD PTR $T2[ebp], eax
  001db	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  001e2	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  001e5	e8 00 00 00 00	 call	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
  001ea	8b 45 c0	 mov	 eax, DWORD PTR $T2[ebp]

; 445  : 	}

  001ed	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001f0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001f7	59		 pop	 ecx
  001f8	5f		 pop	 edi
  001f9	5e		 pop	 esi
  001fa	5b		 pop	 ebx
  001fb	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001fe	33 cd		 xor	 ecx, ebp
  00200	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00205	8b e5		 mov	 esp, ebp
  00207	5d		 pop	 ebp
  00208	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$2:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
__ehhandler$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QAV10@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z ENDP ; std::getline<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@ABQAE@std@@YAABQAEABQAE@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAE@std@@YAABQAEABQAE@Z PROC		; std::forward<unsigned char * const &>, COMDAT

; 1775 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABQAE@std@@YAABQAEABQAE@Z ENDP		; std::forward<unsigned char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\list
;	COMDAT ??$_Buynode@ABQAE@?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAEPAU?$_List_node@PAEPAX@1@PAU21@0ABQAE@Z
_TEXT	SEGMENT
tv135 = -40						; size = 4
tv134 = -36						; size = 4
tv133 = -32						; size = 4
__Pnode$ = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -18						; size = 1
$T3 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Next$ = 8						; size = 4
__Prev$ = 12						; size = 4
__V0$ = 16						; size = 4
??$_Buynode@ABQAE@?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAEPAU?$_List_node@PAEPAX@1@PAU21@0ABQAE@Z PROC ; std::_List_buy<unsigned char *,std::allocator<unsigned char *> >::_Buynode<unsigned char * const &>, COMDAT
; _this$ = ecx

; 850  : _VARIADIC_EXPAND_0X(_LIST_BUYNODE, , , , )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Buynode@ABQAE@?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAEPAU?$_List_node@PAEPAX@1@PAU21@0ABQAE@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 18	 sub	 esp, 24			; 00000018H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  0002f	8b 45 0c	 mov	 eax, DWORD PTR __Prev$[ebp]
  00032	50		 push	 eax
  00033	8b 4d 08	 mov	 ecx, DWORD PTR __Next$[ebp]
  00036	51		 push	 ecx
  00037	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEPAU?$_List_node@PAEPAX@2@PAU32@0@Z ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Buynode0
  0003f	89 45 e4	 mov	 DWORD PTR __Pnode$[ebp], eax
  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00049	8b 55 10	 mov	 edx, DWORD PTR __V0$[ebp]
  0004c	52		 push	 edx
  0004d	e8 00 00 00 00	 call	 ??$forward@ABQAE@std@@YAABQAEABQAE@Z ; std::forward<unsigned char * const &>
  00052	83 c4 04	 add	 esp, 4
  00055	89 45 e0	 mov	 DWORD PTR tv133[ebp], eax
  00058	8b 45 e4	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?_Myval@?$_List_val@U?$_List_simple_types@PAE@std@@@std@@SAAAPAEPAU?$_List_node@PAEPAX@2@@Z ; std::_List_val<std::_List_simple_types<unsigned char *> >::_Myval
  00061	83 c4 04	 add	 esp, 4
  00064	89 45 dc	 mov	 DWORD PTR tv134[ebp], eax
  00067	8d 4d ef	 lea	 ecx, DWORD PTR $T3[ebp]
  0006a	51		 push	 ecx
  0006b	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	e8 00 00 00 00	 call	 ?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Getal
  00073	89 45 d8	 mov	 DWORD PTR tv135[ebp], eax
  00076	8b 55 e0	 mov	 edx, DWORD PTR tv133[ebp]
  00079	52		 push	 edx
  0007a	8b 45 dc	 mov	 eax, DWORD PTR tv134[ebp]
  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ??$addressof@PAE@std@@YAPAPAEAAPAE@Z ; std::addressof<unsigned char *>
  00083	83 c4 04	 add	 esp, 4
  00086	50		 push	 eax
  00087	8b 4d d8	 mov	 ecx, DWORD PTR tv135[ebp]
  0008a	e8 00 00 00 00	 call	 ??$construct@PAEABQAE@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAPAEABQAE@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::construct<unsigned char *,unsigned char * const &>
  0008f	eb 28		 jmp	 SHORT $LN4@Buynode
__catch$??$_Buynode@ABQAE@?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAEPAU?$_List_node@PAEPAX@1@PAU21@0ABQAE@Z$0:
  00091	6a 01		 push	 1
  00093	8b 4d e4	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00096	51		 push	 ecx
  00097	8d 55 ee	 lea	 edx, DWORD PTR $T2[ebp]
  0009a	52		 push	 edx
  0009b	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009e	e8 00 00 00 00	 call	 ?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@2@XZ ; std::_List_alloc<0,std::_List_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Getal
  000a3	8b c8		 mov	 ecx, eax
  000a5	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAU?$_List_node@PAEPAX@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::deallocate
  000aa	6a 00		 push	 0
  000ac	6a 00		 push	 0
  000ae	e8 00 00 00 00	 call	 __CxxThrowException@8
  000b3	b8 00 00 00 00	 mov	 eax, $LN7@Buynode
  000b8	c3		 ret	 0
$LN4@Buynode:
  000b9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000c0	eb 07		 jmp	 SHORT __tryend$??$_Buynode@ABQAE@?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAEPAU?$_List_node@PAEPAX@1@PAU21@0ABQAE@Z$1
$LN7@Buynode:
  000c2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Buynode@ABQAE@?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAEPAU?$_List_node@PAEPAX@1@PAU21@0ABQAE@Z$1:
  000c9	8b 45 e4	 mov	 eax, DWORD PTR __Pnode$[ebp]
$LN3@Buynode:
  000cc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000cf	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d6	59		 pop	 ecx
  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi
  000d9	5b		 pop	 ebx
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Buynode@ABQAE@?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAEPAU?$_List_node@PAEPAX@1@PAU21@0ABQAE@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Buynode@ABQAE@?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAEPAU?$_List_node@PAEPAX@1@PAU21@0ABQAE@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Buynode@ABQAE@?$_List_buy@PAEV?$allocator@PAE@std@@@std@@QAEPAU?$_List_node@PAEPAX@1@PAU21@0ABQAE@Z ENDP ; std::_List_buy<unsigned char *,std::allocator<unsigned char *> >::_Buynode<unsigned char * const &>
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@PAEPAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAEPAX@std@@@1@PAPAU?$_List_node@PAEPAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAU?$_List_node@PAEPAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAEPAX@std@@@1@PAPAU?$_List_node@PAEPAX@1@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<unsigned char *,void *> > >::destroy<std::_List_node<unsigned char *,void *> *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000a	e8 00 00 00 00	 call	 ??$destroy@PAU?$_List_node@PAEPAX@std@@@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@@Z ; std::allocator<std::_List_node<unsigned char *,void *> >::destroy<std::_List_node<unsigned char *,void *> *>

; 758  : 		}

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??$destroy@PAU?$_List_node@PAEPAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAEPAX@std@@@1@PAPAU?$_List_node@PAEPAX@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<unsigned char *,void *> > >::destroy<std::_List_node<unsigned char *,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAE@?$allocator_traits@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAEPAX@std@@@1@PAPAE@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAE@?$allocator_traits@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAEPAX@std@@@1@PAPAE@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<unsigned char *,void *> > >::destroy<unsigned char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000a	e8 00 00 00 00	 call	 ??$destroy@PAE@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAE@Z ; std::allocator<std::_List_node<unsigned char *,void *> >::destroy<unsigned char *>

; 758  : 		}

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??$destroy@PAE@?$allocator_traits@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAEPAX@std@@@1@PAPAE@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<unsigned char *,void *> > >::destroy<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z PROC ; std::_Ptr_cat<int,int>, COMDAT

; 437  : 	{	// return pointer category from pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 438  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 439  : 	return (_Cat);

  00004	8a 45 ff	 mov	 al, BYTE PTR __Cat$[ebp]

; 440  : 	}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z ENDP ; std::_Ptr_cat<int,int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >, COMDAT

; 96   : 	{	// destroy [_First, _Last), scalar type (do nothing)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 97   : 	}

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAU?$_List_node@PAEPAX@std@@@std@@YAAAPAU?$_List_node@PAEPAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_List_node@PAEPAX@std@@@std@@YAAAPAU?$_List_node@PAEPAX@0@AAPAU10@@Z PROC ; std::forward<std::_List_node<unsigned char *,void *> * &>, COMDAT

; 1775 : 	{	// forward an lvalue

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@AAPAU?$_List_node@PAEPAX@std@@@std@@YAAAPAU?$_List_node@PAEPAX@0@AAPAU10@@Z ENDP ; std::forward<std::_List_node<unsigned char *,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@PAEPAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAEPAX@std@@@1@PAPAU?$_List_node@PAEPAX@1@AAPAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PAU?$_List_node@PAEPAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAEPAX@std@@@1@PAPAU?$_List_node@PAEPAX@1@AAPAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<unsigned char *,void *> > >::construct<std::_List_node<unsigned char *,void *> *,std::_List_node<unsigned char *,void *> * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 10	 mov	 eax, DWORD PTR __V0$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$forward@AAPAU?$_List_node@PAEPAX@std@@@std@@YAAAPAU?$_List_node@PAEPAX@0@AAPAU10@@Z ; std::forward<std::_List_node<unsigned char *,void *> * &>
  0000c	83 c4 04	 add	 esp, 4
  0000f	50		 push	 eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  00017	e8 00 00 00 00	 call	 ??$construct@PAU?$_List_node@PAEPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@AAPAU21@@Z ; std::allocator<std::_List_node<unsigned char *,void *> >::construct<std::_List_node<unsigned char *,void *> *,std::_List_node<unsigned char *,void *> * &>
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$construct@PAU?$_List_node@PAEPAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAEPAX@std@@@1@PAPAU?$_List_node@PAEPAX@1@AAPAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<unsigned char *,void *> > >::construct<std::_List_node<unsigned char *,void *> *,std::_List_node<unsigned char *,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\matx.hpp
;	COMDAT ??0?$Matx@N$03$00@cv@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
??0?$Matx@N$03$00@cv@@QAE@XZ PROC			; cv::Matx<double,4,1>::Matx<double,4,1>, COMDAT
; _this$ = ecx

; 489  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 490  :     for(int i = 0; i < channels; i++) val[i] = _Tp(0);

  00009	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN3@Matx
$LN2@Matx:
  00012	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 fc	 mov	 DWORD PTR _i$1[ebp], eax
$LN3@Matx:
  0001b	83 7d fc 04	 cmp	 DWORD PTR _i$1[ebp], 4
  0001f	7d 15		 jge	 SHORT $LN1@Matx
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _i$1[ebp]
  00024	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00027	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@0000000000000000
  0002f	f2 0f 11 04 ca	 movsd	 QWORD PTR [edx+ecx*8], xmm0
  00034	eb dc		 jmp	 SHORT $LN2@Matx
$LN1@Matx:

; 491  : }

  00036	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??0?$Matx@N$03$00@cv@@QAE@XZ ENDP			; cv::Matx<double,4,1>::Matx<double,4,1>
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??4?$Mat_@M@cv@@QAEAAV01@ABVMat@1@@Z
_TEXT	SEGMENT
$T2 = -100						; size = 56
$T3 = -44						; size = 16
$T4 = -28						; size = 4
tv132 = -24						; size = 4
tv134 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_m$ = 8							; size = 4
??4?$Mat_@M@cv@@QAEAAV01@ABVMat@1@@Z PROC		; cv::Mat_<float>::operator=, COMDAT
; _this$ = ecx

; 1473 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??4?$Mat_@M@cv@@QAEAAV01@ABVMat@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1474 :     if( DataType<_Tp>::type == m.type() )

  00028	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0002b	e8 00 00 00 00	 call	 ?type@Mat@cv@@QBEHXZ	; cv::Mat::type
  00030	83 f8 05	 cmp	 eax, 5
  00033	75 14		 jne	 SHORT $LN2@operator

; 1475 :     {
; 1476 :         Mat::operator = (m);

  00035	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  00038	50		 push	 eax
  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	e8 00 00 00 00	 call	 ??4Mat@cv@@QAEAAV01@ABV01@@Z ; cv::Mat::operator=

; 1477 :         return *this;

  00041	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00044	e9 b3 00 00 00	 jmp	 $LN3@operator
$LN2@operator:

; 1478 :     }
; 1479 :     if( DataType<_Tp>::depth == m.depth() )

  00049	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0004c	e8 00 00 00 00	 call	 ?depth@Mat@cv@@QBEHXZ	; cv::Mat::depth
  00051	83 f8 05	 cmp	 eax, 5
  00054	75 4b		 jne	 SHORT $LN1@operator

; 1480 :     {
; 1481 :         return (*this = m.reshape(DataType<_Tp>::channels, m.dims, 0));

  00056	6a 00		 push	 0
  00058	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0005b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0005e	52		 push	 edx
  0005f	6a 01		 push	 1
  00061	8d 45 9c	 lea	 eax, DWORD PTR $T2[ebp]
  00064	50		 push	 eax
  00065	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?reshape@Mat@cv@@QBE?AV12@HHPBH@Z
  0006e	89 45 ec	 mov	 DWORD PTR tv134[ebp], eax
  00071	8b 4d ec	 mov	 ecx, DWORD PTR tv134[ebp]
  00074	89 4d e8	 mov	 DWORD PTR tv132[ebp], ecx
  00077	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007e	8b 55 e8	 mov	 edx, DWORD PTR tv132[ebp]
  00081	52		 push	 edx
  00082	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00085	e8 00 00 00 00	 call	 ??4?$Mat_@M@cv@@QAEAAV01@$$QAVMat@1@@Z ; cv::Mat_<float>::operator=
  0008a	89 45 e4	 mov	 DWORD PTR $T4[ebp], eax
  0008d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00094	8d 4d 9c	 lea	 ecx, DWORD PTR $T2[ebp]
  00097	e8 00 00 00 00	 call	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
  0009c	8b 45 e4	 mov	 eax, DWORD PTR $T4[ebp]
  0009f	eb 5b		 jmp	 SHORT $LN3@operator
$LN1@operator:

; 1482 :     }
; 1483 :     CV_DbgAssert(DataType<_Tp>::channels == m.channels());
; 1484 :     m.convertTo(*this, type());

  000a1	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a4	50		 push	 eax
  000a5	8d 4d d4	 lea	 ecx, DWORD PTR $T3[ebp]
  000a8	e8 00 00 00 00	 call	 ??$?0M@_OutputArray@cv@@QAE@AAV?$Mat_@M@1@@Z ; cv::_OutputArray::_OutputArray<float>
  000ad	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000b4	83 ec 08	 sub	 esp, 8
  000b7	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@0000000000000000
  000bf	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000c4	83 ec 08	 sub	 esp, 8
  000c7	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  000cf	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000d4	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d7	e8 00 00 00 00	 call	 ?type@?$Mat_@M@cv@@QBEHXZ ; cv::Mat_<float>::type
  000dc	50		 push	 eax
  000dd	8d 4d d4	 lea	 ecx, DWORD PTR $T3[ebp]
  000e0	51		 push	 ecx
  000e1	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  000e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?convertTo@Mat@cv@@QBEXABV_OutputArray@2@HNN@Z
  000ea	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f1	8d 4d d4	 lea	 ecx, DWORD PTR $T3[ebp]
  000f4	e8 00 00 00 00	 call	 ??1_OutputArray@cv@@QAE@XZ

; 1485 :     return *this;

  000f9	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN3@operator:

; 1486 : }

  000fc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ff	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00106	59		 pop	 ecx
  00107	8b e5		 mov	 esp, ebp
  00109	5d		 pop	 ebp
  0010a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4?$Mat_@M@cv@@QAEAAV01@ABVMat@1@@Z$0:
  00000	8d 4d 9c	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__unwindfunclet$??4?$Mat_@M@cv@@QAEAAV01@ABVMat@1@@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1_OutputArray@cv@@QAE@XZ
__ehhandler$??4?$Mat_@M@cv@@QAEAAV01@ABVMat@1@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??4?$Mat_@M@cv@@QAEAAV01@ABVMat@1@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??4?$Mat_@M@cv@@QAEAAV01@ABVMat@1@@Z ENDP		; cv::Mat_<float>::operator=
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??0?$MatIterator_@M@cv@@QAE@PAV?$Mat_@M@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__m$ = 8						; size = 4
??0?$MatIterator_@M@cv@@QAE@PAV?$Mat_@M@1@@Z PROC	; cv::MatIterator_<float>::MatIterator_<float>, COMDAT
; _this$ = ecx

; 2721 : {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __m$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0?$MatConstIterator_@M@cv@@QAE@PBV?$Mat_@M@1@@Z ; cv::MatConstIterator_<float>::MatConstIterator_<float>
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0?$MatIterator_@M@cv@@QAE@PAV?$Mat_@M@1@@Z ENDP	; cv::MatIterator_<float>::MatIterator_<float>
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??0?$MatConstIterator_@M@cv@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_it$ = 8						; size = 4
??0?$MatConstIterator_@M@cv@@QAE@ABV01@@Z PROC		; cv::MatConstIterator_<float>::MatConstIterator_<float>, COMDAT
; _this$ = ecx

; 2588 : {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _it$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0MatConstIterator@cv@@QAE@ABV01@@Z ; cv::MatConstIterator::MatConstIterator
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0?$MatConstIterator_@M@cv@@QAE@ABV01@@Z ENDP		; cv::MatConstIterator_<float>::MatConstIterator_<float>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAEABQAE@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAPAEABQAE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAEABQAE@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAPAEABQAE@Z PROC ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::construct<unsigned char *,unsigned char * const &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR __V0$[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??$forward@ABQAE@std@@YAABQAEABQAE@Z ; std::forward<unsigned char * const &>
  00010	83 c4 04	 add	 esp, 4
  00013	50		 push	 eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00017	51		 push	 ecx
  00018	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001b	52		 push	 edx
  0001c	e8 00 00 00 00	 call	 ??$construct@PAEABQAE@?$allocator_traits@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAEPAX@std@@@1@PAPAEABQAE@Z ; std::allocator_traits<std::allocator<std::_List_node<unsigned char *,void *> > >::construct<unsigned char *,unsigned char * const &>
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
??$construct@PAEABQAE@?$_Wrap_alloc@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@QAEXPAPAEABQAE@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_List_node<unsigned char *,void *> > >::construct<unsigned char *,unsigned char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAU?$_List_node@PAEPAX@std@@@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAU?$_List_node@PAEPAX@std@@@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@@Z PROC ; std::allocator<std::_List_node<unsigned char *,void *> >::destroy<std::_List_node<unsigned char *,void *> *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
??$destroy@PAU?$_List_node@PAEPAX@std@@@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@@Z ENDP ; std::allocator<std::_List_node<unsigned char *,void *> >::destroy<std::_List_node<unsigned char *,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAE@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAE@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAE@Z PROC ; std::allocator<std::_List_node<unsigned char *,void *> >::destroy<unsigned char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
??$destroy@PAE@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAE@Z ENDP ; std::allocator<std::_List_node<unsigned char *,void *> >::destroy<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAU?$_List_node@PAEPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@AAPAU21@@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAU?$_List_node@PAEPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@AAPAU21@@Z PROC ; std::allocator<std::_List_node<unsigned char *,void *> >::construct<std::_List_node<unsigned char *,void *> *,std::_List_node<unsigned char *,void *> * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@PAU?$_List_node@PAEPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@AAPAU21@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  00028	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002b	50		 push	 eax
  0002c	6a 04		 push	 4
  0002e	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00033	83 c4 08	 add	 esp, 8
  00036	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00040	83 7d f0 00	 cmp	 DWORD PTR $T3[ebp], 0
  00044	74 1b		 je	 SHORT $LN3@construct
  00046	8b 4d 0c	 mov	 ecx, DWORD PTR __V0$[ebp]
  00049	51		 push	 ecx
  0004a	e8 00 00 00 00	 call	 ??$forward@AAPAU?$_List_node@PAEPAX@std@@@std@@YAAAPAU?$_List_node@PAEPAX@0@AAPAU10@@Z ; std::forward<std::_List_node<unsigned char *,void *> * &>
  0004f	83 c4 04	 add	 esp, 4
  00052	8b 55 f0	 mov	 edx, DWORD PTR $T3[ebp]
  00055	8b 00		 mov	 eax, DWORD PTR [eax]
  00057	89 02		 mov	 DWORD PTR [edx], eax
  00059	8b 4d f0	 mov	 ecx, DWORD PTR $T3[ebp]
  0005c	89 4d ec	 mov	 DWORD PTR tv73[ebp], ecx
  0005f	eb 07		 jmp	 SHORT $LN4@construct
$LN3@construct:
  00061	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN4@construct:
  00068	8b 55 ec	 mov	 edx, DWORD PTR tv73[ebp]
  0006b	89 55 e4	 mov	 DWORD PTR $T2[ebp], edx
  0006e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00075	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00078	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007f	59		 pop	 ecx
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PAU?$_List_node@PAEPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@AAPAU21@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@PAU?$_List_node@PAEPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@AAPAU21@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@PAU?$_List_node@PAEPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@AAPAU21@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@PAU?$_List_node@PAEPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAU?$_List_node@PAEPAX@1@AAPAU21@@Z ENDP ; std::allocator<std::_List_node<unsigned char *,void *> >::construct<std::_List_node<unsigned char *,void *> *,std::_List_node<unsigned char *,void *> * &>
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??4?$Mat_@M@cv@@QAEAAV01@$$QAVMat@1@@Z
_TEXT	SEGMENT
$T2 = -96						; size = 56
$T3 = -40						; size = 16
tv135 = -24						; size = 4
tv137 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_m$ = 8							; size = 4
??4?$Mat_@M@cv@@QAEAAV01@$$QAVMat@1@@Z PROC		; cv::Mat_<float>::operator=, COMDAT
; _this$ = ecx

; 1835 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??4?$Mat_@M@cv@@QAEAAV01@$$QAVMat@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1836 :     if( DataType<_Tp>::type == m.type() )

  00028	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0002b	e8 00 00 00 00	 call	 ?type@Mat@cv@@QBEHXZ	; cv::Mat::type
  00030	83 f8 05	 cmp	 eax, 5
  00033	75 14		 jne	 SHORT $LN2@operator

; 1837 :     {
; 1838 :         Mat::operator = ((Mat&&)m);

  00035	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  00038	50		 push	 eax
  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	e8 00 00 00 00	 call	 ??4Mat@cv@@QAEAAV01@$$QAV01@@Z ; cv::Mat::operator=

; 1839 :         return *this;

  00041	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00044	e9 b0 00 00 00	 jmp	 $LN3@operator
$LN2@operator:

; 1840 :     }
; 1841 :     if( DataType<_Tp>::depth == m.depth() )

  00049	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0004c	e8 00 00 00 00	 call	 ?depth@Mat@cv@@QBEHXZ	; cv::Mat::depth
  00051	83 f8 05	 cmp	 eax, 5
  00054	75 48		 jne	 SHORT $LN1@operator

; 1842 :     {
; 1843 :         Mat::operator = ((Mat&&)m.reshape(DataType<_Tp>::channels, m.dims, 0));

  00056	6a 00		 push	 0
  00058	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  0005b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0005e	52		 push	 edx
  0005f	6a 01		 push	 1
  00061	8d 45 a0	 lea	 eax, DWORD PTR $T2[ebp]
  00064	50		 push	 eax
  00065	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?reshape@Mat@cv@@QBE?AV12@HHPBH@Z
  0006e	89 45 ec	 mov	 DWORD PTR tv137[ebp], eax
  00071	8b 4d ec	 mov	 ecx, DWORD PTR tv137[ebp]
  00074	89 4d e8	 mov	 DWORD PTR tv135[ebp], ecx
  00077	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007e	8b 55 e8	 mov	 edx, DWORD PTR tv135[ebp]
  00081	52		 push	 edx
  00082	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00085	e8 00 00 00 00	 call	 ??4Mat@cv@@QAEAAV01@$$QAV01@@Z ; cv::Mat::operator=
  0008a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00091	8d 4d a0	 lea	 ecx, DWORD PTR $T2[ebp]
  00094	e8 00 00 00 00	 call	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat

; 1844 :         return *this;

  00099	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0009c	eb 5b		 jmp	 SHORT $LN3@operator
$LN1@operator:

; 1845 :     }
; 1846 :     CV_DbgAssert(DataType<_Tp>::channels == m.channels());
; 1847 :     m.convertTo(*this, type());

  0009e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a1	50		 push	 eax
  000a2	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  000a5	e8 00 00 00 00	 call	 ??$?0M@_OutputArray@cv@@QAE@AAV?$Mat_@M@1@@Z ; cv::_OutputArray::_OutputArray<float>
  000aa	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000b1	83 ec 08	 sub	 esp, 8
  000b4	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@0000000000000000
  000bc	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000c1	83 ec 08	 sub	 esp, 8
  000c4	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  000cc	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000d1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d4	e8 00 00 00 00	 call	 ?type@?$Mat_@M@cv@@QBEHXZ ; cv::Mat_<float>::type
  000d9	50		 push	 eax
  000da	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  000dd	51		 push	 ecx
  000de	8b 4d 08	 mov	 ecx, DWORD PTR _m$[ebp]
  000e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?convertTo@Mat@cv@@QBEXABV_OutputArray@2@HNN@Z
  000e7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ee	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  000f1	e8 00 00 00 00	 call	 ??1_OutputArray@cv@@QAE@XZ

; 1848 :     return *this;

  000f6	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN3@operator:

; 1849 : }

  000f9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000fc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00103	59		 pop	 ecx
  00104	8b e5		 mov	 esp, ebp
  00106	5d		 pop	 ebp
  00107	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4?$Mat_@M@cv@@QAEAAV01@$$QAVMat@1@@Z$0:
  00000	8d 4d a0	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Mat@cv@@QAE@XZ	; cv::Mat::~Mat
__unwindfunclet$??4?$Mat_@M@cv@@QAEAAV01@$$QAVMat@1@@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1_OutputArray@cv@@QAE@XZ
__ehhandler$??4?$Mat_@M@cv@@QAEAAV01@$$QAVMat@1@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??4?$Mat_@M@cv@@QAEAAV01@$$QAVMat@1@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??4?$Mat_@M@cv@@QAEAAV01@$$QAVMat@1@@Z ENDP		; cv::Mat_<float>::operator=
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ?type@?$Mat_@M@cv@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?type@?$Mat_@M@cv@@QBEHXZ PROC				; cv::Mat_<float>::type, COMDAT
; _this$ = ecx

; 1573 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1574 :     CV_DbgAssert( Mat::type() == DataType<_Tp>::type );
; 1575 :     return DataType<_Tp>::type;

  00007	b8 05 00 00 00	 mov	 eax, 5

; 1576 : }

  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?type@?$Mat_@M@cv@@QBEHXZ ENDP				; cv::Mat_<float>::type
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??$?0M@_OutputArray@cv@@QAE@AAV?$Mat_@M@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_m$ = 8							; size = 4
??$?0M@_OutputArray@cv@@QAE@AAV?$Mat_@M@1@@Z PROC	; cv::_OutputArray::_OutputArray<float>, COMDAT
; _this$ = ecx

; 166  : { init(FIXED_TYPE + MAT + DataType<_Tp>::type + ACCESS_WRITE, &m); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0M@_OutputArray@cv@@QAE@AAV?$Mat_@M@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ??0_InputArray@cv@@QAE@XZ ; cv::_InputArray::_InputArray
  0002e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00035	8b 45 08	 mov	 eax, DWORD PTR _m$[ebp]
  00038	50		 push	 eax
  00039	68 05 00 01 82	 push	 -2113863675		; 82010005H
  0003e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	e8 00 00 00 00	 call	 ?init@_InputArray@cv@@IAEXHPBX@Z ; cv::_InputArray::init
  00046	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0M@_OutputArray@cv@@QAE@AAV?$Mat_@M@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_InputArray@cv@@QAE@XZ ; cv::_InputArray::~_InputArray
__ehhandler$??$?0M@_OutputArray@cv@@QAE@AAV?$Mat_@M@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0M@_OutputArray@cv@@QAE@AAV?$Mat_@M@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0M@_OutputArray@cv@@QAE@AAV?$Mat_@M@1@@Z ENDP	; cv::_OutputArray::_OutputArray<float>
; Function compile flags: /Odtp
; File e:\work_wm\hxijy_code\endoscopemfc2012_menu_changepara_youhua_savepic_usb_1114_twothread_svepic_save5\include\opencv2\core\mat.inl.hpp
;	COMDAT ??0?$MatConstIterator_@M@cv@@QAE@PBV?$Mat_@M@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__m$ = 8						; size = 4
??0?$MatConstIterator_@M@cv@@QAE@PBV?$Mat_@M@1@@Z PROC	; cv::MatConstIterator_<float>::MatConstIterator_<float>, COMDAT
; _this$ = ecx

; 2573 : {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR __m$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ??0MatConstIterator@cv@@QAE@PBVMat@1@@Z ; cv::MatConstIterator::MatConstIterator
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0?$MatConstIterator_@M@cv@@QAE@PBV?$Mat_@M@1@@Z ENDP	; cv::MatConstIterator_<float>::MatConstIterator_<float>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAEABQAE@?$allocator_traits@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAEPAX@std@@@1@PAPAEABQAE@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PAEABQAE@?$allocator_traits@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAEPAX@std@@@1@PAPAEABQAE@Z PROC ; std::allocator_traits<std::allocator<std::_List_node<unsigned char *,void *> > >::construct<unsigned char *,unsigned char * const &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 10	 mov	 eax, DWORD PTR __V0$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$forward@ABQAE@std@@YAABQAEABQAE@Z ; std::forward<unsigned char * const &>
  0000c	83 c4 04	 add	 esp, 4
  0000f	50		 push	 eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  00017	e8 00 00 00 00	 call	 ??$construct@PAEABQAE@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAEABQAE@Z ; std::allocator<std::_List_node<unsigned char *,void *> >::construct<unsigned char *,unsigned char * const &>
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$construct@PAEABQAE@?$allocator_traits@V?$allocator@U?$_List_node@PAEPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PAEPAX@std@@@1@PAPAEABQAE@Z ENDP ; std::allocator_traits<std::allocator<std::_List_node<unsigned char *,void *> > >::construct<unsigned char *,unsigned char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PAEABQAE@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAEABQAE@Z
_TEXT	SEGMENT
$T2 = -28						; size = 4
_this$ = -24						; size = 4
tv73 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PAEABQAE@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAEABQAE@Z PROC ; std::allocator<std::_List_node<unsigned char *,void *> >::construct<unsigned char *,unsigned char * const &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@PAEABQAE@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAEABQAE@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  00028	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002b	50		 push	 eax
  0002c	6a 04		 push	 4
  0002e	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00033	83 c4 08	 add	 esp, 8
  00036	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00040	83 7d f0 00	 cmp	 DWORD PTR $T3[ebp], 0
  00044	74 1b		 je	 SHORT $LN3@construct
  00046	8b 4d 0c	 mov	 ecx, DWORD PTR __V0$[ebp]
  00049	51		 push	 ecx
  0004a	e8 00 00 00 00	 call	 ??$forward@ABQAE@std@@YAABQAEABQAE@Z ; std::forward<unsigned char * const &>
  0004f	83 c4 04	 add	 esp, 4
  00052	8b 55 f0	 mov	 edx, DWORD PTR $T3[ebp]
  00055	8b 00		 mov	 eax, DWORD PTR [eax]
  00057	89 02		 mov	 DWORD PTR [edx], eax
  00059	8b 4d f0	 mov	 ecx, DWORD PTR $T3[ebp]
  0005c	89 4d ec	 mov	 DWORD PTR tv73[ebp], ecx
  0005f	eb 07		 jmp	 SHORT $LN4@construct
$LN3@construct:
  00061	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN4@construct:
  00068	8b 55 ec	 mov	 edx, DWORD PTR tv73[ebp]
  0006b	89 55 e4	 mov	 DWORD PTR $T2[ebp], edx
  0006e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00075	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00078	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007f	59		 pop	 ecx
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PAEABQAE@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAEABQAE@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@PAEABQAE@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAEABQAE@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@PAEABQAE@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAEABQAE@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@PAEABQAE@?$allocator@U?$_List_node@PAEPAX@std@@@std@@QAEXPAPAEABQAE@Z ENDP ; std::allocator<std::_List_node<unsigned char *,void *> >::construct<unsigned char *,unsigned char * const &>
; Function compile flags: /Odsp
;	COMDAT ?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@FI@AEXXZ
_TEXT	SEGMENT
?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@FI@AEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Add_vtordisp2, COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	83 e9 58	 sub	 ecx, 88			; 00000058H
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEXXZ
?_Add_vtordisp2@?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@FI@AEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Add_vtordisp2
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ?_Add_vtordisp1@?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@FI@AEXXZ
_TEXT	SEGMENT
?_Add_vtordisp1@?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@FI@AEXXZ PROC ; std::basic_istream<char,std::char_traits<char> >::_Add_vtordisp1, COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	83 e9 58	 sub	 ecx, 88			; 00000058H
  00006	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_?_Add_vtordisp1@?$basic_istream@DU?$char_traits@D@std@@@std@@UAEXXZ
?_Add_vtordisp1@?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@FI@AEXXZ ENDP ; std::basic_istream<char,std::char_traits<char> >::_Add_vtordisp1
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_ifstream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_ifstream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z
_TEXT	SEGMENT
??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
  00000	2b 49 fc	 sub	 ecx, DWORD PTR [ecx-4]
  00003	e9 00 00 00 00	 jmp	 ??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z
??_E?$basic_ofstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@AEPAXI@Z ENDP ; std::basic_ofstream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ch$ = 8						; size = 1
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 1008 : 		{	// append 1 * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1009 : 		return (append((size_type)1, _Ch));

  00007	0f b6 45 08	 movzx	 eax, BYTE PTR __Ch$[ebp]
  0000b	50		 push	 eax
  0000c	6a 01		 push	 1
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1010 : 		}

  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\istream
;	COMDAT ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBEPQ?$_Bool_struct@V?$basic_istream@DU?$char_traits@D@std@@@std@@@2@HXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBEPQ?$_Bool_struct@V?$basic_istream@DU?$char_traits@D@std@@@std@@@2@HXZ PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct<std::basic_istream<char,std::char_traits<char> > >::*, COMDAT
; _this$ = ecx

; 118  : 			{	// test if _Ipfx succeeded

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 119  : 			return (_Ok ? _CONVERTIBLE_TO_TRUE : 0);

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00010	85 c9		 test	 ecx, ecx
  00012	74 09		 je	 SHORT $LN3@
  00014	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
  0001b	eb 07		 jmp	 SHORT $LN4@
$LN3@:
  0001d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR tv67[ebp], -1
$LN4@:
  00024	8b 45 fc	 mov	 eax, DWORD PTR tv67[ebp]

; 120  : 			}

  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBEPQ?$_Bool_struct@V?$basic_istream@DU?$char_traits@D@std@@@std@@@2@HXZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct<std::basic_istream<char,std::char_traits<char> > >::*
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\istream
;	COMDAT ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv93 = -16						; size = 4
tv87 = -12						; size = 4
tv73 = -8						; size = 4
_this$ = -4						; size = 4
__Istr$ = 8						; size = 4
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 88   : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Istr$[ebp]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx

; 89   : 			if (_Myistr.rdbuf() != 0)

  00011	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00014	8b 02		 mov	 eax, DWORD PTR [edx]
  00016	89 45 f8	 mov	 DWORD PTR tv73[ebp], eax
  00019	8b 4d f8	 mov	 ecx, DWORD PTR tv73[ebp]
  0001c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001e	8b 4d f8	 mov	 ecx, DWORD PTR tv73[ebp]
  00021	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0002a	85 c0		 test	 eax, eax
  0002c	74 29		 je	 SHORT $LN2@Sentry_bas

; 90   : 				_Myistr.rdbuf()->_Lock();

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 08		 mov	 ecx, DWORD PTR [eax]
  00033	89 4d f4	 mov	 DWORD PTR tv87[ebp], ecx
  00036	8b 55 f4	 mov	 edx, DWORD PTR tv87[ebp]
  00039	8b 02		 mov	 eax, DWORD PTR [edx]
  0003b	8b 4d f4	 mov	 ecx, DWORD PTR tv87[ebp]
  0003e	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00047	89 45 f0	 mov	 DWORD PTR tv93[ebp], eax
  0004a	8b 4d f0	 mov	 ecx, DWORD PTR tv93[ebp]
  0004d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004f	8b 4d f0	 mov	 ecx, DWORD PTR tv93[ebp]
  00052	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00055	ff d0		 call	 eax
$LN2@Sentry_bas:

; 91   : 			}

  00057	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\istream
;	COMDAT ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv92 = -16						; size = 4
tv86 = -12						; size = 4
_this$ = -8						; size = 4
tv72 = -4						; size = 4
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 94   : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 95   : 			if (_Myistr.rdbuf() != 0)

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	89 4d fc	 mov	 DWORD PTR tv72[ebp], ecx
  00011	8b 55 fc	 mov	 edx, DWORD PTR tv72[ebp]
  00014	8b 02		 mov	 eax, DWORD PTR [edx]
  00016	8b 4d fc	 mov	 ecx, DWORD PTR tv72[ebp]
  00019	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00022	85 c0		 test	 eax, eax
  00024	74 2b		 je	 SHORT $LN2@Sentry_bas

; 96   : 				_Myistr.rdbuf()->_Unlock();

  00026	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002b	89 55 f4	 mov	 DWORD PTR tv86[ebp], edx
  0002e	8b 45 f4	 mov	 eax, DWORD PTR tv86[ebp]
  00031	8b 08		 mov	 ecx, DWORD PTR [eax]
  00033	8b 55 f4	 mov	 edx, DWORD PTR tv86[ebp]
  00036	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00039	8b ca		 mov	 ecx, edx
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00041	89 45 f0	 mov	 DWORD PTR tv92[ebp], eax
  00044	8b 45 f0	 mov	 eax, DWORD PTR tv92[ebp]
  00047	8b 10		 mov	 edx, DWORD PTR [eax]
  00049	8b 4d f0	 mov	 ecx, DWORD PTR tv92[ebp]
  0004c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0004f	ff d0		 call	 eax
$LN2@Sentry_bas:

; 97   : 			}

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\istream
;	COMDAT ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Istr$ = 8						; size = 4
__Noskip$ = 12						; size = 1
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z PROC ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 111  : 			{	// construct locking and calling _Ipfx

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	8b 45 08	 mov	 eax, DWORD PTR __Istr$[ebp]
  00029	50		 push	 eax
  0002a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 112  : 			_Ok = this->_Myistr._Ipfx(_Noskip);

  00039	0f b6 4d 0c	 movzx	 ecx, BYTE PTR __Noskip$[ebp]
  0003d	51		 push	 ecx
  0003e	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00041	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
  00049	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 113  : 			}

  0004f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00056	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00059	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_istream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z ENDP ; std::basic_istream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ??0?$fpos@H@std@@QAE@_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 8
??0?$fpos@H@std@@QAE@_J@Z PROC				; std::fpos<int>::fpos<int>, COMDAT
; _this$ = ecx

; 43   : 		{	// construct with stream offset

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR __Off$[ebp+4]
  00012	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0001f	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 44   : 		}

  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
??0?$fpos@H@std@@QAE@_J@Z ENDP				; std::fpos<int>::fpos<int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z
_TEXT	SEGMENT
__Meta$ = -4						; size = 4
__Byte$ = 8						; size = 4
__File$ = 12						; size = 4
??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z PROC		; std::_Fgetc<char>, COMDAT

; 37   : 	{	// get a char element from a C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 38   : 	int _Meta;
; 39   : 	if ((_Meta = fgetc(_File)) == EOF)

  00004	8b 45 0c	 mov	 eax, DWORD PTR __File$[ebp]
  00007	50		 push	 eax
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fgetc
  0000e	83 c4 04	 add	 esp, 4
  00011	89 45 fc	 mov	 DWORD PTR __Meta$[ebp], eax
  00014	83 7d fc ff	 cmp	 DWORD PTR __Meta$[ebp], -1
  00018	75 06		 jne	 SHORT $LN2@Fgetc

; 40   : 		return (false);

  0001a	32 c0		 xor	 al, al
  0001c	eb 0c		 jmp	 SHORT $LN3@Fgetc

; 41   : 	else

  0001e	eb 0a		 jmp	 SHORT $LN3@Fgetc
$LN2@Fgetc:

; 42   : 		{	// got one, convert to char
; 43   : 		_Byte = (char)_Meta;

  00020	8b 4d 08	 mov	 ecx, DWORD PTR __Byte$[ebp]
  00023	8a 55 fc	 mov	 dl, BYTE PTR __Meta$[ebp]
  00026	88 11		 mov	 BYTE PTR [ecx], dl

; 44   : 		return (true);

  00028	b0 01		 mov	 al, 1
$LN3@Fgetc:

; 45   : 		}
; 46   : 	}

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z ENDP		; std::_Fgetc<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__Byte$ = 8						; size = 4
__File$ = 12						; size = 4
??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z PROC		; std::_Ungetc<char>, COMDAT

; 106  : 	{	// put back a char element to a C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 107  : 	return (ungetc((unsigned char)_Byte, _File) != EOF);

  00004	8b 45 0c	 mov	 eax, DWORD PTR __File$[ebp]
  00007	50		 push	 eax
  00008	8b 4d 08	 mov	 ecx, DWORD PTR __Byte$[ebp]
  0000b	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  0000e	52		 push	 edx
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ungetc
  00015	83 c4 08	 add	 esp, 8
  00018	83 f8 ff	 cmp	 eax, -1
  0001b	74 09		 je	 SHORT $LN3@Ungetc
  0001d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
  00024	eb 07		 jmp	 SHORT $LN4@Ungetc
$LN3@Ungetc:
  00026	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@Ungetc:
  0002d	8a 45 fc	 mov	 al, BYTE PTR tv69[ebp]

; 108  : 	}

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z ENDP		; std::_Ungetc<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__Num$ = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 1066 : 		{	// append _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1067 : 		if (npos - this->_Mysize <= _Count)

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  00012	2b 48 10	 sub	 ecx, DWORD PTR [eax+16]
  00015	3b 4d 08	 cmp	 ecx, DWORD PTR __Count$[ebp]
  00018	77 08		 ja	 SHORT $LN2@append

; 1068 : 			_Xlen();	// result too long

  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@append:

; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))

  00022	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00026	76 45		 jbe	 SHORT $LN1@append
  00028	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002b	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0002e	03 45 08	 add	 eax, DWORD PTR __Count$[ebp]
  00031	89 45 f8	 mov	 DWORD PTR __Num$[ebp], eax
  00034	6a 00		 push	 0
  00036	8b 4d f8	 mov	 ecx, DWORD PTR __Num$[ebp]
  00039	51		 push	 ecx
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00042	0f b6 d0	 movzx	 edx, al
  00045	85 d2		 test	 edx, edx
  00047	74 24		 je	 SHORT $LN1@append

; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);

  00049	0f b6 45 0c	 movzx	 eax, BYTE PTR __Ch$[ebp]
  0004d	50		 push	 eax
  0004e	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00051	51		 push	 ecx
  00052	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00055	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00058	50		 push	 eax
  00059	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 1074 : 			_Eos(_Num);

  00061	8b 4d f8	 mov	 ecx, DWORD PTR __Num$[ebp]
  00064	51		 push	 ecx
  00065	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@append:

; 1075 : 			}
; 1076 : 		return (*this);

  0006d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
$LN4@append:

; 1077 : 		}

  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 08 00	 ret	 8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAPADPADID@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?assign@?$char_traits@D@std@@SAPADPADID@Z PROC		; std::char_traits<char>::assign, COMDAT

; 558  : 		{	// assign _Count * _Ch to [_First, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 559  : 		return ((_Elem *)_CSTD memset(_First, _Ch, _Count));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	50		 push	 eax
  00007	0f be 4d 10	 movsx	 ecx, BYTE PTR __Ch$[ebp]
  0000b	51		 push	 ecx
  0000c	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0000f	52		 push	 edx
  00010	e8 00 00 00 00	 call	 _memset
  00015	83 c4 0c	 add	 esp, 12			; 0000000cH

; 560  : 		}

  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?assign@?$char_traits@D@std@@SAPADPADID@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign, COMDAT
; _this$ = ecx

; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2175 : 		if (_Count == 1)

  00007	83 7d 0c 01	 cmp	 DWORD PTR __Count$[ebp], 1
  0000b	75 1a		 jne	 SHORT $LN2@Chassign

; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);

  0000d	8d 45 10	 lea	 eax, DWORD PTR __Ch$[ebp]
  00010	50		 push	 eax
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00019	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
  00022	83 c4 08	 add	 esp, 8

; 2177 : 		else

  00025	eb 1d		 jmp	 SHORT $LN3@Chassign
$LN2@Chassign:

; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);

  00027	0f b6 4d 10	 movzx	 ecx, BYTE PTR __Ch$[ebp]
  0002b	51		 push	 ecx
  0002c	8b 55 0c	 mov	 edx, DWORD PTR __Count$[ebp]
  0002f	52		 push	 edx
  00030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00038	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAPADPADID@Z ; std::char_traits<char>::assign
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@Chassign:

; 2179 : 		}

  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c2 0c 00	 ret	 12			; 0000000cH
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1148 : 		{	// assign _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1149 : 		if (_Count == npos)

  00007	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  0000a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  00010	75 08		 jne	 SHORT $LN2@assign

; 1150 : 			_Xlen();	// result too long

  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@assign:

; 1151 : 
; 1152 : 		if (_Grow(_Count))

  0001a	6a 00		 push	 0
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  0001f	51		 push	 ecx
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00028	0f b6 d0	 movzx	 edx, al
  0002b	85 d2		 test	 edx, edx
  0002d	74 1f		 je	 SHORT $LN1@assign

; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);

  0002f	0f b6 45 0c	 movzx	 eax, BYTE PTR __Ch$[ebp]
  00033	50		 push	 eax
  00034	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00037	51		 push	 ecx
  00038	6a 00		 push	 0
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 1155 : 			_Eos(_Count);

  00042	8b 55 08	 mov	 edx, DWORD PTR __Count$[ebp]
  00045	52		 push	 edx
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1156 : 			}
; 1157 : 		return (*this);

  0004e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
$LN4@assign:

; 1158 : 		}

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 805  : 		{	// construct from _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8d 4d ff	 lea	 ecx, DWORD PTR $T1[ebp]
  0000c	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>
  00011	50		 push	 eax
  00012	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 806  : 		_Tidy();

  0001a	6a 00		 push	 0
  0001c	6a 00		 push	 0
  0001e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 807  : 		assign(_Count, _Ch);

  00026	0f b6 45 0c	 movzx	 eax, BYTE PTR __Ch$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  0002e	51		 push	 ecx
  0002f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 808  : 		}

  00037	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\fstream
;	COMDAT ??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__Byte$ = 8						; size = 1
__File$ = 12						; size = 4
??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z PROC		; std::_Fputc<char>, COMDAT

; 82   : 	{	// put a char element to a C stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 83   : 	return (fputc(_Byte, _File) != EOF);

  00004	8b 45 0c	 mov	 eax, DWORD PTR __File$[ebp]
  00007	50		 push	 eax
  00008	0f be 4d 08	 movsx	 ecx, BYTE PTR __Byte$[ebp]
  0000c	51		 push	 ecx
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fputc
  00013	83 c4 08	 add	 esp, 8
  00016	83 f8 ff	 cmp	 eax, -1
  00019	74 09		 je	 SHORT $LN3@Fputc
  0001b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
  00022	eb 07		 jmp	 SHORT $LN4@Fputc
$LN3@Fputc:
  00024	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@Fputc:
  0002b	8a 45 fc	 mov	 al, BYTE PTR tv69[ebp]

; 84   : 	}

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z ENDP		; std::_Fputc<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?to_char_type@?$char_traits@D@std@@SADABH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?to_char_type@?$char_traits@D@std@@SADABH@Z PROC	; std::char_traits<char>::to_char_type, COMDAT

; 581  : 		{	// convert metacharacter to character

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 582  : 		return ((_Elem)_Meta);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Meta$[ebp]
  00006	8a 00		 mov	 al, BYTE PTR [eax]

; 583  : 		}

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?to_char_type@?$char_traits@D@std@@SADABH@Z ENDP	; std::char_traits<char>::to_char_type
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?not_eof@?$char_traits@D@std@@SAHABH@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
tv68 = -4						; size = 4
__Meta$ = 8						; size = 4
?not_eof@?$char_traits@D@std@@SAHABH@Z PROC		; std::char_traits<char>::not_eof, COMDAT

; 599  : 		{	// return anything but EOF

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 600  : 		return (_Meta != eof() ? _Meta : !eof());

  00006	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR __Meta$[ebp]
  0000e	39 01		 cmp	 DWORD PTR [ecx], eax
  00010	74 0a		 je	 SHORT $LN5@not_eof
  00012	8b 55 08	 mov	 edx, DWORD PTR __Meta$[ebp]
  00015	8b 02		 mov	 eax, DWORD PTR [edx]
  00017	89 45 f8	 mov	 DWORD PTR tv69[ebp], eax
  0001a	eb 1f		 jmp	 SHORT $LN6@not_eof
$LN5@not_eof:
  0001c	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00021	85 c0		 test	 eax, eax
  00023	75 09		 jne	 SHORT $LN3@not_eof
  00025	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv68[ebp], 1
  0002c	eb 07		 jmp	 SHORT $LN4@not_eof
$LN3@not_eof:
  0002e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN4@not_eof:
  00035	8b 4d fc	 mov	 ecx, DWORD PTR tv68[ebp]
  00038	89 4d f8	 mov	 DWORD PTR tv69[ebp], ecx
$LN6@not_eof:
  0003b	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]

; 601  : 		}

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?not_eof@?$char_traits@D@std@@SAHABH@Z ENDP		; std::char_traits<char>::not_eof
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
_TEXT	SEGMENT
tv83 = -20						; size = 4
__Ptr$1 = -16						; size = 4
__Facptr$ = -12						; size = 4
tv71 = -8						; size = 4
_this$ = -4						; size = 4
__Id$ = 8						; size = 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z PROC		; std::locale::_Getfacet, COMDAT
; _this$ = ecx

; 449  : 		{	// look up a facet in locale object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 450  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount
; 451  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	8b 55 08	 mov	 edx, DWORD PTR __Id$[ebp]
  00011	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00014	73 13		 jae	 SHORT $LN6@Getfacet
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001b	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001e	8b 45 08	 mov	 eax, DWORD PTR __Id$[ebp]
  00021	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  00024	89 4d f8	 mov	 DWORD PTR tv71[ebp], ecx
  00027	eb 07		 jmp	 SHORT $LN7@Getfacet
$LN6@Getfacet:
  00029	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$LN7@Getfacet:
  00030	8b 55 f8	 mov	 edx, DWORD PTR tv71[ebp]
  00033	89 55 f4	 mov	 DWORD PTR __Facptr$[ebp], edx

; 452  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

  00036	83 7d f4 00	 cmp	 DWORD PTR __Facptr$[ebp], 0
  0003a	75 0d		 jne	 SHORT $LN2@Getfacet
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00041	0f b6 51 14	 movzx	 edx, BYTE PTR [ecx+20]
  00045	85 d2		 test	 edx, edx
  00047	75 07		 jne	 SHORT $LN3@Getfacet
$LN2@Getfacet:

; 453  : 			return (_Facptr);	// found facet or not transparent

  00049	8b 45 f4	 mov	 eax, DWORD PTR __Facptr$[ebp]
  0004c	eb 31		 jmp	 SHORT $LN4@Getfacet

; 454  : 		else

  0004e	eb 2f		 jmp	 SHORT $LN4@Getfacet
$LN3@Getfacet:

; 455  : 			{	// look in current locale
; 456  : 			locale::_Locimp *_Ptr = _Getgloballocale();

  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ
  00056	89 45 f0	 mov	 DWORD PTR __Ptr$1[ebp], eax

; 457  : 			return (_Id < _Ptr->_Facetcount
; 458  : 				? _Ptr->_Facetvec[_Id]	// get from current locale
; 459  : 				: 0);	// no entry in current locale

  00059	8b 45 f0	 mov	 eax, DWORD PTR __Ptr$1[ebp]
  0005c	8b 4d 08	 mov	 ecx, DWORD PTR __Id$[ebp]
  0005f	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  00062	73 11		 jae	 SHORT $LN8@Getfacet
  00064	8b 55 f0	 mov	 edx, DWORD PTR __Ptr$1[ebp]
  00067	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR __Id$[ebp]
  0006d	8b 14 88	 mov	 edx, DWORD PTR [eax+ecx*4]
  00070	89 55 ec	 mov	 DWORD PTR tv83[ebp], edx
  00073	eb 07		 jmp	 SHORT $LN9@Getfacet
$LN8@Getfacet:
  00075	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN9@Getfacet:
  0007c	8b 45 ec	 mov	 eax, DWORD PTR tv83[ebp]
$LN4@Getfacet:

; 460  : 			}
; 461  : 		}

  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ENDP		; std::locale::_Getfacet
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xlocale
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
tv84 = -16						; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 421  : 		{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 422  : 		if (_Ptr != 0)

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000f	74 3a		 je	 SHORT $LN2@locale

; 423  : 			_DELETE_CRT(_Ptr->_Decref());

  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 12		 mov	 edx, DWORD PTR [edx]
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00020	ff d0		 call	 eax
  00022	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  00025	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  00028	89 4d f8	 mov	 DWORD PTR $T2[ebp], ecx
  0002b	83 7d f8 00	 cmp	 DWORD PTR $T2[ebp], 0
  0002f	74 13		 je	 SHORT $LN4@locale
  00031	6a 01		 push	 1
  00033	8b 55 f8	 mov	 edx, DWORD PTR $T2[ebp]
  00036	8b 02		 mov	 eax, DWORD PTR [edx]
  00038	8b 4d f8	 mov	 ecx, DWORD PTR $T2[ebp]
  0003b	8b 10		 mov	 edx, DWORD PTR [eax]
  0003d	ff d2		 call	 edx
  0003f	89 45 f0	 mov	 DWORD PTR tv84[ebp], eax
  00042	eb 07		 jmp	 SHORT $LN2@locale
$LN4@locale:
  00044	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv84[ebp], 0
$LN2@locale:

; 424  : 		}

  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin, COMDAT
; _this$ = ecx

; 1574 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00013	50		 push	 eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00017	e8 00 00 00 00	 call	 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
  0001c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1576 : 		}

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx

; 51   : 	_String_const_iterator(pointer _Parg, const _Container_base *_Pstring)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 52   : 		{	// construct with pointer _Parg
; 53   : 		this->_Adopt(_Pstring);

  00007	8b 45 0c	 mov	 eax, DWORD PTR __Pstring$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ; std::_Iterator_base0::_Adopt

; 54   : 		this->_Ptr = _Parg;

  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	8b 55 08	 mov	 edx, DWORD PTR __Parg$[ebp]
  00019	89 11		 mov	 DWORD PTR [ecx], edx

; 55   : 		}

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx

; 317  : 		{	// construct with pointer _Parg

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR __Pstring$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >

; 318  : 		}

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 749  : 		{	// construct empty string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8d 4d ff	 lea	 ecx, DWORD PTR $T1[ebp]
  0000c	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>
  00011	50		 push	 eax
  00012	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >

; 750  : 		_Tidy();

  0001a	6a 00		 push	 0
  0001c	6a 00		 push	 0
  0001e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 751  : 		}

  00026	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
tv65 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 593  : 		{	// test for metacharacter equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 594  : 		return (_Left == _Right);

  00004	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0000a	8b 10		 mov	 edx, DWORD PTR [eax]
  0000c	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0000e	75 09		 jne	 SHORT $LN3@eq_int_typ
  00010	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
  00017	eb 07		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  00019	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv65[ebp], 0
$LN4@eq_int_typ:
  00020	8a 45 fc	 mov	 al, BYTE PTR tv65[ebp]

; 595  : 		}

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?to_int_type@?$char_traits@D@std@@SAHABD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
?to_int_type@?$char_traits@D@std@@SAHABD@Z PROC		; std::char_traits<char>::to_int_type, COMDAT

; 587  : 		{	// convert character to metacharacter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 588  : 		return ((unsigned char)_Ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ch$[ebp]
  00006	0f b6 00	 movzx	 eax, BYTE PTR [eax]

; 589  : 		}

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?to_int_type@?$char_traits@D@std@@SAHABD@Z ENDP		; std::char_traits<char>::to_int_type
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 604  : 		{	// return end-of-file metacharacter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 605  : 		return (EOF);

  00003	83 c8 ff	 or	 eax, -1

; 606  : 		}

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv93 = -16						; size = 4
tv87 = -12						; size = 4
tv73 = -8						; size = 4
_this$ = -4						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 103  : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0000f	89 08		 mov	 DWORD PTR [eax], ecx

; 104  : 			if (_Myostr.rdbuf() != 0)

  00011	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00014	8b 02		 mov	 eax, DWORD PTR [edx]
  00016	89 45 f8	 mov	 DWORD PTR tv73[ebp], eax
  00019	8b 4d f8	 mov	 ecx, DWORD PTR tv73[ebp]
  0001c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001e	8b 4d f8	 mov	 ecx, DWORD PTR tv73[ebp]
  00021	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0002a	85 c0		 test	 eax, eax
  0002c	74 29		 je	 SHORT $LN2@Sentry_bas

; 105  : 				_Myostr.rdbuf()->_Lock();

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 08		 mov	 ecx, DWORD PTR [eax]
  00033	89 4d f4	 mov	 DWORD PTR tv87[ebp], ecx
  00036	8b 55 f4	 mov	 edx, DWORD PTR tv87[ebp]
  00039	8b 02		 mov	 eax, DWORD PTR [edx]
  0003b	8b 4d f4	 mov	 ecx, DWORD PTR tv87[ebp]
  0003e	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00047	89 45 f0	 mov	 DWORD PTR tv93[ebp], eax
  0004a	8b 4d f0	 mov	 ecx, DWORD PTR tv93[ebp]
  0004d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004f	8b 4d f0	 mov	 ecx, DWORD PTR tv93[ebp]
  00052	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00055	ff d0		 call	 eax
$LN2@Sentry_bas:

; 106  : 			}

  00057	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 126  : 			{	// construct locking and testing stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00029	50		 push	 eax
  0002a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 127  : 			if (_Ostr.good() && _Ostr.tie() != 0)

  00039	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0003c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003e	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00041	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	85 c0		 test	 eax, eax
  0004f	74 30		 je	 SHORT $LN1@sentry
  00051	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00054	8b 11		 mov	 edx, DWORD PTR [ecx]
  00056	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00059	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  00062	85 c0		 test	 eax, eax
  00064	74 1b		 je	 SHORT $LN1@sentry

; 128  : 				_Ostr.tie()->flush();

  00066	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00069	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006b	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0006e	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00071	8b ca		 mov	 ecx, edx
  00073	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  00079	8b c8		 mov	 ecx, eax
  0007b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
$LN1@sentry:

; 129  : 			_Ok = _Ostr.good();	// store test only after flushing tie

  00081	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00084	8b 08		 mov	 ecx, DWORD PTR [eax]
  00086	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00089	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0008c	8b ca		 mov	 ecx, edx
  0008e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  00094	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00097	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 130  : 			}

  0009a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a1	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ae	59		 pop	 ecx
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv92 = -16						; size = 4
tv86 = -12						; size = 4
_this$ = -8						; size = 4
tv72 = -4						; size = 4
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 109  : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 110  : 			if (_Myostr.rdbuf() != 0)

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	89 4d fc	 mov	 DWORD PTR tv72[ebp], ecx
  00011	8b 55 fc	 mov	 edx, DWORD PTR tv72[ebp]
  00014	8b 02		 mov	 eax, DWORD PTR [edx]
  00016	8b 4d fc	 mov	 ecx, DWORD PTR tv72[ebp]
  00019	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00022	85 c0		 test	 eax, eax
  00024	74 2b		 je	 SHORT $LN2@Sentry_bas

; 111  : 				_Myostr.rdbuf()->_Unlock();

  00026	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002b	89 55 f4	 mov	 DWORD PTR tv86[ebp], edx
  0002e	8b 45 f4	 mov	 eax, DWORD PTR tv86[ebp]
  00031	8b 08		 mov	 ecx, DWORD PTR [eax]
  00033	8b 55 f4	 mov	 edx, DWORD PTR tv86[ebp]
  00036	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00039	8b ca		 mov	 ecx, edx
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00041	89 45 f0	 mov	 DWORD PTR tv92[ebp], eax
  00044	8b 45 f0	 mov	 eax, DWORD PTR tv92[ebp]
  00047	8b 10		 mov	 edx, DWORD PTR [eax]
  00049	8b 4d f0	 mov	 ecx, DWORD PTR tv92[ebp]
  0004c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0004f	ff d0		 call	 eax
$LN2@Sentry_bas:

; 112  : 			}

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 133  : 			{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 134  :  #if _HAS_EXCEPTIONS
; 135  : 			if (!_XSTD uncaught_exception())

  00007	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?uncaught_exception@std@@YA_NXZ
  0000d	0f b6 c0	 movzx	 eax, al
  00010	85 c0		 test	 eax, eax
  00012	75 0b		 jne	 SHORT $LN2@sentry

; 136  : 				this->_Myostr._Osfx();

  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
$LN2@sentry:

; 137  : 
; 138  :  #else /* _HAS_EXCEPTIONS */
; 139  : 			this->_Myostr._Osfx();
; 140  :  #endif /* _HAS_EXCEPTIONS */
; 141  : 			}

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ?$_Bool_struct@V?$basic_ostream@DU?$char_traits@D@std@@@std@@@2@HXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ?$_Bool_struct@V?$basic_ostream@DU?$char_traits@D@std@@@std@@@2@HXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct<std::basic_ostream<char,std::char_traits<char> > >::*, COMDAT
; _this$ = ecx

; 146  : 			{	// test if stream state okay

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 147  : 			return (_Ok ? _CONVERTIBLE_TO_TRUE : 0);

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00010	85 c9		 test	 ecx, ecx
  00012	74 09		 je	 SHORT $LN3@
  00014	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
  0001b	eb 07		 jmp	 SHORT $LN4@
$LN3@:
  0001d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR tv67[ebp], -1
$LN4@:
  00024	8b 45 fc	 mov	 eax, DWORD PTR tv67[ebp]

; 148  : 			}

  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ?$_Bool_struct@V?$basic_ostream@DU?$char_traits@D@std@@@std@@@2@HXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct<std::basic_ostream<char,std::char_traits<char> > >::*
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\afxwin2.inl
;	COMDAT ?OnTimer@CWnd@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?OnTimer@CWnd@@IAEXI@Z PROC				; CWnd::OnTimer, COMDAT
; _this$ = ecx

; 552  : 	{ Default(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Default@CWnd@@IAEJXZ
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?OnTimer@CWnd@@IAEXI@Z ENDP				; CWnd::OnTimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\afxwin2.inl
;	COMDAT ?KillTimer@CWnd@@QAEHI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIDEvent$ = 8						; size = 4
?KillTimer@CWnd@@QAEHI@Z PROC				; CWnd::KillTimer, COMDAT
; _this$ = ecx

; 196  : 	{ ASSERT(::IsWindow(m_hWnd)); return ::KillTimer(m_hWnd, nIDEvent); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _nIDEvent$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KillTimer@8
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?KillTimer@CWnd@@QAEHI@Z ENDP				; CWnd::KillTimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\atltime.inl
;	COMDAT ?GetYear@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
_this$ = -52						; size = 4
_ptm$ = -48						; size = 4
tv70 = -44						; size = 4
_ttm$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
?GetYear@CTime@ATL@@QBEHXZ PROC				; ATL::CTime::GetYear, COMDAT
; _this$ = ecx

; 419  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d cc	 mov	 DWORD PTR _this$[ebp], ecx

; 420  : 	struct tm ttm;
; 421  : 	struct tm * ptm;
; 422  : 
; 423  : 	ptm = GetLocalTm(&ttm);

  00013	8d 45 d8	 lea	 eax, DWORD PTR _ttm$[ebp]
  00016	50		 push	 eax
  00017	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm
  0001f	89 45 d0	 mov	 DWORD PTR _ptm$[ebp], eax

; 424  : 	return ptm ? (ptm->tm_year) + 1900 : 0 ;

  00022	83 7d d0 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00026	74 11		 je	 SHORT $LN3@GetYear
  00028	8b 4d d0	 mov	 ecx, DWORD PTR _ptm$[ebp]
  0002b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0002e	81 c2 6c 07 00
	00		 add	 edx, 1900		; 0000076cH
  00034	89 55 d4	 mov	 DWORD PTR tv70[ebp], edx
  00037	eb 07		 jmp	 SHORT $LN4@GetYear
$LN3@GetYear:
  00039	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN4@GetYear:
  00040	8b 45 d4	 mov	 eax, DWORD PTR tv70[ebp]

; 425  : }

  00043	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00046	33 cd		 xor	 ecx, ebp
  00048	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?GetYear@CTime@ATL@@QBEHXZ ENDP				; ATL::CTime::GetYear
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\atltime.inl
;	COMDAT ?GetMonth@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
_this$ = -52						; size = 4
_ptm$ = -48						; size = 4
tv70 = -44						; size = 4
_ttm$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
?GetMonth@CTime@ATL@@QBEHXZ PROC			; ATL::CTime::GetMonth, COMDAT
; _this$ = ecx

; 428  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d cc	 mov	 DWORD PTR _this$[ebp], ecx

; 429  : 	struct tm ttm;
; 430  : 	struct tm * ptm;
; 431  : 
; 432  : 	ptm = GetLocalTm(&ttm);

  00013	8d 45 d8	 lea	 eax, DWORD PTR _ttm$[ebp]
  00016	50		 push	 eax
  00017	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm
  0001f	89 45 d0	 mov	 DWORD PTR _ptm$[ebp], eax

; 433  : 	return ptm ? ptm->tm_mon + 1 : 0;

  00022	83 7d d0 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00026	74 0e		 je	 SHORT $LN3@GetMonth
  00028	8b 4d d0	 mov	 ecx, DWORD PTR _ptm$[ebp]
  0002b	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0002e	83 c2 01	 add	 edx, 1
  00031	89 55 d4	 mov	 DWORD PTR tv70[ebp], edx
  00034	eb 07		 jmp	 SHORT $LN4@GetMonth
$LN3@GetMonth:
  00036	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN4@GetMonth:
  0003d	8b 45 d4	 mov	 eax, DWORD PTR tv70[ebp]

; 434  : }

  00040	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00043	33 cd		 xor	 ecx, ebp
  00045	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
?GetMonth@CTime@ATL@@QBEHXZ ENDP			; ATL::CTime::GetMonth
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\atltime.inl
;	COMDAT ?GetDay@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
_this$ = -52						; size = 4
_ptm$ = -48						; size = 4
tv69 = -44						; size = 4
_ttm$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
?GetDay@CTime@ATL@@QBEHXZ PROC				; ATL::CTime::GetDay, COMDAT
; _this$ = ecx

; 437  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d cc	 mov	 DWORD PTR _this$[ebp], ecx

; 438  : 	struct tm ttm;
; 439  : 	struct tm * ptm;
; 440  : 
; 441  : 	ptm = GetLocalTm(&ttm);

  00013	8d 45 d8	 lea	 eax, DWORD PTR _ttm$[ebp]
  00016	50		 push	 eax
  00017	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm
  0001f	89 45 d0	 mov	 DWORD PTR _ptm$[ebp], eax

; 442  : 	return ptm ? ptm->tm_mday : 0 ;

  00022	83 7d d0 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00026	74 0b		 je	 SHORT $LN3@GetDay
  00028	8b 4d d0	 mov	 ecx, DWORD PTR _ptm$[ebp]
  0002b	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0002e	89 55 d4	 mov	 DWORD PTR tv69[ebp], edx
  00031	eb 07		 jmp	 SHORT $LN4@GetDay
$LN3@GetDay:
  00033	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@GetDay:
  0003a	8b 45 d4	 mov	 eax, DWORD PTR tv69[ebp]

; 443  : }

  0003d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00040	33 cd		 xor	 ecx, ebp
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
?GetDay@CTime@ATL@@QBEHXZ ENDP				; ATL::CTime::GetDay
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\atltime.inl
;	COMDAT ?GetHour@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
_this$ = -52						; size = 4
_ptm$ = -48						; size = 4
tv69 = -44						; size = 4
_ttm$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
?GetHour@CTime@ATL@@QBEHXZ PROC				; ATL::CTime::GetHour, COMDAT
; _this$ = ecx

; 446  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d cc	 mov	 DWORD PTR _this$[ebp], ecx

; 447  : 	struct tm ttm;
; 448  : 	struct tm * ptm;
; 449  : 
; 450  : 	ptm = GetLocalTm(&ttm);

  00013	8d 45 d8	 lea	 eax, DWORD PTR _ttm$[ebp]
  00016	50		 push	 eax
  00017	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm
  0001f	89 45 d0	 mov	 DWORD PTR _ptm$[ebp], eax

; 451  : 	return ptm ? ptm->tm_hour : -1 ;

  00022	83 7d d0 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00026	74 0b		 je	 SHORT $LN3@GetHour
  00028	8b 4d d0	 mov	 ecx, DWORD PTR _ptm$[ebp]
  0002b	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002e	89 55 d4	 mov	 DWORD PTR tv69[ebp], edx
  00031	eb 07		 jmp	 SHORT $LN4@GetHour
$LN3@GetHour:
  00033	c7 45 d4 ff ff
	ff ff		 mov	 DWORD PTR tv69[ebp], -1
$LN4@GetHour:
  0003a	8b 45 d4	 mov	 eax, DWORD PTR tv69[ebp]

; 452  : }

  0003d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00040	33 cd		 xor	 ecx, ebp
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
?GetHour@CTime@ATL@@QBEHXZ ENDP				; ATL::CTime::GetHour
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\atltime.inl
;	COMDAT ?GetMinute@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
_this$ = -52						; size = 4
_ptm$ = -48						; size = 4
tv69 = -44						; size = 4
_ttm$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
?GetMinute@CTime@ATL@@QBEHXZ PROC			; ATL::CTime::GetMinute, COMDAT
; _this$ = ecx

; 455  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d cc	 mov	 DWORD PTR _this$[ebp], ecx

; 456  : 	struct tm ttm;
; 457  : 	struct tm * ptm;
; 458  : 
; 459  : 	ptm = GetLocalTm(&ttm);

  00013	8d 45 d8	 lea	 eax, DWORD PTR _ttm$[ebp]
  00016	50		 push	 eax
  00017	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm
  0001f	89 45 d0	 mov	 DWORD PTR _ptm$[ebp], eax

; 460  : 	return ptm ? ptm->tm_min : -1 ;

  00022	83 7d d0 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00026	74 0b		 je	 SHORT $LN3@GetMinute
  00028	8b 4d d0	 mov	 ecx, DWORD PTR _ptm$[ebp]
  0002b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002e	89 55 d4	 mov	 DWORD PTR tv69[ebp], edx
  00031	eb 07		 jmp	 SHORT $LN4@GetMinute
$LN3@GetMinute:
  00033	c7 45 d4 ff ff
	ff ff		 mov	 DWORD PTR tv69[ebp], -1
$LN4@GetMinute:
  0003a	8b 45 d4	 mov	 eax, DWORD PTR tv69[ebp]

; 461  : }

  0003d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00040	33 cd		 xor	 ecx, ebp
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
?GetMinute@CTime@ATL@@QBEHXZ ENDP			; ATL::CTime::GetMinute
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\atltime.inl
;	COMDAT ?GetTickCount@CTime@ATL@@SG?AV12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetTickCount@CTime@ATL@@SG?AV12@XZ PROC		; ATL::CTime::GetTickCount, COMDAT

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 143  : 	return( CTime( ::_time64( NULL ) ) );

  00003	6a 00		 push	 0
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___time64
  0000b	83 c4 04	 add	 esp, 4
  0000e	52		 push	 edx
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@_J@Z	; ATL::CTime::CTime
  00018	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 144  : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?GetTickCount@CTime@ATL@@SG?AV12@XZ ENDP		; ATL::CTime::GetTickCount
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\atltime.inl
;	COMDAT ??0CTime@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CTime@ATL@@QAE@XZ PROC				; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 166  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 167  : }

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??0CTime@ATL@@QAE@XZ ENDP				; ATL::CTime::CTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\afxwin1.inl
;	COMDAT ?CreatePolygonRgn@CRgn@@QAEHPAUtagPOINT@@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpPoints$ = 8						; size = 4
_nCount$ = 12						; size = 4
_nMode$ = 16						; size = 4
?CreatePolygonRgn@CRgn@@QAEHPAUtagPOINT@@HH@Z PROC	; CRgn::CreatePolygonRgn, COMDAT
; _this$ = ecx

; 278  : 	{ return Attach(::CreatePolygonRgn(lpPoints, nCount, nMode)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 10	 mov	 eax, DWORD PTR _nMode$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _nCount$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _lpPoints$[ebp]
  00012	52		 push	 edx
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreatePolygonRgn@12
  00019	50		 push	 eax
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Attach@CGdiObject@@QAEHPAX@Z
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 0c 00	 ret	 12			; 0000000cH
?CreatePolygonRgn@CRgn@@QAEHPAUtagPOINT@@HH@Z ENDP	; CRgn::CreatePolygonRgn
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\atltypes.inl
;	COMDAT ??0CPoint@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPoint@@QAE@XZ PROC					; CPoint::CPoint, COMDAT
; _this$ = ecx

; 125  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 126  : 	x = 0;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 127  : 	y = 0;

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 128  : }

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0CPoint@@QAE@XZ ENDP					; CPoint::CPoint
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
$LN2@vector:
  00003	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  00006	83 e8 01	 sub	 eax, 1
  00009	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  0000c	78 11		 js	 SHORT $LN3@vector
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00011	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00017	03 4d 0c	 add	 ecx, DWORD PTR ___s$[ebp]
  0001a	89 4d 08	 mov	 DWORD PTR ___t$[ebp], ecx
  0001d	eb e4		 jmp	 SHORT $LN2@vector
$LN3@vector:
  0001f	5d		 pop	 ebp
  00020	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\afxwin1.inl
;	COMDAT ??BCRgn@@QBEPAUHRGN__@@XZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
??BCRgn@@QBEPAUHRGN__@@XZ PROC				; CRgn::operator HRGN__ *, COMDAT
; _this$ = ecx

; 262  : 	{ return (HRGN)(this == NULL ? NULL : m_hObject); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0000d	75 09		 jne	 SHORT $LN3@operator
  0000f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
  00016	eb 09		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001e	89 4d f8	 mov	 DWORD PTR tv70[ebp], ecx
$LN4@operator:
  00021	8b 45 f8	 mov	 eax, DWORD PTR tv70[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??BCRgn@@QBEPAUHRGN__@@XZ ENDP				; CRgn::operator HRGN__ *
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\afxwin1.inl
;	COMDAT ?CreateRoundRectRgn@CRgn@@QAEHHHHHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
_x3$ = 24						; size = 4
_y3$ = 28						; size = 4
?CreateRoundRectRgn@CRgn@@QAEHHHHHHH@Z PROC		; CRgn::CreateRoundRectRgn, COMDAT
; _this$ = ecx

; 282  : 	{ return Attach(::CreateRoundRectRgn(x1, y1, x2, y2, x3, y3)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 1c	 mov	 eax, DWORD PTR _y3$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 18	 mov	 ecx, DWORD PTR _x3$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 14	 mov	 edx, DWORD PTR _y2$[ebp]
  00012	52		 push	 edx
  00013	8b 45 10	 mov	 eax, DWORD PTR _x2$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _y1$[ebp]
  0001a	51		 push	 ecx
  0001b	8b 55 08	 mov	 edx, DWORD PTR _x1$[ebp]
  0001e	52		 push	 edx
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateRoundRectRgn@24
  00025	50		 push	 eax
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Attach@CGdiObject@@QAEHPAX@Z
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 18 00	 ret	 24			; 00000018H
?CreateRoundRectRgn@CRgn@@QAEHHHHHHH@Z ENDP		; CRgn::CreateRoundRectRgn
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\afxwin1.inl
;	COMDAT ??1CRgn@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CRgn@@UAE@XZ PROC					; CRgn::~CRgn, COMDAT
; _this$ = ecx

; 268  : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CRgn@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CRgn@@UAE@XZ ENDP					; CRgn::~CRgn
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GCRgn@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCRgn@@UAEPAXI@Z PROC				; CRgn::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CRgn@@UAE@XZ		; CRgn::~CRgn
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $LN1@scalar
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$LN1@scalar:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_GCRgn@@UAEPAXI@Z ENDP				; CRgn::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\afxwin1.inl
;	COMDAT ??0CRgn@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CRgn@@QAE@XZ PROC					; CRgn::CRgn, COMDAT
; _this$ = ecx

; 266  : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CGdiObject@@QAE@XZ	; CGdiObject::CGdiObject
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CRgn@@6B@
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CRgn@@QAE@XZ ENDP					; CRgn::CRgn
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\afxwin1.inl
;	COMDAT ?GetSafeHandle@CGdiObject@@QBEPAXXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?GetSafeHandle@CGdiObject@@QBEPAXXZ PROC		; CGdiObject::GetSafeHandle, COMDAT
; _this$ = ecx

; 68   : 	{ return this == NULL ? NULL : m_hObject; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0000d	75 09		 jne	 SHORT $LN3@GetSafeHan
  0000f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  00016	eb 09		 jmp	 SHORT $LN4@GetSafeHan
$LN3@GetSafeHan:
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001e	89 4d f8	 mov	 DWORD PTR tv66[ebp], ecx
$LN4@GetSafeHan:
  00021	8b 45 f8	 mov	 eax, DWORD PTR tv66[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?GetSafeHandle@CGdiObject@@QBEPAXXZ ENDP		; CGdiObject::GetSafeHandle
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\afxwin2.inl
;	COMDAT ?SetFont@CWnd@@QAEXPAVCFont@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pFont$ = 8						; size = 4
_bRedraw$ = 12						; size = 4
?SetFont@CWnd@@QAEXPAVCFont@@H@Z PROC			; CWnd::SetFont, COMDAT
; _this$ = ecx

; 61   : 	{ ASSERT(::IsWindow(m_hWnd)); ::SendMessage(m_hWnd, WM_SETFONT, (WPARAM)pFont->GetSafeHandle(), bRedraw); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR _bRedraw$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _pFont$[ebp]
  0000e	e8 00 00 00 00	 call	 ?GetSafeHandle@CGdiObject@@QBEPAXXZ ; CGdiObject::GetSafeHandle
  00013	50		 push	 eax
  00014	6a 30		 push	 48			; 00000030H
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  0001c	52		 push	 edx
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
?SetFont@CWnd@@QAEXPAVCFont@@H@Z ENDP			; CWnd::SetFont
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\afxwin1.inl
;	COMDAT ?CreateFontA@CFont@@QAEHHHHHHEEEEEEEEPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nHeight$ = 8						; size = 4
_nWidth$ = 12						; size = 4
_nEscapement$ = 16					; size = 4
_nOrientation$ = 20					; size = 4
_nWeight$ = 24						; size = 4
_bItalic$ = 28						; size = 1
_bUnderline$ = 32					; size = 1
_cStrikeOut$ = 36					; size = 1
_nCharSet$ = 40						; size = 1
_nOutPrecision$ = 44					; size = 1
_nClipPrecision$ = 48					; size = 1
_nQuality$ = 52						; size = 1
_nPitchAndFamily$ = 56					; size = 1
_lpszFacename$ = 60					; size = 4
?CreateFontA@CFont@@QAEHHHHHHEEEEEEEEPBD@Z PROC		; CFont::CreateFontA, COMDAT
; _this$ = ecx

; 163  : 	{ return Attach(::CreateFont(nHeight, nWidth, nEscapement,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 164  : 		nOrientation, nWeight, bItalic, bUnderline, cStrikeOut,
; 165  : 		nCharSet, nOutPrecision, nClipPrecision, nQuality,
; 166  : 		nPitchAndFamily, lpszFacename)); }

  00007	8b 45 3c	 mov	 eax, DWORD PTR _lpszFacename$[ebp]
  0000a	50		 push	 eax
  0000b	0f b6 4d 38	 movzx	 ecx, BYTE PTR _nPitchAndFamily$[ebp]
  0000f	51		 push	 ecx
  00010	0f b6 55 34	 movzx	 edx, BYTE PTR _nQuality$[ebp]
  00014	52		 push	 edx
  00015	0f b6 45 30	 movzx	 eax, BYTE PTR _nClipPrecision$[ebp]
  00019	50		 push	 eax
  0001a	0f b6 4d 2c	 movzx	 ecx, BYTE PTR _nOutPrecision$[ebp]
  0001e	51		 push	 ecx
  0001f	0f b6 55 28	 movzx	 edx, BYTE PTR _nCharSet$[ebp]
  00023	52		 push	 edx
  00024	0f b6 45 24	 movzx	 eax, BYTE PTR _cStrikeOut$[ebp]
  00028	50		 push	 eax
  00029	0f b6 4d 20	 movzx	 ecx, BYTE PTR _bUnderline$[ebp]
  0002d	51		 push	 ecx
  0002e	0f b6 55 1c	 movzx	 edx, BYTE PTR _bItalic$[ebp]
  00032	52		 push	 edx
  00033	8b 45 18	 mov	 eax, DWORD PTR _nWeight$[ebp]
  00036	50		 push	 eax
  00037	8b 4d 14	 mov	 ecx, DWORD PTR _nOrientation$[ebp]
  0003a	51		 push	 ecx
  0003b	8b 55 10	 mov	 edx, DWORD PTR _nEscapement$[ebp]
  0003e	52		 push	 edx
  0003f	8b 45 0c	 mov	 eax, DWORD PTR _nWidth$[ebp]
  00042	50		 push	 eax
  00043	8b 4d 08	 mov	 ecx, DWORD PTR _nHeight$[ebp]
  00046	51		 push	 ecx
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFontA@56
  0004d	50		 push	 eax
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Attach@CGdiObject@@QAEHPAX@Z
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 38 00	 ret	 56			; 00000038H
?CreateFontA@CFont@@QAEHHHHHHEEEEEEEEPBD@Z ENDP		; CFont::CreateFontA
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\atltypes.inl
;	COMDAT ??BCRect@@QAEPAUtagRECT@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BCRect@@QAEPAUtagRECT@@XZ PROC			; CRect::operator tagRECT *, COMDAT
; _this$ = ecx

; 353  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 354  : 	return this;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 355  : }

  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??BCRect@@QAEPAUtagRECT@@XZ ENDP			; CRect::operator tagRECT *
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\afxwin1.inl
;	COMDAT ??1CFont@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CFont@@UAE@XZ PROC					; CFont::~CFont, COMDAT
; _this$ = ecx

; 155  : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CFont@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??1CGdiObject@@UAE@XZ	; CGdiObject::~CGdiObject
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??1CFont@@UAE@XZ ENDP					; CFont::~CFont
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\afx.inl
;	COMDAT ??0CObject@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CObject@@IAE@XZ PROC					; CObject::CObject, COMDAT
; _this$ = ecx

; 92   : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0CObject@@IAE@XZ ENDP					; CObject::CObject
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\afxwin1.inl
;	COMDAT ??0CGdiObject@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CGdiObject@@QAE@XZ PROC				; CGdiObject::CGdiObject, COMDAT
; _this$ = ecx

; 70   : 	{ m_hObject = NULL; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CObject@@IAE@XZ	; CObject::CObject
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CGdiObject@@6B@
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
??0CGdiObject@@QAE@XZ ENDP				; CGdiObject::CGdiObject
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GCFont@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCFont@@UAEPAXI@Z PROC				; CFont::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CFont@@UAE@XZ	; CFont::~CFont
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 09		 je	 SHORT $LN1@scalar
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$LN1@scalar:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
??_GCFont@@UAEPAXI@Z ENDP				; CFont::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\afxwin1.inl
;	COMDAT ??0CFont@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFont@@QAE@XZ PROC					; CFont::CFont, COMDAT
; _this$ = ecx

; 153  : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0CGdiObject@@QAE@XZ	; CGdiObject::CGdiObject
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CFont@@6B@
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
??0CFont@@QAE@XZ ENDP					; CFont::CFont
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\atlcomtime.inl
;	COMDAT ?GetStatus@COleDateTime@ATL@@QBE?AW4DateTimeStatus@12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetStatus@COleDateTime@ATL@@QBE?AW4DateTimeStatus@12@XZ PROC ; ATL::COleDateTime::GetStatus, COMDAT
; _this$ = ecx

; 367  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 368  : 	return m_status;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 369  : }

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetStatus@COleDateTime@ATL@@QBE?AW4DateTimeStatus@12@XZ ENDP ; ATL::COleDateTime::GetStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\atlcomtime.h
;	COMDAT ?Format@COleDateTime@ATL@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@2@PBD@Z
_TEXT	SEGMENT
___atl_condVal$2 = -104					; size = 4
_lpszTemp$ = -100					; size = 4
tv65 = -96						; size = 4
_this$ = -92						; size = 4
$T3 = -88						; size = 4
_tmTemp$ = -84						; size = 36
_ud$ = -48						; size = 18
_str$4 = -28						; size = 4
_str$5 = -24						; size = 4
_strDate$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_pFormat$ = 12						; size = 4
?Format@COleDateTime@ATL@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@2@PBD@Z PROC ; ATL::COleDateTime::Format, COMDAT
; _this$ = ecx

; 349  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Format@COleDateTime@ATL@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@2@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d a4	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0
$LN12@Format:

; 350  : 	ATLENSURE_THROW(pFormat != NULL, E_INVALIDARG);

  00032	83 7d 0c 00	 cmp	 DWORD PTR _pFormat$[ebp], 0
  00036	74 09		 je	 SHORT $LN15@Format
  00038	c7 45 a0 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
  0003f	eb 07		 jmp	 SHORT $LN16@Format
$LN15@Format:
  00041	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR tv65[ebp], 0
$LN16@Format:
  00048	8b 45 a0	 mov	 eax, DWORD PTR tv65[ebp]
  0004b	89 45 98	 mov	 DWORD PTR ___atl_condVal$2[ebp], eax
$LN9@Format:
  0004e	33 c9		 xor	 ecx, ecx
  00050	75 fc		 jne	 SHORT $LN9@Format
  00052	83 7d 98 00	 cmp	 DWORD PTR ___atl_condVal$2[ebp], 0
  00056	75 0a		 jne	 SHORT $LN6@Format
  00058	68 57 00 07 80	 push	 -2147024809		; 80070057H
  0005d	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN6@Format:
  00062	33 d2		 xor	 edx, edx
  00064	75 cc		 jne	 SHORT $LN12@Format

; 351  : 	
; 352  : 	// If null, return empty string
; 353  : 	if(GetStatus() == null)

  00066	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?GetStatus@COleDateTime@ATL@@QBE?AW4DateTimeStatus@12@XZ ; ATL::COleDateTime::GetStatus
  0006e	83 f8 02	 cmp	 eax, 2
  00071	75 1f		 jne	 SHORT $LN5@Format

; 354  : 		return _T("");

  00073	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00078	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0007b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  00081	8b 45 a8	 mov	 eax, DWORD PTR $T3[ebp]
  00084	83 c8 01	 or	 eax, 1
  00087	89 45 a8	 mov	 DWORD PTR $T3[ebp], eax
  0008a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0008d	e9 f3 01 00 00	 jmp	 $LN13@Format
$LN5@Format:

; 355  : 
; 356  : 	// If invalid, return DateTime global string
; 357  : 	if(GetStatus() == invalid)

  00092	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  00095	e8 00 00 00 00	 call	 ?GetStatus@COleDateTime@ATL@@QBE?AW4DateTimeStatus@12@XZ ; ATL::COleDateTime::GetStatus
  0009a	83 f8 01	 cmp	 eax, 1
  0009d	0f 85 80 00 00
	00		 jne	 $LN4@Format

; 358  : 	{
; 359  : 		CString str;

  000a3	8d 4d e8	 lea	 ecx, DWORD PTR _str$5[ebp]
  000a6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000ac	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 360  : 		if(str.LoadString(ATL_IDS_DATETIME_INVALID))

  000b3	68 00 d8 00 00	 push	 55296			; 0000d800H
  000b8	8d 4d e8	 lea	 ecx, DWORD PTR _str$5[ebp]
  000bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEHI@Z
  000c1	85 c0		 test	 eax, eax
  000c3	74 2e		 je	 SHORT $LN3@Format

; 361  : 			return str;

  000c5	8d 4d e8	 lea	 ecx, DWORD PTR _str$5[ebp]
  000c8	51		 push	 ecx
  000c9	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  000d2	8b 55 a8	 mov	 edx, DWORD PTR $T3[ebp]
  000d5	83 ca 01	 or	 edx, 1
  000d8	89 55 a8	 mov	 DWORD PTR $T3[ebp], edx
  000db	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000e2	8d 4d e8	 lea	 ecx, DWORD PTR _str$5[ebp]
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000eb	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000ee	e9 92 01 00 00	 jmp	 $LN13@Format
$LN3@Format:

; 362  : 		return szInvalidDateTime;

  000f3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?szInvalidDateTime@ATL@@3QBDB ; ATL::szInvalidDateTime
  000f8	50		 push	 eax
  000f9	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  00102	8b 4d a8	 mov	 ecx, DWORD PTR $T3[ebp]
  00105	83 c9 01	 or	 ecx, 1
  00108	89 4d a8	 mov	 DWORD PTR $T3[ebp], ecx
  0010b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00112	8d 4d e8	 lea	 ecx, DWORD PTR _str$5[ebp]
  00115	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0011b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0011e	e9 62 01 00 00	 jmp	 $LN13@Format
$LN4@Format:

; 363  : 	}
; 364  : 
; 365  : 	UDATE ud;
; 366  : 	if (S_OK != VarUdateFromDate(m_dt, 0, &ud))

  00123	8d 55 d0	 lea	 edx, DWORD PTR _ud$[ebp]
  00126	52		 push	 edx
  00127	6a 00		 push	 0
  00129	8b 45 a4	 mov	 eax, DWORD PTR _this$[ebp]
  0012c	83 ec 08	 sub	 esp, 8
  0012f	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [eax]
  00133	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00138	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VarUdateFromDate@16
  0013e	85 c0		 test	 eax, eax
  00140	0f 84 80 00 00
	00		 je	 $LN2@Format

; 367  : 	{
; 368  : 		CString str;

  00146	8d 4d e4	 lea	 ecx, DWORD PTR _str$4[ebp]
  00149	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0014f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 369  : 		if(str.LoadString(ATL_IDS_DATETIME_INVALID))

  00156	68 00 d8 00 00	 push	 55296			; 0000d800H
  0015b	8d 4d e4	 lea	 ecx, DWORD PTR _str$4[ebp]
  0015e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?LoadStringA@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEHI@Z
  00164	85 c0		 test	 eax, eax
  00166	74 2e		 je	 SHORT $LN1@Format

; 370  : 			return str;

  00168	8d 4d e4	 lea	 ecx, DWORD PTR _str$4[ebp]
  0016b	51		 push	 ecx
  0016c	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0016f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00175	8b 55 a8	 mov	 edx, DWORD PTR $T3[ebp]
  00178	83 ca 01	 or	 edx, 1
  0017b	89 55 a8	 mov	 DWORD PTR $T3[ebp], edx
  0017e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00185	8d 4d e4	 lea	 ecx, DWORD PTR _str$4[ebp]
  00188	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0018e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00191	e9 ef 00 00 00	 jmp	 $LN13@Format
$LN1@Format:

; 371  : 		return szInvalidDateTime;

  00196	a1 00 00 00 00	 mov	 eax, DWORD PTR ?szInvalidDateTime@ATL@@3QBDB ; ATL::szInvalidDateTime
  0019b	50		 push	 eax
  0019c	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0019f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  001a5	8b 4d a8	 mov	 ecx, DWORD PTR $T3[ebp]
  001a8	83 c9 01	 or	 ecx, 1
  001ab	89 4d a8	 mov	 DWORD PTR $T3[ebp], ecx
  001ae	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001b5	8d 4d e4	 lea	 ecx, DWORD PTR _str$4[ebp]
  001b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  001be	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  001c1	e9 bf 00 00 00	 jmp	 $LN13@Format
$LN2@Format:

; 372  : 	}
; 373  : 
; 374  : 	struct tm tmTemp;
; 375  : 	tmTemp.tm_sec	= ud.st.wSecond;

  001c6	0f b7 55 dc	 movzx	 edx, WORD PTR _ud$[ebp+12]
  001ca	89 55 ac	 mov	 DWORD PTR _tmTemp$[ebp], edx

; 376  : 	tmTemp.tm_min	= ud.st.wMinute;

  001cd	0f b7 45 da	 movzx	 eax, WORD PTR _ud$[ebp+10]
  001d1	89 45 b0	 mov	 DWORD PTR _tmTemp$[ebp+4], eax

; 377  : 	tmTemp.tm_hour	= ud.st.wHour;

  001d4	0f b7 4d d8	 movzx	 ecx, WORD PTR _ud$[ebp+8]
  001d8	89 4d b4	 mov	 DWORD PTR _tmTemp$[ebp+8], ecx

; 378  : 	tmTemp.tm_mday	= ud.st.wDay;

  001db	0f b7 55 d6	 movzx	 edx, WORD PTR _ud$[ebp+6]
  001df	89 55 b8	 mov	 DWORD PTR _tmTemp$[ebp+12], edx

; 379  : 	tmTemp.tm_mon	= ud.st.wMonth - 1;

  001e2	0f b7 45 d2	 movzx	 eax, WORD PTR _ud$[ebp+2]
  001e6	83 e8 01	 sub	 eax, 1
  001e9	89 45 bc	 mov	 DWORD PTR _tmTemp$[ebp+16], eax

; 380  : 	tmTemp.tm_year	= ud.st.wYear - 1900;

  001ec	0f b7 4d d0	 movzx	 ecx, WORD PTR _ud$[ebp]
  001f0	81 e9 6c 07 00
	00		 sub	 ecx, 1900		; 0000076cH
  001f6	89 4d c0	 mov	 DWORD PTR _tmTemp$[ebp+20], ecx

; 381  : 	tmTemp.tm_wday	= ud.st.wDayOfWeek;

  001f9	0f b7 55 d4	 movzx	 edx, WORD PTR _ud$[ebp+4]
  001fd	89 55 c4	 mov	 DWORD PTR _tmTemp$[ebp+24], edx

; 382  : 	tmTemp.tm_yday	= ud.wDayOfYear - 1;

  00200	0f b7 45 e0	 movzx	 eax, WORD PTR _ud$[ebp+16]
  00204	83 e8 01	 sub	 eax, 1
  00207	89 45 c8	 mov	 DWORD PTR _tmTemp$[ebp+28], eax

; 383  : 	tmTemp.tm_isdst	= 0;

  0020a	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _tmTemp$[ebp+32], 0

; 384  : 
; 385  : 	CString strDate;

  00211	8d 4d ec	 lea	 ecx, DWORD PTR _strDate$[ebp]
  00214	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0021a	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 386  : 	LPTSTR lpszTemp = strDate.GetBufferSetLength(256);

  00221	68 00 01 00 00	 push	 256			; 00000100H
  00226	8d 4d ec	 lea	 ecx, DWORD PTR _strDate$[ebp]
  00229	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetBufferSetLength@?$CSimpleStringT@D$00@ATL@@QAEPADH@Z
  0022f	89 45 9c	 mov	 DWORD PTR _lpszTemp$[ebp], eax

; 387  : 	_tcsftime(lpszTemp, strDate.GetLength(), pFormat, &tmTemp);

  00232	8d 4d ac	 lea	 ecx, DWORD PTR _tmTemp$[ebp]
  00235	51		 push	 ecx
  00236	8b 55 0c	 mov	 edx, DWORD PTR _pFormat$[ebp]
  00239	52		 push	 edx
  0023a	8d 4d ec	 lea	 ecx, DWORD PTR _strDate$[ebp]
  0023d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  00243	50		 push	 eax
  00244	8b 45 9c	 mov	 eax, DWORD PTR _lpszTemp$[ebp]
  00247	50		 push	 eax
  00248	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strftime
  0024e	83 c4 10	 add	 esp, 16			; 00000010H

; 388  : 	strDate.ReleaseBuffer();

  00251	6a ff		 push	 -1
  00253	8d 4d ec	 lea	 ecx, DWORD PTR _strDate$[ebp]
  00256	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ReleaseBuffer@?$CSimpleStringT@D$00@ATL@@QAEXH@Z

; 389  : 
; 390  : 	return strDate;

  0025c	8d 4d ec	 lea	 ecx, DWORD PTR _strDate$[ebp]
  0025f	51		 push	 ecx
  00260	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00263	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00269	8b 55 a8	 mov	 edx, DWORD PTR $T3[ebp]
  0026c	83 ca 01	 or	 edx, 1
  0026f	89 55 a8	 mov	 DWORD PTR $T3[ebp], edx
  00272	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00279	8d 4d ec	 lea	 ecx, DWORD PTR _strDate$[ebp]
  0027c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00282	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN13@Format:

; 391  : }

  00285	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00288	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0028f	59		 pop	 ecx
  00290	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00293	33 cd		 xor	 ecx, ebp
  00295	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0029a	8b e5		 mov	 esp, ebp
  0029c	5d		 pop	 ebp
  0029d	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Format@COleDateTime@ATL@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@2@PBD@Z$1:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR _str$5[ebp]
  00003	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?Format@COleDateTime@ATL@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@2@PBD@Z$2:
  00009	8d 4d e4	 lea	 ecx, DWORD PTR _str$4[ebp]
  0000c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__unwindfunclet$?Format@COleDateTime@ATL@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@2@PBD@Z$3:
  00012	8d 4d ec	 lea	 ecx, DWORD PTR _strDate$[ebp]
  00015	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
__ehhandler$?Format@COleDateTime@ATL@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@2@PBD@Z:
  0001b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00022	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  00025	33 c8		 xor	 ecx, eax
  00027	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Format@COleDateTime@ATL@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@2@PBD@Z
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Format@COleDateTime@ATL@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@2@PBD@Z ENDP ; ATL::COleDateTime::Format
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\atltime.inl
;	COMDAT ??0CTime@ATL@@QAE@_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_time$ = 8						; size = 8
??0CTime@ATL@@QAE@_J@Z PROC				; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 171  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _time$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _time$[ebp+4]
  00012	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 172  : }

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
??0CTime@ATL@@QAE@_J@Z ENDP				; ATL::CTime::CTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\atltime.inl
;	COMDAT ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z
_TEXT	SEGMENT
___atl_condVal$1 = -56					; size = 4
_err$2 = -52						; size = 4
_this$ = -48						; size = 4
tv65 = -44						; size = 4
_ptmTemp$3 = -40					; size = 36
__$ArrayPad$ = -4					; size = 4
_ptm$ = 8						; size = 4
?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z PROC		; ATL::CTime::GetLocalTm, COMDAT
; _this$ = ecx

; 369  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx
$LN9@GetLocalTm:

; 370  : 	// Ensure ptm is valid
; 371  : 	ATLENSURE( ptm != NULL );

  00015	83 7d 08 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00019	74 09		 je	 SHORT $LN12@GetLocalTm
  0001b	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
  00022	eb 07		 jmp	 SHORT $LN13@GetLocalTm
$LN12@GetLocalTm:
  00024	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv65[ebp], 0
$LN13@GetLocalTm:
  0002b	8b 45 d4	 mov	 eax, DWORD PTR tv65[ebp]
  0002e	89 45 c8	 mov	 DWORD PTR ___atl_condVal$1[ebp], eax
$LN5@GetLocalTm:
  00031	33 c9		 xor	 ecx, ecx
  00033	75 fc		 jne	 SHORT $LN5@GetLocalTm
  00035	83 7d c8 00	 cmp	 DWORD PTR ___atl_condVal$1[ebp], 0
  00039	75 0a		 jne	 SHORT $LN8@GetLocalTm
  0003b	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00040	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN8@GetLocalTm:
  00045	33 d2		 xor	 edx, edx
  00047	75 cc		 jne	 SHORT $LN9@GetLocalTm

; 372  : 
; 373  : 	if (ptm != NULL)

  00049	83 7d 08 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  0004d	74 30		 je	 SHORT $LN2@GetLocalTm

; 374  : 	{
; 375  : 		struct tm ptmTemp;
; 376  : 		errno_t err = _localtime64_s(&ptmTemp, &m_time);

  0004f	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  00052	50		 push	 eax
  00053	8d 4d d8	 lea	 ecx, DWORD PTR _ptmTemp$3[ebp]
  00056	51		 push	 ecx
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___localtime64_s
  0005d	83 c4 08	 add	 esp, 8
  00060	89 45 cc	 mov	 DWORD PTR _err$2[ebp], eax

; 377  : 
; 378  : 		if (err != 0)

  00063	83 7d cc 00	 cmp	 DWORD PTR _err$2[ebp], 0
  00067	74 04		 je	 SHORT $LN1@GetLocalTm

; 379  : 		{
; 380  : 			return NULL;    // indicates that m_time was not initialized!

  00069	33 c0		 xor	 eax, eax
  0006b	eb 14		 jmp	 SHORT $LN11@GetLocalTm
$LN1@GetLocalTm:

; 381  : 		}
; 382  : 
; 383  : 		*ptm = ptmTemp;

  0006d	b9 09 00 00 00	 mov	 ecx, 9
  00072	8d 75 d8	 lea	 esi, DWORD PTR _ptmTemp$3[ebp]
  00075	8b 7d 08	 mov	 edi, DWORD PTR _ptm$[ebp]
  00078	f3 a5		 rep movsd

; 384  : 		return ptm;

  0007a	8b 45 08	 mov	 eax, DWORD PTR _ptm$[ebp]
  0007d	eb 02		 jmp	 SHORT $LN11@GetLocalTm
$LN2@GetLocalTm:

; 385  : 	}
; 386  : 
; 387  : 	return NULL;

  0007f	33 c0		 xor	 eax, eax
$LN11@GetLocalTm:

; 388  : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00086	33 cd		 xor	 ecx, ebp
  00088	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 04 00	 ret	 4
?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ENDP		; ATL::CTime::GetLocalTm
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\atltime.inl
;	COMDAT ?GetAsSystemTime@CTime@ATL@@QBE_NAAU_SYSTEMTIME@@@Z
_TEXT	SEGMENT
_this$ = -48						; size = 4
_ptm$ = -44						; size = 4
_ttm$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
_timeDest$ = 8						; size = 4
?GetAsSystemTime@CTime@ATL@@QBE_NAAU_SYSTEMTIME@@@Z PROC ; ATL::CTime::GetAsSystemTime, COMDAT
; _this$ = ecx

; 391  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx

; 392  : 	struct tm ttm;
; 393  : 	struct tm* ptm;
; 394  : 
; 395  : 	ptm = GetLocalTm(&ttm);

  00013	8d 45 d8	 lea	 eax, DWORD PTR _ttm$[ebp]
  00016	50		 push	 eax
  00017	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ; ATL::CTime::GetLocalTm
  0001f	89 45 d4	 mov	 DWORD PTR _ptm$[ebp], eax

; 396  : 	if(!ptm) 

  00022	83 7d d4 00	 cmp	 DWORD PTR _ptm$[ebp], 0
  00026	75 04		 jne	 SHORT $LN1@GetAsSyste

; 397  : 	{ 
; 398  : 		return false; 

  00028	32 c0		 xor	 al, al
  0002a	eb 72		 jmp	 SHORT $LN2@GetAsSyste
$LN1@GetAsSyste:

; 399  : 	}
; 400  : 
; 401  : 	timeDest.wYear = (WORD) (1900 + ptm->tm_year);

  0002c	8b 4d d4	 mov	 ecx, DWORD PTR _ptm$[ebp]
  0002f	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00032	81 c2 6c 07 00
	00		 add	 edx, 1900		; 0000076cH
  00038	8b 45 08	 mov	 eax, DWORD PTR _timeDest$[ebp]
  0003b	66 89 10	 mov	 WORD PTR [eax], dx

; 402  : 	timeDest.wMonth = (WORD) (1 + ptm->tm_mon);

  0003e	8b 4d d4	 mov	 ecx, DWORD PTR _ptm$[ebp]
  00041	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00044	83 c2 01	 add	 edx, 1
  00047	8b 45 08	 mov	 eax, DWORD PTR _timeDest$[ebp]
  0004a	66 89 50 02	 mov	 WORD PTR [eax+2], dx

; 403  : 	timeDest.wDayOfWeek = (WORD) ptm->tm_wday;

  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _timeDest$[ebp]
  00051	8b 55 d4	 mov	 edx, DWORD PTR _ptm$[ebp]
  00054	66 8b 42 18	 mov	 ax, WORD PTR [edx+24]
  00058	66 89 41 04	 mov	 WORD PTR [ecx+4], ax

; 404  : 	timeDest.wDay = (WORD) ptm->tm_mday;

  0005c	8b 4d 08	 mov	 ecx, DWORD PTR _timeDest$[ebp]
  0005f	8b 55 d4	 mov	 edx, DWORD PTR _ptm$[ebp]
  00062	66 8b 42 0c	 mov	 ax, WORD PTR [edx+12]
  00066	66 89 41 06	 mov	 WORD PTR [ecx+6], ax

; 405  : 	timeDest.wHour = (WORD) ptm->tm_hour;

  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _timeDest$[ebp]
  0006d	8b 55 d4	 mov	 edx, DWORD PTR _ptm$[ebp]
  00070	66 8b 42 08	 mov	 ax, WORD PTR [edx+8]
  00074	66 89 41 08	 mov	 WORD PTR [ecx+8], ax

; 406  : 	timeDest.wMinute = (WORD) ptm->tm_min;

  00078	8b 4d 08	 mov	 ecx, DWORD PTR _timeDest$[ebp]
  0007b	8b 55 d4	 mov	 edx, DWORD PTR _ptm$[ebp]
  0007e	66 8b 42 04	 mov	 ax, WORD PTR [edx+4]
  00082	66 89 41 0a	 mov	 WORD PTR [ecx+10], ax

; 407  : 	timeDest.wSecond = (WORD) ptm->tm_sec;

  00086	8b 4d 08	 mov	 ecx, DWORD PTR _timeDest$[ebp]
  00089	8b 55 d4	 mov	 edx, DWORD PTR _ptm$[ebp]
  0008c	66 8b 02	 mov	 ax, WORD PTR [edx]
  0008f	66 89 41 0c	 mov	 WORD PTR [ecx+12], ax

; 408  : 	timeDest.wMilliseconds = 0;

  00093	33 c9		 xor	 ecx, ecx
  00095	8b 55 08	 mov	 edx, DWORD PTR _timeDest$[ebp]
  00098	66 89 4a 0e	 mov	 WORD PTR [edx+14], cx

; 409  : 
; 410  : 	return true;

  0009c	b0 01		 mov	 al, 1
$LN2@GetAsSyste:

; 411  : }

  0009e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a1	33 cd		 xor	 ecx, ebp
  000a3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c2 04 00	 ret	 4
?GetAsSystemTime@CTime@ATL@@QBE_NAAU_SYSTEMTIME@@@Z ENDP ; ATL::CTime::GetAsSystemTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\atlcore.h
;	COMDAT ?AtlConvertSystemTimeToVariantTime@ATL@@YAHABU_SYSTEMTIME@@PAN@Z
_TEXT	SEGMENT
___atl_condVal$1 = -40					; size = 4
tv139 = -36						; size = 4
tv65 = -32						; size = 4
tv81 = -28						; size = 4
_ok$ = -24						; size = 4
_sysTime$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_systimeSrc$ = 8					; size = 4
_pVarDtTm$ = 12						; size = 4
?AtlConvertSystemTimeToVariantTime@ATL@@YAHABU_SYSTEMTIME@@PAN@Z PROC ; ATL::AtlConvertSystemTimeToVariantTime, COMDAT

; 605  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
$LN7@AtlConvert:

; 606  : 	ATLENSURE(pVarDtTm!=NULL);

  00010	83 7d 0c 00	 cmp	 DWORD PTR _pVarDtTm$[ebp], 0
  00014	74 09		 je	 SHORT $LN10@AtlConvert
  00016	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
  0001d	eb 07		 jmp	 SHORT $LN11@AtlConvert
$LN10@AtlConvert:
  0001f	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv65[ebp], 0
$LN11@AtlConvert:
  00026	8b 45 e0	 mov	 eax, DWORD PTR tv65[ebp]
  00029	89 45 d8	 mov	 DWORD PTR ___atl_condVal$1[ebp], eax
$LN4@AtlConvert:
  0002c	33 c9		 xor	 ecx, ecx
  0002e	75 fc		 jne	 SHORT $LN4@AtlConvert
  00030	83 7d d8 00	 cmp	 DWORD PTR ___atl_condVal$1[ebp], 0
  00034	75 0a		 jne	 SHORT $LN1@AtlConvert
  00036	68 05 40 00 80	 push	 -2147467259		; 80004005H
  0003b	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN1@AtlConvert:
  00040	33 d2		 xor	 edx, edx
  00042	75 cc		 jne	 SHORT $LN7@AtlConvert

; 607  : 	//Convert using ::SystemTimeToVariantTime and store the result in pVarDtTm then
; 608  : 	//convert variant time back to system time and compare to original system time.
; 609  : 	BOOL ok = ::SystemTimeToVariantTime(const_cast<SYSTEMTIME*>(&systimeSrc), pVarDtTm);

  00044	8b 45 0c	 mov	 eax, DWORD PTR _pVarDtTm$[ebp]
  00047	50		 push	 eax
  00048	8b 4d 08	 mov	 ecx, DWORD PTR _systimeSrc$[ebp]
  0004b	51		 push	 ecx
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SystemTimeToVariantTime@8
  00052	89 45 e8	 mov	 DWORD PTR _ok$[ebp], eax

; 610  : 	SYSTEMTIME sysTime;
; 611  : 	::ZeroMemory(&sysTime, sizeof(SYSTEMTIME));

  00055	33 d2		 xor	 edx, edx
  00057	89 55 ec	 mov	 DWORD PTR _sysTime$[ebp], edx
  0005a	89 55 f0	 mov	 DWORD PTR _sysTime$[ebp+4], edx
  0005d	89 55 f4	 mov	 DWORD PTR _sysTime$[ebp+8], edx
  00060	89 55 f8	 mov	 DWORD PTR _sysTime$[ebp+12], edx

; 612  : 
; 613  : 	ok = ok && ::VariantTimeToSystemTime(*pVarDtTm, &sysTime);

  00063	83 7d e8 00	 cmp	 DWORD PTR _ok$[ebp], 0
  00067	74 26		 je	 SHORT $LN12@AtlConvert
  00069	8d 45 ec	 lea	 eax, DWORD PTR _sysTime$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d 0c	 mov	 ecx, DWORD PTR _pVarDtTm$[ebp]
  00070	83 ec 08	 sub	 esp, 8
  00073	f2 0f 10 01	 movsd	 xmm0, QWORD PTR [ecx]
  00077	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VariantTimeToSystemTime@12
  00082	85 c0		 test	 eax, eax
  00084	74 09		 je	 SHORT $LN12@AtlConvert
  00086	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR tv81[ebp], 1
  0008d	eb 07		 jmp	 SHORT $LN13@AtlConvert
$LN12@AtlConvert:
  0008f	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$LN13@AtlConvert:
  00096	8b 55 e4	 mov	 edx, DWORD PTR tv81[ebp]
  00099	89 55 e8	 mov	 DWORD PTR _ok$[ebp], edx

; 614  : 	ok = ok && (systimeSrc.wYear == sysTime.wYear &&
; 615  : 			systimeSrc.wMonth == sysTime.wMonth &&
; 616  : 			systimeSrc.wDay == sysTime.wDay &&
; 617  : 			systimeSrc.wHour == sysTime.wHour &&
; 618  : 			systimeSrc.wMinute == sysTime.wMinute &&
; 619  : 			systimeSrc.wSecond == sysTime.wSecond);

  0009c	83 7d e8 00	 cmp	 DWORD PTR _ok$[ebp], 0
  000a0	74 62		 je	 SHORT $LN14@AtlConvert
  000a2	8b 45 08	 mov	 eax, DWORD PTR _systimeSrc$[ebp]
  000a5	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  000a8	0f b7 55 ec	 movzx	 edx, WORD PTR _sysTime$[ebp]
  000ac	3b ca		 cmp	 ecx, edx
  000ae	75 54		 jne	 SHORT $LN14@AtlConvert
  000b0	8b 45 08	 mov	 eax, DWORD PTR _systimeSrc$[ebp]
  000b3	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  000b7	0f b7 55 ee	 movzx	 edx, WORD PTR _sysTime$[ebp+2]
  000bb	3b ca		 cmp	 ecx, edx
  000bd	75 45		 jne	 SHORT $LN14@AtlConvert
  000bf	8b 45 08	 mov	 eax, DWORD PTR _systimeSrc$[ebp]
  000c2	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  000c6	0f b7 55 f2	 movzx	 edx, WORD PTR _sysTime$[ebp+6]
  000ca	3b ca		 cmp	 ecx, edx
  000cc	75 36		 jne	 SHORT $LN14@AtlConvert
  000ce	8b 45 08	 mov	 eax, DWORD PTR _systimeSrc$[ebp]
  000d1	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  000d5	0f b7 55 f4	 movzx	 edx, WORD PTR _sysTime$[ebp+8]
  000d9	3b ca		 cmp	 ecx, edx
  000db	75 27		 jne	 SHORT $LN14@AtlConvert
  000dd	8b 45 08	 mov	 eax, DWORD PTR _systimeSrc$[ebp]
  000e0	0f b7 48 0a	 movzx	 ecx, WORD PTR [eax+10]
  000e4	0f b7 55 f6	 movzx	 edx, WORD PTR _sysTime$[ebp+10]
  000e8	3b ca		 cmp	 ecx, edx
  000ea	75 18		 jne	 SHORT $LN14@AtlConvert
  000ec	8b 45 08	 mov	 eax, DWORD PTR _systimeSrc$[ebp]
  000ef	0f b7 48 0c	 movzx	 ecx, WORD PTR [eax+12]
  000f3	0f b7 55 f8	 movzx	 edx, WORD PTR _sysTime$[ebp+12]
  000f7	3b ca		 cmp	 ecx, edx
  000f9	75 09		 jne	 SHORT $LN14@AtlConvert
  000fb	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR tv139[ebp], 1
  00102	eb 07		 jmp	 SHORT $LN15@AtlConvert
$LN14@AtlConvert:
  00104	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv139[ebp], 0
$LN15@AtlConvert:
  0010b	8b 45 dc	 mov	 eax, DWORD PTR tv139[ebp]
  0010e	89 45 e8	 mov	 DWORD PTR _ok$[ebp], eax

; 620  : 
; 621  : 	return ok;

  00111	8b 45 e8	 mov	 eax, DWORD PTR _ok$[ebp]
$LN8@AtlConvert:

; 622  : }

  00114	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00117	33 cd		 xor	 ecx, ebp
  00119	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c3		 ret	 0
?AtlConvertSystemTimeToVariantTime@ATL@@YAHABU_SYSTEMTIME@@PAN@Z ENDP ; ATL::AtlConvertSystemTimeToVariantTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\atlcomtime.inl
;	COMDAT ?ConvertSystemTimeToVariantTime@COleDateTime@ATL@@IAEHABU_SYSTEMTIME@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_systimeSrc$ = 8					; size = 4
?ConvertSystemTimeToVariantTime@COleDateTime@ATL@@IAEHABU_SYSTEMTIME@@@Z PROC ; ATL::COleDateTime::ConvertSystemTimeToVariantTime, COMDAT
; _this$ = ecx

; 527  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 528  : 	return AtlConvertSystemTimeToVariantTime(systimeSrc,&m_dt);	

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _systimeSrc$[ebp]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 ?AtlConvertSystemTimeToVariantTime@ATL@@YAHABU_SYSTEMTIME@@PAN@Z ; ATL::AtlConvertSystemTimeToVariantTime
  00014	83 c4 08	 add	 esp, 8

; 529  : }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?ConvertSystemTimeToVariantTime@COleDateTime@ATL@@IAEHABU_SYSTEMTIME@@@Z ENDP ; ATL::COleDateTime::ConvertSystemTimeToVariantTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\atlcomtime.inl
;	COMDAT ??4COleDateTime@ATL@@QAEAAV01@AB_J@Z
_TEXT	SEGMENT
tv76 = -36						; size = 4
_this$ = -32						; size = 4
_st$ = -28						; size = 16
_tmp$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
_timeSrc$ = 8						; size = 4
??4COleDateTime@ATL@@QAEAAV01@AB_J@Z PROC		; ATL::COleDateTime::operator=, COMDAT
; _this$ = ecx

; 488  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 489  : #ifndef _ATL_USE_WINAPI_FAMILY_DESKTOP_APP
; 490  : 	SYSTEMTIME st;
; 491  : 
; 492  : 	m_status = GetAsSystemTimeHelper(timeSrc, st) &&
; 493  : 			   ConvertSystemTimeToVariantTime(st) ? valid : invalid;
; 494  : 
; 495  : #else
; 496  : 	SYSTEMTIME st;
; 497  : 	CTime tmp(timeSrc);

  00013	8b 45 08	 mov	 eax, DWORD PTR _timeSrc$[ebp]
  00016	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00019	51		 push	 ecx
  0001a	8b 10		 mov	 edx, DWORD PTR [eax]
  0001c	52		 push	 edx
  0001d	8d 4d f4	 lea	 ecx, DWORD PTR _tmp$[ebp]
  00020	e8 00 00 00 00	 call	 ??0CTime@ATL@@QAE@_J@Z	; ATL::CTime::CTime

; 498  : 
; 499  : 	m_status = tmp.GetAsSystemTime(st) &&
; 500  : 			   ConvertSystemTimeToVariantTime(st) ? valid : invalid;

  00025	8d 45 e4	 lea	 eax, DWORD PTR _st$[ebp]
  00028	50		 push	 eax
  00029	8d 4d f4	 lea	 ecx, DWORD PTR _tmp$[ebp]
  0002c	e8 00 00 00 00	 call	 ?GetAsSystemTime@CTime@ATL@@QBE_NAAU_SYSTEMTIME@@@Z ; ATL::CTime::GetAsSystemTime
  00031	0f b6 c8	 movzx	 ecx, al
  00034	85 c9		 test	 ecx, ecx
  00036	74 19		 je	 SHORT $LN3@operator
  00038	8d 55 e4	 lea	 edx, DWORD PTR _st$[ebp]
  0003b	52		 push	 edx
  0003c	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?ConvertSystemTimeToVariantTime@COleDateTime@ATL@@IAEHABU_SYSTEMTIME@@@Z ; ATL::COleDateTime::ConvertSystemTimeToVariantTime
  00044	85 c0		 test	 eax, eax
  00046	74 09		 je	 SHORT $LN3@operator
  00048	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv76[ebp], 0
  0004f	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00051	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
$LN4@operator:
  00058	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 4d dc	 mov	 ecx, DWORD PTR tv76[ebp]
  0005e	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 501  : #endif // _ATL_USE_WINAPI_FAMILY_DESKTOP_APP
; 502  : 	return *this;

  00061	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]

; 503  : }

  00064	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00067	33 cd		 xor	 ecx, ebp
  00069	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
??4COleDateTime@ATL@@QAEAAV01@AB_J@Z ENDP		; ATL::COleDateTime::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\atlcomtime.inl
;	COMDAT ??0COleDateTime@ATL@@QAE@_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_timeSrc$ = 8						; size = 8
??0COleDateTime@ATL@@QAE@_J@Z PROC			; ATL::COleDateTime::COleDateTime, COMDAT
; _this$ = ecx

; 324  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@0000000000000000
  00012	f2 0f 11 00	 movsd	 QWORD PTR [eax], xmm0
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 325  : 	*this = timeSrc;

  00020	8d 55 08	 lea	 edx, DWORD PTR _timeSrc$[ebp]
  00023	52		 push	 edx
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ??4COleDateTime@ATL@@QAEAAV01@AB_J@Z ; ATL::COleDateTime::operator=

; 326  : }

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
??0COleDateTime@ATL@@QAE@_J@Z ENDP			; ATL::COleDateTime::COleDateTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\atlcomtime.inl
;	COMDAT ?GetTickCount@COleDateTime@ATL@@SG?AV12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetTickCount@COleDateTime@ATL@@SG?AV12@XZ PROC		; ATL::COleDateTime::GetTickCount, COMDAT

; 296  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 297  : 	return COleDateTime(::_time64(NULL));

  00003	6a 00		 push	 0
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___time64
  0000b	83 c4 04	 add	 esp, 4
  0000e	52		 push	 edx
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e8 00 00 00 00	 call	 ??0COleDateTime@ATL@@QAE@_J@Z ; ATL::COleDateTime::COleDateTime
  00018	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 298  : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?GetTickCount@COleDateTime@ATL@@SG?AV12@XZ ENDP		; ATL::COleDateTime::GetTickCount
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\afxmt.inl
;	COMDAT ??BCSyncObject@@QBEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BCSyncObject@@QBEPAXXZ PROC				; CSyncObject::operator void *, COMDAT
; _this$ = ecx

; 32   : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 33   : 	return m_hObject;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 34   : }

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
??BCSyncObject@@QBEPAXXZ ENDP				; CSyncObject::operator void *
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\afxwin2.inl
;	COMDAT ?GetDesktopWindow@CWnd@@SGPAV1@XZ
_TEXT	SEGMENT
?GetDesktopWindow@CWnd@@SGPAV1@XZ PROC			; CWnd::GetDesktopWindow, COMDAT

; 218  : 	{ return CWnd::FromHandle(::GetDesktopWindow()); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDesktopWindow@0
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?FromHandle@CWnd@@SGPAV1@PAUHWND__@@@Z
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?GetDesktopWindow@CWnd@@SGPAV1@XZ ENDP			; CWnd::GetDesktopWindow
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\afxwin2.inl
;	COMDAT ?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ PROC		; CWnd::GetSafeHwnd, COMDAT
; _this$ = ecx

; 25   : 	{ return this == NULL ? NULL : m_hWnd; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0000d	75 09		 jne	 SHORT $LN3@GetSafeHwn
  0000f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  00016	eb 09		 jmp	 SHORT $LN4@GetSafeHwn
$LN3@GetSafeHwn:
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0001e	89 4d f8	 mov	 DWORD PTR tv66[ebp], ecx
$LN4@GetSafeHwn:
  00021	8b 45 f8	 mov	 eax, DWORD PTR tv66[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ ENDP		; CWnd::GetSafeHwnd
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\atltypes.inl
;	COMDAT ??0CRect@@QAE@PBUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpSrcRect$ = 8						; size = 4
??0CRect@@QAE@PBUtagRECT@@@Z PROC			; CRect::CRect, COMDAT
; _this$ = ecx

; 278  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 279  : 	::CopyRect(this, lpSrcRect);

  00007	8b 45 08	 mov	 eax, DWORD PTR _lpSrcRect$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	51		 push	 ecx
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CopyRect@8

; 280  : }

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
??0CRect@@QAE@PBUtagRECT@@@Z ENDP			; CRect::CRect
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?__autoclassinit@CDC@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_$initVBases$ = 8					; size = 4
?__autoclassinit@CDC@@QAEXI@Z PROC			; CDC::__autoclassinit, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?__autoclassinit@CDC@@QAEXI@Z ENDP			; CDC::__autoclassinit
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\afxwin1.inl
;	COMDAT ?DrawIcon@CDC@@QAEHHHPAUHICON__@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_hIcon$ = 16						; size = 4
?DrawIcon@CDC@@QAEHHHPAUHICON__@@@Z PROC		; CDC::DrawIcon, COMDAT
; _this$ = ecx

; 484  : 	{ ASSERT(m_hDC != NULL); return ::DrawIcon(m_hDC, x, y, hIcon); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 10	 mov	 eax, DWORD PTR _hIcon$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _y$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DrawIcon@16
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?DrawIcon@CDC@@QAEHHHPAUHICON__@@@Z ENDP		; CDC::DrawIcon
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\atltypes.inl
;	COMDAT ?Height@CRect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Height@CRect@@QBEHXZ PROC				; CRect::Height, COMDAT
; _this$ = ecx

; 306  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 307  : 	return bottom - top;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00010	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]

; 308  : }

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?Height@CRect@@QBEHXZ ENDP				; CRect::Height
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\atltypes.inl
;	COMDAT ?Width@CRect@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Width@CRect@@QBEHXZ PROC				; CRect::Width, COMDAT
; _this$ = ecx

; 301  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 302  : 	return right - left;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00010	2b 01		 sub	 eax, DWORD PTR [ecx]

; 303  : }

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?Width@CRect@@QBEHXZ ENDP				; CRect::Width
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\afxwin2.inl
;	COMDAT ?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpRect$ = 8						; size = 4
?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z PROC		; CWnd::GetClientRect, COMDAT
; _this$ = ecx

; 118  : 	{ ASSERT(::IsWindow(m_hWnd)); ::GetClientRect(m_hWnd, lpRect); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _lpRect$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z ENDP		; CWnd::GetClientRect
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\afxwin1.inl
;	COMDAT ?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ PROC			; CDC::GetSafeHdc, COMDAT
; _this$ = ecx

; 318  : 	{ return this == NULL ? NULL : m_hDC; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	83 7d fc 00	 cmp	 DWORD PTR _this$[ebp], 0
  0000d	75 09		 jne	 SHORT $LN3@GetSafeHdc
  0000f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  00016	eb 09		 jmp	 SHORT $LN4@GetSafeHdc
$LN3@GetSafeHdc:
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001e	89 4d f8	 mov	 DWORD PTR tv66[ebp], ecx
$LN4@GetSafeHdc:
  00021	8b 45 f8	 mov	 eax, DWORD PTR tv66[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?GetSafeHdc@CDC@@QBEPAUHDC__@@XZ ENDP			; CDC::GetSafeHdc
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\afxwin2.inl
;	COMDAT ?SendMessageA@CWnd@@QBEJIIJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_message$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
?SendMessageA@CWnd@@QBEJIIJ@Z PROC			; CWnd::SendMessageA, COMDAT
; _this$ = ecx

; 42   : 	{ ASSERT(::IsWindow(m_hWnd)); return ::SendMessage(m_hWnd, message, wParam, lParam); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 10	 mov	 eax, DWORD PTR _lParam$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _message$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?SendMessageA@CWnd@@QBEJIIJ@Z ENDP			; CWnd::SendMessageA
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\afxwin2.inl
;	COMDAT ?IsIconic@CWnd@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsIconic@CWnd@@QBEHXZ PROC				; CWnd::IsIconic, COMDAT
; _this$ = ecx

; 92   : 	{ ASSERT(::IsWindow(m_hWnd)); return ::IsIconic(m_hWnd); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsIconic@4
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?IsIconic@CWnd@@QBEHXZ ENDP				; CWnd::IsIconic
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\afxwin2.inl
;	COMDAT ?OnSysCommand@CWnd@@IAEXIJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?OnSysCommand@CWnd@@IAEXIJ@Z PROC			; CWnd::OnSysCommand, COMDAT
; _this$ = ecx

; 470  : 	{ Default(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Default@CWnd@@IAEJXZ
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?OnSysCommand@CWnd@@IAEXIJ@Z ENDP			; CWnd::OnSysCommand
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\afxwin2.inl
;	COMDAT ?SetTimer@CWnd@@QAEIIIP6GXPAUHWND__@@IIK@Z@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIDEvent$ = 8						; size = 4
_nElapse$ = 12						; size = 4
_lpfnTimer$ = 16					; size = 4
?SetTimer@CWnd@@QAEIIIP6GXPAUHWND__@@IIK@Z@Z PROC	; CWnd::SetTimer, COMDAT
; _this$ = ecx

; 193  : 	{ ASSERT(::IsWindow(m_hWnd)); return ::SetTimer(m_hWnd, nIDEvent, nElapse,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 194  : 		lpfnTimer); }

  00007	8b 45 10	 mov	 eax, DWORD PTR _lpfnTimer$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _nElapse$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _nIDEvent$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTimer@16
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?SetTimer@CWnd@@QAEIIIP6GXPAUHWND__@@IIK@Z@Z ENDP	; CWnd::SetTimer
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\afxwin2.inl
;	COMDAT ?SetIcon@CWnd@@QAEPAUHICON__@@PAU2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hIcon$ = 8						; size = 4
_bBigIcon$ = 12						; size = 4
?SetIcon@CWnd@@QAEPAUHICON__@@PAU2@H@Z PROC		; CWnd::SetIcon, COMDAT
; _this$ = ecx

; 346  : 	{ ASSERT(::IsWindow(m_hWnd)); return (HICON)::SendMessage(m_hWnd, WM_SETICON, bBigIcon, (LPARAM)hIcon); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _hIcon$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _bBigIcon$[ebp]
  0000e	51		 push	 ecx
  0000f	68 80 00 00 00	 push	 128			; 00000080H
  00014	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00017	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0001a	50		 push	 eax
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?SetIcon@CWnd@@QAEPAUHICON__@@PAU2@H@Z ENDP		; CWnd::SetIcon
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\afxwin1.inl
;	COMDAT ?AppendMenuA@CMenu@@QAEHIIPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nFlags$ = 8						; size = 4
_nIDNewItem$ = 12					; size = 4
_lpszNewItem$ = 16					; size = 4
?AppendMenuA@CMenu@@QAEHIIPBD@Z PROC			; CMenu::AppendMenuA, COMDAT
; _this$ = ecx

; 926  : 	{ ASSERT(::IsMenu(m_hMenu)); return ::AppendMenu(m_hMenu, nFlags, nIDNewItem, lpszNewItem); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 10	 mov	 eax, DWORD PTR _lpszNewItem$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _nIDNewItem$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 08	 mov	 edx, DWORD PTR _nFlags$[ebp]
  00012	52		 push	 edx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?AppendMenuA@CMenu@@QAEHIIPBD@Z ENDP			; CMenu::AppendMenuA
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\afxwin2.inl
;	COMDAT ?GetSystemMenu@CWnd@@QBEPAVCMenu@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bRevert$ = 8						; size = 4
?GetSystemMenu@CWnd@@QBEPAVCMenu@@H@Z PROC		; CWnd::GetSystemMenu, COMDAT
; _this$ = ecx

; 70   : 	{ ASSERT(::IsWindow(m_hWnd)); return CMenu::FromHandle(::GetSystemMenu(m_hWnd, bRevert)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _bRevert$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemMenu@8
  00018	50		 push	 eax
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?FromHandle@CMenu@@SGPAV1@PAUHMENU__@@@Z
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?GetSystemMenu@CWnd@@QBEPAVCMenu@@H@Z ENDP		; CWnd::GetSystemMenu
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\afxwin1.inl
;	COMDAT ?AfxGetApp@@YGPAVCWinApp@@XZ
_TEXT	SEGMENT
?AfxGetApp@@YGPAVCWinApp@@XZ PROC			; AfxGetApp, COMDAT

; 19   : 	{ return afxCurrentWinApp; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AfxGetModuleState@@YGPAVAFX_MODULE_STATE@@XZ
  00009	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
?AfxGetApp@@YGPAVCWinApp@@XZ ENDP			; AfxGetApp
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\afxwin2.inl
;	COMDAT ?LoadIconA@CWinApp@@QBEPAUHICON__@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIDResource$ = 8					; size = 4
?LoadIconA@CWinApp@@QBEPAUHICON__@@I@Z PROC		; CWinApp::LoadIconA, COMDAT
; _this$ = ecx

; 1142 : 	{ return ::LoadIconW(AfxFindResourceHandle(ATL_MAKEINTRESOURCE(nIDResource),

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1143 : 		ATL_RT_GROUP_ICON), ATL_MAKEINTRESOURCEW(nIDResource)); }

  00007	0f b7 45 08	 movzx	 eax, WORD PTR _nIDResource$[ebp]
  0000b	50		 push	 eax
  0000c	6a 0e		 push	 14			; 0000000eH
  0000e	0f b7 4d 08	 movzx	 ecx, WORD PTR _nIDResource$[ebp]
  00012	51		 push	 ecx
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?AfxFindResourceHandle@@YGPAUHINSTANCE__@@PBD0@Z
  00019	50		 push	 eax
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadIconW@8
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?LoadIconA@CWinApp@@QBEPAUHICON__@@I@Z ENDP		; CWinApp::LoadIconA
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\atltypes.inl
;	COMDAT ??0CRect@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CRect@@QAE@XZ PROC					; CRect::CRect, COMDAT
; _this$ = ecx

; 253  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 254  : 	left = 0;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 255  : 	top = 0;

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 256  : 	right = 0;

  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 257  : 	bottom = 0;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 258  : }

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??0CRect@@QAE@XZ ENDP					; CRect::CRect
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GCStatic@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCStatic@@UAEPAXI@Z PROC				; CStatic::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1CStatic@@UAE@XZ
  00010	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00013	83 e0 01	 and	 eax, 1
  00016	74 09		 je	 SHORT $LN1@scalar
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	51		 push	 ecx
  0001c	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
$LN1@scalar:
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
??_GCStatic@@UAEPAXI@Z ENDP				; CStatic::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\afxwin2.inl
;	COMDAT ??0CStatic@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CStatic@@QAE@XZ PROC					; CStatic::CStatic, COMDAT
; _this$ = ecx

; 691  : 	{ }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0CWnd@@QAE@XZ
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CStatic@@6B@
  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??0CStatic@@QAE@XZ ENDP					; CStatic::CStatic
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\atlmfc\include\afxwin2.inl
;	COMDAT ?OnClose@CWnd@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnClose@CWnd@@IAEXXZ PROC				; CWnd::OnClose, COMDAT
; _this$ = ecx

; 374  : 	{ Default(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Default@CWnd@@IAEJXZ
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?OnClose@CWnd@@IAEXXZ ENDP				; CWnd::OnClose
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\program files\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1717 : 		{	// return pointer to null-terminated nonmutable array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1718 : 		return (this->_Myptr());

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 1719 : 		}

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
END
